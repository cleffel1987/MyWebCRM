declare namespace ej { 
export namespace barcodeGenerator { 

//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/barcode-base.d.ts
/**
 * defines the common methods for the barcode
 */
export  abstract class BarcodeBase {
    abstract validateInput(char: string, characters: string): boolean | string;
    abstract drawImage(canvas: HTMLCanvasElement, options: BaseAttributes[], labelPosition: number, barcodeSize: Rect, endValue: number, textRender: string): void;
    abstract getDrawableSize(margin: MarginModel, widthValue: number, height: number): void;
    height: string | number;
    width: string | number;
    margin: MarginModel;
    displayText: DisplayTextModel;
    value: string;
    foreColor: string;
    type: BarcodeType;
    isSvgMode: boolean;
    alignment: Alignment;
    enableCheckSum: boolean;
    encodingValue: DataMatrixEncoding;
    size: DataMatrixSize;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/barcode-model.d.ts
/**
 * Interface for a class BarcodeGenerator
 */
export interface BarcodeGeneratorModel extends base.ComponentModel{
    /**
     * Defines the width of the barcode model.
     * ```html
     * <div id='barcode'/>
     * ```
     * ```typescript
     * let barcode: Barcode = new Barcode({
     * width:'1000px', height:'500px' });
     * barcode.appendTo('#barcode');
     * ```
     * @default '100%'
     */
    width?: string | number;
    /**
     * Defines the height of the barcode model.
     * ```html
     * <div id='barcode'/>
     * ```
     * ```typescript
     * let barcode: Barcode = new Barcode({
     * height:'1000px', height:'500px' });
     * barcode.appendTo('#barcode');
     * ```
     * @default '100'
     */
    height?: string | number;
    /**
     * Defines the barcode rendering mode.
     * * SVG - Renders the bar-code objects as SVG elements
     * * Canvas - Renders the bar-code in a canvas
     * @default 'SVG'
     */
    mode?: RenderingMode;
    /**
     * Defines the type of barcode to be rendered.
     * @default 'Code128'
     */
    type?: BarcodeType;
    /**
     * Defines the value of the barcode to be rendered.
     * @default undefined
     */
    value?: string;
    /**
     * Defines the checksum for the barcode.
     * @default 'true'
     */
    enableCheckSum?: boolean;
    /**
     * Defines the text properties for the barcode.
     * @default ''
     */
    displayText?: DisplayTextModel;
    /**
     * Defines the margin properties for the barcode.
     * @default ''
     */
    margin?: MarginModel;
    /**
     * Defines the background color of the barcode.
     * @default 'white'
     */
    backgroundColor?: string;
    /**
     * Defines the forecolor of the barcode.
     * @default 'black'
     */
    foreColor?: string;
    /**
     * Triggers if you enter any invalid character.
     * @event
     */
    invalid?: base.EmitType<Object>;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/barcode.d.ts
/**
 * Represents the Barcode control
 * ```html
 * <div id='barcode'/>
 * ```
 * ```typescript
 * let barcode$: Barcode = new Barcode({
 * width:'1000px', height:'500px' });
 * barcode.appendTo('#barcode');
 * ```
 */
export  class BarcodeGenerator extends base.Component<HTMLElement> implements base.INotifyPropertyChanged {
    /**
     * Defines the width of the barcode model.
     * ```html
     * <div id='barcode'/>
     * ```
     * ```typescript
     * let barcode$: Barcode = new Barcode({
     * width:'1000px', height:'500px' });
     * barcode.appendTo('#barcode');
     * ```
     * @default '100%'
     */
    width: string | number;
    /**
     * Defines the height of the barcode model.
     * ```html
     * <div id='barcode'/>
     * ```
     * ```typescript
     * let barcode$: Barcode = new Barcode({
     * height:'1000px', height:'500px' });
     * barcode.appendTo('#barcode');
     * ```
     * @default '100'
     */
    height: string | number;
    /**
     * Defines the barcode rendering mode.
     * * SVG - Renders the bar-code objects as SVG elements
     * * Canvas - Renders the bar-code in a canvas
     * @default 'SVG'
     */
    mode: RenderingMode;
    /**
     * Defines the type of barcode to be rendered.
     * @default 'Code128'
     */
    type: BarcodeType;
    /**
     * Defines the value of the barcode to be rendered.
     * @default undefined
     */
    value: string;
    /**
     * Defines the checksum for the barcode.
     * @default 'true'
     */
    enableCheckSum: boolean;
    /**
     * Defines the text properties for the barcode.
     * @default ''
     */
    displayText: DisplayTextModel;
    /**
     * Defines the margin properties for the barcode.
     * @default ''
     */
    margin: MarginModel;
    /**
     * Defines the background color of the barcode.
     * @default 'white'
     */
    backgroundColor: string;
    /**
     * Defines the forecolor of the barcode.
     * @default 'black'
     */
    foreColor: string;
    /**
     * Triggers if you enter any invalid character.
     * @event
     */
    invalid: base.EmitType<Object>;
    /** @private */
    localeObj: base.L10n;
    /** @private */
    private defaultLocale;
    private barcodeCanvas;
    private barcodeRenderer;
    /**
     * Constructor for creating the widget
     */
    constructor(options?: BarcodeGeneratorModel, element?: HTMLElement | string);
    private triggerEvent;
    onPropertyChanged(newProp: BarcodeGeneratorModel, oldProp: BarcodeGeneratorModel): void;
    private initialize;
    private renderElements;
    private refreshCanvasBarcode;
    private clearCanvas;
    /**
     * Get the properties to be maintained in the persisted state.
     * @return {string}
     */
    getPersistData(): string;
    /**
     * @private
     * @param real
     */
    private getElementSize;
    protected preRender(): void;
    private initializePrivateVariables;
    /**
     * Method to set culture for chart
     */
    private setCulture;
    /**
     * Renders the barcode control with nodes and connectors
     */
    render(): void;
    /**
     * Returns the module name of the barcode
     */
    getModuleName(): string;
    /**
     * To provide the array of modules needed for control rendering
     * @return {base.ModuleDeclaration[]}
     * @private
     */
    requiredModules(): base.ModuleDeclaration[];
    /**
     * Destroys the barcode control
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/enum/enum.d.ts
/**
 * Enum
 */
/**
 * Defines the rendering mode of the barcode. They are
 * * SVG
 * * Canvas
 */
export  type RenderingMode = 
/** SVG - Renders the barcode objects as SVG elements */
'SVG' | 
/** Canvas - Renders the barcode in a canvas */
'Canvas';
/**
 * Defines the event of the barcode
 * * BarcodeEvent - Throws when an invalid input was given.
 */
export  enum BarcodeEvent {
    'invalid' = 0
}
/**
 * Defines the text alignment for the text to be rendered in the barcode. The text alignment types are
 * * Left
 * * Right
 * * Center
 */
export  type Alignment = 
/** Left - Align the text to the left side of the barcode element. */
'Left' | 
/** Left - Align the text to the right side of the barcode element. */
'Right' | 
/** Left - Align the text to the center side of the barcode element. */
'Center';
/**
 * Defines the text position for the text to be rendered in the barcode. The text positions are
 * * Bottom
 * * Top
 */
export  type TextPosition = 
/** Bottom - Text will be rendered in the bottom of the barcode element. */
'Bottom' | 
/** Top - Text will be rendered in the top of the barcode element. */
'Top';
/**
 * Defines the quite zone for the Qr Code.
 */
/** @private */
export  enum QuietZone {
    All = 2
}
/**
 * Defines the encoding type for the datamatrix code. They are
 * * Auto
 * * ASCII
 * * ASCIINumeric
 * * Base256
 */
export  type DataMatrixEncoding = 
/** Auto - Encoding type will be automatically assigned for the given input. */
'Auto' | 
/** ASCII - Accept only the ASCII values. */
'ASCII' | 
/** ASCIINumeric - Accept only the ASCII numeric values. */
'ASCIINumeric' | 
/** Base256 -Accept the base256 values */
'Base256';
/**
 * Defines the size for the datamatrix code. The defined size are
 * * Auto
 * * Size10x10
 * * Size12x12
 * * Size14x14
 * * Size16x16
 * * Size18x18
 * * Size20x20
 * * Size22x22
 * * Size24x24
 * * Size26x26
 * * Size32x32
 * * Size36x36
 * * Size40x40
 * * Size44x44
 * * Size48x48
 * * Size52x52
 * * Size64x64
 * * Size72x72
 * * Size80x80
 * * Size88x88
 * * Size96x96
 * * Size104x104
 * * Size120x120
 * * Size132x132
 * * Size144x144
 * * Size8x18
 * * Size8x32
 * * Size12x26
 * * Size12x36
 * * Size16x36
 * * Size16x48
 * @aspNumberEnum
 * @blazorNumberEnum
 * @IgnoreSingular
 */
export  enum DataMatrixSize {
    /**
     * modules will be generated automatically.
     */
    Auto = 0,
    /**
     * will generate 10*10 modules.
     */
    Size10x10 = 1,
    /**
     * will generate 12*12 modules.
     */
    Size12x12 = 2,
    /**
     * will generate 14*14 modules.
     */
    Size14x14 = 3,
    /**
     * will generate 16*16 modules.
     */
    Size16x16 = 4,
    /**
     * will generate 18*18 modules.
     */
    Size18x18 = 5,
    /**
     * will generate 20*20 modules.
     */
    Size20x20 = 6,
    /**
     * will generate 22*22 modules.
     */
    Size22x22 = 7,
    /**
     * will generate 24*24 modules.
     */
    Size24x24 = 8,
    /**
     * will generate 26*26 modules.
     */
    Size26x26 = 9,
    /**
     * will generate 32*32 modules.
     */
    Size32x32 = 10,
    /**
     * will generate 32*32 modules.
     */
    Size36x36 = 11,
    /**
     * will generate 40*40 modules.
     */
    Size40x40 = 12,
    /**
     * will generate 44*44 modules.
     */
    Size44x44 = 13,
    /**
     * will generate 48*48 modules.
     */
    Size48x48 = 14,
    /**
     * will generate 52*52 modules.
     */
    Size52x52 = 15,
    /**
     * will generate 64*64 modules.
     */
    Size64x64 = 16,
    /**
     * will generate 72*72 modules.
     */
    Size72x72 = 17,
    /**
     * will generate 80*80 modules.
     */
    Size80x80 = 18,
    /**
     * will generate 88*88 modules.
     */
    Size88x88 = 19,
    /**
     * will generate 96*96 modules.
     */
    Size96x96 = 20,
    /**
     * will generate 104*104 modules.
     */
    Size104x104 = 21,
    /**
     * will generate 120*120 modules.
     */
    Size120x120 = 22,
    /**
     * will generate 132*132 modules.
     */
    Size132x132 = 23,
    /**
     * will generate 144*144 modules.
     */
    Size144x144 = 24,
    /**
     * will generate 8*18 modules.
     */
    Size8x18 = 25,
    /**
     * will generate 8*32 modules.
     */
    Size8x32 = 26,
    /**
     * will generate 12*26 modules.
     */
    Size12x26 = 27,
    /**
     * will generate 12*36 modules.
     */
    Size12x36 = 28,
    /**
     * will generate 16*36 modules.
     */
    Size16x36 = 29,
    /**
     * will generate 16*48 modules.
     */
    Size16x48 = 30
}
/**
 * Defines the type of the barcode to be generated. The barcode types are
 * * Code39
 * * Code128
 * * Code128A
 * * Code128B
 * * Code128C
 * * Codabar
 * * Ean8
 * * Ean13
 * * UpcA
 * * UpcE
 * * Code11
 * * Code93
 * * Code93Extension
 * * Code39Extension
 * * Code32
 */
export  type BarcodeType = 
/** code39 - render the code39 barcode */
'Code39' | 
/** code128 - render the code128 barcode */
'Code128' | 
/** code128A - render the code128A barcode */
'Code128A' | 
/** code128B - render the code128B barcode */
'Code128B' | 
/** code128C - render the code128C barcode */
'Code128C' | 
/** Codabar - render the codabar barcode */
'Codabar' | 
/** Ean8 - render the Ean8 barcode */
'Ean8' | 
/** Ean8 - render the Ean8 barcode */
'Ean13' | 
/** UpcA - render the UpcA barcode */
'UpcA' | 
/** UpcE - render the UpcE barcode */
'UpcE' | 
/** Code11 - render the code11 barcode */
'Code11' | 
/** Code93 - render the code93 barcode */
'Code93' | 
/** Code93Extension - render the Code93Extension barcode */
'Code93Extension' | 
/** Code39EXTD - render the code39EXTD barcode */
'Code39Extension' | 
/** Code32 - render the Code32 barcode */
'Code32';
/**
 * Defines the Qrcode input mode. The QR input modes are
 * * NumericMode
 * * BinaryMode
 * * AlphaNumericMode
 */
export  type QRInputMode = 
/** NumericMode - Changes its mode to numericMode when the given input is numeric. */
'NumericMode' | 
/** BinaryMode - Changes its mode to BinaryMode when the given input is numeric or smaller case or both. */
'BinaryMode' | 
/** AlphaNumericMode - Changes its mode to AlphaNumericMode when the given is numeric or upper case or both. */
'AlphaNumericMode';
/**
 * Defines the Qrcode QRCodeVersion. They are
 * * Auto
 * * Version01
 * * Version02
 * * Version03
 * * Version04
 * * Version05
 * * Version06
 * * Version07
 * * Version08
 * * Version09
 * * Version10
 * * Version11
 * * Version12
 * * Version13
 * * Version14
 * * Version15
 * * Version16
 * * Version17
 * * Version18
 * * Version19
 * * Version20
 * * Version21
 * * Version22
 * * Version23
 * * Version24
 * * Version25
 * * Version26
 * * Version27
 * * Version28
 * * Version29
 * * Version30
 * * Version31
 * * Version32
 * * Version33
 * * Version34
 * * Version35
 * * Version36
 * * Version37
 * * Version38
 * * Version39
 * * Version40
 * @aspNumberEnum
 * @blazorNumberEnum
 * @IgnoreSingular
 */
export  enum QRCodeVersion {
    /**
     * Specifies the default version.
     */
    Auto = 0,
    /**
     * Specifies version 1 (21 x 21 modules).
     */
    Version01 = 1,
    /**
     * Specifies version 2 (25 x 25 modules).
     */
    Version02 = 2,
    /**
     * Specifies version 3 (29 x 29 modules).
     */
    Version03 = 3,
    /**
     * Specifies version 4 (33 x 33 modules).
     */
    Version04 = 4,
    /**
     * Specifies version 5 (37 x 37 modules).
     */
    Version05 = 5,
    /**
     * Specifies version 6 (41 x 41 modules).
     */
    Version06 = 6,
    /**
     * Specifies version 7 (45 x 45 modules).
     */
    Version07 = 7,
    /**
     * Specifies version 8 (49 x 49 modules).
     */
    Version08 = 8,
    /**
     * Specifies version 9 (53 x 53 modules).
     */
    Version09 = 9,
    /**
     * Specifies version 10 (57 x 57 modules).
     */
    Version10 = 10,
    /**
     * Specifies version 11 (61 x 61 modules).
     */
    Version11 = 11,
    /**
     * Specifies version 12 (65 x 65 modules).
     */
    Version12 = 12,
    /**
     * Specifies version 13 (69 x 69 modules).
     */
    Version13 = 13,
    /**
     * Specifies version 14 (73 x 73 modules).
     */
    Version14 = 14,
    /**
     * Specifies version 15 (77 x 77 modules).
     */
    Version15 = 15,
    /**
     * Specifies version 17 (85 x 85 modules).
     */
    Version16 = 16,
    /**
     * Specifies version 17 (85 x 85 modules).
     */
    Version17 = 17,
    /**
     * Specifies version 18 (89 x 89 modules).
     */
    Version18 = 18,
    /**
     * Specifies version 19 (93 x 93 modules).
     */
    Version19 = 19,
    /**
     * Specifies version 20 (97 x 97 modules).
     */
    Version20 = 20,
    /**
     * Specifies version 21 (101 x 101 modules).
     */
    Version21 = 21,
    /**
     * Specifies version 22 (105 x 105 modules).
     */
    Version22 = 22,
    /**
     * Specifies version 23 (109 x 109 modules).
     */
    Version23 = 23,
    /**
     * Specifies version 24 (113 x 113 modules).
     */
    Version24 = 24,
    /**
     * Specifies version 25 (117 x 117 modules).
     */
    Version25 = 25,
    /**
     * Specifies version 26 (121 x 121 modules).
     */
    Version26 = 26,
    /**
     * Specifies version 27 (125 x 125 modules).
     */
    Version27 = 27,
    /**
     * Specifies version 28 (129 x 129 modules).
     */
    Version28 = 28,
    /**
     * Specifies version 29 (133 x 133 modules).
     */
    Version29 = 29,
    /**
     * Specifies version 30 (137 x 137 modules).
     */
    Version30 = 30,
    /**
     * Specifies version 31 (141 x 141 modules).
     */
    Version31 = 31,
    /**
     * Specifies version 32 (145 x 145 modules).
     */
    Version32 = 32,
    /**
     * Specifies version 33 (149 x 149 modules).
     */
    Version33 = 33,
    /**
     * Specifies version 34 (153 x 153 modules).
     */
    Version34 = 34,
    /**
     * Specifies version 35 (157 x 157 modules).
     */
    Version35 = 35,
    /**
     * Specifies version 36 (161 x 161 modules).
     */
    Version36 = 36,
    /**
     * Specifies version 37 (165 x 165 modules).
     */
    Version37 = 37,
    /**
     * Specifies version 38 (169 x 169 modules).
     */
    Version38 = 38,
    /**
     * Specifies version 39 (173 x 173 modules).
     */
    Version39 = 39,
    /**
     * Specifies version 40 (177 x 177 modules).
     */
    Version40 = 40
}
/**
 * Indicated the recovery capacity of the qrcode. The default capacity levels are
 * * Low
 * * Medium
 * * Quartile
 * * High
 * @aspNumberEnum
 * @blazorNumberEnum
 * @IgnoreSingular
 */
export  enum ErrorCorrectionLevel {
    /**
     * The Recovery capacity is 7%(approx.)
     */
    Low = 7,
    /**
     * The Recovery capacity is 15%(approx.)
     */
    Medium = 15,
    /**
     * The Recovery capacity is 25%(approx.)
     */
    Quartile = 25,
    /**
     * The Recovery capacity is 30%(approx.)
     */
    High = 30
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/index.d.ts
/**
 * Barcode component exported items
 */
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/one-dimension.d.ts
/**
 * onedimension class is used to render all type of one dimensional shapes
 */
export  abstract class OneDimension extends BarcodeBase {
    private getInstance;
    /** @private */
    getDrawableSize(margin: MarginModel, w: number, h: number): Rect;
    private getBaseAttributes;
    private getBarLineRatio;
    private multipleWidth;
    private barCodeType;
    private checkStartValueCondition;
    private checkEndValueCondition;
    private getDisplayText;
    private checkExtraHeight;
    private getWidthValue;
    /** @private */
    calculateBarCodeAttributes(code: number[] | string[], canvas: HTMLElement, isUpcE?: string): void;
    private canIncrementCheck;
    private verticalTextMargin;
    private getAlignmentPosition;
    /** @private */
    drawImage(canvas: HTMLCanvasElement, options: BaseAttributes[]): void;
    private updateDisplayTextSize;
    private alignDisplayText;
    private updateOverlappedTextPosition;
    private drawText;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/one-dimension/codabar.d.ts
/**
 * codabar used to calculate the barcode of type codabar
 */
export  class CodaBar extends OneDimension {
    /** @private */
    validateInput(char: string): string;
    private getCodeValue;
    private appendStartStopCharacters;
    private getPatternCollection;
    /** @private */
    draw(canvas: HTMLElement): void;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/one-dimension/code11.d.ts
/**
 * code39 used to calculate the barcode of type 39
 */
export  class Code11 extends OneDimension {
    /**
     * Validate the given input to check whether the input is valid one or not
     */
    /** @private */
    validateInput(value: string): string;
    /**
     * get the code value to check
     */
    private getCodeValue;
    private getPatternCollection;
    /** @private */
    draw(canvas: HTMLElement): void;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/one-dimension/code128.d.ts
/**
 * code128 used to calculate the barcode of type 128
 */
export  class Code128 extends OneDimension {
    /**
     * Validate the given input to check whether the input is valid one or not
     */
    /** @private */
    validateInput(char: string): string;
    private getCodeValue;
    private getBytes;
    private appendStartStopCharacters;
    private check128C;
    private check128A;
    private check128B;
    private clipAB;
    private code128Clip;
    private clipC;
    /** @private */
    draw(canvas: HTMLElement): void;
    /** @private */
    code128(canvas: HTMLElement): void;
    private encodeData;
    private swap;
    private encode;
    private correctIndex;
    private getCodes;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/one-dimension/code128A.d.ts
/**
 * code128A used to calculate the barcode of type 1228A
 */
export  class Code128A extends Code128 {
    /**
     * Validate the given input to check whether the input is valid one or not
     */
    /** @private */
    validateInput(char: string): string;
    /** @private */
    draw(canvas: HTMLElement): void;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/one-dimension/code128B.d.ts
/**
 * code128B used to calculate the barcode of type 128
 */
export  class Code128B extends Code128 {
    /**
     * Validate the given input to check whether the input is valid one or not
     */
    /** @private */
    validateInput(char: string): string;
    /** @private */
    draw(canvas: HTMLElement): void;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/one-dimension/code128C.d.ts
/**
 * code128C used to calculate the barcode of type 128C barcode
 */
export  class Code128C extends Code128 {
    /**
     * Validate the given input to check whether the input is valid one or not
     */
    /** @private */
    validateInput(char: string): string;
    /** @private */
    draw(canvas: HTMLElement): void;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/one-dimension/code32.d.ts
/**
 * code39 used to calculate the barcode of type 39
 */
export  class Code32 extends OneDimension {
    /** @private */
    validateInput(char: string): string;
    /**
     * get the code value to check
     */
    private getCodeValue;
    private getPatternCollection;
    /** @private */
    draw(canvas: HTMLElement): void;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/one-dimension/code39.d.ts
/**
 * code39 used to calculate the barcode of type 39
 */
export  class Code39 extends OneDimension {
    /**
     * get the code value to check
     */
    private getCodeValue;
    /**
     * get the characters to check
     */
    private getCharacter;
    /**
     * Check sum method for the code 39 bar code
     */
    private checkSum;
    /**
     * Validate the given input to check whether the input is valid one or not
     */
    /** @private */
    validateInput(char: string): string;
    private getPatternCollection;
    private appendStartStopCharacters;
    /** @private */
    drawCode39Extension(canvas: HTMLElement, encodedCharacter: string): void;
    /** @private */
    draw(canvas: HTMLElement, encodedCharacter?: string): void;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/one-dimension/code39Extension.d.ts
/**
 * code39 used to calculate the barcode of type 39
 */
export  class Code39Extension extends Code39 {
    private code39ExtensionValues;
    /**
     * Validate the given input to check whether the input is valid one or not
     *
     */
    /** @private */
    validateInput(char: string): string;
    private checkText;
    private code39Extension;
    /** @private */
    drawCode39(canvas: HTMLElement): void;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/one-dimension/code93.d.ts
/**
 * code39 used to calculate the barcode of type 39
 */
export  class Code93 extends OneDimension {
    /**
     * Validate the given input to check whether the input is valid one or not
     */
    /** @private */
    validateInput(value: string): string;
    private getCharacterWeight;
    /**
     * get the code value to check
     */
    private getCodeValue;
    private getPatternCollection;
    private calculateCheckSum;
    /** @private */
    draw(canvas: HTMLElement): void;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/one-dimension/code93Extension.d.ts
/**
 * code39 used to calculate the barcode of type 39
 */
export  class Code93Extension extends Code93 {
    /**
     * Validate the given input to check whether the input is valid one or not
     */
    /** @private */
    validateInput(text: string): string;
    private getValue;
    private barcodeSymbols;
    private getBars;
    private GetExtendedText;
    /** @private */
    drawCode93(canvas: HTMLElement): void;
    private extendedText;
    private GetCheckSumSymbols;
    private CalculateCheckDigit;
    private getArrayValue;
    private encoding;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/one-dimension/ean13.d.ts
/**
 * EAN13 class is  used to calculate the barcode of type EAN13 barcode
 */
export  class Ean13 extends OneDimension {
    /**
     * Validate the given input to check whether the input is valid one or not
     */
    /** @private */
    validateInput(value: string): string;
    private checkSumData;
    private getStructure;
    private getBinaries;
    /** @private */
    draw(canvas: HTMLElement): void;
    private leftValue;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/one-dimension/ean8.d.ts
/**
 * EAN8 class is  used to calculate the barcode of type EAN8 barcode
 */
export  class Ean8 extends OneDimension {
    /**
     * Validate the given input to check whether the input is valid one or not
     */
    /** @private */
    validateInput(value: string): string;
    private getCodeValueRight;
    private checkSumData;
    /** @private */
    draw(canvas: HTMLElement): void;
    private leftValue;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/one-dimension/upcA.d.ts
/**
 * This class is  used to calculate the barcode of type Universal Product Code barcode
 */
export  class UpcA extends OneDimension {
    /**
     * Validate the given input to check whether the input is valid one or not
     */
    /** @private */
    validateInput(value: string): string;
    private checkSumData;
    private getBinaries;
    /** @private */
    draw(canvas: HTMLElement): void;
    private leftValue;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/one-dimension/upcE.d.ts
/**
 * This class is  used to calculate the barcode of type Universal Product Code barcode
 */
export  class UpcE extends OneDimension {
    /**
     * Validate the given input to check whether the input is valid one or not
     */
    /** @private */
    validateInput(value: string): string;
    private checkSum;
    private getStructure;
    private getValue;
    private getExpansion;
    private getUpcValue;
    private getBinaries;
    private encoding;
    /** @private */
    draw(canvas: HTMLElement): void;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/primitives/displaytext-model.d.ts
/**
 * Interface for a class DisplayText
 */
export interface DisplayTextModel {
    /**
     * Sets the textual description of the barcode.
     * @default ''
     */
    text?: string;
    /**
     * Defines the visibility of the text.
     * @default true
     */
    visibility?: boolean;
    /**
     * Defines the font style of the text
     * @default 'monospace'
     */
    font?: string;
    /**
     * Defines the size of the text.
     * @default 20
     */
    size?: number;
    /**
     * Sets the space to be left between the text and its barcode.
     * @default ''
     */
    margin?: MarginModel;
    /**
     * Defines the horizontal alignment of the text.
     * * Left - Aligns the text at the left
     * * Right - Aligns the text at the Right
     * * Center - Aligns the text at the Center
     * @default 'Center'
     */
    alignment?: Alignment;
    /**
     * Defines the position of the text.
     * * Bottom - Position the text at the Bottom
     * * Top - Position the text at the Top
     * @default 'Bottom'
     */
    position?: TextPosition;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/primitives/displaytext.d.ts
/**
 * Defines the space to be left between an object and its immediate parent
 */
export  class DisplayText extends base.ChildProperty<DisplayText> {
    /**
     * Sets the textual description of the barcode.
     * @default ''
     */
    text: string;
    /**
     * Defines the visibility of the text.
     * @default true
     */
    visibility: boolean;
    /**
     * Defines the font style of the text
     * @default 'monospace'
     */
    font: string;
    /**
     * Defines the size of the text.
     * @default 20
     */
    size: number;
    /**
     * Sets the space to be left between the text and its barcode.
     * @default ''
     */
    margin: MarginModel;
    /**
     * Defines the horizontal alignment of the text.
     * * Left - Aligns the text at the left
     * * Right - Aligns the text at the Right
     * * Center - Aligns the text at the Center
     * @default 'Center'
     */
    alignment: Alignment;
    /**
     * Defines the position of the text.
     * * Bottom - Position the text at the Bottom
     * * Top - Position the text at the Top
     * @default 'Bottom'
     */
    position: TextPosition;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/primitives/margin-model.d.ts
/**
 * Interface for a class Margin
 */
export interface MarginModel {
    /**
     * Sets the space to be left from the left side of the immediate parent of an element
     * @default 10
     */
    left?: number;
    /**
     * Sets the space to be left from the right side of the immediate parent of an element
     * @default 10
     */
    right?: number;
    /**
     * Sets the space to be left from the top side of the immediate parent of an element
     * @default 10
     */
    top?: number;
    /**
     * Sets the space to be left from the bottom side of the immediate parent of an element
     * @default 10
     */
    bottom?: number;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/primitives/margin.d.ts
/**
 * Defines the space to be left between an object and its immediate parent
 */
export  class Margin extends base.ChildProperty<Margin> {
    /**
     * Sets the space to be left from the left side of the immediate parent of an element
     * @default 10
     */
    left: number;
    /**
     * Sets the space to be left from the right side of the immediate parent of an element
     * @default 10
     */
    right: number;
    /**
     * Sets the space to be left from the top side of the immediate parent of an element
     * @default 10
     */
    top: number;
    /**
     * Sets the space to be left from the bottom side of the immediate parent of an element
     * @default 10
     */
    bottom: number;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/primitives/point-model.d.ts
/**
 * Interface for a class Point
 */
export interface PointModel {
    /**
     * Sets the x-coordinate of a position
     * @default 0
     */
    x?: number;
    /**
     * Sets the y-coordinate of a position
     * @default 0
     */
    y?: number;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/primitives/point.d.ts
/**
 * Defines and processes coordinates
 */
export  class Point extends base.ChildProperty<Point> {
    /**
     * Sets the x-coordinate of a position
     * @default 0
     */
    x: number;
    /**
     * Sets the y-coordinate of a position
     * @default 0
     */
    y: number;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/primitives/rect.d.ts
/**
 * Rect defines and processes rectangular regions
 */
export  class Rect {
    /**
     * Sets the x-coordinate of the starting point of a rectangular region
     * @default 0
     */
    x: number;
    /**
     * Sets the y-coordinate of the starting point of a rectangular region
     * @default 0
     */
    y: number;
    /**
     * Sets the width of a rectangular region
     * @default 0
     */
    width: number;
    /**
     * Sets the height of a rectangular region
     * @default 0
     */
    height: number;
    constructor(x?: number, y?: number, width?: number, height?: number);
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/primitives/size.d.ts
/**
 * Size defines and processes the size(width/height) of the objects
 */
export  class Size {
    /**
     * Sets the height of an object
     * @default 0
     */
    height: number;
    /**
     * Sets the width of an object
     * @default 0
     */
    width: number;
    constructor(width?: number, height?: number);
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/rendering/canvas-interface.d.ts
/** @private */
export interface BaseAttributes {
    x: number;
    y: number;
    width: number;
    height: number;
    color: string;
    string?: string;
    stringSize?: number;
    visibility?: boolean;
    fontStyle?: string;
    id?: string;
    strokeColor?: string;
}
/** @private */
export interface EncodingResult {
    checksum: number;
    result: string;
}
/** @private */
export interface PdfDataMatrixSymbolAttribute {
    SymbolRow: number;
    SymbolColumn: number;
    HorizontalDataRegion: number;
    VerticalDataRegion: number;
    DataCodewords: number;
    CorrectionCodewords: number;
    InterleavedBlock: number;
    InterleavedDataBlock: number;
}
/** @private */
export interface Code93ExtendedValues {
    value: string;
    checkDigit: number;
    bars: string;
}
/** @private */
export interface Code93ExtendedArrayAttribute {
    character: string;
    keyword?: string;
    value?: string;
}
/** @private */
export interface ValidateEvent {
    message: string;
}
/** @private */
export  class BarcodeSVGRenderer implements IBarcodeRenderer {
    /**   @private  */
    renderRootElement(attribute: Object): HTMLElement;
    /**   @private  */
    renderRect(canvas: Object, attribute: Object): HTMLElement;
    /**   @private  */
    renderLine(canvas: Object, attribute: Object): HTMLElement;
    /**   @private  */
    renderText(canvas: Object, attribute: Object): HTMLElement;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/rendering/canvas-renderer.d.ts
/**
 * canvas renderer
 */
/** @private */
export  class BarcodeCanvasRenderer implements IBarcodeRenderer {
    /**   @private  */
    static getContext(canvas: HTMLCanvasElement): CanvasRenderingContext2D;
    /**   @private  */
    renderRootElement(attribute: Object, backGroundColor: string, width: number, height: number): HTMLElement;
    /**   @private  */
    renderRect(canvas: HTMLCanvasElement, attribute: BaseAttributes): HTMLElement;
    renderText(canvas: HTMLCanvasElement, attribute: BaseAttributes): HTMLElement;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/rendering/IRenderer.d.ts
/**
 * IRenderer interface
 */
/** @private */
export interface IBarcodeRenderer {
    renderRootElement(attribute: Object, backGroundColor: string, width: number, height: number): HTMLElement;
    renderRect(canvas: HTMLCanvasElement, attribute: Object, isText?: boolean): HTMLElement;
    renderText(canvas: HTMLCanvasElement, attribute: Object): HTMLElement;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/rendering/renderer.d.ts
/**
 * Renderer
 */
/**
 * Renderer module is used to render basic barcode elements
 */
/** @private */
export  class BarcodeRenderer {
    /**   @private  */
    renderer: IBarcodeRenderer;
    isSvgMode: Boolean;
    constructor(name: string, isSvgMode: Boolean);
    /**   @private  */
    renderRootElement(attribute: Object, backGroundColor: string, width: number, height: number): HTMLElement;
    /**   @private  */
    renderRectElement(canvas: HTMLCanvasElement, attribute: Object): HTMLElement;
    /**   @private  */
    renderTextElement(canvas: HTMLCanvasElement, attribute: Object): HTMLElement;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/rendering/svg-renderer.d.ts
/**
 * svg renderer
 */
/** @private */
export  class BarcodeSVGRenderering implements IBarcodeRenderer {
    /**   @private  */
    renderRootElement(attribute: Object, backGroundColor: string): HTMLElement;
    /**   @private  */
    renderRect(svg: HTMLElement, attribute: BaseAttributes): HTMLElement;
    /**   @private  */
    renderText(svg: HTMLElement, attribute: BaseAttributes): HTMLElement;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/utility/barcode-util.d.ts
/**
 * Barcode util
 */
/** @private */
export  function removeChildElements(newProp: QRCodeGeneratorModel | DataMatrixGeneratorModel, barcodeCanvas: HTMLElement, mode: RenderingMode, id: string): BarcodeRenderer;
/** @private */
export  function getBaseAttributes(width: number, height: number, offSetX: number, offsetY: number, color: string, strokeColor?: string): BaseAttributes;
/** @private */
export  function clearCanvas(view: QRCodeGenerator | DataMatrixGenerator, barcodeCanvas: HTMLCanvasElement): void;
/** @private */
export  function refreshCanvasBarcode(qrCodeGenerator: QRCodeGenerator | DataMatrixGenerator, barcodeCanvas: HTMLCanvasElement): void;
//node_modules/@syncfusion/ej2-barcode-generator/src/barcode/utility/dom-util.d.ts
/**
 * DOM util
 */
/** @private */
export  function createHtmlElement(elementType: string, attribute?: Object): HTMLElement;
export  function getChildNode(node: SVGElement): SVGElement[] | HTMLCollection;
export  function measureText(textContent: BaseAttributes): Size;
/** @private */
export  function setAttribute(element: HTMLElement | SVGElement, attributes: Object): void;
/** @private */
export  function createSvgElement(elementType: string, attribute: Object): HTMLElement | SVGElement;
/** @private */
export  function createMeasureElements(): void;
//node_modules/@syncfusion/ej2-barcode-generator/src/datamatrix/datamatrix-model.d.ts
/**
 * Interface for a class DataMatrixGenerator
 */
export interface DataMatrixGeneratorModel extends base.ComponentModel{
    /**
     * Defines encoding type of the DataMatrix.
     * @default 'Auto'
     */
    encoding?: DataMatrixEncoding;
    /**
     * Defines encoding type of the DataMatrix.
     * @default 'Auto'
     */
    size?: DataMatrixSize;
    /**
     * Defines the DataMatrix rendering mode.
     * * SVG - Renders the bar-code objects as SVG elements
     * * Canvas - Renders the bar-code in a canvas
     * @default 'SVG'
     */
    mode?: RenderingMode;
    /**
     * Defines the value of the DataMatrix to be rendered.
     * @default undefined
     */
    value?: string;
    /**
     * Defines the height of the DataMatrix.
     * @default '100%'
     */
    height?: string | number;
    /**
     * Defines the width of the DataMatrix.
     * @default '100%'
     */
    width?: string | number;
    /**
     * Defines the text properties for the DataMatrix.
     * @default ''
     */
    displayText?: DisplayTextModel;
    /**
     * Defines the margin properties for the DataMatrix.
     * @default ''
     */
    margin?: MarginModel;
    /**
     * Defines the background color of the DataMatrix.
     * @default 'white'
     */
    backgroundColor?: string;
    /**
     * Triggers if we entered any invalid character
     * @event
     */
    invalid?: base.EmitType<Object>;
    /**
     * Defines the forecolor of the DataMatrix.
     * @default 'black'
     */
    foreColor?: string;
    /**
     * Defines the xDimension of the DataMatrix.
     */
    xDimension?: number;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/datamatrix/datamatrix-util.d.ts
/**
 * DataMatrix used to calculate the DataMatrix barcode
 */
export  class DataMatrix {
    /** @private */
    encodingValue: DataMatrixEncoding;
    /** @private */
    height: string | number;
    /** @private */
    width: string | number;
    /** @private */
    margin: MarginModel;
    /** @private */
    displayText: DisplayTextModel;
    /** @private */
    foreColor: string;
    /** @private */
    isSvgMode: boolean;
    /** @private */
    value: string;
    private barcodeRenderer;
    /** @private */
    size: DataMatrixSize;
    private mXDimension;
    private mDataMatrixArray;
    private actualColumns;
    private actualRows;
    /** @private */
    XDimension: number;
    private encodedCodeword;
    private mSymbolAttribute;
    private GetData;
    private fillZero;
    private DataMatrixNumericEncoder;
    private ComputeBase256Codeword;
    private DataMatrixBaseEncoder;
    private copy;
    private DataMatrixEncoder;
    private PrepareDataCodeword;
    private PdfDataMatrixSymbolAttribute;
    private getmSymbolAttributes;
    private PadCodewords;
    private EccProduct;
    /**
     * Validate the given input to check whether the input is valid one or not
     */
    private validateInput;
    private ComputeErrorCorrection;
    private CreateLogArrays;
    private EccSum;
    private EccDoublify;
    private CreateRSPolynomial;
    private PrepareCodeword;
    private copyArray;
    private ecc200placementbit;
    private ecc200placementblock;
    private ecc200placementcornerD;
    private ecc200placementcornerA;
    private ecc200placementcornerB;
    private ecc200placementcornerC;
    private ecc200placement;
    private getActualRows;
    private getActualColumns;
    private AddQuiteZone;
    private drawImage;
    private CreateMatrix;
    private create1DMatrixArray;
    private create2DMartixArray;
    /** @private */
    BuildDataMatrix(): number[] | string;
    private drawText;
    private getInstance;
    private drawDisplayText;
    private getDrawableSize;
    /** @private */
    draw(canvas: HTMLElement): void;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/datamatrix/datamatrix.d.ts
/**
 * Represents the Datamatrix control
 * ```
 */
export  class DataMatrixGenerator extends base.Component<HTMLElement> implements base.INotifyPropertyChanged {
    /**
     * Defines encoding type of the DataMatrix.
     * @default 'Auto'
     */
    encoding: DataMatrixEncoding;
    /**
     * Defines encoding type of the DataMatrix.
     * @default 'Auto'
     */
    size: DataMatrixSize;
    /**
     * Defines the DataMatrix rendering mode.
     * * SVG - Renders the bar-code objects as SVG elements
     * * Canvas - Renders the bar-code in a canvas
     * @default 'SVG'
     */
    mode: RenderingMode;
    /**
     * Defines the value of the DataMatrix to be rendered.
     * @default undefined
     */
    value: string;
    /**
     * Defines the height of the DataMatrix.
     * @default '100%'
     */
    height: string | number;
    /**
     * Defines the width of the DataMatrix.
     * @default '100%'
     */
    width: string | number;
    /**
     * Defines the text properties for the DataMatrix.
     * @default ''
     */
    displayText: DisplayTextModel;
    /**
     * Defines the margin properties for the DataMatrix.
     * @default ''
     */
    margin: MarginModel;
    /**
     * Defines the background color of the DataMatrix.
     * @default 'white'
     */
    backgroundColor: string;
    /**
     * Triggers if we entered any invalid character
     * @event
     */
    invalid: base.EmitType<Object>;
    /**
     * Defines the forecolor of the DataMatrix.
     * @default 'black'
     */
    foreColor: string;
    /**
     * Defines the xDimension of the DataMatrix.
     */
    xDimension: number;
    /** @private */
    private barcodeRenderer;
    private barcodeCanvas;
    /** @private */
    localeObj: base.L10n;
    /** @private */
    private defaultLocale;
    /**
     * Destroys the the data matrix generator
     */
    destroy(): void;
    private initializePrivateVariables;
    /**
     * Constructor for creating the widget
     */
    constructor(options?: DataMatrixGeneratorModel, element?: HTMLElement | string);
    /**
     * Get the properties to be maintained in the persisted state.
     * @return {string}
     */
    getPersistData(): string;
    /**
     * Returns the module name of the the data matrix generator
     */
    getModuleName(): string;
    private setCulture;
    private getElementSize;
    private initialize;
    private triggerEvent;
    protected preRender(): void;
    onPropertyChanged(newProp: DataMatrixGeneratorModel, oldProp: DataMatrixGeneratorModel): void;
    private checkdata;
    private renderElements;
    /**
     * Renders the barcode control with nodes and connectors
     */
    render(): void;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/datamatrix/index.d.ts
/**
 * Datamatrix component exported items
 */
//node_modules/@syncfusion/ej2-barcode-generator/src/index.d.ts
/**
 * Barcode component exported items
 */
//node_modules/@syncfusion/ej2-barcode-generator/src/qrcode/index.d.ts
/**
 * Qrcode component exported items
 */
//node_modules/@syncfusion/ej2-barcode-generator/src/qrcode/qr-barcode-values.d.ts
/**
 * Qrcode used to calculate the Qrcode control
 */
export  class PdfQRBarcodeValues {
    /**
     * Holds the Version Information.
     */
    private mVersion;
    /**
     * Holds the Error Correction Level.
     */
    private mErrorCorrectionLevel;
    /**
     * Holds the Number of Data code word.
     */
    private mNumberOfDataCodeWord;
    /**
     * Holds the Number of Error correcting code words.
     */
    private mNumberOfErrorCorrectingCodeWords;
    /**
     * Holds the Number of Error correction Blocks.
     */
    private mNumberOfErrorCorrectionBlocks;
    /**
     * Holds the End value of the version.
     */
    private mEnd;
    /**
     * Holds the Data copacity of the version.
     */
    private mDataCapacity;
    /**
     * Holds the Format Information.
     */
    private mFormatInformation;
    /**
     * Holds the Version Information.
     */
    private mVersionInformation;
    /**
     * Holds all the values of Error correcting code words.
     */
    private numberOfErrorCorrectingCodeWords;
    /**
     * Hexadecimal values of CP437 characters
     */
    private cp437CharSet;
    /**
     * Hexadecimal values of ISO8859_2 characters
     */
    private iso88592CharSet;
    /**
     * Hexadecimal values of ISO8859_3 characters
     */
    private iso88593CharSet;
    /**
     * Hexadecimal values of ISO8859_4 characters
     */
    private iso88594CharSet;
    /**
     * Hexadecimal values of Windows1250 characters
     */
    private windows1250CharSet;
    /**
     * Hexadecimal values of Windows1251 characters
     */
    private windows1251CharSet;
    /**
     * Hexadecimal values of Windows1252 characters
     */
    private windows1252CharSet;
    /**
     * Hexadecimal values of Windows1256 characters
     */
    private windows1256CharSet;
    /**
     * Equivalent values of CP437 characters
     */
    private cp437ReplaceNumber;
    /**
     * Equivalent values of ISO8859_2 characters
     */
    private iso88592ReplaceNumber;
    /**
     * Equivalent values of ISO8859_3 characters
     */
    private iso88593ReplaceNumber;
    /**
     * Equivalent values of ISO8859_4 characters
     */
    private iso88594ReplaceNumber;
    /**
     * Equivalent values of Windows1250 characters
     */
    private windows1250ReplaceNumber;
    /**
     * Equivalent values of Windows1251 characters
     */
    private windows1251ReplaceNumber;
    /**
     * Equivalent values of Windows1252 characters
     */
    private windows1252ReplaceNumber;
    /**
     * Equivalent values of Windows1256 characters
     */
    private windows1256ReplaceNumber;
    /**
     * Holds all the end values.
     */
    /** @private */
    endValues: number[];
    /**
     * Holds all the Data capacity values.
     */
    /** @private */
    dataCapacityValues: number[];
    /**
     * Holds all  the Numeric Data capacity of the Error correction level Low.
     */
    /** @private */
    numericDataCapacityLow: number[];
    /**
     * Holds all  the Numeric Data capacity of the Error correction level Medium.
     */
    /** @private */
    numericDataCapacityMedium: number[];
    /**
     * Holds all  the Numeric Data capacity of the Error correction level Quartile.
     */
    /** @private */
    numericDataCapacityQuartile: number[];
    /**
     * Holds all  the Numeric Data capacity of the Error correction level High.
     */
    /** @private */
    numericDataCapacityHigh: number[];
    /**
     * Holds all  the Alpha numeric Data capacity of the Error correction level Low.
     */
    /** @private */
    alphanumericDataCapacityLow: number[];
    /**
     * Holds all  the Alpha numeric Data capacity of the Error correction level Medium.
     */
    /** @private */
    alphanumericDataCapacityMedium: number[];
    /**
     * Holds all  the Alpha numeric Data capacity of the Error correction level Quartile.
     */
    /** @private */
    alphanumericDataCapacityQuartile: number[];
    /**
     * Holds all  the Alpha numeric Data capacity of the Error correction level High.
     */
    /** @private */
    alphanumericDataCapacityHigh: number[];
    /**
     * Holds all  the Binary Data capacity of the Error correction level Low.
     */
    /** @private */
    binaryDataCapacityLow: number[];
    /**
     * Holds all  the Binary Data capacity of the Error correction level Medium.
     */
    /** @private */
    binaryDataCapacityMedium: number[];
    /**
     * Holds all  the Binary Data capacity of the Error correction level Quartile.
     */
    /** @private */
    binaryDataCapacityQuartile: number[];
    /**
     * Holds all  the Binary Data capacity of the Error correction level High.
     */
    /** @private */
    binaryDataCapacityHigh: number[];
    /**
     * Holds all  the Mixed Data capacity of the Error correction level Low.
     */
    private mixedDataCapacityLow;
    /**
     * Holds all  the Mixed Data capacity of the Error correction level Medium.
     */
    private mixedDataCapacityMedium;
    /**
     * Holds all  the Mixed Data capacity of the Error correction level Quartile.
     */
    private mixedDataCapacityQuartile;
    /**
     * Holds all  the Mixed Data capacity of the Error correction level High.
     */
    private mixedDataCapacityHigh;
    /**
     * Get or public set the Number of Data code words.
     */
    /** @private */
    /** @private */
    NumberOfDataCodeWord: number;
    /**
     * Get or Private set the Number of Error correction code words.
     */
    /** @private */
    /** @private */
    NumberOfErrorCorrectingCodeWords: number;
    /**
     * Get or Private set the Number of Error correction Blocks.
     */
    /** @private */
    /** @private */
    NumberOfErrorCorrectionBlocks: number[];
    /**
     * Set the End value of the Current Version.
     */
    private End;
    /**
     * Get or Private set the Data capacity.
     */
    private DataCapacity;
    /**
     * Get or Private set the Format Information.
     */
    /** @private */
    /** @private */
    FormatInformation: number[];
    /**
     * Get or Private set the Version Information.
     */
    /** @private */
    /** @private */
    VersionInformation: number[];
    /**
     * Initializes the values
     * @param version - version of the qr code
     * @param errorCorrectionLevel - defines the level of error correction.
     */
    constructor(version: QRCodeVersion, errorCorrectionLevel: ErrorCorrectionLevel);
    /**
     * Gets the Alphanumeric values.
     */
    /** @private */
    getAlphaNumericValues(value: string): number;
    /**
     * Gets number of data code words.
     */
    private obtainNumberOfDataCodeWord;
    /**
     * Get number of Error correction code words.
     */
    private obtainNumberOfErrorCorrectingCodeWords;
    /**
     * Gets number of Error correction Blocks.
     */
    private obtainNumberOfErrorCorrectionBlocks;
    /**
     * Gets the End of the version.
     */
    private obtainEnd;
    /**
     * Gets Data capacity
     */
    private obtainDataCapacity;
    /**
     * Gets format information
     */
    private obtainFormatInformation;
    /**
     * Gets version information
     */
    private obtainVersionInformation;
    /**
     * Gets Numeric Data capacity.
     */
    /** @private */
    getNumericDataCapacity(version: QRCodeVersion, errorCorrectionLevel: ErrorCorrectionLevel): number;
    /**
     * Gets Alphanumeric data capacity.
     */
    /** @private */
    getAlphanumericDataCapacity(version: QRCodeVersion, errorCorrectionLevel: ErrorCorrectionLevel): number;
    /** @private */
    getBinaryDataCapacity(version: QRCodeVersion, errorCorrectionLevel: ErrorCorrectionLevel): number;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/qrcode/qr-code-util.d.ts
/**
 * Qrcode used to calculate the Qrcode control
 */
export  class QRCode {
    private mVersion;
    private mInputMode;
    private validInput;
    /**
     * Total bits required in mixing mode.
     */
    private totalBits;
    /**
     * Holds the data of Function Pattern.
     */
    private mModuleValue;
    private mDataAllocationValues;
    private mQrBarcodeValues;
    /**
     * Set version for mixing mode.
     */
    private mixVersionERC;
    /**
     * Data to be currently encoded in Mixing Mode
     */
    private mixExecutablePart;
    /**
     * Count of mixing mode blocks.
     */
    private mixDataCount;
    /**
     * Holds the Number of Modules.
     */
    private mNoOfModules;
    /**
     * Check if User Mentioned Mode
     */
    private mIsUserMentionedMode;
    private chooseDefaultMode;
    /** @private */
    text: string;
    private mixRemainingPart;
    private isXdimension;
    private mXDimension;
    /** @private */
    /** @private */
    XDimension: number;
    private inputMode;
    /** @private */
    /** @private */
    version: QRCodeVersion;
    private mIsEci;
    /** @private */
    mIsUserMentionedErrorCorrectionLevel: boolean;
    private isSvgMode;
    private mEciAssignmentNumber;
    /** @private */
    mIsUserMentionedVersion: boolean;
    /** @private */
    mErrorCorrectionLevel: ErrorCorrectionLevel;
    private textList;
    private mode;
    private getBaseAttributes;
    private getInstance;
    private drawImage;
    /** @private */
    draw(char: string, canvas: HTMLElement, height: number, width: number, margin?: MarginModel, displayText?: DisplayTextModel, mode?: boolean, foreColor?: string): boolean;
    private drawText;
    private drawDisplayText;
    private generateValues;
    /**
     * Draw the PDP in the given location
     * @param x - The x co-ordinate.
     * @param y - The y co-ordinate.
     */
    private drawPDP;
    /**
     * Draw the Timing Pattern
     */
    private drawTimingPattern;
    private initialize;
    /**
     * Adds quietzone to the QR Barcode.
     */
    private addQuietZone;
    /**
     * Draw the Format Information
     */
    private drawFormatInformation;
    /**
     * Allocates the Encoded Data and then Mask
     * @param Data - Encoded Data
     */
    private dataAllocationAndMasking;
    /**
     * Allocates Format and Version Information
     */
    private allocateFormatAndVersionInformation;
    /**
     * Draw the Alignment Pattern in the given location
     * @param x - The x co-ordinate
     * @param y - The y co-ordinate
     */
    private drawAlignmentPattern;
    /**
     * Gets the Allignment pattern coordinates of the current version.
     */
    private getAlignmentPatternCoOrdinates;
    /**
     * Encode the Input Data
     */
    private encodeData;
    /**
     * Converts string value to Boolean
     * @param numberInString - The String value
     * @param noOfBits - Number of Bits
     */
    private stringToBoolArray;
    /**
     * Converts Integer value to Boolean
     * @param number - The Integer value
     * @param noOfBits - Number of Bits
     */
    private intToBoolArray;
    /**
     * Splits the Code words
     * @param ds - The Encoded value Blocks
     * @param blk - Index of Block Number
     * @param count - Length of the Block
     */
    private splitCodeWord;
    /**
     * Creates the Blocks
     * @param encodeData - The Encoded value.
     * @param noOfBlocks - Number of Blocks.
     */
    private createBlocks;
}
/** @private */
export  class ModuleValue {
    isBlack: boolean;
    isFilled: boolean;
    isPdp: boolean;
    constructor();
}
//node_modules/@syncfusion/ej2-barcode-generator/src/qrcode/qr-error-correction.d.ts
/**
 * Qrcode used to calculate the Qrcode control
 */
export  class ErrorCorrectionCodewords {
    /**
     * Holds the length
     */
    private mLength;
    /**
     * Holds the Error Correction Code Word
     */
    private eccw;
    /**
     * Holds the databits
     */
    private databits;
    /**
     * Holds the Data Code word
     */
    private mDataCodeWord;
    /**
     * Holds G(x)
     */
    private gx;
    /**
     * Holds all the values of Alpha
     */
    private alpha;
    /**
     * Holds the Decimal value
     */
    private decimalValue;
    /**
     * Holds the values of QR Barcode
     */
    private mQrBarcodeValues;
    /**
     * Sets and Gets the Data code word
     */
    /** @private */
    DC: string[];
    /**
     * Sets and Gets the DataBits
     */
    /** @private */
    DataBits: number;
    /**
     * Sets and Gets the Error Correction Code Words
     */
    /** @private */
    Eccw: number;
    /**
     * Initializes Error correction code word
     */
    constructor(version: QRCodeVersion, correctionLevel: ErrorCorrectionLevel);
    /**
     * Gets the Error correction code word
     */
    /** @private */
    getErcw(): string[];
    /**
     * Convert to decimal
     * @param inString - is a binary values.
     */
    private toDecimal;
    /**
     * Convert decimal to binary.
     */
    private toBinary;
    /**
     * Polynomial division
     */
    private divide;
    private xORPolynoms;
    private multiplyGeneratorPolynomByLeadterm;
    private convertToDecNotation;
    private convertToAlphaNotation;
    private findLargestExponent;
    private getIntValFromAlphaExp;
    /**
     * Find the element in the alpha
     */
    private findElement;
    /**
     * Gets g(x) of the element
     */
    private getElement;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/qrcode/qrcode-model.d.ts
/**
 * Interface for a class QRCodeGenerator
 */
export interface QRCodeGeneratorModel extends base.ComponentModel{
    /**
     * Defines the height of the QR code model.
     * @default '100%'
     */
    height?: string | number;
    /**
     * Defines the width of the QR code model.
     * @default '100%'
     */
    width?: string | number;
    /**
     * Defines the QR code rendering mode.
     * * SVG - Renders the bar-code objects as SVG elements
     * * Canvas - Renders the bar-code in a canvas
     * @default 'SVG'
     */
    mode?: RenderingMode;
    /**
     * Defines the xDimension of the QR code model.
     */
    xDimension?: number;
    /**
     * Defines the error correction level of the QR code.
     * @blazorDefaultValueIgnore
     * @aspDefaultValueIgnore
     * @aspNumberEnum 
     * @blazorNumberEnum
     * @default undefined
     */
    errorCorrectionLevel?: ErrorCorrectionLevel;
    /**
     * Defines the margin properties for the QR code.
     * @default ''
     */
    margin?: MarginModel;
    /**
     * Defines the background color of the QR code.
     * @default 'white'
     */
    backgroundColor?: string;
    /**
     * Triggers if you enter any invalid character.
     * @event
     */
    invalid?: base.EmitType<Object>;
    /**
     * Defines the forecolor of the QR code.
     * @default 'black'
     */
    foreColor?: string;
    /**
     * Defines the text properties for the QR code.
     * @default ''
     */
    displayText?: DisplayTextModel;
    /**
     * * Defines the version of the QR code.
     * @aspDefaultValueIgnore
     * @blazorNumberEnum
     * @blazorDefaultValueIgnore
     * @aspNumberEnum 
     * @default undefined
     */
    version?: QRCodeVersion;
    /**
     * Defines the type of barcode to be rendered.
     * @default undefined
     */
    value?: string;
}
//node_modules/@syncfusion/ej2-barcode-generator/src/qrcode/qrcode.d.ts
/**
 * Represents the Qrcode control
 * ```
 */
export  class QRCodeGenerator extends base.Component<HTMLElement> implements base.INotifyPropertyChanged {
    /**
     * Constructor for creating the widget
     */
    constructor(options?: QRCodeGeneratorModel, element?: HTMLElement | string);
    /**
     * Defines the height of the QR code model.
     * @default '100%'
     */
    height: string | number;
    /**
     * Defines the width of the QR code model.
     * @default '100%'
     */
    width: string | number;
    /**
     * Defines the QR code rendering mode.
     * * SVG - Renders the bar-code objects as SVG elements
     * * Canvas - Renders the bar-code in a canvas
     * @default 'SVG'
     */
    mode: RenderingMode;
    /**
     * Defines the xDimension of the QR code model.
     */
    xDimension: number;
    /**
     * Defines the error correction level of the QR code.
     * @blazorDefaultValueIgnore
     * @aspDefaultValueIgnore
     * @aspNumberEnum
     * @blazorNumberEnum
     * @default undefined
     */
    errorCorrectionLevel: ErrorCorrectionLevel;
    /**
     * Defines the margin properties for the QR code.
     * @default ''
     */
    margin: MarginModel;
    /**
     * Defines the background color of the QR code.
     * @default 'white'
     */
    backgroundColor: string;
    /**
     * Triggers if you enter any invalid character.
     * @event
     */
    invalid: base.EmitType<Object>;
    /**
     * Defines the forecolor of the QR code.
     * @default 'black'
     */
    foreColor: string;
    /**
     * Defines the text properties for the QR code.
     * @default ''
     */
    displayText: DisplayTextModel;
    /**
     * * Defines the version of the QR code.
     * @aspDefaultValueIgnore
     * @blazorNumberEnum
     * @blazorDefaultValueIgnore
     * @aspNumberEnum
     * @default undefined
     */
    version: QRCodeVersion;
    private widthChange;
    private heightChange;
    private isSvgMode;
    private barcodeRenderer;
    /**
     * Defines the type of barcode to be rendered.
     * @default undefined
     */
    value: string;
    /** @private */
    localeObj: base.L10n;
    /** @private */
    private defaultLocale;
    private barcodeCanvas;
    /**
     * Renders the barcode control with nodes and connectors
     */
    render(): void;
    private triggerEvent;
    private renderElements;
    private setCulture;
    private getElementSize;
    private initialize;
    protected preRender(): void;
    /**
     * Get the properties to be maintained in the persisted state.
     * @return {string}
     */
    getPersistData(): string;
    /**
     * Returns the module name of the barcode
     */
    getModuleName(): string;
    /**
     * Destroys the barcode control
     */
    destroy(): void;
    private initializePrivateVariables;
    onPropertyChanged(newProp: QRCodeGeneratorModel, oldProp: QRCodeGeneratorModel): void;
}
 }
export namespace base { 

//node_modules/@syncfusion/ej2-base/src/ajax.d.ts
/**
 * Ajax class provides ability to make asynchronous HTTP request to the server
 * ```typescript
 *   var ajax = new Ajax("index.html", "GET", true);
 *   ajax.send().then(
 *               function (value) {
 *                   console.log(value);
 *               },
 *               function (reason) {
 *                   console.log(reason);
 *               });
 * ```
 */
export  class Ajax {
    /**
     * Specifies the URL to which request to be sent.
     * @default null
     */
    url: string;
    /**
     * Specifies which HTTP request method to be used. For ex., GET, POST
     * @default GET
     */
    type: string;
    /**
     * Specifies the data to be sent.
     * @default null
     */
    data: string | Object;
    /**
     * A boolean value indicating whether the request should be sent asynchronous or not.
     * @default true
     */
    mode: boolean;
    /**
     * Specifies the callback for creating the XMLHttpRequest object.
     * @default null
     */
    httpRequest: XMLHttpRequest;
    /**
     * A boolean value indicating whether to ignore the promise reject.
     * @private
     * @default true
     */
    emitError: boolean;
    private options;
    onLoad: (this: XMLHttpRequest, ev: Event) => Object;
    onProgress: (this: XMLHttpRequest, ev: Event) => Object;
    onError: (this: XMLHttpRequest, ev: Event) => Object;
    onAbort: (this: XMLHttpRequest, ev: Event) => Object;
    onUploadProgress: (this: XMLHttpRequest, ev: Event) => Object;
    private contentType;
    private dataType;
    /**
     * Constructor for Ajax class
     * @param  {string|Object} options?
     * @param  {string} type?
     * @param  {boolean} async?
     * @returns defaultType
     */
    constructor(options?: string | Object, type?: string, async?: boolean, contentType?: string);
    /**
     * Send the request to server.
     * @param {any} data - To send the user data
     * @return {Promise}
     */
    send(data?: string | Object): Promise<Ajax>;
    /**
     * Specifies the callback function to be triggered before sending request to sever.
     * This can be used to modify the XMLHttpRequest object before it is sent.
     * @event
     */
    beforeSend: Function;
    /**
     * Specifies callback function to be triggered after XmlHttpRequest is succeeded.
     * The callback will contain server response as the parameter.
     * @event
     */
    onSuccess: Function;
    /**
     * Triggers when XmlHttpRequest is failed.
     * @event
     */
    onFailure: Function;
    private successHandler;
    private failureHandler;
    private stateChange;
    /**
     * To get the response header from XMLHttpRequest
     * @param  {string} key Key to search in the response header
     * @returns {string}
     */
    getResponseHeader(key: string): string;
}
export interface HeaderOptions {
    readyState?: number;
    getResponseHeader?: Function;
    setRequestHeader?: Function;
    overrideMimeType?: Function;
}
/**
 * Specifies the ajax beforeSend event arguments
 * @event
 */
export interface BeforeSendEventArgs {
    /** To cancel the ajax request in beforeSend */
    cancel?: boolean;
    /** Returns the request sent from the client end */
    httpRequest?: XMLHttpRequest;
}
//node_modules/@syncfusion/ej2-base/src/animation-model.d.ts
/**
 * Interface for a class Animation
 */
export interface AnimationModel {
    /**
     * Specify the type of animation
     * @default : 'FadeIn';
     */
    name?: Effect;
    /**
     * Specify the duration to animate
     * @default : 400;
     */
    duration?: number;
    /**
     * Specify the animation timing function
     * @default : 'ease';
     */
    timingFunction?: string;
    /**
     * Specify the delay to start animation
     * @default : 0;
     */
    delay?: number;
    /**
     * Triggers when animation is in-progress
     * @event
     */
    progress?: EmitType<AnimationOptions>;
    /**
     * Triggers when the animation is started
     * @event
     */
    begin?: EmitType<AnimationOptions>;
    /**
     * Triggers when animation is completed
     * @event
     */
    end?: EmitType<AnimationOptions>;
    /**
     * Triggers when animation is failed due to any scripts
     * @event
     */
    fail?: EmitType<AnimationOptions>;
}
//node_modules/@syncfusion/ej2-base/src/animation.d.ts
/**
 * Animation effect names
 */
export  type Effect = 'FadeIn' | 'FadeOut' | 'FadeZoomIn' | 'FadeZoomOut' | 'FlipLeftDownIn' | 'FlipLeftDownOut' | 'FlipLeftUpIn' | 'FlipLeftUpOut' | 'FlipRightDownIn' | 'FlipRightDownOut' | 'FlipRightUpIn' | 'FlipRightUpOut' | 'FlipXDownIn' | 'FlipXDownOut' | 'FlipXUpIn' | 'FlipXUpOut' | 'FlipYLeftIn' | 'FlipYLeftOut' | 'FlipYRightIn' | 'FlipYRightOut' | 'SlideBottomIn' | 'SlideBottomOut' | 'SlideDown' | 'SlideLeft' | 'SlideLeftIn' | 'SlideLeftOut' | 'SlideRight' | 'SlideRightIn' | 'SlideRightOut' | 'SlideTopIn' | 'SlideTopOut' | 'SlideUp' | 'ZoomIn' | 'ZoomOut';
/**
 * The Animation framework provide options to animate the html DOM elements
 * ```typescript
 *   let animeObject = new Animation({
 *      name: 'SlideLeftIn',
 *      duration: 1000
 *   });
 *   animeObject.animate('#anime1');
 *   animeObject.animate('#anime2', { duration: 500 });
 * ```
 */
export  class Animation extends Base<HTMLElement> implements INotifyPropertyChanged {
    /**
     * Specify the type of animation
     * @default : 'FadeIn';
     */
    name: Effect;
    /**
     * Specify the duration to animate
     * @default : 400;
     */
    duration: number;
    /**
     * Specify the animation timing function
     * @default : 'ease';
     */
    timingFunction: string;
    /**
     * Specify the delay to start animation
     * @default : 0;
     */
    delay: number;
    /**
     * Triggers when animation is in-progress
     * @event
     */
    progress: EmitType<AnimationOptions>;
    /**
     * Triggers when the animation is started
     * @event
     */
    begin: EmitType<AnimationOptions>;
    /**
     * Triggers when animation is completed
     * @event
     */
    end: EmitType<AnimationOptions>;
    /**
     * Triggers when animation is failed due to any scripts
     * @event
     */
    fail: EmitType<AnimationOptions>;
    /**
     * @private
     */
    easing: {
        [key: string]: string;
    };
    constructor(options: AnimationModel);
    /**
     * Applies animation to the current element.
     * @param {string | HTMLElement} element - Element which needs to be animated.
     * @param {AnimationModel} options - Overriding default animation settings.
     * @return {void}
     */
    animate(element: string | HTMLElement, options?: AnimationModel): void;
    /**
     * Stop the animation effect on animated element.
     * @param {HTMLElement} element - Element which needs to be stop the animation.
     * @param {AnimationOptions} model - Handling the animation model at stop function.
     * @return {void}
     */
    static stop(element: HTMLElement, model?: AnimationOptions): void;
    /**
     * Set delay to animation element
     * @param {AnimationModel} model
     * @returns {void}
     */
    private static delayAnimation;
    /**
     * Triggers animation
     * @param {AnimationModel} model
     * @returns {void}
     */
    private static applyAnimation;
    /**
     * Returns Animation Model
     * @param {AnimationModel} options
     * @returns {AnimationModel}
     */
    private getModel;
    /**
     * @private
     */
    onPropertyChanged(newProp: AnimationModel, oldProp: AnimationModel): void;
    /**
     * Returns module name as animation
     * @private
     */
    getModuleName(): string;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * Animation event argument for progress event handler
 */
export interface AnimationOptions extends AnimationModel {
    /**
     * Get current time-stamp in progress EventHandler
     */
    timeStamp?: number;
    /**
     * Get current animation element in progress EventHandler
     */
    element?: HTMLElement;
}
/**
 * Ripple provides material theme's wave effect when an element is clicked
 * ```html
 * <div id='ripple'></div>
 * <script>
 *   rippleEffect(document.getElementById('ripple'));
 * </script>
 * ```
 * @private
 * @param HTMLElement element - Target element
 * @param RippleOptions rippleOptions - Ripple options .
 */
export  function rippleEffect(element: HTMLElement, rippleOptions?: RippleOptions, done?: Function): () => void;
/**
 * Ripple method arguments to handle ripple effect
 * @private
 */
export interface RippleOptions {
    /**
     * Get selector child elements for ripple effect
     */
    selector?: string;
    /**
     * Get ignore elements to prevent ripple effect
     */
    ignore?: string;
    /**
     * Override the enableRipple method
     */
    rippleFlag?: boolean;
    /**
     * Set ripple effect from center position
     */
    isCenterRipple?: boolean;
    /**
     * Set ripple duration
     */
    duration?: number;
}
export  let isRippleEnabled: boolean;
/**
 * Animation Module provides support to enable ripple effect functionality to Essential JS 2 components.
 * @param {boolean} isRipple Specifies the boolean value to enable or disable ripple effect.
 * @returns {boolean}
 */
export  function enableRipple(isRipple: boolean): boolean;
//node_modules/@syncfusion/ej2-base/src/base.d.ts
export interface DomElements extends HTMLElement {
    ej2_instances: Object[];
}
export interface AngularEventEmitter {
    subscribe?: (generatorOrNext?: any, error?: any, complete?: any) => any;
}
export  type EmitType<T> = AngularEventEmitter & ((arg?: T, ...rest: any[]) => void);
/**
 * Base library module is common module for Framework modules like touch,keyboard and etc.,
 * @private
 */
export  abstract class Base<ElementType extends HTMLElement> {
    element: ElementType;
    isDestroyed: boolean;
    protected isProtectedOnChange: boolean;
    protected properties: {
        [key: string]: Object;
    };
    protected changedProperties: {
        [key: string]: Object;
    };
    protected oldProperties: {
        [key: string]: Object;
    };
    protected refreshing: boolean;
    protected finalUpdate: Function;
    protected modelObserver: Observer;
    protected childChangedProperties: {
        [key: string]: Object;
    };
    protected abstract getModuleName(): string;
    protected abstract onPropertyChanged(newProperties: Object, oldProperties?: Object): void;
    /** Property base section */
    /**
     * Function used to set bunch of property at a time.
     * @private
     * @param  {Object} prop - JSON object which holds components properties.
     * @param  {boolean} muteOnChange? - Specifies to true when we set properties.
     */
    setProperties(prop: Object, muteOnChange?: boolean): void;
    /**
     * Calls for child element data bind
     * @param {Object} obj
     * @param {Object} parent
     * @returns {void}
     */
    private static callChildDataBind;
    protected clearChanges(): void;
    /**
     * Bind property changes immediately to components
     */
    dataBind(): void;
    protected saveChanges(key: string, newValue: string, oldValue: string): void;
    /** Event Base Section */
    /**
     * Adds the handler to the given event listener.
     * @param {string} eventName - A String that specifies the name of the event
     * @param {Function} listener - Specifies the call to run when the event occurs.
     * @return {void}
     */
    addEventListener(eventName: string, handler: Function): void;
    /**
     * Removes the handler from the given event listener.
     * @param {string} eventName - A String that specifies the name of the event to remove
     * @param {Function} listener - Specifies the function to remove
     * @return {void}
     */
    removeEventListener(eventName: string, handler: Function): void;
    /**
     * Triggers the handlers in the specified event.
     * @private
     * @param {string} eventName - Specifies the event to trigger for the specified component properties.
     * Can be a custom event, or any of the standard events.
     * @param {Event} eventProp - Additional parameters to pass on to the event properties
     * @param {Function} successHandler - this function will invoke after event successfully triggered
     * @param {Function} errorHandler - this function will invoke after event if it failured to call.
     * @return {void}
     */
    trigger(eventName: string, eventProp?: Object, successHandler?: Function, errorHandler?: Function): void | object;
    /**
     * Base constructor accept options and element
     */
    constructor(options: Object, element: ElementType | string);
    /**
     * To maintain instance in base class
     */
    protected addInstance(): void;
    /**
     * To remove the instance from the element
     */
    protected destroy(): void;
}
/**
 * Global function to get the component instance from the rendered element.
 * @param elem Specifies the HTMLElement or element id string.
 * @param comp Specifies the component module name or Component.
 */
export  function getComponent<T>(elem: HTMLElement | string, comp: string | any | T): T;
//node_modules/@syncfusion/ej2-base/src/browser.d.ts
/**
 * Get configuration details for Browser
 * @private
 */
export  class Browser {
    private static uA;
    private static extractBrowserDetail;
    /**
     * To get events from the browser
     * @param {string} event - type of event triggered.
     * @returns {Boolean}
     */
    private static getEvent;
    /**
     * To get the Touch start event from browser
     * @returns {string}
     */
    private static getTouchStartEvent;
    /**
     * To get the Touch end event from browser
     * @returns {string}
     */
    private static getTouchEndEvent;
    /**
     * To get the Touch move event from browser
     * @returns {string}
     */
    private static getTouchMoveEvent;
    /**
     * To cancel the touch event from browser
     * @returns {string}
     */
    private static getTouchCancelEvent;
    /**
     * To get the value based on provided key and regX
     * @param {string} key
     * @param {RegExp} regX
     * @returns {Object}
     */
    private static getValue;
    /**
     * Property specifies the userAgent of the browser. Default userAgent value is based on the browser.
     * Also we can set our own userAgent.
     */
    static userAgent: string;
    /**
     * Property is to get the browser information like Name, Version and Language
     * @returns BrowserInfo
     */
    static readonly info: BrowserInfo;
    /**
     * Property is to get whether the userAgent is based IE.
     */
    static readonly isIE: Boolean;
    /**
     * Property is to get whether the browser has touch support.
     */
    static readonly isTouch: Boolean;
    /**
     * Property is to get whether the browser has Pointer support.
     */
    static readonly isPointer: Boolean;
    /**
     * Property is to get whether the browser has MSPointer support.
     */
    static readonly isMSPointer: Boolean;
    /**
     * Property is to get whether the userAgent is device based.
     */
    static readonly isDevice: Boolean;
    /**
     * Property is to get whether the userAgent is IOS.
     */
    static readonly isIos: Boolean;
    /**
     * Property is to get whether the userAgent is Ios7.
     */
    static readonly isIos7: Boolean;
    /**
     * Property is to get whether the userAgent is Android.
     */
    static readonly isAndroid: Boolean;
    /**
     * Property is to identify whether application ran in web view.
     */
    static readonly isWebView: Boolean;
    /**
     * Property is to get whether the userAgent is Windows.
     */
    static readonly isWindows: Boolean;
    /**
     * Property is to get the touch start event. It returns event name based on browser.
     */
    static readonly touchStartEvent: string;
    /**
     * Property is to get the touch move event. It returns event name based on browser.
     */
    static readonly touchMoveEvent: string;
    /**
     * Property is to get the touch end event. It returns event name based on browser.
     */
    static readonly touchEndEvent: string;
    /**
     * Property is to cancel the touch end event.
     */
    static readonly touchCancelEvent: string;
}
export interface BrowserDetails {
    isAndroid?: Boolean;
    isDevice?: Boolean;
    isIE?: Boolean;
    isIos?: Boolean;
    isIos7?: Boolean;
    isMSPointer?: Boolean;
    isPointer?: Boolean;
    isTouch?: Boolean;
    isWebView?: Boolean;
    isWindows?: Boolean;
    info?: BrowserInfo;
    touchStartEvent?: string;
    touchMoveEvent?: string;
    touchEndEvent?: string;
    touchCancelEvent?: string;
}
export interface BrowserInfo {
    name?: string;
    version?: string;
    culture?: {
        name?: string;
        language?: string;
    };
}
//node_modules/@syncfusion/ej2-base/src/child-property.d.ts
/**
 * To detect the changes for inner properties.
 * @private
 */
export  class ChildProperty<T> {
    private parentObj;
    private controlParent;
    private propName;
    private isParentArray;
    protected properties: {
        [key: string]: Object;
    };
    protected changedProperties: {
        [key: string]: Object;
    };
    protected childChangedProperties: {
        [key: string]: Object;
    };
    protected oldProperties: {
        [key: string]: Object;
    };
    protected finalUpdate: Function;
    private callChildDataBind;
    constructor(parent: T, propName: string, defaultValue: Object, isArray?: boolean);
    /**
     * Updates the property changes
     * @param {boolean} val
     * @param {string} propName
     * @returns {void}
     */
    private updateChange;
    /**
     * Updates time out duration
     */
    private updateTimeOut;
    /**
     * Clears changed properties
     */
    private clearChanges;
    /**
     * Set property changes
     * @param {Object} prop
     * @param {boolean} muteOnChange
     * {void}
     */
    protected setProperties(prop: Object, muteOnChange: boolean): void;
    /**
     * Binds data
     */
    protected dataBind(): void;
    /**
     * Saves changes to newer values
     * @param {string} key
     * @param {Object} newValue
     * @param {Object} oldValue
     * @returns {void}
     */
    protected saveChanges(key: string, newValue: Object, oldValue: Object): void;
}
//node_modules/@syncfusion/ej2-base/src/component-model.d.ts
/**
 * Interface for a class Component
 */
export interface ComponentModel {
    /**
     * Enable or disable persisting component's state between page reloads.
     * @default false
     */
    enablePersistence?: boolean;
    /**
     * Enable or disable rendering component in right to left direction.
     * @default false
     */
    enableRtl?: boolean;
    /**
     * Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
     * @default ''
     */
    locale?: string;
}
//node_modules/@syncfusion/ej2-base/src/component.d.ts
/**
 * Base class for all Essential JavaScript components
 */
export  abstract class Component<ElementType extends HTMLElement> extends Base<ElementType> {
    element: ElementType;
    private randomId;
    /**
     * Enable or disable persisting component's state between page reloads.
     * @default false
     */
    enablePersistence: boolean;
    /**
     * Enable or disable rendering component in right to left direction.
     * @default false
     */
    enableRtl: boolean;
    /**
     * Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
     * @default ''
     */
    locale: string;
    /**
     * string template option for Blazor template rendering
     * @private
     */
    isStringTemplate: boolean;
    protected needsID: boolean;
    protected moduleLoader: ModuleLoader;
    protected localObserver: Observer;
    protected abstract render(): void;
    protected abstract preRender(): void;
    protected abstract getPersistData(): string;
    protected injectedModules: Function[];
    protected requiredModules(): ModuleDeclaration[];
    protected isRendered: boolean;
    /**
     * Destroys the sub modules while destroying the widget
     */
    protected destroy(): void;
    /**
     * Applies all the pending property changes and render the component again.
     */
    refresh(): void;
    /**
     * Appends the control within the given HTML element
     * @param {string | HTMLElement} selector - Target element where control needs to be appended
     */
    appendTo(selector?: string | HTMLElement): void;
    /**
     * It is used to process the post rendering functionalities to a component.
     */
    protected renderComplete(wrapperElement?: Node): void;
    /**
     * When invoked, applies the pending property changes immediately to the component.
     */
    dataBind(): void;
    /**
     * Attach one or more  event handler to the current component context.
     * It is used for internal handling event internally within the component only.
     * @param {BoundOptions[]| string} event - It is  optional type either to  Set the collection of event list or the eventName.
     * @param {Function} handler - optional parameter Specifies the handler to run when the event occurs
     * @param {Object} context - optional parameter Specifies the context to be bind in the handler.
     * @return {void}
     * @private
     */
    on(event: BoundOptions[] | string, handler?: Function, context?: Object): void;
    /**
     * To remove one or more event handler that has been attached with the on() method.
     * @param {BoundOptions[]| string} event - It is  optional type either to  Set the collection of event list or the eventName.
     * @param {Function} handler - optional parameter Specifies the function to run when the event occurs
     * @return {void}
     * @private
     */
    off(event: BoundOptions[] | string, handler?: Function): void;
    /**
     * To notify the handlers in the specified event.
     * @param {string} property - Specifies the event to be notify.
     * @param {Object} argument - Additional parameters to pass while calling the handler.
     * @return {void}
     * @private
     */
    notify(property: string, argument: Object): void;
    /**
     * Get injected modules
     * @private
     */
    getInjectedModules(): Function[];
    /**
     * Dynamically injects the required modules to the component.
     */
    static Inject(...moduleList: Function[]): void;
    /**
     * Initialize the constructor for component base
     */
    constructor(options?: Object, selector?: string | ElementType);
    /**
     * This is a instance method to create an element.
     * @private
     */
    createElement: (tag: string, prop?: {
        id?: string;
        className?: string;
        innerHTML?: string;
        styles?: string;
        attrs?: {
            [key: string]: string;
        };
    }) => HTMLElement;
    private injectModules;
    private detectFunction;
    private mergePersistData;
    private setPersistData;
    protected clearTemplate(templateName?: string[], index?: any): void;
    private getUniqueID;
    private pageID;
    private isHistoryChanged;
    protected addOnPersist(options: string[]): string;
    protected getActualProperties<T>(obj: T): T;
    protected ignoreOnPersist(options: string[]): string;
    protected iterateJsonProperties(obj: {
        [key: string]: Object;
    }, ignoreList: string[]): Object;
}
//node_modules/@syncfusion/ej2-base/src/dom.d.ts
/**
 * Function to create Html element.
 * @param tagName - Name of the tag, id and class names.
 * @param properties - Object to set properties in the element.
 * @param properties.id - To set the id to the created element.
 * @param properties.className - To add classes to the element.
 * @param properties.innerHTML - To set the innerHTML to element.
 * @param properties.styles - To set the some custom styles to element.
 * @param properties.attrs - To set the attributes to element.
 * @private
 */
export  function createElement(tagName: string, properties?: {
    id?: string;
    className?: string;
    innerHTML?: string;
    styles?: string;
    attrs?: {
        [key: string]: string;
    };
}): HTMLElement;
/**
 * The function used to add the classes to array of elements
 * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes
 * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class
 * @private
 */
export  function addClass(elements: Element[] | NodeList, classes: string | string[]): Element[] | NodeList;
/**
 * The function used to add the classes to array of elements
 * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes
 * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class
 * @private
 */
export  function removeClass(elements: Element[] | NodeList, classes: string | string[]): Element[] | NodeList;
/**
 * The function used to check element is visible or not.
 * @param  {Element|Node} element - An element the need to check visibility
 * @private
 */
export  function isVisible(element: Element | Node): Boolean;
/**
 * The function used to insert an array of elements into a first of the element.
 * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.
 * @param  {Element} toElement - An element that is going to prepend.
 * @private
 */
export  function prepend(fromElements: Element[] | NodeList, toElement: Element, isEval?: Boolean): Element[] | NodeList;
/**
 * The function used to insert an array of elements into last of the element.
 * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.
 * @param  {Element} toElement - An element that is going to prepend.
 * @private
 */
export  function append(fromElements: Element[] | NodeList, toElement: Element, isEval?: Boolean): Element[] | NodeList;
/**
 * The function used to remove the element from the
 * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom
 * @private
 */
export  function detach(element: Element | Node | HTMLElement): Element;
/**
 * The function used to remove the element from Dom also clear the bounded events
 * @param  {Element|Node|HTMLElement} element - An element remove from the Dom
 * @private
 */
export  function remove(element: Element | Node | HTMLElement): void;
/**
 * The function helps to set multiple attributes to an element
 * @param  {Element|Node} element - An element that need to set attributes.
 * @param  {{[key:string]:string}} attributes - JSON Object that is going to as attributes.
 * @private
 */
export  function attributes(element: Element | Node, attributes: {
    [key: string]: string;
}): Element;
/**
 * The function selects the element from giving context.
 * @param  {string} selector - Selector string need fetch element from the
 * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.
 * @private
 */
export  function select(selector: string, context?: Document | Element): Element;
/**
 * The function selects an array of element from the given context.
 * @param  {string} selector - Selector string need fetch element from the
 * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.
 * @private
 */
export  function selectAll(selector: string, context?: Document | Element): HTMLElement[];
/**
 * Returns single closest parent element based on class selector.
 * @param  {Element} element - An element that need to find the closest element.
 * @param  {string} selector - A classSelector of closest element.
 * @private
 */
export  function closest(element: Element | Node, selector: string): Element;
/**
 * Returns all sibling elements of the given element.
 * @param  {Element|Node} element - An element that need to get siblings.
 * @private
 */
export  function siblings(element: Element | Node): Element[];
/**
 * set the value if not exist. Otherwise set the existing value
 * @param  {HTMLElement} element - An element to which we need to set value.
 * @param  {string} property - Property need to get or set.
 * @param  {string} value - value need to set.
 * @private
 */
export  function getAttributeOrDefault(element: HTMLElement, property: string, value: string): string;
/**
 * Set the style attributes to Html element.
 * @param {HTMLElement} element - Element which we want to set attributes
 * @param {any} attrs - Set the given attributes to element
 * @return {void}
 * @private
 */
export  function setStyleAttribute(element: HTMLElement, attrs: {
    [key: string]: Object;
}): void;
/**
 * Method for add and remove classes to a dom element.
 * @param {Element} element - Element for add and remove classes
 * @param {string[]} addClasses - List of classes need to be add to the element
 * @param {string[]} removeClasses - List of classes need to be remove from the element
 * @return {void}
 * @private
 */
export  function classList(element: Element, addClasses: string[], removeClasses: string[]): void;
/**
 * Method to check whether the element matches the given selector.
 * @param {Element} element - Element to compare with the selector.
 * @param {string} selector - String selector which element will satisfy.
 * @return {void}
 * @private
 */
export  function matches(element: Element, selector: string): boolean;
//node_modules/@syncfusion/ej2-base/src/draggable-model.d.ts
/**
 * Interface for a class Position
 */
export interface PositionModel {
    /**
     * Specifies the left position of cursor in draggable.
     */
    left?: number;
    /**
     * Specifies the left position of cursor in draggable.
     */
    top?: number;
}
/**
 * Interface for a class Draggable
 */
export interface DraggableModel {
    /**
     * Defines the distance between the cursor and the draggable element.
     */
    cursorAt?: PositionModel;
    /**
     * If `clone` set to true, drag operations are performed in duplicate element of the draggable element. 
     * @default true
     */
    clone?: boolean;
    /**
     * Defines the parent  element in which draggable element movement will be restricted.
     */
    dragArea?: HTMLElement | string;
    /**
     * Defines the dragArea is scrollable or not.
     */
    isDragScroll?: boolean;
    /**
     * Specifies the callback function for drag event.
     * @event
     */
    drag?: Function;
    /**
     * Specifies the callback function for dragStart event.
     * @event
     */
    dragStart?: Function;
    /**
     * Specifies the callback function for dragStop event.
     * @event
     */
    dragStop?: Function;
    /**
     * Defines the minimum distance draggable element to be moved to trigger the drag operation.
     * @default 1
     */
    distance?: number;
    /**
     * Defines the child element selector which will act as drag handle.
     */
    handle?: string;
    /**
     * Defines the child element selector which will prevent dragging of element.
     */
    abort?: string;
    /**
     * Defines the callback function for customizing the cloned  element.
     */
    helper?: Function;
    /**
     * Defines the scope value to group sets of draggable and droppable items. 
     * A draggable with the same scope value will be accepted by the droppable.
     */
    scope?: string;
    /**
     * Specifies the dragTarget by which the clone element is positioned if not given current context element will be considered.
     * @private
     */
    dragTarget?: string;
    /**
     * Defines the axis to limit the draggable element drag path.The possible axis path values are   
     * * `x` - Allows drag movement in horizontal direction only. 
     * * `y` - Allows drag movement in vertical direction only.
     */
    axis?: DragDirection;
    /**
     * Defines the function to change the position value.
     * @private
     */
    queryPositionInfo?: Function;
    /**
     * Defines whether the drag clone element will be split form the cursor pointer.
     * @private
     */
    enableTailMode?: boolean;
    /**
     * Defines whether to skip the previous drag movement comparison.
     * @private
     */
    skipDistanceCheck?: boolean;
    /**
     * @private
     */
    preventDefault?: boolean;
    /**
     * Defines whether to enable autoscroll on drag movement of draggable element.
     * enableAutoScroll
     * @private
     */
    enableAutoScroll?: boolean;
    /**
     * Defines whether to enable taphold  on mobile devices.
     * enableAutoScroll
     * @private
     */
    enableTapHold?: boolean;
    /**
     * Specifies the time delay for tap hold.
     * @default 750
     *  @private
     */
    tapHoldThreshold?: number;
}
//node_modules/@syncfusion/ej2-base/src/draggable.d.ts
/**
 * Specifies the Direction in which drag movement happen.
 */
export  type DragDirection = 'x' | 'y';
/**
 * Specifies the position coordinates
 */
export  class Position extends ChildProperty<Position> {
    /**
     * Specifies the left position of cursor in draggable.
     */
    left: number;
    /**
     * Specifies the left position of cursor in draggable.
     */
    top: number;
}
/**
 * Coordinates for element position
 * @private
 */
export interface Coordinates {
    /**
     * Defines the x Coordinate of page.
     */
    pageX: number;
    /**
     * Defines the y Coordinate of page.
     */
    pageY: number;
    /**
     * Defines the x Coordinate of client.
     */
    clientX: number;
    /**
     * Defines the y Coordinate of client.
     */
    clientY: number;
}
/**
 * Interface to specify the drag data in the droppable.
 */
export interface DropInfo {
    /**
     * Specifies the current draggable element
     */
    draggable?: HTMLElement;
    /**
     * Specifies the current helper element.
     */
    helper?: HTMLElement;
    /**
     * Specifies the drag target element
     */
    draggedElement?: HTMLElement;
}
export interface DropObject {
    target: HTMLElement;
    instance: DropOption;
}
/**
 * Used to access values
 * @private
 */
export interface DragPosition {
    left?: string;
    top?: string;
}
/**
 * Used for accessing the interface.
 * @private
 */
export interface Instance extends HTMLElement {
    /**
     * Specifies current instance collection in element
     */
    ej2_instances: {
        [key: string]: Object;
    }[];
}
/**
 * Droppable function to be invoked from draggable
 * @private
 */
export interface DropOption {
    /**
     * Used to triggers over function while draggable element is over the droppable element.
     */
    intOver: Function;
    /**
     * Used to triggers out function while draggable element is out of the droppable element.
     */
    intOut: Function;
    /**
     * Used to triggers  out function while draggable element is dropped on the droppable element.
     */
    intDrop: Function;
    /**
     * Specifies the information about the drag element.
     */
    dragData: DropInfo;
    /**
     * Specifies the status of the drag of drag stop calling.
     */
    dragStopCalled: boolean;
}
/**
 * Drag Event arguments
 */
export interface DragEventArgs {
    /**
     * Specifies the actual event.
     */
    event?: MouseEvent & TouchEvent;
    /**
     * Specifies the current drag element.
     */
    element?: HTMLElement;
    /**
     * Specifies the current target element.
     */
    target?: HTMLElement;
}
/**
 * Used for accessing the BlazorEventArgs.
 * @private
 */
export interface BlazorDragEventArgs {
    /**
     * bind draggable element for Blazor Components
     */
    bindEvents: Function;
    /**
     * Draggable element to which draggable events are to be binded in Blazor.
     */
    dragElement: HTMLElement;
}
/**
 * Draggable Module provides support to enable draggable functionality in Dom Elements.
 * ```html
 * <div id='drag'>Draggable</div>
 * <script>
 * var ele = document.getElementById('drag');
 * var drag:Draggable = new Draggable(ele,{
 *     clone:false,
 *     drag: function(e) {
 *      //drag handler code.
 *      },
 *     handle:'.class'
 * });
 * </script>
 * ```
 */
export  class Draggable extends Base<HTMLElement> implements INotifyPropertyChanged {
    /**
     * Defines the distance between the cursor and the draggable element.
     */
    cursorAt: PositionModel;
    /**
     * If `clone` set to true, drag operations are performed in duplicate element of the draggable element.
     * @default true
     */
    clone: boolean;
    /**
     * Defines the parent  element in which draggable element movement will be restricted.
     */
    dragArea: HTMLElement | string;
    /**
     * Defines the dragArea is scrollable or not.
     */
    isDragScroll: boolean;
    /**
     * Specifies the callback function for drag event.
     * @event
     */
    drag: Function;
    /**
     * Specifies the callback function for dragStart event.
     * @event
     */
    dragStart: Function;
    /**
     * Specifies the callback function for dragStop event.
     * @event
     */
    dragStop: Function;
    /**
     * Defines the minimum distance draggable element to be moved to trigger the drag operation.
     * @default 1
     */
    distance: number;
    /**
     * Defines the child element selector which will act as drag handle.
     */
    handle: string;
    /**
     * Defines the child element selector which will prevent dragging of element.
     */
    abort: string;
    /**
     * Defines the callback function for customizing the cloned  element.
     */
    helper: Function;
    /**
     * Defines the scope value to group sets of draggable and droppable items.
     * A draggable with the same scope value will be accepted by the droppable.
     */
    scope: string;
    /**
     * Specifies the dragTarget by which the clone element is positioned if not given current context element will be considered.
     * @private
     */
    dragTarget: string;
    /**
     * Defines the axis to limit the draggable element drag path.The possible axis path values are
     * * `x` - Allows drag movement in horizontal direction only.
     * * `y` - Allows drag movement in vertical direction only.
     */
    axis: DragDirection;
    /**
     * Defines the function to change the position value.
     * @private
     */
    queryPositionInfo: Function;
    /**
     * Defines whether the drag clone element will be split form the cursor pointer.
     * @private
     */
    enableTailMode: boolean;
    /**
     * Defines whether to skip the previous drag movement comparison.
     * @private
     */
    skipDistanceCheck: boolean;
    /**
     * @private
     */
    preventDefault: boolean;
    /**
     * Defines whether to enable autoscroll on drag movement of draggable element.
     * enableAutoScroll
     * @private
     */
    enableAutoScroll: boolean;
    /**
     * Defines whether to enable taphold  on mobile devices.
     * enableAutoScroll
     * @private
     */
    enableTapHold: boolean;
    /**
     * Specifies the time delay for tap hold.
     * @default 750
     *  @private
     */
    tapHoldThreshold: number;
    private target;
    private initialPosition;
    private relativeXPosition;
    private relativeYPosition;
    private margin;
    private offset;
    private position;
    private dragLimit;
    private borderWidth;
    private padding;
    private left;
    private top;
    private width;
    private height;
    private pageX;
    private diffX;
    private prevLeft;
    private prevTop;
    private dragProcessStarted;
    private tapHoldTimer;
    private externalInitialize;
    private diffY;
    private pageY;
    private helperElement;
    private hoverObject;
    private parentClientRect;
    private parentScrollX;
    private parentScrollY;
    droppables: {
        [key: string]: DropInfo;
    };
    constructor(element: HTMLElement, options?: DraggableModel);
    protected bind(): void;
    private static getDefaultPosition;
    private toggleEvents;
    private mobileInitialize;
    private removeTapholdTimer;
    private getScrollableParent;
    private getScrollableValues;
    private initialize;
    private intDragStart;
    private bindDragEvents;
    private elementInViewport;
    private getProcessedPositionValue;
    private calculateParentPosition;
    private intDrag;
    private getDragPosition;
    private getDocumentWidthHeight;
    private intDragStop;
    private intDestroy;
    onPropertyChanged(newProp: DraggableModel, oldProp: DraggableModel): void;
    getModuleName(): string;
    private setDragArea;
    private getProperTargetElement;
    private getMousePosition;
    private getCoordinates;
    private getHelperElement;
    private setGlobalDroppables;
    private checkTargetElement;
    private getDropInstance;
    destroy(): void;
}
//node_modules/@syncfusion/ej2-base/src/droppable-model.d.ts
/**
 * Interface for a class Droppable
 */
export interface DroppableModel {
    /**
     * Defines the selector for draggable element to be accepted by the droppable.
     */
    accept?: string;
    /**
     * Defines the scope value to group sets of draggable and droppable items. 
     * A draggable with the same scope value will only be accepted by the droppable.
     */
    scope?: string;
    /**
     * Specifies the callback function, which will be triggered while drag element is dropped in droppable.
     * @event
     */
    drop?: (args: DropEventArgs) => void;
    /**
     * Specifies the callback function, which will be triggered while drag element is moved over droppable element.
     * @event
     */
    over?: Function;
    /**
     * Specifies the callback function, which will be triggered while drag element is moved out of droppable element.
     * @event
     */
    out?: Function;
}
//node_modules/@syncfusion/ej2-base/src/droppable.d.ts
/**
 * Droppable arguments in drop callback.
 * @private
 */
export interface DropData {
    /**
     * Specifies that current element can be dropped.
     */
    canDrop: boolean;
    /**
     * Specifies target to drop.
     */
    target: HTMLElement;
}
export interface DropEvents extends MouseEvent, TouchEvent {
    dropTarget?: HTMLElement;
}
/**
 * Interface for drop event args
 */
export interface DropEventArgs {
    /**
     * Specifies the original mouse or touch  event arguments.
     */
    event?: MouseEvent & TouchEvent;
    /**
     * Specifies the target element.
     */
    target?: HTMLElement;
    /**
     *  Specifies the dropped element.
     */
    droppedElement?: HTMLElement;
    /**
     * Specifies the dragData
     */
    dragData?: DropInfo;
}
/**
 * Droppable Module provides support to enable droppable functionality in Dom Elements.
 * ```html
 * <div id='drop'>Droppable</div>
 * <script>
 * let ele:HTMLElement = document.getElementById('drop');
 * var drag:Droppable = new Droppable(ele,{
 *     accept:'.drop',
 *     drop: function(e) {
 *      //drop handler code.
 *     }
 * });
 * </script>
 * ```
 */
export  class Droppable extends Base<HTMLElement> implements INotifyPropertyChanged {
    /**
     * Defines the selector for draggable element to be accepted by the droppable.
     */
    accept: string;
    /**
     * Defines the scope value to group sets of draggable and droppable items.
     * A draggable with the same scope value will only be accepted by the droppable.
     */
    scope: string;
    /**
     * Specifies the callback function, which will be triggered while drag element is dropped in droppable.
     * @event
     */
    drop: (args: DropEventArgs) => void;
    /**
     * Specifies the callback function, which will be triggered while drag element is moved over droppable element.
     * @event
     */
    over: Function;
    /**
     * Specifies the callback function, which will be triggered while drag element is moved out of droppable element.
     * @event
     */
    out: Function;
    private mouseOver;
    dragData: {
        [key: string]: DropInfo;
    };
    constructor(element: HTMLElement, options?: DroppableModel);
    protected bind(): void;
    private wireEvents;
    onPropertyChanged(newProp: DroppableModel, oldProp: DroppableModel): void;
    getModuleName(): string;
    private dragStopCalled;
    intOver(event: MouseEvent & TouchEvent, element?: Element): void;
    intOut(event: MouseEvent & TouchEvent, element?: Element): void;
    private intDrop;
    private isDropArea;
    destroy(): void;
}
//node_modules/@syncfusion/ej2-base/src/event-handler.d.ts
/**
 * EventHandler class provides option to add, remove, clear and trigger events to a HTML DOM element
 * @private
 * ```html
 * <div id="Eventdiv">  </div>
 * <script>
 *   let node: HTMLElement = document.querySelector("#Eventdiv");
 *   EventHandler.addEventListener(node, "click", function(){
 *       // click handler function code
 *   });
 *   EventHandler.addEventListener(node, "onmouseover", function(){
 *       // mouseover handler function code
 *   });
 *   EventHandler.removeEventListener(node, "click", function(){
 *       // click handler function code
 *   });
 *   eventObj.clearEvents();
 * </script>
 * ```
 */
export  class EventHandler {
    private static addOrGetEventData;
    /**
     * Add an event to the specified DOM element.
     * @param {any} element - Target HTML DOM element
     * @param {string} eventName - A string that specifies the name of the event
     * @param {Function} listener - Specifies the function to run when the event occurs
     * @param {Object} bindTo - A object that binds 'this' variable in the event handler
     * @param {number} debounce - Specifies at what interval given event listener should be triggered.
     * @return {Function}
     */
    static add(element: Element | HTMLElement | Document, eventName: string, listener: Function, bindTo?: Object, intDebounce?: number): Function;
    /**
     * Remove an event listener that has been attached before.
     * @param {any} element - Specifies the target html element to remove the event
     * @param {string} eventName - A string that specifies the name of the event to remove
     * @param {Function} listener - Specifies the function to remove
     * @return {void}
     */
    static remove(element: Element | HTMLElement | Document, eventName: string, listener: Function): void;
    /**
     * Clear all the event listeners that has been previously attached to the element.
     * @param {any} element - Specifies the target html element to clear the events
     * @return {void}
     */
    static clearEvents(element: Element): void;
    /**
     * Trigger particular event of the element.
     * @param {any} element - Specifies the target html element to trigger the events
     * @param {string} eventName - Specifies the event to trigger for the specified element.
     * Can be a custom event, or any of the standard events.
     * @param {any} eventProp - Additional parameters to pass on to the event properties
     * @return {void}
     */
    static trigger(element: HTMLElement, eventName: string, eventProp?: Object): void;
}
/**
 * Common Event argument for all base Essential JavaScript 2 Events.
 * @private
 */
export interface BaseEventArgs {
    /**
     * Specifies name of the event.
     */
    name?: string;
}
//node_modules/@syncfusion/ej2-base/src/hijri-parser.d.ts
/***
 * Hijri parser
 */
export  namespace HijriParser {
    function getHijriDate(gDate: Date): Object;
    function toGregorian(year: number, month: number, day: number): Date;
}
//node_modules/@syncfusion/ej2-base/src/index.d.ts
/**
 * Base modules
 */
//node_modules/@syncfusion/ej2-base/src/internationalization.d.ts
/**
 * Specifies the observer used for external change detection.
 */
export  let onIntlChange: Observer;
/**
 * Specifies the default rtl status for EJ2 components.
 */
export  let rightToLeft: boolean;
/**
 * Interface for dateFormatOptions
 *
 */
export interface DateFormatOptions {
    /**
     * Specifies the skeleton for date formatting.
     */
    skeleton?: string;
    /**
     * Specifies the type of date formatting either date, dateTime or time.
     */
    type?: string;
    /**
     * Specifies custom date formatting to be used.
     */
    format?: string;
    /**
     * Specifies the calendar mode other than gregorian
     */
    calendar?: string;
}
/**
 * Interface for numberFormatOptions
 *
 */
export interface NumberFormatOptions {
    /**
     * Specifies minimum fraction digits in formatted value.
     */
    minimumFractionDigits?: number;
    /**
     * Specifies maximum fraction digits in formatted value.
     */
    maximumFractionDigits?: number;
    /**
     * Specifies minimum significant digits in formatted value.
     */
    minimumSignificantDigits?: number;
    /**
     * Specifies maximum significant digits in formatted value.
     */
    maximumSignificantDigits?: number;
    /**
     * Specifies whether to use grouping or not in formatted value,
     */
    useGrouping?: boolean;
    /**
     * Specifies the skeleton for perform formatting.
     */
    skeleton?: string;
    /**
     * Specifies the currency code to be used for formatting.
     */
    currency?: string;
    /**
     * Specifies minimum integer digits in formatted value.
     */
    minimumIntegerDigits?: number;
    /**
     * Specifies custom number format for formatting.
     */
    format?: string;
}
/**
 * Specifies the CLDR data loaded for internationalization functionalities.
 * @private
 */
export  let cldrData: Object;
/**
 * Specifies the default culture value to be considered.
 * @private
 */
export  let defaultCulture: string;
/**
 * Specifies default currency code to be considered
 * @private
 */
export  let defaultCurrencyCode: string;
/**
 * Internationalization class provides support to parse and format the number and date object to the desired format.
 * ```typescript
 * // To set the culture globally
 * setCulture('en-GB');
 *
 * // To set currency code globally
 * setCurrencyCode('EUR');
 *
 * //Load cldr data
 * loadCldr(gregorainData);
 * loadCldr(timeZoneData);
 * loadCldr(numbersData);
 * loadCldr(numberSystemData);
 *
 * // To use formatter in component side
 * let Intl:Internationalization = new Internationalization();
 *
 * // Date formatting
 * let dateFormatter: Function = Intl.getDateFormat({skeleton:'long',type:'dateTime'});
 * dateFormatter(new Date('11/2/2016'));
 * dateFormatter(new Date('25/2/2030'));
 * Intl.formatDate(new Date(),{skeleton:'E'});
 *
 * //Number formatting
 * let numberFormatter: Function = Intl.getNumberFormat({skeleton:'C5'})
 * numberFormatter(24563334);
 * Intl.formatNumber(123123,{skeleton:'p2'});
 *
 * // Date parser
 * let dateParser: Function = Intl.getDateParser({skeleton:'short',type:'time'});
 * dateParser('10:30 PM');
 * Intl.parseDate('10',{skeleton:'H'});
 * ```
 */
export  class Internationalization {
    culture: string;
    constructor(cultureName?: string);
    /**
     * Returns the format function for given options.
     * @param {DateFormatOptions} options - Specifies the format options in which the format function will return.
     * @returns {Function}
     */
    getDateFormat(options?: DateFormatOptions): Function;
    /**
     * Returns the format function for given options.
     * @param {NumberFormatOptions} options - Specifies the format options in which the format function will return.
     * @returns {Function}
     */
    getNumberFormat(options?: NumberFormatOptions): Function;
    /**
     * Returns the parser function for given options.
     * @param {DateFormatOptions} options - Specifies the format options in which the parser function will return.
     * @returns {Function}
     */
    getDateParser(options?: DateFormatOptions): Function;
    /**
     * Returns the parser function for given options.
     * @param {NumberFormatOptions} options - Specifies the format options in which the parser function will return.
     * @returns {Function}
     */
    getNumberParser(options?: NumberFormatOptions): Function;
    /**
     * Returns the formatted string based on format options.
     * @param {Number} value - Specifies the number to format.
     * @param {NumberFormatOptions} option - Specifies the format options in which the number will be formatted.
     * @returns {string}
     */
    formatNumber(value: Number, option?: NumberFormatOptions): string;
    /**
     * Returns the formatted date string based on format options.
     * @param {Number} value - Specifies the number to format.
     * @param {DateFormatOptions} option - Specifies the format options in which the number will be formatted.
     * @returns {string}
     */
    formatDate(value: Date, option?: DateFormatOptions): string;
    /**
     * Returns the date object for given date string and options.
     * @param {string} value - Specifies the string to parse.
     * @param {DateFormatOptions} option - Specifies the parse options in which the date string will be parsed.
     * @returns {Date}
     */
    parseDate(value: string, option?: DateFormatOptions): Date;
    /**
     * Returns the number object from the given string value and options.
     * @param {string} value - Specifies the string to parse.
     * @param {NumberFormatOptions} option - Specifies the parse options in which the  string number  will be parsed.
     * @returns {number}
     */
    parseNumber(value: string, option?: NumberFormatOptions): number;
    /**
     * Returns Native Date Time Pattern
     * @param {DateFormatOptions} option - Specifies the parse options for resultant date time pattern.
     * @param {boolean} isExcelFormat - Specifies format value to be converted to excel pattern.
     * @returns {string}
     * @private
     */
    getDatePattern(option: DateFormatOptions, isExcelFormat?: boolean): string;
    /**
     * Returns Native Number Pattern
     * @param {NumberFormatOptions} option - Specifies the parse options for resultant number pattern.
     * @returns {string}
     * @private
     */
    getNumberPattern(option: NumberFormatOptions): string;
    /**
     * Returns the First Day of the Week
     * @returns {number}
     */
    getFirstDayOfWeek(): number;
    private getCulture;
}
/**
 * Set the default culture to all EJ2 components
 * @param {string} cultureName - Specifies the culture name to be set as default culture.
 */
export  function setCulture(cultureName: string): void;
/**
 * Set the default currency code to all EJ2 components
 * @param {string} currencyCode Specifies the culture name to be set as default culture.
 * @returns {void}
 */
export  function setCurrencyCode(currencyCode: string): void;
/**
 * Load the CLDR data into context
 * @param {Object[]} obj Specifies the CLDR data's to be used for formatting and parser.
 * @returns {void}
 */
export  function loadCldr(...data: Object[]): void;
/**
 * To enable or disable RTL functionality for all components globally.
 * @param {boolean} status - Optional argument Specifies the status value to enable or disable rtl option.
 * @returns {void}
 */
export  function enableRtl(status?: boolean): void;
/**
 * To get the numeric CLDR object for given culture
 * @param {string} locale - Specifies the locale for which numericObject to be returned.
 * @ignore
 * @private
 */
export  function getNumericObject(locale: string, type?: string): Object;
/**
 * To get the numeric CLDR  number base object for given culture
 * @param {string} locale - Specifies the locale for which numericObject to be returned.
 * @param {string} currency - Specifies the currency for which numericObject to be returned.
 * @ignore
 * @private
 */
export  function getNumberDependable(locale: string, currency: string): string;
/**
 * To get the default date CLDR object.
 * @ignore
 * @private
 */
export  function getDefaultDateObject(mode?: string): Object;
//node_modules/@syncfusion/ej2-IntlBase/src/intl/date-formatter.d.ts
export  const basicPatterns: string[];
/**
 * Interface for Date Format Options Modules.
 * @private
 */
export interface FormatOptions {
    month?: Object;
    weekday?: Object;
    pattern?: string;
    designator?: Object;
    timeZone?: IntlBase.TimeZoneOptions;
    era?: Object;
    hour12?: boolean;
    numMapper?: NumberMapper;
    dateSeperator?: string;
    isIslamic?: boolean;
}
export  const datePartMatcher: {
    [key: string]: Object;
};
/**
 * Date Format is a framework provides support for date formatting.
 * @private
 */
export  class DateFormat {
    /**
     * Returns the formatter function for given skeleton.
     * @param {string} -  Specifies the culture name to be which formatting.
     * @param {DateFormatOptions} - Specific the format in which date  will format.
     * @param {cldr} - Specifies the global cldr data collection.
     * @return Function.
     */
    static dateFormat(culture: string, option: DateFormatOptions, cldr: Object): Function;
    /**
     * Returns formatted date string based on options passed.
     * @param {Date} value
     * @param {FormatOptions} options
     */
    private static intDateFormatter;
    private static getCurrentDateValue;
    /**
     * Returns two digit numbers for given value and length
     */
    private static checkTwodigitNumber;
    /**
     * Returns the value of the Time Zone.
     * @param {number} tVal
     * @param {string} pattern
     * @private
     */
    static getTimeZoneValue(tVal: number, pattern: string): string;
}
//node_modules/@syncfusion/ej2-base/src/intl/date-parser.d.ts
/**
 * Date Parser.
 * @private
 */
export  class DateParser {
    /**
     * Returns the parser function for given skeleton.
     * @param {string} -  Specifies the culture name to be which formatting.
     * @param {DateFormatOptions} - Specific the format in which string date  will be parsed.
     * @param {cldr} - Specifies the global cldr data collection.
     *  @return Function.
     */
    static dateParser(culture: string, option: DateFormatOptions, cldr: Object): Function;
    /**
     * Returns date object for provided date options
     * @param {DateParts} options
     * @param {Date} value
     * @returns {Date}
     */
    private static getDateObject;
    /**
     * Returns date parsing options for provided value along with parse and numeric options
     * @param {string} value
     * @param {ParseOptions} parseOptions
     * @param {NumericOptions} num
     * @returns {DateParts}
     */
    private static internalDateParse;
    /**
     * Returns parsed number for provided Numeric string and Numeric Options
     * @param {string} value
     * @param {NumericOptions} option
     * @returns {number}
     */
    private static internalNumberParser;
    /**
     * Returns parsed time zone RegExp for provided hour format and time zone
     * @param {string} hourFormat
     * @param {base.TimeZoneOptions} tZone
     * @param {string} nRegex
     * @returns {string}
     */
    private static parseTimeZoneRegx;
    /**
     * Returns zone based value.
     * @param {boolean} flag
     * @param {string} val1
     * @param {string} val2
     * @param {NumericOptions} num
     * @returns {number}
     */
    private static getZoneValue;
}
//node_modules/@syncfusion/ej2-base/src/intl/index.d.ts
/**
 * Internationalization
 */
//node_modules/@syncfusion/ej2-base/src/intl/intl-base.d.ts
/**
 * Date base common constants and function for date parser and formatter.
 */
export  namespace IntlBase {
    const negativeDataRegex: RegExp;
    const customRegex: RegExp;
    const latnParseRegex: RegExp;
    const defaultCurrency: string;
    const islamicRegex: RegExp;
    interface NumericSkeleton {
        type?: string;
        isAccount?: boolean;
        fractionDigits?: number;
    }
    interface GenericFormatOptions {
        nData?: NegativeData;
        pData?: NegativeData;
        zeroData?: NegativeData;
    }
    interface GroupSize {
        primary?: number;
        secondary?: number;
    }
    interface NegativeData extends FormatParts {
        nlead?: string;
        nend?: string;
        groupPattern?: string;
        minimumFraction?: number;
        maximumFraction?: number;
    }
    const formatRegex: RegExp;
    const currencyFormatRegex: RegExp;
    const curWithoutNumberRegex: RegExp;
    const dateParseRegex: RegExp;
    const basicPatterns: string[];
    interface Dependables {
        parserObject?: Object;
        dateObject?: Object;
        numericObject?: Object;
    }
    interface TimeZoneOptions {
        hourFormat?: string;
        gmtFormat?: string;
        gmtZeroFormat?: string;
    }
    const defaultObject: Object;
    const monthIndex: Object;
    /**
     *
     */
    const month: string;
    const days: string;
    /**
     * Default numerber Object
     */
    const patternMatcher: {
        [key: string]: Object;
    };
    /**
     * Returns the resultant pattern based on the skeleton, dateObject and the type provided
     * @private
     * @param {string} skeleton
     * @param {Object} dateObject
     * @param {string} type
     * @returns {string}
     */
    function getResultantPattern(skeleton: string, dateObject: Object, type: string, isIslamic?: boolean): string;
    interface DateObject {
        year?: number;
        month?: number;
        date?: number;
    }
    /**
     * Returns the dependable object for provided cldr data and culture
     * @private
     * @param {Object} cldr
     * @param {string} culture
     * @param {boolean} isNumber
     * @returns {Dependables}
     */
    function getDependables(cldr: Object, culture: string, mode: string, isNumber?: boolean): Dependables;
    /**
     * Returns the symbol pattern for provided parameters
     * @private
     * @param {string} type
     * @param {string} numSystem
     * @param {Object} obj
     * @param {boolean} isAccount
     * @returns {string}
     */
    function getSymbolPattern(type: string, numSystem: string, obj: Object, isAccount: boolean): string;
    /**
     * Returns proper numeric skeleton
     * @private
     * @param {string} skeleton
     * @returns {NumericSkeleton}
     */
    function getProperNumericSkeleton(skeleton: string): NumericSkeleton;
    /**
     * Returns format data for number formatting like minimum fraction, maximum fraction, etc..,
     * @private
     * @param {string} pattern
     * @param {boolean} needFraction
     * @param {string} cSymbol
     * @param {boolean} fractionOnly
     * @returns {NegativeData}
     */
    function getFormatData(pattern: string, needFraction: boolean, cSymbol: string, fractionOnly?: boolean): NegativeData;
    /**
     * Returns currency symbol based on currency code
     * @private
     * @param {Object} numericObject
     * @param {string} currencyCode
     * @returns {string}
     */
    function getCurrencySymbol(numericObject: Object, currencyCode: string): string;
    /**
     * Returns formatting options for custom number format
     * @private
     * @param {string} format
     * @param {CommonOptions} dOptions
     * @param {Dependables} obj
     * @returns {GenericFormatOptions}
     */
    function customFormat(format: string, dOptions: CommonOptions, obj: Dependables): GenericFormatOptions;
    /**
     * Returns formatting options for currency or percent type
     * @private
     * @param {string[]} parts
     * @param {string} actual
     * @param {string} symbol
     * @returns {NegativeData}
     */
    function isCurrencyPercent(parts: string[], actual: string, symbol: string): NegativeData;
    /**
     * Returns culture based date separator
     * @private
     * @param {Object} dateObj
     * @returns {string}
     */
    function getDateSeparator(dateObj: Object): string;
    /**
     * Returns Native Date Time pattern
     * @private
     * @param {string} culture
     * @param {DateFormatOptions} options
     * @param {Object} cldr
     * @returns {string}
     */
    function getActualDateTimeFormat(culture: string, options: DateFormatOptions, cldr?: Object, isExcelFormat?: boolean): string;
    /**
     * Returns Native Number pattern
     * @private
     * @param {string} culture
     * @param {NumberFormatOptions} options
     * @param {Object} cldr
     * @returns {string}
     */
    function getActualNumberFormat(culture: string, options: NumberFormatOptions, cldr?: Object): string;
    function getWeekData(culture: string, cldr?: Object): number;
}
//node_modules/@syncfusion/ej2-IntlBase/src/intl/number-formatter.d.ts
/**
 * Interface for default formatting options
 * @private
 */
export interface FormatParts extends IntlBase.NumericSkeleton, NumberFormatOptions {
    groupOne?: boolean;
    isPercent?: boolean;
    isCurrency?: boolean;
    isNegative?: boolean;
    groupData?: GroupDetails;
    groupSeparator?: string;
}
/**
 * Interface for common formatting options
 */
export interface CommonOptions {
    numberMapper?: NumberMapper;
    currencySymbol?: string;
    percentSymbol?: string;
    minusSymbol?: string;
}
/**
 * Interface for grouping process
 */
export interface GroupDetails {
    primary?: number;
    secondary?: number;
}
/**
 * Module for number formatting.
 * @private
 */
export  class NumberFormat {
    /**
     * Returns the formatter function for given skeleton.
     * @param {string} culture -  Specifies the culture name to be which formatting.
     * @param {NumberFormatOptions} option - Specific the format in which number  will format.
     * @param {Object} object- Specifies the global cldr data collection.
     * @return Function.
     */
    static numberFormatter(culture: string, option: NumberFormatOptions, cldr: Object): Function;
    /**
     * Returns grouping details for the pattern provided
     * @param {string} pattern
     * @returns {GroupDetails}
     */
    static getGroupingDetails(pattern: string): GroupDetails;
    /**
     * Returns if the provided integer range is valid.
     * @param {number} val1
     * @param {number} val2
     * @param {boolean} checkbothExist
     * @param {boolean} isFraction
     * @returns {boolean}
     */
    private static checkValueRange;
    /**
     * Check if the provided fraction range is valid
     * @param {number} val
     * @param {string} text
     * @param {boolean} isFraction
     * @returns {void}
     */
    private static checkRange;
    /**
     * Returns formatted numeric string for provided formatting options
     * @param {number} value
     * @param {IntlBase.GenericFormatOptions} fOptions
     * @param {CommonOptions} dOptions
     * @returns {string}
     */
    private static intNumberFormatter;
    /**
     * Returns significant digits processed numeric string
     * @param {number} value
     * @param {number} min
     * @param {number} max
     * @returns {string}
     */
    private static processSignificantDigits;
    /**
     * Returns grouped numeric string
     * @param {string} val
     * @param {number} level1
     * @param {string} sep
     * @param {string} decimalSymbol
     * @param {number} level2
     * @returns {string}
     */
    private static groupNumbers;
    /**
     * Returns fraction processed numeric string
     * @param {number} value
     * @param {number} min
     * @param {number} max
     * @returns {string}
     */
    private static processFraction;
    /**
     * Returns integer processed numeric string
     * @param {string} value
     * @param {number} min
     * @returns {string}
     */
    private static processMinimumIntegers;
}
//node_modules/@syncfusion/ej2-IntlBase/src/intl/number-parser.d.ts
/**
 * interface for Numeric Formatting Parts
 */
export interface NumericParts {
    symbolRegex?: RegExp;
    nData?: IntlBase.NegativeData;
    pData?: IntlBase.NegativeData;
    infinity?: string;
    type?: string;
    fractionDigits?: number;
    isAccount?: boolean;
    custom?: boolean;
}
/**
 * Module for Number Parser.
 * @private
 */
export  class NumberParser {
    /**
     * Returns the parser function for given skeleton.
     * @param {string} -  Specifies the culture name to be which formatting.
     * @param {NumberFormatOptions} - Specific the format in which number  will parsed.
     * @param {cldr} - Specifies the global cldr data collection.
     * @return Function.
     */
    static numberParser(culture: string, option: NumberFormatOptions, cldr: Object): Function;
    /**
     * Returns parsed number for the provided formatting options
     * @param {string} value
     * @param {NumericParts} options
     * @param {NumericOptions} numOptions
     * @returns {number}
     */
    private static getParsedNumber;
}
//node_modules/@syncfusion/ej2-base/src/intl/parser-base.d.ts
/**
 * Parser
 */
/**
 * Interface for numeric Options
 */
export interface NumericOptions {
    numericPair?: Object;
    numericRegex?: string;
    numberParseRegex?: RegExp;
    symbolNumberSystem?: Object;
    symbolMatch?: Object;
    numberSystem?: string;
}
/**
 * Interface for numeric object
 */
export interface NumericObject {
    obj?: Object;
    nSystem?: string;
}
/**
 * Interface for number mapper
 */
export interface NumberMapper {
    mapper?: Object;
    timeSeparator?: string;
    numberSymbols?: Object;
    numberSystem?: string;
}
/**
 * Interface for parser base
 * @private
 */
export  class ParserBase {
    static nPair: string;
    static nRegex: string;
    static numberingSystems: Object;
    /**
     * Returns the cldr object for the culture specifies
     * @param {Object} obj - Specifies the object from which culture object to be acquired.
     * @param {string} cName - Specifies the culture name.
     * @returns {Object}
     */
    static getMainObject(obj: Object, cName: string): Object;
    /**
     * Returns the numbering system object from given cldr data.
     * @param {Object} obj - Specifies the object from which number system is acquired.
     * @returns {Object}
     */
    static getNumberingSystem(obj: Object): Object;
    /**
     * Returns the reverse of given object keys or keys specified.
     * @param {Object} prop - Specifies the object to be reversed.
     * @param {number[]} keys - Optional parameter specifies the custom keyList for reversal.
     * @returns {Object}
     */
    static reverseObject(prop: Object, keys?: number[]): Object;
    /**
     * Returns the symbol regex by skipping the escape sequence.
     * @param {string[]} props - Specifies the array values to be skipped.
     * @returns {RegExp}
     */
    static getSymbolRegex(props: string[]): RegExp;
    private static getSymbolMatch;
    /**
     * Returns regex string for provided value
     * @param {string} val
     * @returns {string}
     */
    private static constructRegex;
    /**
     * Returns the replaced value of matching regex and obj mapper.
     * @param {string} value - Specifies the  values to be replaced.
     * @param {RegExp} regex - Specifies the  regex to search.
     * @param {Object} obj - Specifies the  object matcher to be replace value parts.
     * @returns {string}
     */
    static convertValueParts(value: string, regex: RegExp, obj: Object): string;
    /**
     * Returns default numbering system object for formatting from cldr data
     * @param {Object} obj
     * @returns {NumericObject}
     */
    static getDefaultNumberingSystem(obj: Object): NumericObject;
    /**
     * Returns the replaced value of matching regex and obj mapper.
     */
    static getCurrentNumericOptions(curObj: Object, numberSystem: Object, needSymbols?: boolean): Object;
    /**
     * Returns number mapper object for the provided cldr data
     * @param {Object} curObj
     * @param {Object} numberSystem
     * @param {boolean} isNumber
     * @returns {NumberMapper}
     */
    static getNumberMapper(curObj: Object, numberSystem: Object, isNumber?: boolean): NumberMapper;
}
//node_modules/@syncfusion/ej2-base/src/keyboard-model.d.ts
/**
 * Interface for a class KeyboardEvents
 */
export interface KeyboardEventsModel {
    /**
     * Specifies key combination and it respective action name.
     * @default null
     */
    keyConfigs?: { [key: string]: string };
    /**
     * Specifies on which event keyboardEvents class should listen for key press. For ex., `keyup`, `keydown` or `keypress`
     * @default keyup
     */
    eventName?: string;
    /**
     * Specifies the listener when keyboard actions is performed. 
     * @event
     */
    keyAction?: EmitType<KeyboardEventArgs>;
}
//node_modules/@syncfusion/ej2-base/src/keyboard.d.ts
/**
 * KeyboardEvents
 */
export interface KeyboardEventArgs extends KeyboardEvent {
    /**
     * action of the KeyboardEvent
     */
    action: string;
}
/**
 * KeyboardEvents class enables you to bind key action desired key combinations for ex., Ctrl+A, Delete, Alt+Space etc.
 * ```html
 * <div id='testEle'>  </div>;
 * <script>
 *   let node$: HTMLElement = document.querySelector('#testEle');
 *   let kbInstance = new KeyboardEvents({
 *       element: node,
 *       keyConfigs:{ selectAll : 'ctrl+a' },
 *       keyAction: function (e:KeyboardEvent, action:string) {
 *           // handler function code
 *       }
 *   });
 * </script>
 * ```
 */
export  class KeyboardEvents extends Base<HTMLElement> implements INotifyPropertyChanged {
    /**
     * Specifies key combination and it respective action name.
     * @default null
     */
    keyConfigs: {
        [key: string]: string;
    };
    /**
     * Specifies on which event keyboardEvents class should listen for key press. For ex., `keyup`, `keydown` or `keypress`
     * @default keyup
     */
    eventName: string;
    /**
     * Specifies the listener when keyboard actions is performed.
     * @event
     */
    keyAction: EmitType<KeyboardEventArgs>;
    /**
     * Initializes the KeyboardEvents
     * @param {HTMLElement} element
     * @param {KeyboardEventsModel} options
     */
    constructor(element: HTMLElement, options?: KeyboardEventsModel);
    /**
     * Unwire bound events and destroy the instance.
     * @return {void}
     */
    destroy(): void;
    /**
     * Function can be used to specify certain action if a property is changed
     * @param newProp
     * @param oldProp
     * @returns {void}
     * @private
     */
    onPropertyChanged(newProp: KeyboardEventsModel, oldProp?: KeyboardEventsModel): void;
    protected bind(): void;
    /**
     * To get the module name, returns 'keyboard'.
     * @private
     */
    getModuleName(): string;
    /**
     * Wiring event handlers to events
     */
    private wireEvents;
    /**
     * Unwiring event handlers to events
     */
    private unwireEvents;
    /**
     * To handle a key press event returns null
     */
    private keyPressHandler;
    private static configCache;
    /**
     * To get the key configuration data
     * @param {string} config - configuration data
     * returns {KeyData}
     */
    private static getKeyConfigData;
    private static getKeyCode;
}
//node_modules/@syncfusion/ej2-base/src/l10n.d.ts
/**
 * L10n modules provides localized text for different culture.
 * ```typescript
 * //load global locale object common for all components.
 * L10n.load({
 *    'fr-BE': {
 *       'button': {
 *            'check': 'vérifié'
 *        }
 *    }
 * });
 * //set globale default locale culture.
 * tsBaseLibrary.setCulture('fr-BE');
 * let instance: L10n = new L10n('button', {
 *    check: 'checked'
 * });
 * //Get locale text for current property.
 * instance.getConstant('check');
 * //Change locale culture in a component.
 * instance.setLocale('en-US');
 * ```
 */
export  class L10n {
    private static locale;
    private controlName;
    private localeStrings;
    private currentLocale;
    /**
     * Constructor
     */
    constructor(controlName: string, localeStrings: Object, locale?: string);
    /**
     * Sets the locale text
     * @param {string} locale
     * @returns {void}
     */
    setLocale(locale: string): void;
    /**
     * Sets the global locale for all components.
     * @param {Object} localeObject - specifies the localeObject to be set as global locale.
     */
    static load(localeObject: Object): void;
    /**
     * Returns current locale text for the property based on the culture name and control name.
     * @param {string} propertyName - specifies the property for which localize text to be returned.
     * @return string
     */
    getConstant(prop: string): string;
    /**
     * Returns the control constant object for current object and the locale specified.
     * @param {Object} curObject
     * @param {string} locale
     * @returns {Object}
     */
    private intGetControlConstant;
}
//node_modules/@syncfusion/ej2-base/src/module-loader.d.ts
/**
 * Interface for module declaration.
 */
export interface ModuleDeclaration {
    /**
     * Specifies the args for module declaration.
     */
    args: Object[];
    /**
     * Specifies the member for module declaration.
     */
    member: string;
    /**
     * Specifies whether it is a property or not.
     */
    isProperty?: boolean;
}
export interface IParent {
    [key: string]: any;
}
export  class ModuleLoader {
    private parent;
    private loadedModules;
    constructor(parent: IParent);
    /**
     * Inject required modules in component library
     * @return {void}
     * @param {ModuleDeclaration[]} requiredModules - Array of modules to be required
     * @param {Function[]} moduleList - Array of modules to be injected from sample side
     */
    inject(requiredModules: ModuleDeclaration[], moduleList: Function[]): void;
    /**
     * To remove the created object while destroying the control
     * @return {void}
     */
    clean(): void;
    /**
     * Removes all unused modules
     * @param {ModuleDeclaration[]} moduleList
     * @returns {void}
     */
    private clearUnusedModule;
    /**
     * To get the name of the member.
     * @param {string} name
     * @returns {string}
     */
    private getMemberName;
    /**
     * Returns boolean based on whether the module specified is loaded or not
     * @param {string} modName
     * @returns {boolean}
     */
    private isModuleLoaded;
}
//node_modules/@syncfusion/ej2-base/src/notify-property-change.d.ts
/**
 * Method used to create property. General syntax below.
 * @param  {T} defaultValue? - Specifies the default value of property.
 * ```
 * @Property('TypeScript')
 * propertyName: Type;
 * ```
 * @private
 */
export  function Property<T>(defaultValue?: T | Object): PropertyDecorator;
/**
 * Method used to create complex property. General syntax below.
 * @param  {T} defaultValue - Specifies the default value of property.
 * @param  {Function} type - Specifies the class type of complex object.
 * ```
 * @Complex<Type>({},Type)
 * propertyName: Type;
 * ```
 * @private
 */
export  function Complex<T>(defaultValue: T, type: Function): PropertyDecorator;
/**
 * Method used to create complex Factory property. General syntax below.
 * @param  {Function} defaultType - Specifies the default value of property.
 * @param  {Function} type - Specifies the class factory type of complex object.
 * ```
 * @ComplexFactory(defaultType, factoryFunction)
 * propertyName: Type1 | Type2;
 * ```
 * @private
 */
export  function ComplexFactory(type: Function): PropertyDecorator;
/**
 * Method used to create complex array property. General syntax below.
 * @param  {T[]} defaultValue - Specifies the default value of property.
 * @param  {Function} type - Specifies the class type of complex object.
 * ```
 * @Collection([], Type);
 * propertyName: Type;
 * ```
 * @private
 */
export  function Collection<T>(defaultValue: T[], type: Function): PropertyDecorator;
/**
 * Method used to create complex factory array property. General syntax below.
 * @param  {T[]} defaultType - Specifies the default type of property.
 * @param  {Function} type - Specifies the class type of complex object.
 * ```
 * @Collection([], Type);
 * propertyName: Type;
 * ```
 * @private
 */
export  function CollectionFactory(type: Function): PropertyDecorator;
/**
 * Method used to create event property. General syntax below.
 * @param  {Function} defaultValue? - Specifies the default value of property.
 * @param  {boolean} isComplex? - Specifies the whether it is complex object.
 * ```
 * @Event(()=>{return true;
})
 * ```
 * @private
 */
export  function Event(): PropertyDecorator;
/**
 * NotifyPropertyChanges is triggers the call back when the property has been changed.
 *
 * ```
 *  @NotifyPropertyChanges
 * class DemoClass implements INotifyPropertyChanged {
 *
 *     @Property()
 *     property1: string;
 *
 *     dataBind: () => void;
 *
 *     constructor() { }
 *
 *     onPropertyChanged(newProp: any, oldProp: any) {
 *         // Called when property changed
 *     }
 * }
 * ```
 * @private
 */
export  function NotifyPropertyChanges(classConstructor: Function): void;
/**
 * Interface to notify the changed properties
 */
export interface INotifyPropertyChanged {
    onPropertyChanged(newProperties: Object, oldProperties?: Object): void;
}
/**
 * Method used to create builder for the components
 * @param {any} component -specifies the target component for which builder to be created.
 * @private
 */
export  function CreateBuilder<T>(component: T): Object;
//node_modules/@syncfusion/ej2-base/src/observer.d.ts
/**
 * Observer is used to perform event handling based the object.
 * ```
 * //Creating observer instance.
 * let observer:Observer = Observer(this);
 * let handler: Function = (a:number, b: number): number => {return a + b;
 }
 * //add handler to event.
 * observe.on('eventname', handler);
 * //remove handler from event.
 * observe.off('eventname', handler);
 * //notify the handlers in event.
 * observe.notify('eventname');
 * ```
 *
 */
export interface BoundOptions {
    handler?: Function;
    context?: Object;
    event?: string;
    id?: string;
}
export  class Observer {
    private context;
    private ranArray;
    private boundedEvents;
    constructor(context?: Object);
    /**
     * To attach handler for given property in current context.
     * @param {string} property - specifies the name of the event.
     * @param {Function} handler - Specifies the handler function to be called while event notified.
     * @param {Object} context - Specifies the context binded to the handler.
     * @param {string} id - specifies the random generated id.
     * @return {void}
     */
    on(property: string, handler: Function, context?: Object, id?: string): void;
    /**
     * To remove handlers from a event attached using on() function.
     * @param {string} eventName - specifies the name of the event.
     * @param {Function} handler - Optional argument specifies the handler function to be called while event notified.
     * @param {string} id - specifies the random generated id.
     * @return {void}
     */
    off(property: string, handler?: Function, id?: string): void;
    /**
     * To notify the handlers in the specified event.
     * @param {string} property - Specifies the event to be notify.
     * @param {Object} args - Additional parameters to pass while calling the handler.
     * @param {Function} successHandler - this function will invoke after event successfully triggered
     * @param {Function} errorHandler - this function will invoke after event if it was failure to call.
     * @return {void}
     */
    notify(property: string, argument?: Object, successHandler?: Function, errorHandler?: Function): void | Object;
    private blazorCallback;
    isJson(value: string): boolean;
    /**
     * To destroy handlers in the event
     */
    destroy(): void;
    /**
     * Returns if the property exists.
     */
    private notExist;
    /**
     * Returns if the handler is present.
     */
    private isHandlerPresent;
}
//node_modules/@syncfusion/ej2-base/src/template-engine.d.ts
export  let blazorTemplates: object;
export  function getRandomId(): string;
/**
 * Interface for Template Engine.
 */
export interface ITemplateEngine {
    compile: (templateString: string, helper?: Object) => (data: Object | JSON) => string;
}
/**
 * Compile the template string into template function.
 * @param  {string} templateString - The template string which is going to convert.
 * @param  {Object} helper? - Helper functions as an object.
 * @private
 */
export  function compile(templateString: string, helper?: Object): (data: Object | JSON, component?: any, propName?: any) => NodeList;
export  function updateBlazorTemplate(templateId?: string, templateName?: string, comp?: object, isEmpty?: boolean, callBack?: Function): void;
export  function resetBlazorTemplate(templateId?: string, templateName?: string, index?: number): void;
/**
 * Set your custom template engine for template rendering.
 * @param  {ITemplateEngine} classObj - Class object for custom template.
 * @private
 */
export  function setTemplateEngine(classObj: ITemplateEngine): void;
/**
 * Get current template engine for template rendering.
 * @param  {ITemplateEngine} classObj - Class object for custom template.
 * @private
 */
export  function getTemplateEngine(): (template: string, helper?: Object) => (data: Object | JSON) => string;
//node_modules/@syncfusion/ej2-base/src/template.d.ts
/**
 * Template Engine
 */
/**
 * The function to set regular expression for template expression string.
 * @param  {RegExp} value - Value expression.
 * @private
 */
export  function expression(value?: RegExp): RegExp;
/**
 * Compile the template string into template function.
 * @param  {string} template - The template string which is going to convert.
 * @param  {Object} helper? - Helper functions as an object.
 * @private
 */
export  function compile(template: string, helper?: Object): () => string;
//node_modules/@syncfusion/ej2-base/src/touch-model.d.ts
/**
 * Interface for a class SwipeSettings
 */
export interface SwipeSettingsModel {
    /**
     * Property specifies minimum distance of swipe moved.
     */
    swipeThresholdDistance?: number;
}
/**
 * Interface for a class Touch
 */
export interface TouchModel {
    /**
     * Specifies the callback function for tap event.
     * @event
     */
    tap?: EmitType<TapEventArgs>;
    /**
     * Specifies the callback function for tapHold event.
     * @event
     */
    tapHold?: EmitType<TapEventArgs>;
    /**
     * Specifies the callback function for swipe event.
     * @event
     */
    swipe?: EmitType<SwipeEventArgs>;
    /**
     * Specifies the callback function for scroll event.
     * @event
     */
    scroll?: EmitType<ScrollEventArgs>;
    /**
     * Specifies the time delay for tap.
     * @default 350
     */
    tapThreshold?: number;
    /**
     * Specifies the time delay for tap hold.
     * @default 750
     */
    tapHoldThreshold?: number;
    /**
     * Customize the swipe event configuration.
     * @default { swipeThresholdDistance: 50 }
     */
    swipeSettings?: SwipeSettingsModel;
}
//node_modules/@syncfusion/ej2-base/src/touch.d.ts
/**
 * SwipeSettings is a framework module that provides support to handle swipe event like swipe up, swipe right, etc..,
 */
export  class SwipeSettings extends ChildProperty<SwipeSettings> {
    /**
     * Property specifies minimum distance of swipe moved.
     */
    swipeThresholdDistance: number;
}
/**
 * Touch class provides support to handle the touch event like tap, double tap, tap hold, etc..,
 * ```typescript
 *    let node$: HTMLElement;
 * let touchObj: Touch = new Touch({
 *    element: node,
 *    tap: function (e) {
 *        // tap handler function code
 *    }
 *    tapHold: function (e) {
 *        // tap hold handler function code
 *    }
 *    scroll: function (e) {
 *        // scroll handler function code
 *    }
 *    swipe: function (e) {
 *        // swipe handler function code
 *    }
 * });
 * ```
 */
export  class Touch extends Base<HTMLElement> implements INotifyPropertyChanged {
    private isTouchMoved;
    private startPoint;
    private movedPoint;
    private endPoint;
    private startEventData;
    private lastTapTime;
    private lastMovedPoint;
    private scrollDirection;
    private hScrollLocked;
    private vScrollLocked;
    private defaultArgs;
    private distanceX;
    private distanceY;
    private movedDirection;
    private tStampStart;
    private touchAction;
    private timeOutTap;
    private modeClear;
    private timeOutTapHold;
    /**
     * Specifies the callback function for tap event.
     * @event
     */
    tap: EmitType<TapEventArgs>;
    /**
     * Specifies the callback function for tapHold event.
     * @event
     */
    tapHold: EmitType<TapEventArgs>;
    /**
     * Specifies the callback function for swipe event.
     * @event
     */
    swipe: EmitType<SwipeEventArgs>;
    /**
     * Specifies the callback function for scroll event.
     * @event
     */
    scroll: EmitType<ScrollEventArgs>;
    /**
     * Specifies the time delay for tap.
     * @default 350
     */
    tapThreshold: number;
    /**
     * Specifies the time delay for tap hold.
     * @default 750
     */
    tapHoldThreshold: number;
    /**
     * Customize the swipe event configuration.
     * @default { swipeThresholdDistance: 50 }
     */
    swipeSettings: SwipeSettingsModel;
    private tapCount;
    constructor(element: HTMLElement, options?: TouchModel);
    /**
     * @private
     * @param newProp
     * @param oldProp
     */
    onPropertyChanged(newProp: TouchModel, oldProp: TouchModel): void;
    protected bind(): void;
    /**
     * To destroy the touch instance.
     * @return {void}
     */
    destroy(): void;
    private wireEvents;
    private unwireEvents;
    /**
     * Returns module name as touch
     * @returns {string}
     * @private
     */
    getModuleName(): string;
    /**
     * Returns if the HTML element is Scrollable.
     * @param {HTMLElement} element - HTML Element to check if Scrollable.
     * @returns {boolean}
     */
    private isScrollable;
    private startEvent;
    private moveEvent;
    private cancelEvent;
    private tapHoldEvent;
    private endEvent;
    private swipeFn;
    private modeclear;
    private calcPoints;
    private calcScrollPoints;
    private getVelocity;
    private checkSwipe;
}
/**
 * The argument type of `Tap` Event
 */
export interface TapEventArgs extends BaseEventArgs {
    /**
     * Original native event Object.
     */
    originalEvent: TouchEventArgs | MouseEventArgs;
    /**
     * Tap Count.
     */
    tapCount?: number;
}
/**
 * The argument type of `Scroll` Event
 */
export interface ScrollEventArgs extends BaseEventArgs {
    /**
     * Event argument for start event.
     */
    startEvents: TouchEventArgs | MouseEventArgs;
    /**
     * Original native event object for scroll.
     */
    originalEvent: TouchEventArgs | MouseEventArgs;
    /**
     * X position when scroll started.
     */
    startX: number;
    /**
     * Y position when scroll started.
     */
    startY: number;
    /**
     * The direction scroll.
     */
    scrollDirection: string;
    /**
     * The total traveled distance from X position
     */
    distanceX: number;
    /**
     * The total traveled distance from Y position
     */
    distanceY: number;
    /**
     * The velocity of scroll.
     */
    velocity: number;
}
/**
 * The argument type of `Swipe` Event
 */
export interface SwipeEventArgs extends BaseEventArgs {
    /**
     * Event argument for start event.
     */
    startEvents: TouchEventArgs | MouseEventArgs;
    /**
     * Original native event object  for swipe.
     */
    originalEvent: TouchEventArgs | MouseEventArgs;
    /**
     * X position when swipe started.
     */
    startX: number;
    /**
     * Y position when swipe started.
     */
    startY: number;
    /**
     * The direction swipe.
     */
    swipeDirection: string;
    /**
     * The total traveled distance from X position
     */
    distanceX: number;
    /**
     * The total traveled distance from Y position
     */
    distanceY: number;
    /**
     * The velocity of swipe.
     */
    velocity: number;
}
export interface TouchEventArgs extends MouseEvent {
    /**
     * A TouchList with touched points.
     */
    changedTouches: MouseEventArgs[] | TouchEventArgs[];
    /**
     * Cancel the default action.
     */
    preventDefault(): void;
    /**
     * The horizontal coordinate point of client area.
     */
    clientX: number;
    /**
     * The vertical coordinate point of client area.
     */
    clientY: number;
}
export interface MouseEventArgs extends MouseEvent {
    /**
     * A TouchList with touched points.
     */
    changedTouches: MouseEventArgs[] | TouchEventArgs[];
    /**
     * Cancel the default action.
     */
    preventDefault(): void;
    /**
     * The horizontal coordinate point of client area.
     */
    clientX: number;
    /**
     * The vertical coordinate point of client area.
     */
    clientY: number;
}
//node_modules/@syncfusion/ej2-base/src/util.d.ts
/**
 * Common utility methods
 */
export interface IKeyValue extends CSSStyleDeclaration {
    [key: string]: any;
}
/**
 * Create Instance from constructor function with desired parameters.
 * @param {Function} classFunction - Class function to which need to create instance
 * @param {any[]} params - Parameters need to passed while creating instance
 * @return {any}
 * @private
 */
export  function createInstance(classFunction: Function, params: any[]): any;
/**
 * To run a callback function immediately after the browser has completed other operations.
 * @param {Function} handler - callback function to be triggered.
 * @return {Function}
 * @private
 */
export  function setImmediate(handler: Function): Function;
/**
 * To get nameSpace value from the desired object.
 * @param {string} nameSpace - String value to the get the inner object
 * @param {any} obj - Object to get the inner object value.
 * @return {any}
 * @private
 */
export  function getValue(nameSpace: string, obj: any): any;
/**
 * To set value for the nameSpace in desired object.
 * @param {string} nameSpace - String value to the get the inner object
 * @param {any} value - Value that you need to set.
 * @param {any} obj - Object to get the inner object value.
 * @return {void}
 * @private
 */
export  function setValue(nameSpace: string, value: any, obj: any): any;
/**
 * Delete an item from Object
 * @param {any} obj - Object in which we need to delete an item.
 * @param {string} params - String value to the get the inner object
 * @return {void}
 * @private
 */
export  function deleteObject(obj: any, key: string): void;
/**
 * Check weather the given argument is only object.
 * @param {any} obj - Object which is need to check.
 * @return {boolean}
 * @private
 */
export  function isObject(obj: any): boolean;
/**
 * To get enum value by giving the string.
 * @param {any} enumObject - Enum object.
 * @param {string} enumValue - Enum value to be searched
 * @return {any}
 * @private
 */
export  function getEnumValue(enumObject: any, enumValue: string | number): any;
/**
 * Merge the source object into destination object.
 * @param {any} source - source object which is going to merge with destination object
 * @param {any} destination - object need to be merged
 * @return {void}
 * @private
 */
export  function merge(source: Object, destination: Object): void;
/**
 * Extend the two object with newer one.
 * @param {any} copied - Resultant object after merged
 * @param {Object} first - First object need to merge
 * @param {Object} second - Second object need to merge
 * @return {Object}
 * @private
 */
export  function extend(copied: Object, first: Object, second?: Object, deep?: boolean): Object;
/**
 * To check whether the object is null or undefined.
 * @param {Object} value - To check the object is null or undefined
 * @return {boolean}
 * @private
 */
export  function isNullOrUndefined(value: Object): boolean;
/**
 * To check whether the object is undefined.
 * @param {Object} value - To check the object is undefined
 * @return {boolean}
 * @private
 */
export  function isUndefined(value: Object): boolean;
/**
 * To return the generated unique name
 * @param {string} definedName - To concatenate the unique id to provided name
 * @return {string}
 * @private
 */
export  function getUniqueID(definedName?: string): string;
/**
 * It limits the rate at which a function can fire. The function will fire only once every provided second instead of as quickly.
 * @param {Function} eventFunction - Specifies the function to run when the event occurs
 * @param {number} delay - A number that specifies the milliseconds for function delay call option
 * @return {Function}
 * @private
 */
export  function debounce(eventFunction: Function, delay: number): Function;
/**
 * To convert the object to string for query url
 * @param  {Object} data
 * @returns string
 * @private
 */
export  function queryParams(data: any): string;
/**
 * To check whether the given array contains object.
 * @param {T[]} value- Specifies the T type array to be checked.
 * @private
 */
export  function isObjectArray<T>(value: T[]): boolean;
/**
 * To check whether the  child element is descendant to parent element or parent and child are same element.
 * @param{Element} - Specifies the child element to compare with parent.
 * @param{Element} - Specifies the parent element.
 * @return boolean
 * @private
 */
export  function compareElementParent(child: Element, parent: Element): boolean;
/**
 * To throw custom error message.
 * @param{string} - Specifies the error message to be thrown.
 * @private
 */
export  function throwError(message: string): void;
/**
 * This function is used to print given element
 * @param{Element} element - Specifies the print content element.
 * @param{Window} printWindow - Specifies the print window.
 * @private
 */
export  function print(element: Element, printWindow?: Window): Window;
/**
 * Function to normalize the units applied to the element.
 * @param  {number|string} value
 * @return {string} result
 * @private
 */
export  function formatUnit(value: number | string): string;
/**
 * Function to check whether the platform is blazor or not.
 * @return {boolean} result
 * @private
 */
export  function isBlazor(): boolean;
/**
 * Function to convert xPath to DOM element in blazor platform
 * @return {HTMLElement} result
 * @param {HTMLElement | object} element
 * @private
 */
export  function getElement(element: object): HTMLElement;
/**
 * Function to fetch the Instances of a HTML element for the given component.
 * @param {string | HTMLElement} element
 * @param {any} component
 * @return {Object} inst
 * @private
 */
export  function getInstance(element: string | HTMLElement, component: any): Object;
/**
 * Function to add instances for the given element.
 * @param {string | HTMLElement} element
 * @param {Object} instance
 * @return {void}
 * @private
 */
export  function addInstance(element: string | HTMLElement, instance: Object): void;
/**
 * Function to generate the unique id.
 * @return {any}
 * @private
 */
export  function uniqueID(): any;
 }
export namespace build { 

 }
export namespace buttons { 

//node_modules/@syncfusion/ej2-buttons/src/button/button-model.d.ts
/**
 * Interface for a class Button
 */
export interface ButtonModel extends base.ComponentModel{
    /**
     * Positions the icon before/after the text content in the Button.
     * The possible values are:
     * * Left: The icon will be positioned to the left of the text content.
     * * Right: The icon will be positioned to the right of the text content.
     * @default "left"
     */
    iconPosition?: IconPosition;
    /**
     * Defines class/multiple classes separated by a space for the Button that is used to include an icon.
     * Buttons can also include font icon and sprite image.
     * @default ""
     */
    iconCss?: string;
    /**
     * Specifies a value that indicates whether the Button is `disabled` or not.
     * @default false.
     */
    disabled?: boolean;
    /**
     * Allows the appearance of the Button to be enhanced and visually appealing when set to `true`.
     * @default false
     */
    isPrimary?: boolean;
    /**
     * Defines class/multiple classes separated by a space in the Button element. The Button types, styles, and
     * size can be defined by using
     * [`this`](http://ej2.syncfusion.com/documentation/button/howto.html?lang=typescript#create-a-block-button).
     * @default ""
     */
    cssClass?: string;
    /**
     * Defines the text `content` of the Button element.
     * @default ""
     */
    content?: string;
    /**
     * Makes the Button toggle, when set to `true`. When you click it, the state changes from normal to active.
     * @default false
     */
    isToggle?: boolean;
    /**
     * Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
     * @private
     */
    locale?: string;
    /**
     * Triggers once the component rendering is completed.
     * @event
     * @blazorProperty 'Created'
     */
    created?: base.EmitType<Event>;
}
//node_modules/@syncfusion/ej2-buttons/src/button/button.d.ts
export  type IconPosition = 'Left' | 'Right' | 'Top' | 'Bottom';
/**
 * The Button is a graphical user interface element that triggers an event on its click action. It can contain a text, an image, or both.
 * ```html
 * <button id="button">Button</button>
 * ```
 * ```typescript
 * <script>
 * var btnObj = new Button();
 * btnObj.appendTo("#button");
 * </script>
 * ```
 */
export  class Button extends base.Component<HTMLButtonElement> implements base.INotifyPropertyChanged {
    private removeRippleEffect;
    /**
     * Positions the icon before/after the text content in the Button.
     * The possible values are:
     * * Left: The icon will be positioned to the left of the text content.
     * * Right: The icon will be positioned to the right of the text content.
     * @default "left"
     */
    iconPosition: IconPosition;
    /**
     * Defines class/multiple classes separated by a space for the Button that is used to include an icon.
     * Buttons can also include font icon and sprite image.
     * @default ""
     */
    iconCss: string;
    /**
     * Specifies a value that indicates whether the Button is `disabled` or not.
     * @default false.
     */
    disabled: boolean;
    /**
     * Allows the appearance of the Button to be enhanced and visually appealing when set to `true`.
     * @default false
     */
    isPrimary: boolean;
    /**
     * Defines class/multiple classes separated by a space in the Button element. The Button types, styles, and
     * size can be defined by using
     * [`this`](http://ej2.syncfusion.com/documentation/button/howto.html?lang=typescript#create-a-block-button).
     * @default ""
     */
    cssClass: string;
    /**
     * Defines the text `content` of the Button element.
     * @default ""
     */
    content: string;
    /**
     * Makes the Button toggle, when set to `true`. When you click it, the state changes from normal to active.
     * @default false
     */
    isToggle: boolean;
    /**
     * Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
     * @private
     */
    locale: string;
    /**
     * Triggers once the component rendering is completed.
     * @event
     * @blazorProperty 'Created'
     */
    created: base.EmitType<Event>;
    /**
     * Constructor for creating the widget
     * @param  {ButtonModel} options?
     * @param  {string|HTMLButtonElement} element?
     */
    constructor(options?: ButtonModel, element?: string | HTMLButtonElement);
    protected preRender(): void;
    /**
     * Initialize the control rendering
     * @returns void
     * @private
     */
    render(): void;
    private initialize;
    private controlStatus;
    private setIconCss;
    protected wireEvents(): void;
    protected unWireEvents(): void;
    private btnClickHandler;
    /**
     * Destroys the widget.
     * @returns void
     */
    destroy(): void;
    /**
     * Get component name.
     * @returns string
     * @private
     */
    getModuleName(): string;
    /**
     * Get the properties to be maintained in the persisted state.
     * @returns string
     * @private
     */
    getPersistData(): string;
    /**
     * Dynamically injects the required modules to the component.
     * @private
     */
    static Inject(): void;
    /**
     * Called internally if any of the property value changed.
     * @param  {ButtonModel} newProp
     * @param  {ButtonModel} oldProp
     * @returns void
     * @private
     */
    onPropertyChanged(newProp: ButtonModel, oldProp: ButtonModel): void;
    /**
     * Click the button element
     * its native method
     * @public
     */
    click(): void;
    /**
     * Sets the focus to Button
     * its native method
     * @public
     */
    focusIn(): void;
}
//node_modules/@syncfusion/ej2-buttons/src/button/index.d.ts
/**
 * Button modules
 */
//node_modules/@syncfusion/ej2-buttons/src/check-box/check-box-model.d.ts
/**
 * Interface for a class CheckBox
 */
export interface CheckBoxModel extends base.ComponentModel{
    /**
     * Triggers when the CheckBox state has been changed by user interaction.
     * @event
     * @blazorProperty 'ValueChange'
     */
    change?: base.EmitType<ChangeEventArgs>;
    /**
     * Triggers once the component rendering is completed.
     * @event
     * @blazorProperty 'Created'
     */
    created?: base.EmitType<Event>;
    /**
     * Specifies a value that indicates whether the CheckBox is `checked` or not.
     * When set to `true`, the CheckBox will be in `checked` state.
     * @default false
     */
    checked?: boolean;
    /**
     * Defines class/multiple classes separated by a space in the CheckBox element.
     * You can add custom styles to the CheckBox by using this property.
     * @default ''
     */
    cssClass?: string;
    /**
     * Specifies a value that indicates whether the CheckBox is `disabled` or not.
     * When set to `true`, the CheckBox will be in `disabled` state.
     * @default false
     */
    disabled?: boolean;
    /**
     * Specifies a value that indicates whether the CheckBox is in `indeterminate` state or not.
     * When set to `true`, the CheckBox will be in `indeterminate` state.
     * @default false
     */
    indeterminate?: boolean;
    /**
     * Defines the caption for the CheckBox, that describes the purpose of the CheckBox.
     * @default ''
     */
    label?: string;
    /**
     * Positions label `before`/`after` the CheckBox.
     * The possible values are:
     * * Before - The label is positioned to left of the CheckBox.
     * * After - The label is positioned to right of the CheckBox.
     * @default 'After'
     */
    labelPosition?: LabelPosition;
    /**
     * Defines `name` attribute for the CheckBox.
     * It is used to reference form data (CheckBox value) after a form is submitted.
     * @default ''
     */
    name?: string;
    /**
     * Defines `value` attribute for the CheckBox.
     * It is a form data passed to the server when submitting the form.
     * @default ''
     */
    value?: string;
    /**
     * You can add the additional html attributes such as disabled, value etc., to the element.
     * If you configured both property and equivalent html attribute then the component considers the property value.
     * @default {}
     */
    htmlAttributes?: { [key: string]: string;
 };
}
//node_modules/@syncfusion/ej2-buttons/src/check-box/check-box.d.ts
export  type LabelPosition = 'After' | 'Before';
/**
 * The CheckBox is a graphical user interface element that allows you to select one or more options from the choices.
 * It contains checked, unchecked, and indeterminate states.
 * ```html
 * <input type="checkbox" id="checkbox"/>
 * <script>
 * var checkboxObj = new CheckBox({ label: "Default" });
 * checkboxObj.appendTo("#checkbox");
 * </script>
 * ```
 */
export  class CheckBox extends base.Component<HTMLInputElement> implements base.INotifyPropertyChanged {
    private tagName;
    private isFocused;
    private isMouseClick;
    private keyboardModule;
    private formElement;
    private initialCheckedValue;
    /**
     * Triggers when the CheckBox state has been changed by user interaction.
     * @event
     * @blazorProperty 'ValueChange'
     */
    change: base.EmitType<ChangeEventArgs>;
    /**
     * Triggers once the component rendering is completed.
     * @event
     * @blazorProperty 'Created'
     */
    created: base.EmitType<Event>;
    /**
     * Specifies a value that indicates whether the CheckBox is `checked` or not.
     * When set to `true`, the CheckBox will be in `checked` state.
     * @default false
     */
    checked: boolean;
    /**
     * Defines class/multiple classes separated by a space in the CheckBox element.
     * You can add custom styles to the CheckBox by using this property.
     * @default ''
     */
    cssClass: string;
    /**
     * Specifies a value that indicates whether the CheckBox is `disabled` or not.
     * When set to `true`, the CheckBox will be in `disabled` state.
     * @default false
     */
    disabled: boolean;
    /**
     * Specifies a value that indicates whether the CheckBox is in `indeterminate` state or not.
     * When set to `true`, the CheckBox will be in `indeterminate` state.
     * @default false
     */
    indeterminate: boolean;
    /**
     * Defines the caption for the CheckBox, that describes the purpose of the CheckBox.
     * @default ''
     */
    label: string;
    /**
     * Positions label `before`/`after` the CheckBox.
     * The possible values are:
     * * Before - The label is positioned to left of the CheckBox.
     * * After - The label is positioned to right of the CheckBox.
     * @default 'After'
     */
    labelPosition: LabelPosition;
    /**
     * Defines `name` attribute for the CheckBox.
     * It is used to reference form data (CheckBox value) after a form is submitted.
     * @default ''
     */
    name: string;
    /**
     * Defines `value` attribute for the CheckBox.
     * It is a form data passed to the server when submitting the form.
     * @default ''
     */
    value: string;
    /**
     * You can add the additional html attributes such as disabled, value etc., to the element.
     * If you configured both property and equivalent html attribute then the component considers the property value.
     * @default {}
     */
    htmlAttributes: {
        [key: string]: string;
    };
    /**
     * Constructor for creating the widget
     * @private
     */
    constructor(options?: CheckBoxModel, element?: string | HTMLInputElement);
    private changeState;
    private clickHandler;
    /**
     * Destroys the widget.
     * @returns void
     */
    destroy(): void;
    private focusHandler;
    private focusOutHandler;
    /**
     * Gets the module name.
     * @private
     */
    protected getModuleName(): string;
    /**
     * Gets the properties to be maintained in the persistence state.
     * @private
     */
    getPersistData(): string;
    private getWrapper;
    private initialize;
    private initWrapper;
    private keyUpHandler;
    private labelMouseHandler;
    /**
     * Called internally if any of the property value changes.
     * @private
     */
    onPropertyChanged(newProp: CheckBoxModel, oldProp: CheckBoxModel): void;
    /**
     * Initialize Angular, React and Unique ID support.
     * @private
     */
    protected preRender(): void;
    /**
     * Initialize the control rendering.
     * @private
     */
    protected render(): void;
    private setDisabled;
    private setText;
    private changeHandler;
    private formResetHandler;
    protected unWireEvents(): void;
    protected wireEvents(): void;
    protected updateHtmlAttributeToWrapper(): void;
    /**
     * Click the CheckBox element
     * its native method
     * @public
     */
    click(): void;
    /**
     * Sets the focus to CheckBox
     * its native method
     * @public
     */
    focusIn(): void;
}
//node_modules/@syncfusion/ej2-buttons/src/check-box/index.d.ts
/**
 * CheckBox modules
 */
//node_modules/@syncfusion/ej2-buttons/src/chips/chip-list-model.d.ts
/**
 * Interface for a class ChipList
 */
export interface ChipListModel extends base.ComponentModel{
    /**
     * This chips property helps to render ChipList component.
     * @default []
     */
    chips?: string[] | number[] | ChipModel[];
    /**
     * This text property helps to render Chip component.
     * @default ''
     */
    text?: string;
    /**
     * This avatarText property helps to customize avatar content.
     * @default ''
     */
    avatarText?: string;
    /**
     * This avatarIconCss property helps to customize avatar element.
     * @default ''
     */
    avatarIconCss?: string;
    /**
     * This leadingIconCss property helps to customize leading icon element.
     * @default ''
     */
    leadingIconCss?: string;
    /**
     * This trailingIconCss property helps to customize trailing icon element.
     * @default ''
     */
    trailingIconCss?: string;
    /**
     * This cssClass property helps to customize ChipList component.
     * @default ''
     */
    cssClass?: string;
    /**
     * This enabled property helps to enable/disable ChipList component.
     * @default true
     */
    enabled?: boolean;
    /**
     * This selectedChips property helps to select chip items.
     * @default []
     */
    selectedChips?: number[] | number;
    /**
     * This selection property enables chip selection type.
     * @default 'None'
     */
    selection?: Selection;
    /**
     * This enableDelete property helps to enable delete functionality.
     * @default false
     */
    enableDelete?: boolean;
    /**
     * This created event will get triggered once the component rendering is completed.
     * @event
     * @blazorProperty 'Created'
     */
    created?: base.EmitType<Event>;
    /**
     * This click event will get triggered once the chip is clicked.
     * @event
     * @blazorProperty 'OnClick'
     */
    click?: base.EmitType<ClickEventArgs>;
    /**
     * This delete event will get triggered before removing the chip.
     * @event
     * @blazorProperty 'OnDelete'
     */
    delete?: base.EmitType<DeleteEventArgs>;
}
//node_modules/@syncfusion/ej2-buttons/src/chips/chip-list.d.ts
export  const classNames: ClassNames;
export  type Selection = 'Single' | 'Multiple' | 'None';
export interface ClassNames {
    chipSet: string;
    chip: string;
    avatar: string;
    text: string;
    icon: string;
    delete: string;
    deleteIcon: string;
    multiSelection: string;
    singleSelection: string;
    active: string;
    chipWrapper: string;
    iconWrapper: string;
    focused: string;
    disabled: string;
    rtl: string;
}
export interface SelectedItems {
    /**
     * It denotes the selected items text.
     */
    texts: string[];
    /**
     * It denotes the selected items index.
     */
    Indexes: number[];
    /**
     * It denotes the selected items data.
     */
    data: string[] | number[] | ChipModel[];
    /**
     * It denotes the selected items element.
     */
    elements: HTMLElement[];
}
export interface SelectedItem {
    /**
     * It denotes the selected item text.
     */
    text: string;
    /**
     * It denotes the selected item index.
     */
    index: number;
    /**
     * It denotes the selected item data.
     */
    data: string | number | ChipModel;
    /**
     * It denotes the selected item element.
     */
    element: HTMLElement;
}
export interface ClickEventArgs {
    /**
     * It denotes the clicked item text.
     */
    text: string;
    /**
     * It denotes the clicked item index.
     */
    index?: number;
    /**
     * It denotes the clicked item data.
     */
    data: string | number | ChipModel;
    /**
     * It denotes the clicked item element.
     */
    element: HTMLElement;
    /**
     * It denotes whether the clicked item is selected or not.
     */
    selected?: boolean;
    /**
     * It denotes the event.
     */
    event: base.MouseEventArgs | base.KeyboardEventArgs;
}
export interface DeleteEventArgs {
    /**
     * It denotes the deleted item text.
     */
    text: string;
    /**
     * It denotes the deleted item index.
     */
    index: number;
    /**
     * It denotes the deleted item data.
     */
    data: string | number | ChipModel;
    /**
     * It denotes the deleted Item element.
     */
    element: HTMLElement;
    /**
     * It denotes whether the item can be deleted or not.
     */
    cancel: boolean;
    /**
     * It denotes the event.
     */
    event: base.MouseEventArgs | base.KeyboardEventArgs;
}
export interface ChipDataArgs {
    /**
     * It denotes the item text.
     */
    text: string;
    /**
     * It denotes the Item index.
     */
    index: number;
    /**
     * It denotes the item data.
     */
    data: string | number | ChipModel;
    /**
     * It denotes the item element.
     */
    element: HTMLElement;
}
/**
 * A chip component is a small block of essential information, mostly used on contacts or filter tags.
 * ```html
 * <div id="chip"></div>
 * ```
 * ```typescript
 * <script>
 * var chipObj = new ChipList();
 * chipObj.appendTo("#chip");
 * </script>
 * ```
 */
export  class ChipList extends base.Component<HTMLElement> implements base.INotifyPropertyChanged {
    /**
     * This chips property helps to render ChipList component.
     * @default []
     */
    chips: string[] | number[] | ChipModel[];
    /**
     * This text property helps to render Chip component.
     * @default ''
     */
    text: string;
    /**
     * This avatarText property helps to customize avatar content.
     * @default ''
     */
    avatarText: string;
    /**
     * This avatarIconCss property helps to customize avatar element.
     * @default ''
     */
    avatarIconCss: string;
    /**
     * This leadingIconCss property helps to customize leading icon element.
     * @default ''
     */
    leadingIconCss: string;
    /**
     * This trailingIconCss property helps to customize trailing icon element.
     * @default ''
     */
    trailingIconCss: string;
    /**
     * This cssClass property helps to customize ChipList component.
     * @default ''
     */
    cssClass: string;
    /**
     * This enabled property helps to enable/disable ChipList component.
     * @default true
     */
    enabled: boolean;
    /**
     * This selectedChips property helps to select chip items.
     * @default []
     */
    selectedChips: number[] | number;
    /**
     * This selection property enables chip selection type.
     * @default 'None'
     */
    selection: Selection;
    /**
     * This enableDelete property helps to enable delete functionality.
     * @default false
     */
    enableDelete: boolean;
    /**
     * This created event will get triggered once the component rendering is completed.
     * @event
     * @blazorProperty 'Created'
     */
    created: base.EmitType<Event>;
    /**
     * This click event will get triggered once the chip is clicked.
     * @event
     * @blazorProperty 'OnClick'
     */
    click: base.EmitType<ClickEventArgs>;
    /**
     * This delete event will get triggered before removing the chip.
     * @event
     * @blazorProperty 'OnDelete'
     */
    delete: base.EmitType<DeleteEventArgs>;
    constructor(options?: ChipListModel, element?: string | HTMLElement);
    private rippleFunctin;
    private type;
    private innerText;
    preRender(): void;
    render(): void;
    private createChip;
    private setAttributes;
    private setRtl;
    private chipCreation;
    private getFieldValues;
    private elementCreation;
    /**
     * A function that finds chip based on given input.
     * @param  {number | HTMLElement } fields - We can pass index number or element of chip.
     */
    find(fields: number | HTMLElement): ChipDataArgs;
    /**
     * A function that adds chip items based on given input.
     * @param  {string[] | number[] | ChipModel[] | string | number | ChipModel} chipsData - We can pass array of string or
     *  array of number or array of chip model or string data or number data or chip model.
     */
    add(chipsData: string[] | number[] | ChipModel[] | string | number | ChipModel): void;
    /**
     * A function that selects chip items based on given input.
     * @param  {number | number[] | HTMLElement | HTMLElement[]} fields - We can pass number or array of number
     *  or chip element or array of chip element.
     */
    select(fields: number | number[] | HTMLElement | HTMLElement[]): void;
    /**
     * A function that removes chip items based on given input.
     * @param  {number | number[] | HTMLElement | HTMLElement[]} fields - We can pass number or array of number
     *  or chip element or array of chip element.
     */
    remove(fields: number | number[] | HTMLElement | HTMLElement[]): void;
    /**
     * A function that returns selected chips data.
     */
    getSelectedChips(): SelectedItem | SelectedItems;
    private wireEvent;
    private keyHandler;
    private focusInHandler;
    private focusOutHandler;
    private clickHandler;
    private selectionHandler;
    private deleteHandler;
    /**
     * It is used to destroy the ChipList component.
     */
    destroy(): void;
    private removeMultipleAttributes;
    getPersistData(): string;
    getModuleName(): string;
    onPropertyChanged(newProp: ChipList, oldProp: ChipList): void;
}
//node_modules/@syncfusion/ej2-buttons/src/chips/chip.d.ts
/**
 * Represents ChipList `Chip` model class.
 */
export  class Chip {
    /**
     * This text property helps to render ChipList component.
     * @default ''
     */
    text: string;
    /**
     * This avatarText property helps to customize avatar content.
     * @default ''
     */
    avatarText: string;
    /**
     * This avatarIconCss property helps to customize avatar element.
     * @default ''
     */
    avatarIconCss: string;
    /**
     * This leadingIconCss property helps to customize leading icon element.
     * @default ''
     */
    leadingIconCss: string;
    /**
     * This trailingIconCss property helps to customize trailing icon element.
     * @default ''
     */
    trailingIconCss: string;
    /**
     * This cssClass property helps to customize ChipList component.
     * @default ''
     */
    cssClass: string;
    /**
     * This enabled property helps to enable/disable ChipList component.
     * @default true
     */
    enabled: boolean;
}
export interface ChipModel {
    /**
     * This text property helps to render ChipList component.
     * @default ''
     */
    text?: string;
    /**
     * This avatarText property helps to customize avatar content.
     * @default ''
     */
    avatarText?: string;
    /**
     * This avatarIconCss property helps to customize avatar element.
     * @default ''
     */
    avatarIconCss?: string;
    /**
     * This leadingIconCss property helps to customize leading icon element.
     * @default ''
     */
    leadingIconCss?: string;
    /**
     * This trailingIconCss property helps to customize trailing icon element.
     * @default ''
     */
    trailingIconCss?: string;
    /**
     * This cssClass property helps to customize ChipList component.
     * @default ''
     */
    cssClass?: string;
    /**
     * This enabled property helps to enable/disable ChipList component.
     * @default true
     */
    enabled?: boolean;
}
//node_modules/@syncfusion/ej2-buttons/src/chips/index.d.ts
/**
 * Chip modules
 */
//node_modules/@syncfusion/ej2-buttons/src/common/common.d.ts
/**
 * Initialize wrapper element for angular.
 * @private
 */
export  function wrapperInitialize(createElement: CreateElementArgs, tag: string, type: string, element: HTMLInputElement, WRAPPER: string, role: string): HTMLInputElement;
export  function getTextNode(element: HTMLElement): Node;
/**
 * Destroy the button components.
 * @private
 */
export  function destroy(ejInst: Switch | CheckBox, wrapper: Element, tagName: string): void;
export  function preRender(proxy: Switch | CheckBox, control: string, wrapper: string, element: HTMLInputElement, moduleName: string): void;
/**
 * Creates CheckBox component UI with theming and ripple support.
 * @private
 */
export  function createCheckBox(createElement: CreateElementArgs, enableRipple?: boolean, options?: CheckBoxUtilModel): Element;
export  function rippleMouseHandler(e: MouseEvent, rippleSpan: Element): void;
/**
 * Append hidden input to given element
 * @private
 */
export  function setHiddenInput(proxy: Switch | CheckBox, wrap: Element): void;
export interface CheckBoxUtilModel {
    checked?: boolean;
    label?: string;
    enableRtl?: boolean;
    cssClass?: string;
}
export interface ChangeEventArgs extends base.BaseEventArgs {
    /** Returns the event parameters of the CheckBox or Switch. */
    event?: Event;
    /** Returns the checked value of the CheckBox or Switch. */
    checked?: boolean;
}
export  type CreateElementArgs = (tag: string, prop?: {
    id?: string;
    className?: string;
    innerHTML?: string;
    styles?: string;
    attrs?: {
        [key: string]: string;
    };
}) => HTMLElement;
//node_modules/@syncfusion/ej2-buttons/src/common/index.d.ts
/**
 * Common modules
 */
//node_modules/@syncfusion/ej2-buttons/src/index.d.ts
/**
 * Button all modules
 */
//node_modules/@syncfusion/ej2-buttons/src/radio-button/index.d.ts
/**
 * RadioButton modules
 */
//node_modules/@syncfusion/ej2-buttons/src/radio-button/radio-button-model.d.ts
/**
 * Interface for a class RadioButton
 */
export interface RadioButtonModel extends base.ComponentModel{
    /**
     * base.Event trigger when the RadioButton state has been changed by user interaction.
     * @event
     * @blazorProperty 'ValueChange'
     */
    change?: base.EmitType<ChangeArgs>;
    /**
     * Triggers once the component rendering is completed.
     * @event
     * @blazorProperty 'Created'
     */
    created?: base.EmitType<Event>;
    /**
     * Specifies a value that indicates whether the RadioButton is `checked` or not.
     * When set to `true`, the RadioButton will be in `checked` state.
     * @default false
     */
    checked?: boolean;
    /**
     * Defines class/multiple classes separated by a space in the RadioButton element.
     * You can add custom styles to the RadioButton by using this property.
     * @default ''
     */
    cssClass?: string;
    /**
     * Specifies a value that indicates whether the RadioButton is `disabled` or not.
     * When set to `true`, the RadioButton will be in `disabled` state.
     * @default false
     */
    disabled?: boolean;
    /**
     * Defines the caption for the RadioButton, that describes the purpose of the RadioButton.
     * @default ''
     */
    label?: string;
    /**
     * Positions label `before`/`after` the RadioButton.
     * The possible values are:
     * * Before: The label is positioned to left of the RadioButton.
     * * After: The label is positioned to right of the RadioButton.
     * @default 'After'
     */
    labelPosition?: RadioLabelPosition;
    /**
     * Defines `name` attribute for the RadioButton.
     * It is used to reference form data (RadioButton value) after a form is submitted.
     * @default ''
     */
    name?: string;
    /**
     * Defines `value` attribute for the RadioButton.
     * It is a form data passed to the server when submitting the form.
     * @default ''
     */
    value?: string;
}
//node_modules/@syncfusion/ej2-buttons/src/radio-button/radio-button.d.ts
export  type RadioLabelPosition = 'After' | 'Before';
/**
 * The RadioButton is a graphical user interface element that allows you to select one option from the choices.
 * It contains checked and unchecked states.
 * ```html
 * <input type="radio" id="radio"/>
 * <script>
 * var radioObj = new RadioButton({ label: "Default" });
 * radioObj.appendTo("#radio");
 * </script>
 * ```
 */
export  class RadioButton extends base.Component<HTMLInputElement> implements base.INotifyPropertyChanged {
    private tagName;
    private isFocused;
    private formElement;
    private initialCheckedValue;
    private angularValue;
    /**
     * Event trigger when the RadioButton state has been changed by user interaction.
     * @event
     * @blazorProperty 'ValueChange'
     */
    change: base.EmitType<ChangeArgs>;
    /**
     * Triggers once the component rendering is completed.
     * @event
     * @blazorProperty 'Created'
     */
    created: base.EmitType<Event>;
    /**
     * Specifies a value that indicates whether the RadioButton is `checked` or not.
     * When set to `true`, the RadioButton will be in `checked` state.
     * @default false
     */
    checked: boolean;
    /**
     * Defines class/multiple classes separated by a space in the RadioButton element.
     * You can add custom styles to the RadioButton by using this property.
     * @default ''
     */
    cssClass: string;
    /**
     * Specifies a value that indicates whether the RadioButton is `disabled` or not.
     * When set to `true`, the RadioButton will be in `disabled` state.
     * @default false
     */
    disabled: boolean;
    /**
     * Defines the caption for the RadioButton, that describes the purpose of the RadioButton.
     * @default ''
     */
    label: string;
    /**
     * Positions label `before`/`after` the RadioButton.
     * The possible values are:
     * * Before: The label is positioned to left of the RadioButton.
     * * After: The label is positioned to right of the RadioButton.
     * @default 'After'
     */
    labelPosition: RadioLabelPosition;
    /**
     * Defines `name` attribute for the RadioButton.
     * It is used to reference form data (RadioButton value) after a form is submitted.
     * @default ''
     */
    name: string;
    /**
     * Defines `value` attribute for the RadioButton.
     * It is a form data passed to the server when submitting the form.
     * @default ''
     */
    value: string;
    /**
     * Constructor for creating the widget
     * @private
     */
    constructor(options?: RadioButtonModel, element?: string | HTMLInputElement);
    private changeHandler;
    private updateChange;
    /**
     * Destroys the widget.
     * @returns void
     */
    destroy(): void;
    private focusHandler;
    private focusOutHandler;
    protected getModuleName(): string;
    /**
     * To get the value of selected radio button in a group.
     * @method getSelectedValue
     * @return {string}
     */
    getSelectedValue(): string;
    private getRadioGroup;
    /**
     * Gets the properties to be maintained in the persistence state.
     * @private
     */
    getPersistData(): string;
    private getLabel;
    private initialize;
    private initWrapper;
    private keyUpHandler;
    private labelRippleHandler;
    private formResetHandler;
    /**
     * Called internally if any of the property value changes.
     * @private
     */
    onPropertyChanged(newProp: RadioButtonModel, oldProp: RadioButtonModel): void;
    /**
     * Initialize checked Property, Angular and React and Unique ID support.
     * @private
     */
    protected preRender(): void;
    /**
     * Initialize the control rendering
     * @private
     */
    protected render(): void;
    private setDisabled;
    private setText;
    protected unWireEvents(): void;
    protected wireEvents(): void;
    /**
     * Click the RadioButton element
     * its native method
     * @public
     */
    click(): void;
    /**
     * Sets the focus to RadioButton
     * its native method
     * @public
     */
    focusIn(): void;
}
export interface ChangeArgs extends base.BaseEventArgs {
    /** Returns the value of the RadioButton. */
    value?: string;
    /** Returns the event parameters of the RadioButton. */
    event?: Event;
}
//node_modules/@syncfusion/ej2-buttons/src/switch/index.d.ts
/**
 * Switch modules
 */
//node_modules/@syncfusion/ej2-buttons/src/switch/switch-model.d.ts
/**
 * Interface for a class Switch
 */
export interface SwitchModel extends base.ComponentModel{
    /**
     * Triggers when Switch state has been changed by user interaction.
     * @event
     * @blazorProperty 'ValueChange'
     */
    change?: base.EmitType<ChangeEventArgs>;
    /**
     * Triggers once the component rendering is completed.
     * @event
     * @blazorProperty 'Created'
     */
    created?: base.EmitType<Event>;
    /**
     * Specifies a value that indicates whether the Switch is `checked` or not.
     * When set to `true`, the Switch will be in `checked` state.
     * @default false
     */
    checked?: boolean;
    /**
     * You can add custom styles to the Switch by using this property.
     * @default ''
     */
    cssClass?: string;
    /**
     * Specifies a value that indicates whether the Switch is `disabled` or not.
     * When set to `true`, the Switch will be in `disabled` state.
     * @default false
     */
    disabled?: boolean;
    /**
     * Defines `name` attribute for the Switch.
     * It is used to reference form data (Switch value) after a form is submitted.
     * @default ''
     */
    name?: string;
    /**
     * Specifies a text that indicates the Switch is in checked state.
     * @default ''
     */
    onLabel?: string;
    /**
     * Specifies a text that indicates the Switch is in unchecked state.
     * @default ''
     */
    offLabel?: string;
    /**
     * Defines `value` attribute for the Switch.
     * It is a form data passed to the server when submitting the form.
     * @default ''
     */
    value?: string;
}
//node_modules/@syncfusion/ej2-buttons/src/switch/switch.d.ts
/**
 * The Switch is a graphical user interface element that allows you to toggle between checked and unchecked states.
 * ```html
 * <input type="checkbox" id="switch"/>
 * <script>
 * var switchObj = new Switch({});
 * switchObj.appendTo("#switch");
 * </script>
 * ```
 */
export  class Switch extends base.Component<HTMLInputElement> implements base.INotifyPropertyChanged {
    private tagName;
    private isFocused;
    private isDrag;
    private delegateMouseUpHandler;
    private delegateKeyUpHandler;
    private formElement;
    private initialSwitchCheckedValue;
    /**
     * Triggers when Switch state has been changed by user interaction.
     * @event
     * @blazorProperty 'ValueChange'
     */
    change: base.EmitType<ChangeEventArgs>;
    /**
     * Triggers once the component rendering is completed.
     * @event
     * @blazorProperty 'Created'
     */
    created: base.EmitType<Event>;
    /**
     * Specifies a value that indicates whether the Switch is `checked` or not.
     * When set to `true`, the Switch will be in `checked` state.
     * @default false
     */
    checked: boolean;
    /**
     * You can add custom styles to the Switch by using this property.
     * @default ''
     */
    cssClass: string;
    /**
     * Specifies a value that indicates whether the Switch is `disabled` or not.
     * When set to `true`, the Switch will be in `disabled` state.
     * @default false
     */
    disabled: boolean;
    /**
     * Defines `name` attribute for the Switch.
     * It is used to reference form data (Switch value) after a form is submitted.
     * @default ''
     */
    name: string;
    /**
     * Specifies a text that indicates the Switch is in checked state.
     * @default ''
     */
    onLabel: string;
    /**
     * Specifies a text that indicates the Switch is in unchecked state.
     * @default ''
     */
    offLabel: string;
    /**
     * Defines `value` attribute for the Switch.
     * It is a form data passed to the server when submitting the form.
     * @default ''
     */
    value: string;
    /**
     * Constructor for creating the widget.
     * @private
     */
    constructor(options?: SwitchModel, element?: string | HTMLInputElement);
    private changeState;
    private clickHandler;
    /**
     * Destroys the Switch widget.
     * @returns void
     */
    destroy(): void;
    private focusHandler;
    private focusOutHandler;
    /**
     * Gets the module name.
     * @private
     */
    protected getModuleName(): string;
    /**
     * Gets the properties to be maintained in the persistence state.
     * @private
     */
    getPersistData(): string;
    private getWrapper;
    private initialize;
    private initWrapper;
    /**
     * Called internally if any of the property value changes.
     * @private
     */
    onPropertyChanged(newProp: SwitchModel, oldProp: SwitchModel): void;
    /**
     * Initialize Angular, React and Unique ID support.
     * @private
     */
    protected preRender(): void;
    /**
     * Initialize control rendering.
     * @private
     */
    protected render(): void;
    private rippleHandler;
    private rippleTouchHandler;
    private setDisabled;
    private setLabel;
    private switchFocusHandler;
    private switchMouseUp;
    private formResetHandler;
    /**
     * Toggle the Switch component state into checked/unchecked.
     * @returns void
     */
    toggle(): void;
    private wireEvents;
    private unWireEvents;
    /**
     * Click the switch element
     * its native method
     * @public
     */
    click(): void;
    /**
     * Sets the focus to Switch
     * its native method
     * @public
     */
    focusIn(): void;
}
 }
export namespace calendars { 

//node_modules/@syncfusion/ej2-calendars/src/calendar/calendar-model.d.ts
/**
 * Interface for a class CalendarBase
 * @private
 */
export interface CalendarBaseModel extends base.ComponentModel{
    /**
     * Gets or sets the minimum date that can be selected in the Calendar.
     * @default new Date(1900, 00, 01)
     * @blazorDefaultValue new DateTime(1900, 01, 01)
     */
    min?: Date;
    /**
     * Gets or sets the maximum date that can be selected in the Calendar.
     * @default new Date(2099, 11, 31)
     * @blazorDefaultValue new DateTime(2099, 12, 31)
     */
    max?: Date;
    /**
     * Gets or sets the Calendar's first day of the week. By default, the first day of the week will be based on the current culture.
     * @default 0
     * @aspType int
     * @blazorType int
     * > For more details about firstDayOfWeek refer to 
     * [`First day of week`](../../calendar/how-to/first-day-of-week#change-the-first-day-of-the-week) documentation.
     */
    firstDayOfWeek?: number;
    /**
     * Gets or sets the Calendar's Type like gregorian or islamic.
     * @default Gregorian
     */
    calendarMode?: CalendarType;
    /**
     * Specifies the initial view of the Calendar when it is opened.
     * With the help of this property, initial view can be changed to year or decade view.
     * @default Month
     *  
     * <table>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * View<br/></td><td colSpan=1 rowSpan=1>
     * Description<br/></td></tr> 
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * Month<br/></td><td colSpan=1 rowSpan=1>
     * Calendar view shows the days of the month.<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * Year<br/></td><td colSpan=1 rowSpan=1>
     * Calendar view shows the months of the year.<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * Decade<br/></td><td colSpan=1 rowSpan=1>
     * Calendar view shows the years of the decade.<br/></td></tr>
     * </table>
     *
     * > For more details about start refer to 
     * [`calendarView`](../../calendar/calendar-views#view-restriction)documentation.
     */
    start?: CalendarView;
    /**
     * Sets the maximum level of view such as month, year, and decade in the Calendar.
     * Depth view should be smaller than the start view to restrict its view navigation.
     * @default Month
     * 
     * <table> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * view<br/></td><td colSpan=1 rowSpan=1> 
     * Description<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * Month<br/></td><td colSpan=1 rowSpan=1> 
     * Calendar view shows up to the days of the month.<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * Year<br/></td><td colSpan=1 rowSpan=1> 
     * Calendar view shows up to the months of the year.<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * Decade<br/></td><td colSpan=1 rowSpan=1> 
     * Calendar view shows up to the years of the decade.<br/></td></tr> 
     * </table> 
     * 
     * > For more details about depth refer to 
     *  [`calendarView`](../../calendar/calendar-views#view-restriction)documentation.
     */
    depth?: CalendarView;
    /**
     * Determines whether the week number of the year is to be displayed in the calendar or not.
     * @default false
     * > For more details about weekNumber refer to 
     * [`Calendar with week number`](../../calendar/how-to/render-the-calendar-with-week-numbers)documentation.
     */
    weekNumber?: boolean;
    /**
     * Specifies whether the today button is to be displayed or not.
     * @default true
     */
    showTodayButton?: boolean;
    /**
     * Specifies the format of the day that to be displayed in header. By default, the format is ‘short’.
     * Possible formats are:
     * * `Short` - Sets the short format of day name (like Su ) in day header.
     * * `Narrow` - Sets the single character of day name (like S ) in day header.
     * * `Abbreviated` - Sets the min format of day name (like Sun ) in day header.
     * * `Wide` - Sets the long format of day name (like Sunday ) in day header.
     * @default Short
     */
    dayHeaderFormat?: DayHeaderFormats;
    /**
     * Enable or disable persisting component's state between page reloads. If enabled, following list of states will be persisted.
     * 1. value
     * @default false
     */
    enablePersistence?: boolean;
    /**
     * Customizes the key actions in Calendar.
     * For example, when using German keyboard, the key actions can be customized using these shortcuts.
     * 
     * <table> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * Key action<br/></td><td colSpan=1 rowSpan=1> 
     * Key<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * controlUp<br/></td><td colSpan=1 rowSpan=1> 
     * ctrl+38<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * controlDown<br/></td><td colSpan=1 rowSpan=1> 
     * ctrl+40<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * select<br/></td><td colSpan=1 rowSpan=1> 
     * enter<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * home<br/></td><td colSpan=1 rowSpan=1> 
     * home<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * end<br/></td><td colSpan=1 rowSpan=1> 
     * end<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * pageUp<br/></td><td colSpan=1 rowSpan=1> 
     * pageup<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * pageDown<br/></td><td colSpan=1 rowSpan=1> 
     * pagedown<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * shiftPageUp<br/></td><td colSpan=1 rowSpan=1> 
     * shift+pageup<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * shiftPageDown<br/></td><td colSpan=1 rowSpan=1> 
     * shift+pagedown<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * controlHome<br/></td><td colSpan=1 rowSpan=1> 
     * ctrl+home<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * controlEnd<br/></td><td colSpan=1 rowSpan=1> 
     * ctrl+end<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * altUpArrow<br/></td><td colSpan=1 rowSpan=1> 
     * alt+uparrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * spacebar<br/></td><td colSpan=1 rowSpan=1> 
     * space<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * altRightArrow<br/></td><td colSpan=1 rowSpan=1> 
     * alt+rightarrow<br/></td></tr>  
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * altLeftArrow<br/></td><td colSpan=1 rowSpan=1> 
     * alt+leftarrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * moveDown<br/></td><td colSpan=1 rowSpan=1> 
     * downarrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * moveUp<br/></td><td colSpan=1 rowSpan=1> 
     * uparrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * moveLeft<br/></td><td colSpan=1 rowSpan=1> 
     * leftarrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * moveRight<br/></td><td colSpan=1 rowSpan=1> 
     * rightarrow<br/></td></tr> 
     * </table>
     * 
     * @default null
     * @blazorType object
     */
    keyConfigs?: { [key: string]: string };
    /**
     * Triggers when Calendar is created.
     * @event
     * @blazorProperty 'Created'
     */
    created?: base.EmitType<Object>;
    /**
     * Triggers when Calendar is destroyed.
     * @event
     * @blazorProperty 'Destroyed'
     */
    destroyed?: base.EmitType<Object>;
    /**
     * Triggers when the Calendar is navigated to another level or within the same level of view.
     * @event
     * @blazorProperty 'Navigated'
     */
    navigated?: base.EmitType<NavigatedEventArgs>;
    /**
     * Triggers when each day cell of the Calendar is rendered.
     * @event
     * @blazorProperty 'OnRenderDayCell'
     */
    renderDayCell?: base.EmitType<RenderDayCellEventArgs>;
}
/**
 * Interface for a class Calendar
 */
export interface CalendarModel extends CalendarBaseModel{
    /**
     * Gets or sets the selected date of the Calendar.
     * @default null
     * @isBlazorNullableType true
     */
    value?: Date;
    /**
     * Gets or sets multiple selected dates of the calendar.
     * @default null
     */
    values?: Date[];
    /**
     * Specifies the option to enable the multiple dates selection of the calendar.
     * @default false
     */
    isMultiSelection?: boolean;
    /**
     * Triggers when the Calendar value is changed.
     * @event
     * @blazorProperty 'ValueChange'
     */
    change?: base.EmitType<ChangedEventArgs>;
}
//node_modules/@syncfusion/ej2-calendars/src/calendar/calendar.d.ts
/**
 * Specifies the view of the calendar.
 */
export  type CalendarView = 'Month' | 'Year' | 'Decade';
export  type CalendarType = 'Islamic' | 'Gregorian';
export  type DayHeaderFormats = 'Short' | 'Narrow' | 'Abbreviated' | 'Wide';
/**
 *
 * @private
 */
export  class CalendarBase extends base.Component<HTMLElement> implements base.INotifyPropertyChanged {
    protected headerElement: HTMLElement;
    protected contentElement: HTMLElement;
    private calendarEleCopy;
    protected table: HTMLElement;
    protected tableHeadElement: HTMLElement;
    protected tableBodyElement: Element;
    protected nextIcon: HTMLElement;
    protected previousIcon: HTMLElement;
    protected headerTitleElement: HTMLElement;
    protected todayElement: HTMLElement;
    protected footer: HTMLElement;
    protected keyboardModule: base.KeyboardEvents;
    protected globalize: base.Internationalization;
    islamicModule: Islamic;
    protected currentDate: Date;
    protected navigatedArgs: NavigatedEventArgs;
    protected renderDayCellArgs: RenderDayCellEventArgs;
    protected effect: string;
    protected previousDate: Date;
    protected previousValues: number;
    protected navigateHandler: Function;
    protected navigatePreviousHandler: Function;
    protected navigateNextHandler: Function;
    protected l10: base.L10n;
    protected todayDisabled: boolean;
    protected tabIndex: string;
    protected todayDate: Date;
    protected calendarElement: HTMLElement;
    protected isPopupClicked: boolean;
    protected isDateSelected: boolean;
    protected defaultKeyConfigs: {
        [key: string]: string;
    };
    /**
     * Gets or sets the minimum date that can be selected in the Calendar.
     * @default new Date(1900, 00, 01)
     * @blazorDefaultValue new DateTime(1900, 01, 01)
     */
    min: Date;
    /**
     * Gets or sets the maximum date that can be selected in the Calendar.
     * @default new Date(2099, 11, 31)
     * @blazorDefaultValue new DateTime(2099, 12, 31)
     */
    max: Date;
    /**
     * Gets or sets the Calendar's first day of the week. By default, the first day of the week will be based on the current culture.
     * @default 0
     * @aspType int
     * @blazorType int
     * > For more details about firstDayOfWeek refer to
     * [`First day of week`](../../calendar/how-to/first-day-of-week#change-the-first-day-of-the-week) documentation.
     */
    firstDayOfWeek: number;
    /**
     * Gets or sets the Calendar's Type like gregorian or islamic.
     * @default Gregorian
     */
    calendarMode: CalendarType;
    /**
     * Specifies the initial view of the Calendar when it is opened.
     * With the help of this property, initial view can be changed to year or decade view.
     * @default Month
     *
     * <table>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * View<br/></td><td colSpan=1 rowSpan=1>
     * Description<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * Month<br/></td><td colSpan=1 rowSpan=1>
     * Calendar view shows the days of the month.<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * Year<br/></td><td colSpan=1 rowSpan=1>
     * Calendar view shows the months of the year.<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * Decade<br/></td><td colSpan=1 rowSpan=1>
     * Calendar view shows the years of the decade.<br/></td></tr>
     * </table>
     *
     * > For more details about start refer to
     * [`calendarView`](../../calendar/calendar-views#view-restriction)documentation.
     */
    start: CalendarView;
    /**
     * Sets the maximum level of view such as month, year, and decade in the Calendar.
     * Depth view should be smaller than the start view to restrict its view navigation.
     * @default Month
     *
     * <table>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * view<br/></td><td colSpan=1 rowSpan=1>
     * Description<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * Month<br/></td><td colSpan=1 rowSpan=1>
     * Calendar view shows up to the days of the month.<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * Year<br/></td><td colSpan=1 rowSpan=1>
     * Calendar view shows up to the months of the year.<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * Decade<br/></td><td colSpan=1 rowSpan=1>
     * Calendar view shows up to the years of the decade.<br/></td></tr>
     * </table>
     *
     * > For more details about depth refer to
     *  [`calendarView`](../../calendar/calendar-views#view-restriction)documentation.
     */
    depth: CalendarView;
    /**
     * Determines whether the week number of the year is to be displayed in the calendar or not.
     * @default false
     * > For more details about weekNumber refer to
     * [`Calendar with week number`](../../calendar/how-to/render-the-calendar-with-week-numbers)documentation.
     */
    weekNumber: boolean;
    /**
     * Specifies whether the today button is to be displayed or not.
     * @default true
     */
    showTodayButton: boolean;
    /**
     * Specifies the format of the day that to be displayed in header. By default, the format is ‘short’.
     * Possible formats are:
     * * `Short` - Sets the short format of day name (like Su ) in day header.
     * * `Narrow` - Sets the single character of day name (like S ) in day header.
     * * `Abbreviated` - Sets the min format of day name (like Sun ) in day header.
     * * `Wide` - Sets the long format of day name (like Sunday ) in day header.
     * @default Short
     */
    dayHeaderFormat: DayHeaderFormats;
    /**
     * Enable or disable persisting component's state between page reloads. If enabled, following list of states will be persisted.
     * 1. value
     * @default false
     */
    enablePersistence: boolean;
    /**
     * Customizes the key actions in Calendar.
     * For example, when using German keyboard, the key actions can be customized using these shortcuts.
     *
     * <table>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * Key action<br/></td><td colSpan=1 rowSpan=1>
     * Key<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * controlUp<br/></td><td colSpan=1 rowSpan=1>
     * ctrl+38<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * controlDown<br/></td><td colSpan=1 rowSpan=1>
     * ctrl+40<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * select<br/></td><td colSpan=1 rowSpan=1>
     * enter<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * home<br/></td><td colSpan=1 rowSpan=1>
     * home<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * end<br/></td><td colSpan=1 rowSpan=1>
     * end<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * pageUp<br/></td><td colSpan=1 rowSpan=1>
     * pageup<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * pageDown<br/></td><td colSpan=1 rowSpan=1>
     * pagedown<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * shiftPageUp<br/></td><td colSpan=1 rowSpan=1>
     * shift+pageup<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * shiftPageDown<br/></td><td colSpan=1 rowSpan=1>
     * shift+pagedown<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * controlHome<br/></td><td colSpan=1 rowSpan=1>
     * ctrl+home<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * controlEnd<br/></td><td colSpan=1 rowSpan=1>
     * ctrl+end<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * altUpArrow<br/></td><td colSpan=1 rowSpan=1>
     * alt+uparrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * spacebar<br/></td><td colSpan=1 rowSpan=1>
     * space<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * altRightArrow<br/></td><td colSpan=1 rowSpan=1>
     * alt+rightarrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * altLeftArrow<br/></td><td colSpan=1 rowSpan=1>
     * alt+leftarrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * moveDown<br/></td><td colSpan=1 rowSpan=1>
     * downarrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * moveUp<br/></td><td colSpan=1 rowSpan=1>
     * uparrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * moveLeft<br/></td><td colSpan=1 rowSpan=1>
     * leftarrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * moveRight<br/></td><td colSpan=1 rowSpan=1>
     * rightarrow<br/></td></tr>
     * </table>
     *
     * @default null
     * @blazorType object
     */
    keyConfigs: {
        [key: string]: string;
    };
    /**
     * Triggers when Calendar is created.
     * @event
     * @blazorProperty 'Created'
     */
    created: base.EmitType<Object>;
    /**
     * Triggers when Calendar is destroyed.
     * @event
     * @blazorProperty 'Destroyed'
     */
    destroyed: base.EmitType<Object>;
    /**
     * Triggers when the Calendar is navigated to another level or within the same level of view.
     * @event
     * @blazorProperty 'Navigated'
     */
    navigated: base.EmitType<NavigatedEventArgs>;
    /**
     * Triggers when each day cell of the Calendar is rendered.
     * @event
     * @blazorProperty 'OnRenderDayCell'
     */
    renderDayCell: base.EmitType<RenderDayCellEventArgs>;
    /**
     * Initialized new instance of Calendar Class.
     * Constructor for creating the widget
     * @param  {CalendarModel} options?
     * @param  {string|HTMLElement} element?
     */
    constructor(options?: CalendarBaseModel, element?: string | HTMLElement);
    /**
     * To Initialize the control rendering.
     * @returns void
     * @private
     */
    protected render(): void;
    protected rangeValidation(min: Date, max: Date): void;
    protected validateDate(value?: Date): void;
    protected setOverlayIndex(popupWrapper: HTMLElement, popupElement: HTMLElement, modal: HTMLElement, isDevice: Boolean): void;
    protected minMaxUpdate(value?: Date): void;
    protected createHeader(): void;
    protected createContent(): void;
    protected getCultureValues(): string[];
    protected createContentHeader(): void;
    protected createContentBody(): void;
    protected updateFooter(): void;
    protected createContentFooter(): void;
    protected wireEvents(): void;
    protected todayButtonClick(value?: Date): void;
    protected keyActionHandle(e: base.KeyboardEventArgs, value?: Date, multiSelection?: boolean): void;
    protected KeyboardNavigate(number: number, currentView: number, e: KeyboardEvent, max: Date, min: Date): void;
    /**
     * Initialize the event handler
     * @private
     */
    protected preRender(value?: Date): void;
    protected minMaxDate(localDate: Date): Date;
    protected renderMonths(e?: Event, value?: Date): void;
    protected renderDays(currentDate: Date, e?: Event, value?: Date, multiSelection?: boolean, values?: Date[]): HTMLElement[];
    protected updateFocus(otherMonth: boolean, disabled: boolean, localDate: Date, tableElement: HTMLElement, currentDate: Date): void;
    protected renderYears(e?: Event, value?: Date): void;
    protected renderDecades(e?: Event, value?: Date): void;
    protected dayCell(localDate: Date): HTMLElement;
    protected firstDay(date: Date): Date;
    protected lastDay(date: Date, view: number): Date;
    protected checkDateValue(value: Date): Date;
    protected findLastDay(date: Date): Date;
    protected removeTableHeadElement(): void;
    protected renderTemplate(elements: HTMLElement[], count: number, classNm: string, e?: Event, value?: Date): void;
    protected clickHandler(e: MouseEvent, value: Date): void;
    protected clickEventEmitter(e: MouseEvent): void;
    protected contentClick(e?: MouseEvent, view?: number, element?: Element, value?: Date): void;
    protected switchView(view: number, e?: Event, multiSelection?: boolean): void;
    /**
     * To get component name
     * @private
     */
    protected getModuleName(): string;
    requiredModules(): base.ModuleDeclaration[];
    /**
     * Gets the properties to be maintained upon browser refresh.
     * @returns string
     */
    getPersistData(): string;
    /**
     * Called internally if any of the property value changed.
     * returns void
     * @private
     */
    onPropertyChanged(newProp: CalendarBaseModel, oldProp: CalendarBaseModel, multiSelection?: boolean, values?: Date[]): void;
    /**
     * values property updated with considered disabled dates of the calendar.
     */
    protected validateValues(multiSelection?: boolean, values?: Date[]): void;
    protected setValueUpdate(): void;
    protected copyValues(values: Date[]): Date[];
    protected titleUpdate(date: Date, view: string): void;
    protected setActiveDescendant(): string;
    protected iconHandler(): void;
    /**
     * Destroys the widget.
     * @returns void
     */
    destroy(): void;
    protected title(e?: Event): void;
    protected getViewNumber(stringVal: string): number;
    protected navigateTitle(e?: Event): void;
    protected previous(): void;
    protected navigatePrevious(e: MouseEvent | KeyboardEvent): void;
    protected next(): void;
    protected navigateNext(eve: MouseEvent | KeyboardEvent): void;
    /**
     * This method is used to navigate to the month/year/decade view of the Calendar.
     * @param  {string} view - Specifies the view of the Calendar.
     * @param  {Date} date - Specifies the focused date in a view.
     * @returns void
     */
    navigateTo(view: CalendarView, date: Date): void;
    /**
     * Gets the current view of the Calendar.
     * @returns string
     */
    currentView(): string;
    protected getDateVal(date: Date, value: Date): boolean;
    protected getCultureObjects(ld: Object, c: string): Object;
    protected getWeek(d: Date): number;
    protected setStartDate(date: Date, time: number): void;
    protected addMonths(date: Date, i: number): void;
    protected addYears(date: Date, i: number): void;
    protected getIdValue(e: MouseEvent | TouchEvent | KeyboardEvent, element: Element): Date;
    protected adjustLongHeaderSize(): void;
    protected selectDate(e: MouseEvent | base.KeyboardEventArgs, date: Date, node: Element, multiSelection?: boolean, values?: Date[]): void;
    protected checkPresentDate(dates: Date, values: Date[]): boolean;
    protected setAriaActiveDescendant(): void;
    protected previousIconHandler(disabled: boolean): void;
    protected renderDayCellEvent(args: RenderDayCellEventArgs): void;
    protected navigatedEvent(eve: MouseEvent | KeyboardEvent): void;
    protected triggerNavigate(event: MouseEvent | KeyboardEvent): void;
    protected nextIconHandler(disabled: boolean): void;
    protected compare(startDate: Date, endDate: Date, modifier: number): number;
    protected isMinMaxRange(date: Date): boolean;
    protected isMonthYearRange(date: Date): boolean;
    protected compareYear(start: Date, end: Date): number;
    protected compareDecade(start: Date, end: Date): number;
    protected shiftArray(array: string[], i: number): string[];
    protected addDay(date: Date, i: number, e: KeyboardEvent, max: Date, min: Date): void;
    protected findNextTD(date: Date, column: number, max: Date, min: Date): boolean;
    protected getMaxDays(d: Date): number;
    protected setDateDecade(date: Date, year: number): void;
    protected setDateYear(date: Date, value: Date): void;
    protected compareMonth(start: Date, end: Date): number;
    protected checkValue(inValue: string | Date | number): string;
    protected checkView(): void;
}
/**
 * Represents the Calendar component that allows the user to select a date.
 * ```html
 * <div id="calendar"/>
 * ```
 * ```typescript
 * <script>
 *   var calendarObj = new Calendar({ value: new Date() });
 *   calendarObj.appendTo("#calendar");
 * </script>
 * ```
 */
export  class Calendar extends CalendarBase {
    protected changedArgs: ChangedEventArgs;
    protected changeHandler: Function;
    /**
     * Gets or sets the selected date of the Calendar.
     * @default null
     * @isBlazorNullableType true
     */
    value: Date;
    /**
     * Gets or sets multiple selected dates of the calendar.
     * @default null
     */
    values: Date[];
    /**
     * Specifies the option to enable the multiple dates selection of the calendar.
     * @default false
     */
    isMultiSelection: boolean;
    /**
     * Triggers when the Calendar value is changed.
     * @event
     * @blazorProperty 'ValueChange'
     */
    change: base.EmitType<ChangedEventArgs>;
    /**
     * Initialized new instance of Calendar Class.
     * Constructor for creating the widget
     * @param  {CalendarModel} options?
     * @param  {string|HTMLElement} element?
     */
    constructor(options?: CalendarModel, element?: string | HTMLElement);
    /**
     * To Initialize the control rendering.
     * @returns void
     * @private
     */
    protected render(): void;
    protected formResetHandler(): void;
    protected validateDate(): void;
    protected minMaxUpdate(): void;
    protected generateTodayVal(value: Date): Date;
    protected todayButtonClick(): void;
    protected keyActionHandle(e: base.KeyboardEventArgs): void;
    /**
     * Initialize the event handler
     * @private
     */
    protected preRender(): void;
    createContent(): void;
    protected minMaxDate(localDate: Date): Date;
    protected renderMonths(e?: Event): void;
    protected renderDays(currentDate: Date, e?: Event): HTMLElement[];
    protected renderYears(e?: Event): void;
    protected renderDecades(e?: Event): void;
    protected renderTemplate(elements: HTMLElement[], count: number, classNm: string, e?: Event): void;
    protected clickHandler(e: MouseEvent): void;
    protected switchView(view: number, e?: Event): void;
    /**
     * To get component name
     * @private
     */
    protected getModuleName(): string;
    /**
     * Gets the properties to be maintained upon browser refresh.
     * @returns string
     */
    getPersistData(): string;
    /**
     * Called internally if any of the property value changed.
     * returns void
     * @private
     */
    onPropertyChanged(newProp: CalendarModel, oldProp: CalendarModel): void;
    /**
     * Destroys the widget.
     * @returns void
     */
    destroy(): void;
    /**
     * This method is used to navigate to the month/year/decade view of the Calendar.
     * @param  {string} view - Specifies the view of the Calendar.
     * @param  {Date} date - Specifies the focused date in a view.
     * @returns void
     */
    navigateTo(view: CalendarView, date: Date): void;
    /**
     * Gets the current view of the Calendar.
     * @returns string
     */
    currentView(): string;
    /**
     * This method is used to add the single or multiple dates to the values property of the Calendar.
     * @param  {Date || Date[]} dates - Specifies the date or dates to be added to the values property of the Calendar.
     * @returns void
     */
    addDate(dates: Date | Date[]): void;
    /**
     * This method is used to remove the single or multiple dates from the values property of the Calendar.
     * @param  {Date || Date[]} dates - Specifies the date or dates which need to be removed from the values property of the Calendar.
     * @returns void
     */
    removeDate(dates: Date | Date[]): void;
    protected update(): void;
    protected selectDate(e: MouseEvent | base.KeyboardEventArgs, date: Date, element: Element): void;
    protected changeEvent(e: Event): void;
    protected triggerChange(e: MouseEvent | KeyboardEvent): void;
}
export interface NavigatedEventArgs extends base.BaseEventArgs {
    /** Defines the current view of the Calendar. */
    view?: string;
    /** Defines the focused date in a view. */
    date?: Date;
    /**
     * Specifies the original event arguments.
     */
    event?: KeyboardEvent | MouseEvent | Event;
}
export interface RenderDayCellEventArgs extends base.BaseEventArgs {
    /** Specifies whether to disable the current date or not. */
    isDisabled?: boolean;
    /** Specifies the day cell element. */
    element?: HTMLElement;
    /** Defines the current date of the Calendar. */
    date?: Date;
    /** Defines whether the current date is out of range (less than min or greater than max) or not. */
    isOutOfRange?: boolean;
}
export interface ChangedEventArgs extends base.BaseEventArgs {
    /** Defines the selected date of the Calendar. */
    value?: Date;
    /** Defines the multiple selected date of the Calendar. */
    values?: Date[];
    /**
     * Specifies the original event arguments.
     */
    event?: KeyboardEvent | MouseEvent | Event;
    /** Defines the element. */
    element?: HTMLElement | HTMLInputElement;
    /**
     * If the event is triggered by interaction, it returns true. Otherwise, it returns false.
     */
    isInteracted?: boolean;
}
export interface IslamicObject {
    year: number;
    date: number;
    month: number;
}
/**
 * Defines the argument for the focus event.
 */
export interface FocusEventArgs {
    model?: Object;
}
/**
 * Defines the argument for the blur event.
 */
export interface BlurEventArgs {
    model?: Object;
}
//node_modules/@syncfusion/ej2-calendars/src/calendar/index.d.ts
/**
 * Calendar modules
 */
//node_modules/@syncfusion/ej2-calendars/src/calendar/islamic.d.ts
export  class Islamic {
    constructor(instance: Calendar);
    private calendarInstance;
    getModuleName(): string;
    islamicTitleUpdate(date: Date, view: string): void;
    islamicRenderDays(currentDate: Date, value?: Date, multiSelection?: boolean, values?: Date[]): HTMLElement[];
    islamicIconHandler(): void;
    islamicNext(): void;
    islamicPrevious(): void;
    islamicRenderYears(e?: Event, value?: Date): void;
    islamicRenderDecade(e?: Event, value?: Date): void;
    islamicDayCell(localDate: Date): HTMLElement;
    islamicRenderTemplate(elements: HTMLElement[], count: number, classNm: string, e?: Event, value?: Date): void;
    islamicCompareMonth(start: Date, end: Date): number;
    islamicCompare(startDate: Date, endDate: Date, modifier: number): number;
    getIslamicDate(date: Date): any;
    toGregorian(year: number, month: number, date: number): Date;
    hijriCompareYear(start: Date, end: Date): number;
    hijriCompareDecade(start: Date, end: Date): number;
    destroy(): void;
    protected islamicInValue(inValue: string | Date | number): string;
}
export interface IslamicDateArgs {
    year: number;
    date: number;
    month: number;
}
//node_modules/@syncfusion/ej2-calendars/src/datepicker/datepicker-model.d.ts
/**
 * Interface for a class DatePicker
 */
export interface DatePickerModel extends CalendarModel{
    /**
     * Specifies the width of the DatePicker component.
     * @default null
     */
    width?: number | string;
    /**
     * Specifies the root CSS class of the DatePicker that allows to
     * customize the appearance by overriding the styles.
     * @default null
     */
    cssClass?: string;
    /**
     * Specifies the component to act as strict. So that, it allows to enter only a valid date  value within a specified range or else it 
     * will resets to previous value. By default, strictMode is in false.
     * it allows invalid or out-of-range date value with highlighted error class.
     * @default false
     * > For more details refer to 
     * [`Strict Mode`](../../datepicker/strict-mode/) documentation.
     */
    strictMode?: boolean;
    /**
     * Specifies the format of the value that to be displayed in component. By default, the format is based on the culture.
     * @default null
     * @aspType string
     * @blazorType string
     */
    format?: string | FormatObject;
    /**
     * Specifies the component to be disabled or not.
     * @default true
     */
    enabled?: boolean;
    /**
     * You can add the additional html base.attributes such as disabled, value etc., to the element.
     * If you configured both property and equivalent html attribute then the component considers the property value.
     * @default {}
     */
    htmlAttributes?: { [key: string]: string;
 };
    /**
     * Gets or sets multiple selected dates of the calendar.
     * @default null
     * @private
     */
    values?: Date[];
    /**
     * Specifies the option to enable the multiple dates selection of the calendar.
     * @default false
     * @private
     */
    isMultiSelection?: boolean;
    /**
     * Specifies whether to show or hide the clear icon in textbox.
     * @default true
     */
    showClearButton?: boolean;
    /**
     * > Support for `allowEdit` has been provided from 
     * [`v16.2.46`](https://ej2.syncfusion.com/angular/documentation/release-notes/16.2.46/#datepicker).
     * 
     * Specifies whether the input textbox is editable or not. Here the user can select the value from the 
     * popup and cannot edit in the input textbox.
     * @default true
     */
    allowEdit?: boolean;
    /**
     * Customizes the key actions in DatePicker.
     * For example, when using German keyboard, the key actions can be customized using these shortcuts.
     * 
     * 
     * inputs.Input Navigation
     * <table> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * Key action<br/></td><td colSpan=1 rowSpan=1> 
     * Key<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * altUpArrow<br/></td><td colSpan=1 rowSpan=1> 
     * alt+uparrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * altDownArrow<br/></td><td colSpan=1 rowSpan=1> 
     * alt+downarrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * escape<br/></td><td colSpan=1 rowSpan=1> 
     * escape<br/></td></tr> 
     * </table> 
     * 
     * Calendar Navigation
     * <table> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * Key action<br/></td><td colSpan=1 rowSpan=1> 
     * Key<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * controlUp<br/></td><td colSpan=1 rowSpan=1> 
     * ctrl+38<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * controlDown<br/></td><td colSpan=1 rowSpan=1> 
     * ctrl+40<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * moveDown<br/></td><td colSpan=1 rowSpan=1> 
     * downarrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * moveUp<br/></td><td colSpan=1 rowSpan=1> 
     * uparrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * moveLeft<br/></td><td colSpan=1 rowSpan=1> 
     * leftarrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * moveRight<br/></td><td colSpan=1 rowSpan=1> 
     * rightarrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * shiftPageUp<br/></td><td colSpan=1 rowSpan=1> 
     * shift+pageup<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * shiftPageDown<br/></td><td colSpan=1 rowSpan=1> 
     * shift+pagedown<br/></td></tr> 
     * <tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * select<br/></td><td colSpan=1 rowSpan=1> 
     * enter<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * home<br/></td><td colSpan=1 rowSpan=1> 
     * home<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * end<br/></td><td colSpan=1 rowSpan=1> 
     * end<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * pageUp<br/></td><td colSpan=1 rowSpan=1> 
     * pageup<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * pageDown<br/></td><td colSpan=1 rowSpan=1> 
     * pagedown<br/></td></tr> 
     * <td colSpan=1 rowSpan=1> 
     * controlHome<br/></td><td colSpan=1 rowSpan=1> 
     * ctrl+home<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * controlEnd<br/></td><td colSpan=1 rowSpan=1> 
     * ctrl+end<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * altUpArrow<br/></td><td colSpan=1 rowSpan=1> 
     * alt+uparrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * spacebar<br/></td><td colSpan=1 rowSpan=1> 
     * space<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * altRightArrow<br/></td><td colSpan=1 rowSpan=1> 
     * alt+rightarrow<br/></td></tr>  
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * altLeftArrow<br/></td><td colSpan=1 rowSpan=1> 
     * alt+leftarrow<br/></td></tr> 
     * </table>
     * 
     * @default null
     * @blazorType object 
     */
    keyConfigs?: { [key: string]: string };
    /**
     * Enable or disable persisting component's state between page reloads. If enabled, following list of states will be persisted.
     * 1. value
     * @default false
     */
    enablePersistence?: boolean;
    /**
     * specifies the z-index value of the datePicker popup element.
     * @default 1000
     * @aspType int
     * @blazorType int
     */
    zIndex?: number;
    /**
     * Specifies the component in readonly state. When the Component is readonly it does not allow user input.
     * @default false
     */
    readonly?: boolean;
    /**
     * Specifies the placeholder text that displayed in textbox.
     * @default null
     */
    placeholder?: string;
    /**
     * Specifies the placeholder text to be floated.
     * Possible values are:
     * Never: The label will never float in the input when the placeholder is available.
     * Always: The floating label will always float above the input.
     * Auto: The floating label will float above the input after focusing or entering a value in the input.
     * @default Syncfusion.EJ2.Inputs.inputs.FloatLabelType.Never
     * @aspType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     * @blazorType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     * @isEnumeration true
     */
    floatLabelType?: inputs.FloatLabelType | string;
    /**
     * Triggers when the popup is opened.
     * @event
     * @blazorProperty 'OnOpen'
     * @blazorType PopupObjectArgs
     */
    open?: base.EmitType<PreventableEventArgs | PopupObjectArgs>;
    /**
     * Triggers when the popup is closed.
     * @event
     * @blazorProperty 'OnClose'
     * @blazorType PopupObjectArgs
     */
    close?: base.EmitType<PreventableEventArgs | PopupObjectArgs>;
    /**
     * Triggers when the input loses the focus.
     * @event
     */
    blur?: base.EmitType<BlurEventArgs>;
    /**
     *  Triggers when the input gets focus.
     * @event
     */
    focus?: base.EmitType<FocusEventArgs>;
    /**
     * Triggers when the component is created.
     * @event 
     * @blazorProperty 'Created'
     */
    created?: base.EmitType<Object>;
    /**
     * Triggers when the component is destroyed.
     * @event
     * @blazorProperty 'Destroyed'
     */
    destroyed?: base.EmitType<Object>;
}
//node_modules/@syncfusion/ej2-calendars/src/datepicker/datepicker.d.ts

export interface FormatObject {
    /**
     * Specifies the format in which the date format will process
     */
    skeleton?: string;
}
/**
 * Represents the DatePicker component that allows user to select
 * or enter a date value.
 * ```html
 * <input id='datepicker'/>
 * ```
 * ```typescript
 * <script>
 *   let datePickerObject:DatePicker = new DatePicker({ value: new Date() });
 *   datePickerObject.appendTo('#datepicker');
 * </script>
 * ```
 */
export  class DatePicker extends Calendar implements inputs.IInput {
    protected popupObj: popups.Popup;
    protected inputWrapper: inputs.InputObject;
    private modal;
    protected inputElement: HTMLInputElement;
    protected popupWrapper: HTMLElement;
    protected changedArgs: ChangedEventArgs;
    protected previousDate: Date;
    private keyboardModules;
    private calendarKeyboardModules;
    protected previousElementValue: string;
    protected ngTag: string;
    protected dateTimeFormat: string;
    protected inputElementCopy: HTMLElement;
    protected inputValueCopy: Date;
    protected l10n: base.L10n;
    protected preventArgs: PopupObjectArgs;
    private isDateIconClicked;
    protected isAltKeyPressed: boolean;
    private isInteracted;
    private index;
    private formElement;
    protected invalidValueString: string;
    private checkPreviousValue;
    protected formatString: string;
    protected tabIndex: string;
    private datepickerOptions;
    protected defaultKeyConfigs: {
        [key: string]: string;
    };
    protected mobilePopupWrapper: HTMLElement;
    /**
     * Specifies the width of the DatePicker component.
     * @default null
     */
    width: number | string;
    /**
     * Specifies the root CSS class of the DatePicker that allows to
     * customize the appearance by overriding the styles.
     * @default null
     */
    cssClass: string;
    /**
     * Specifies the component to act as strict. So that, it allows to enter only a valid date  value within a specified range or else it
     * will resets to previous value. By default, strictMode is in false.
     * it allows invalid or out-of-range date value with highlighted error class.
     * @default false
     * > For more details refer to
     * [`Strict Mode`](../../datepicker/strict-mode/) documentation.
     */
    strictMode: boolean;
    /**
     * Specifies the format of the value that to be displayed in component. By default, the format is based on the culture.
     * @default null
     * @aspType string
     * @blazorType string
     */
    format: string | FormatObject;
    /**
     * Specifies the component to be disabled or not.
     * @default true
     */
    enabled: boolean;
    /**
     * You can add the additional html attributes such as disabled, value etc., to the element.
     * If you configured both property and equivalent html attribute then the component considers the property value.
     * @default {}
     */
    htmlAttributes: {
        [key: string]: string;
    };
    /**
     * Gets or sets multiple selected dates of the calendar.
     * @default null
     * @private
     */
    values: Date[];
    /**
     * Specifies the option to enable the multiple dates selection of the calendar.
     * @default false
     * @private
     */
    isMultiSelection: boolean;
    /**
     * Specifies whether to show or hide the clear icon in textbox.
     * @default true
     */
    showClearButton: boolean;
    /**
     * > Support for `allowEdit` has been provided from
     * [`v16.2.46`](https://ej2.syncfusion.com/angular/documentation/release-notes/16.2.46/#datepicker).
     *
     * Specifies whether the input textbox is editable or not. Here the user can select the value from the
     * popup and cannot edit in the input textbox.
     * @default true
     */
    allowEdit: boolean;
    /**
     * Customizes the key actions in DatePicker.
     * For example, when using German keyboard, the key actions can be customized using these shortcuts.
     *
     *
     * Input Navigation
     * <table>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * Key action<br/></td><td colSpan=1 rowSpan=1>
     * Key<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * altUpArrow<br/></td><td colSpan=1 rowSpan=1>
     * alt+uparrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * altDownArrow<br/></td><td colSpan=1 rowSpan=1>
     * alt+downarrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * escape<br/></td><td colSpan=1 rowSpan=1>
     * escape<br/></td></tr>
     * </table>
     *
     * Calendar Navigation
     * <table>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * Key action<br/></td><td colSpan=1 rowSpan=1>
     * Key<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * controlUp<br/></td><td colSpan=1 rowSpan=1>
     * ctrl+38<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * controlDown<br/></td><td colSpan=1 rowSpan=1>
     * ctrl+40<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * moveDown<br/></td><td colSpan=1 rowSpan=1>
     * downarrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * moveUp<br/></td><td colSpan=1 rowSpan=1>
     * uparrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * moveLeft<br/></td><td colSpan=1 rowSpan=1>
     * leftarrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * moveRight<br/></td><td colSpan=1 rowSpan=1>
     * rightarrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * shiftPageUp<br/></td><td colSpan=1 rowSpan=1>
     * shift+pageup<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * shiftPageDown<br/></td><td colSpan=1 rowSpan=1>
     * shift+pagedown<br/></td></tr>
     * <tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * select<br/></td><td colSpan=1 rowSpan=1>
     * enter<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * home<br/></td><td colSpan=1 rowSpan=1>
     * home<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * end<br/></td><td colSpan=1 rowSpan=1>
     * end<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * pageUp<br/></td><td colSpan=1 rowSpan=1>
     * pageup<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * pageDown<br/></td><td colSpan=1 rowSpan=1>
     * pagedown<br/></td></tr>
     * <td colSpan=1 rowSpan=1>
     * controlHome<br/></td><td colSpan=1 rowSpan=1>
     * ctrl+home<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * controlEnd<br/></td><td colSpan=1 rowSpan=1>
     * ctrl+end<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * altUpArrow<br/></td><td colSpan=1 rowSpan=1>
     * alt+uparrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * spacebar<br/></td><td colSpan=1 rowSpan=1>
     * space<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * altRightArrow<br/></td><td colSpan=1 rowSpan=1>
     * alt+rightarrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * altLeftArrow<br/></td><td colSpan=1 rowSpan=1>
     * alt+leftarrow<br/></td></tr>
     * </table>
     *
     * @default null
     * @blazorType object
     */
    keyConfigs: {
        [key: string]: string;
    };
    /**
     * Enable or disable persisting component's state between page reloads. If enabled, following list of states will be persisted.
     * 1. value
     * @default false
     */
    enablePersistence: boolean;
    /**
     * specifies the z-index value of the datePicker popup element.
     * @default 1000
     * @aspType int
     * @blazorType int
     */
    zIndex: number;
    /**
     * Specifies the component in readonly state. When the Component is readonly it does not allow user input.
     * @default false
     */
    readonly: boolean;
    /**
     * Specifies the placeholder text that displayed in textbox.
     * @default null
     */
    placeholder: string;
    /**
     * Specifies the placeholder text to be floated.
     * Possible values are:
     * Never: The label will never float in the input when the placeholder is available.
     * Always: The floating label will always float above the input.
     * Auto: The floating label will float above the input after focusing or entering a value in the input.
     * @default Syncfusion.EJ2.Inputs.inputs.FloatLabelType.Never
     * @aspType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     * @blazorType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     * @isEnumeration true
     */
    floatLabelType: inputs.FloatLabelType | string;
    /**
     * Triggers when the popup is opened.
     * @event
     * @blazorProperty 'OnOpen'
     * @blazorType PopupObjectArgs
     */
    open: base.EmitType<PreventableEventArgs | PopupObjectArgs>;
    /**
     * Triggers when the popup is closed.
     * @event
     * @blazorProperty 'OnClose'
     * @blazorType PopupObjectArgs
     */
    close: base.EmitType<PreventableEventArgs | PopupObjectArgs>;
    /**
     * Triggers when the input loses the focus.
     * @event
     */
    blur: base.EmitType<BlurEventArgs>;
    /**
     *  Triggers when the input gets focus.
     * @event
     */
    focus: base.EmitType<FocusEventArgs>;
    /**
     * Triggers when the component is created.
     * @event
     * @blazorProperty 'Created'
     */
    created: base.EmitType<Object>;
    /**
     * Triggers when the component is destroyed.
     * @event
     * @blazorProperty 'Destroyed'
     */
    destroyed: base.EmitType<Object>;
    /**
     * Constructor for creating the widget.
     */
    constructor(options?: DatePickerModel, element?: string | HTMLInputElement);
    /**
     * To Initialize the control rendering.
     * @return void
     * @private
     */
    render(): void;
    protected setAllowEdit(): void;
    protected updateIconState(): void;
    private initialize;
    private createInput;
    protected updateInput(): void;
    protected minMaxUpdates(): void;
    private checkStringValue;
    protected checkInvalidValue(value: Date): void;
    private bindInputEvent;
    protected bindEvents(): void;
    protected resetFormHandler(): void;
    protected restoreValue(): void;
    private inputChangeHandler;
    private bindClearEvent;
    protected resetHandler(e?: MouseEvent): void;
    private clear;
    private dateIconHandler;
    protected updateHtmlAttributeToWrapper(): void;
    protected updateHtmlAttributeToElement(): void;
    private CalendarKeyActionHandle;
    private inputFocusHandler;
    private inputHandler;
    private inputBlurHandler;
    private documentHandler;
    protected inputKeyActionHandle(e: base.KeyboardEventArgs): void;
    protected defaultAction(e: base.KeyboardEventArgs): void;
    protected popupUpdate(): void;
    protected strictModeUpdate(): void;
    private createCalendar;
    private setAriaDisabled;
    private modelHeader;
    protected changeTrigger(event?: MouseEvent | KeyboardEvent): void;
    protected navigatedEvent(): void;
    protected changeEvent(event?: MouseEvent | KeyboardEvent | Event): void;
    requiredModules(): base.ModuleDeclaration[];
    protected selectCalendar(e?: MouseEvent | KeyboardEvent | Event): void;
    protected isCalendar(): boolean;
    protected setWidth(width: number | string): void;
    /**
     * Shows the Calendar.
     * @returns void
     */
    show(type?: null | string, e?: MouseEvent | KeyboardEvent | base.KeyboardEventArgs): void;
    /**
     * Hide the Calendar.
     * @returns void
     */
    hide(event?: MouseEvent | KeyboardEvent | Event): void;
    private closeEventCallback;
    /**
     * Sets the focus to widget for interaction.
     * @returns void
     */
    focusIn(triggerEvent?: boolean): void;
    /**
     * Remove the focus from widget, if the widget is in focus state.
     * @returns void
     */
    focusOut(): void;
    /**
     * Gets the current view of the DatePicker.
     * @returns string
     */
    currentView(): string;
    /**
     * Navigates to specified month or year or decade view of the DatePicker.
     * @param  {string} view - Specifies the view of the calendar.
     * @param  {Date} date - Specifies the focused date in a view.
     * @returns void
     */
    navigateTo(view: CalendarView, date: Date): void;
    /**
     * To destroy the widget.
     * @returns void
     */
    destroy(): void;
    protected ensureInputAttribute(): void;
    /**
     * Initialize the event handler
     * @private
     */
    protected preRender(): void;
    protected validationAttribute(target: HTMLElement, inputElement: Element): void;
    protected checkFormat(): void;
    private checkHtmlAttributes;
    /**
     * To get component name.
     * @private
     */
    protected getModuleName(): string;
    private disabledDates;
    private setAriaAttributes;
    protected errorClass(): void;
    /**
     * Called internally if any of the property value changed.
     * returns void
     * @private
     */
    onPropertyChanged(newProp: DatePickerModel, oldProp: DatePickerModel): void;
}
export interface PopupObjectArgs {
    /** Prevents the default action */
    preventDefault?: Function;
    /**
     * Defines the DatePicker popup element.
     * @deprecated
     */
    popup?: popups.Popup;
    /**
     * Illustrates whether the current action needs to be prevented or not.
     */
    cancel?: boolean;
    /**
     * Specifies the original event arguments.
     */
    event?: MouseEvent | KeyboardEvent | Event;
    /**
     * Specifies the node to which the popup element to be appended.
     */
    appendTo?: HTMLElement;
}
export interface PreventableEventArgs {
    /** Prevents the default action */
    preventDefault?: Function;
}
//node_modules/@syncfusion/ej2-calendars/src/datepicker/index.d.ts
/**
 * Datepicker modules
 */
//node_modules/@syncfusion/ej2-calendars/src/daterangepicker/daterangepicker-model.d.ts
/**
 * Interface for a class Presets
 */
export interface PresetsModel {
    /**
     * Defines the label string of the preset range. 
     */
    label?: string;
    /**
     * Defines the start date of the preset range.
     */
    start?: Date;
    /**
     * Defines the end date of the preset range 
     */
    end?: Date;
}
/**
 * Interface for a class DateRangePicker
 */
export interface DateRangePickerModel extends CalendarBaseModel{
    /**
     * Gets or sets the start and end date of the Calendar.
     * @default null
     */
    value?: Date[] | DateRange;
    /**
     * Enable or disable the persisting component's state between the page reloads. If enabled, following list of states will be persisted.
     * 1. startDate
     * 2. endDate
     * 3. value
     * @default false
     */
    enablePersistence?: boolean;
    /**
     * Gets or sets the minimum date that can be selected in the calendar-popup.
     * @default new Date(1900, 00, 01)
     * @blazorDefaultValue new DateTime(1900, 01, 01)
     */
    min?: Date;
    /**
     * Gets or sets the maximum date that can be selected in the calendar-popup.
     * @default new Date(2099, 11, 31)
     * @blazorDefaultValue new DateTime(2099, 12, 31)
     */
    max?: Date;
    /**
     * Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
     * @default 'en-US'
     */
    locale?: string;
    /**
     * Gets or sets the Calendar's first day of the week. By default, the first day of the week will be based on the current culture.
     * > For more details about firstDayOfWeek refer to 
     * [`First day of week`](../../daterangepicker/customization#first-day-of-week) documentation.
     * @default null
     */
    firstDayOfWeek?: number;
    /**
     * Determines whether the week number of the Calendar is to be displayed or not.
     * The week number is displayed in every week row.
     * > For more details about weekNumber refer to 
     * [`Calendar with week number`](../../calendar/how-to/week-number#render-the-calendar-with-week-numbers)documentation.
     * @default false
     */
    weekNumber?: boolean;
    /**
     * Gets or sets the Calendar's Type like gregorian or islamic.
     * @default Gregorian
     * @private
     */
    calendarMode?: CalendarType;
    /**
     * Triggers when Calendar is created.
     * @event
     * @blazorProperty 'Created'
     */
    created?: base.EmitType<Object>;
    /**
     * Triggers when Calendar is destroyed.
     * @event
     * @blazorProperty 'Destroyed'
     */
    destroyed?: base.EmitType<Object>;
    /**
     * Triggers when the Calendar value is changed.
     * @event  
     * @blazorProperty 'ValueChange'
     */
    change?: base.EmitType<RangeEventArgs>;
    /**
     * Triggers when the Calendar is navigated to another view or within the same level of view.
     * @event
     * @blazorProperty 'Navigated'
     */
    navigated?: base.EmitType<NavigatedEventArgs>;
    /**
     * Triggers when each day cell of the Calendar is rendered.
     * @event
     * @blazorProperty 'OnRenderDayCell'
     */
    renderDayCell?: base.EmitType<RenderDayCellEventArgs>;
    /**
     * Gets or sets the start date of the date range selection.
     * @default null
     * @isBlazorNullableType true
     */
    startDate?: Date;
    /**
     * Gets or sets the end date of the date range selection.
     * @default null
     * @isBlazorNullableType true
     */
    endDate?: Date;
    /**
     * Set the predefined ranges which let the user pick required range easily in a component.
     * > For more details refer to 
     * [`Preset Ranges`](../../daterangepicker/customization#preset-ranges) documentation.
     * @default null
     */
    presets?: PresetsModel[];
    /**
     * Specifies the width of the DateRangePicker component.
     * @default ''
     */
    width?: number | string;
    /**
     * specifies the z-index value of the dateRangePicker popup element.
     * @default 1000
     * @aspType int
     * @blazorType int
     */
    zIndex?: number;
    /**
     * Specifies whether to show or hide the clear icon
     * @default true
     */
    showClearButton?: boolean;
    /**
     * Specifies whether the today button is to be displayed or not.
     * @default true
     * @hidden
     */
    showTodayButton?: boolean;
    /**
     * Specifies the initial view of the Calendar when it is opened.
     * With the help of this property, initial view can be changed to year or decade view.
     * @default Month
     */
    start?: CalendarView;
    /**
     * Sets the maximum level of view (month, year, decade) in the Calendar.
     * Depth view should be smaller than the start view to restrict its view navigation.
     * @default Month
     */
    depth?: CalendarView;
    /**
     *  Sets the root CSS class to the DateRangePicker which allows you to customize the appearance.
     * @default ''    
     */
    cssClass?: string;
    /**
     * Sets or gets the string that used between the start and end date string. 
     * @default '-'
     */
    separator?: string;
    /**
     *  Specifies the minimum span of days that can be allowed in date range selection.
     * > For more details refer to 
     * [`Range Span`](../../daterangepicker/range-restriction/#range-span) documentation.
     * @default null    
     * @aspType int
     * @blazorType int
     */
    minDays?: number;
    /**
     *  Specifies the maximum span of days that can be allowed in a date range selection.
     * > For more details refer to 
     * [`Range Span`](../../daterangepicker/range-restriction/#range-span) documentation.
     * @default null
     * @aspType int
     * @blazorType int
     * @isBlazorNullableType true
     */
    maxDays?: number;
    /**
     * Specifies the component to act as strict which allows entering only a valid date range in a DateRangePicker.
     * > For more details refer to 
     * [`Strict Mode`](../../daterangepicker/range-restriction#strict-mode)documentation.
     * @default false
     */
    strictMode?: boolean;
    /**
     * Customizes the key actions in DateRangePicker.
     * For example, when using German keyboard, the key actions can be customized using these shortcuts.
     * 
     * 
     * inputs.Input Navigation
     * <table> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * Key action<br/></td><td colSpan=1 rowSpan=1> 
     * Key<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * altUpArrow<br/></td><td colSpan=1 rowSpan=1> 
     * alt+uparrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * altDownArrow<br/></td><td colSpan=1 rowSpan=1> 
     * alt+downarrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * escape<br/></td><td colSpan=1 rowSpan=1> 
     * escape<br/></td></tr> 
     * </table> 
     * 
     * Calendar Navigation (Use the following list of keys to navigate the currently focused Calendar after the popup has opened). 
     * <table> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * Key action<br/></td><td colSpan=1 rowSpan=1> 
     * Key<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * controlUp<br/></td><td colSpan=1 rowSpan=1> 
     * ctrl+38<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * controlDown<br/></td><td colSpan=1 rowSpan=1> 
     * ctrl+40<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * moveDown<br/></td><td colSpan=1 rowSpan=1> 
     * downarrow<br/></td></tr> 
     * <td colSpan=1 rowSpan=1> 
     * pageUp<br/></td><td colSpan=1 rowSpan=1> 
     * pageup<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * pageDown<br/></td><td colSpan=1 rowSpan=1> 
     * pagedown<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * shiftPageUp<br/></td><td colSpan=1 rowSpan=1> 
     * shift+pageup<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * shiftPageDown<br/></td><td colSpan=1 rowSpan=1> 
     * shift+pagedown<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * moveUp<br/></td><td colSpan=1 rowSpan=1> 
     * uparrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * moveLeft<br/></td><td colSpan=1 rowSpan=1> 
     * leftarrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * moveRight<br/></td><td colSpan=1 rowSpan=1> 
     * rightarrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * base.select<br/></td><td colSpan=1 rowSpan=1> 
     * enter<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * home<br/></td><td colSpan=1 rowSpan=1> 
     * home<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * end<br/></td><td colSpan=1 rowSpan=1> 
     * end<br/></td></tr> 
     * <tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * controlHome<br/></td><td colSpan=1 rowSpan=1> 
     * ctrl+home<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * controlEnd<br/></td><td colSpan=1 rowSpan=1> 
     * ctrl+end<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * altUpArrow<br/></td><td colSpan=1 rowSpan=1> 
     * alt+uparrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * spacebar<br/></td><td colSpan=1 rowSpan=1> 
     * space<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * enter<br/></td><td colSpan=1 rowSpan=1> 
     * enter<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * altRightArrow<br/></td><td colSpan=1 rowSpan=1> 
     * alt+rightarrow<br/></td></tr>  
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * altLeftArrow<br/></td><td colSpan=1 rowSpan=1> 
     * alt+leftarrow<br/></td></tr> 
     * </table>
     * 
     * @default null
     * @blazorType object 
     */
    keyConfigs?: { [key: string]: string };
    /**
     * Sets or gets the required date format to the start and end date string.
     * > For more details refer to 
     * [`Format`](https://ej2.syncfusion.com/demos/#/material/daterangepicker/format.html)sample.
     * @aspType string
     * @default null
     * @blazorType string
     */
    format?: string | RangeFormatObject;
    /**
     * Specifies the component to be disabled which prevents the DateRangePicker from user interactions. 
     * @default true
     */
    enabled?: boolean;
    /**
     * Denies the editing the ranges in the DateRangePicker component. 
     * @default false
     */
    readonly?: boolean;
    /**
     * > Support for `allowEdit` has been provided from 
     * [`v16.2.46`](https://ej2.syncfusion.com/angular/documentation/release-notes/16.2.46/#daterangepicker).
     * 
     * Specifies whether the input textbox is editable or not. Here the user can base.select the value from the 
     * popup and cannot edit in the input textbox.
     * @default true
     */
    allowEdit?: boolean;
    /**
     * Specifies the placeholder text to be floated.
     * Possible values are:
     * Never: The label will never float in the input when the placeholder is available.
     * Always: The floating label will always float above the input.
     * Auto: The floating label will float above the input after focusing or entering a value in the input.
     * @default Syncfusion.EJ2.Inputs.inputs.FloatLabelType.Never
     * @aspType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     * @blazorType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     * @isEnumeration true
     */
    floatLabelType?: inputs.FloatLabelType | string;
    /**
     * Specifies the placeholder text that need to be displayed in the DateRangePicker component.
     * 
     * @default null
     */
    placeholder?: string;
    /**
     * You can add the additional html base.attributes such as disabled, value etc., to the element.
     * If you configured both property and equivalent html attribute then the component considers the property value.
     * @default {}
     */
    htmlAttributes?: { [key: string]: string;
 };
    /**
     * Triggers when the DateRangePicker is opened.
     * @event 
     * @blazorProperty 'OnOpen'
     * @blazorType RangePopupEventArgs
     */
    open?: base.EmitType<Object>;
    /**
     * Triggers when the DateRangePicker is closed.
     * @event
     * @blazorProperty 'OnClose'
     * @blazorType RangePopupEventArgs
     */
    close?: base.EmitType<Object>;
    /**
     * Triggers on selecting the start and end date.
     * @event 
     * @blazorProperty 'RangeSelected'
     * @blazorType RangeEventArgs
     */
    select?: base.EmitType<Object>;
    /**
     *  Triggers when the control gets focus.
     * @event
     */
    focus?: base.EmitType<FocusEventArgs>;
    /**
     * Triggers when the control loses the focus.
     * @event
     */
    blur?: base.EmitType<BlurEventArgs>;
}
//node_modules/@syncfusion/ej2-calendars/src/daterangepicker/daterangepicker.d.ts

export  class Presets extends base.ChildProperty<Presets> {
    /**
     * Defines the label string of the preset range.
     */
    label: string;
    /**
     * Defines the start date of the preset range.
     */
    start: Date;
    /**
     * Defines the end date of the preset range
     */
    end: Date;
}
export interface DateRange {
    /** Defines the start date */
    start?: Date;
    /** Defines the end date */
    end?: Date;
}
export interface RangeEventArgs extends base.BaseEventArgs {
    /**
     * Defines the value
     */
    value?: Date[] | DateRange;
    /** Defines the value string in the input element */
    text?: string;
    /** Defines the start date  */
    startDate?: Date;
    /** Defines the end date  */
    endDate?: Date;
    /** Defines the day span between the range */
    daySpan?: number;
    /** Specifies the element. */
    element?: HTMLElement | HTMLInputElement;
    /**
     * Specifies the original event arguments.
     */
    event?: MouseEvent | KeyboardEvent | TouchEvent | Event;
    /**
     * If the event is triggered by interaction, it returns true. Otherwise, it returns false.
     */
    isInteracted?: boolean;
}
export interface RangePopupEventArgs {
    /** Defines the range string in the input element */
    date: string;
    /** Defines the DateRangePicker model */
    model: DateRangePickerModel;
    /**
     * Illustrates whether the current action needs to be prevented or not.
     */
    cancel?: boolean;
    /**
     * Defines the DateRangePicker popup object.
     * @deprecated
     */
    popup?: popups.Popup;
    /**
     * Specifies the original event arguments.
     */
    event?: MouseEvent | KeyboardEvent | Event;
    /**
     * Specifies the node to which the popup element to be appended.
     */
    appendTo?: HTMLElement;
}
export interface RangeFormatObject {
    /**
     * Specifies the format in which the date format will process
     */
    skeleton?: string;
}
/**
 * Represents the DateRangePicker component that allows user to select the date range from the calendar
 * or entering the range through the input element.
 * ```html
 * <input id="daterangepicker"/>
 * ```
 * ```typescript
 * <script>
 *   var dateRangePickerObj = new DateRangePicker({ startDate: new Date("05/07/2017"), endDate: new Date("10/07/2017") });
 *   dateRangePickerObj.appendTo("#daterangepicker");
 * </script>
 * ```
 */
export  class DateRangePicker extends CalendarBase {
    private popupObj;
    private inputWrapper;
    private popupWrapper;
    private rightCalendar;
    private leftCalendar;
    private deviceCalendar;
    private leftCalCurrentDate;
    private initStartDate;
    private initEndDate;
    private startValue;
    private endValue;
    private modelValue;
    private rightCalCurrentDate;
    private leftCalPrevIcon;
    private leftCalNextIcon;
    private leftTitle;
    private rightTitle;
    private rightCalPrevIcon;
    private rightCalNextIcon;
    private inputKeyboardModule;
    protected leftKeyboardModule: base.KeyboardEvents;
    protected rightKeyboardModule: base.KeyboardEvents;
    private previousStartValue;
    private previousEndValue;
    private applyButton;
    private cancelButton;
    private startButton;
    private endButton;
    private cloneElement;
    private l10n;
    private isCustomRange;
    private isCustomWindow;
    private presetsItem;
    private liCollections;
    private activeIndex;
    private presetElement;
    private previousEleValue;
    private targetElement;
    private disabledDayCnt;
    private angularTag;
    private inputElement;
    private modal;
    private firstHiddenChild;
    private secondHiddenChild;
    private isKeyPopup;
    private dateDisabled;
    private navNextFunction;
    private navPrevFunction;
    private deviceNavNextFunction;
    private deviceNavPrevFunction;
    private isRangeIconClicked;
    private isMaxDaysClicked;
    private popupKeyboardModule;
    private presetKeyboardModule;
    private btnKeyboardModule;
    private virtualRenderCellArgs;
    private disabledDays;
    private isMobile;
    private keyInputConfigs;
    private defaultConstant;
    private preventBlur;
    private preventFocus;
    private valueType;
    private closeEventArgs;
    private openEventArgs;
    private controlDown;
    private startCopy;
    private endCopy;
    private formElement;
    private formatString;
    protected tabIndex: string;
    private invalidValueString;
    private dateRangeOptions;
    private mobileRangePopupWrap;
    /**
     * Gets or sets the start and end date of the Calendar.
     * @default null
     */
    value: Date[] | DateRange;
    /**
     * Enable or disable the persisting component's state between the page reloads. If enabled, following list of states will be persisted.
     * 1. startDate
     * 2. endDate
     * 3. value
     * @default false
     */
    enablePersistence: boolean;
    /**
     * Gets or sets the minimum date that can be selected in the calendar-popup.
     * @default new Date(1900, 00, 01)
     * @blazorDefaultValue new DateTime(1900, 01, 01)
     */
    min: Date;
    /**
     * Gets or sets the maximum date that can be selected in the calendar-popup.
     * @default new Date(2099, 11, 31)
     * @blazorDefaultValue new DateTime(2099, 12, 31)
     */
    max: Date;
    /**
     * Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
     * @default 'en-US'
     */
    locale: string;
    /**
     * Gets or sets the Calendar's first day of the week. By default, the first day of the week will be based on the current culture.
     * > For more details about firstDayOfWeek refer to
     * [`First day of week`](../../daterangepicker/customization#first-day-of-week) documentation.
     * @default null
     */
    firstDayOfWeek: number;
    /**
     * Determines whether the week number of the Calendar is to be displayed or not.
     * The week number is displayed in every week row.
     * > For more details about weekNumber refer to
     * [`Calendar with week number`](../../calendar/how-to/week-number#render-the-calendar-with-week-numbers)documentation.
     * @default false
     */
    weekNumber: boolean;
    /**
     * Gets or sets the Calendar's Type like gregorian or islamic.
     * @default Gregorian
     * @private
     */
    calendarMode: CalendarType;
    /**
     * Triggers when Calendar is created.
     * @event
     * @blazorProperty 'Created'
     */
    created: base.EmitType<Object>;
    /**
     * Triggers when Calendar is destroyed.
     * @event
     * @blazorProperty 'Destroyed'
     */
    destroyed: base.EmitType<Object>;
    /**
     * Triggers when the Calendar value is changed.
     * @event
     * @blazorProperty 'ValueChange'
     */
    change: base.EmitType<RangeEventArgs>;
    /**
     * Triggers when the Calendar is navigated to another view or within the same level of view.
     * @event
     * @blazorProperty 'Navigated'
     */
    navigated: base.EmitType<NavigatedEventArgs>;
    /**
     * Triggers when each day cell of the Calendar is rendered.
     * @event
     * @blazorProperty 'OnRenderDayCell'
     */
    renderDayCell: base.EmitType<RenderDayCellEventArgs>;
    /**
     * Gets or sets the start date of the date range selection.
     * @default null
     * @isBlazorNullableType true
     */
    startDate: Date;
    /**
     * Gets or sets the end date of the date range selection.
     * @default null
     * @isBlazorNullableType true
     */
    endDate: Date;
    /**
     * Set the$ predefined ranges which let the user pick required range easily in a component.
     * > For more details refer to
     * [`Preset Ranges`](../../daterangepicker/customization#preset-ranges) documentation.
     * @default null
     */
    presets: PresetsModel[];
    /**
     * Specifies the width of the DateRangePicker component.
     * @default ''
     */
    width: number | string;
    /**
     * specifies the z-index value of the dateRangePicker popup element.
     * @default 1000
     * @aspType int
     * @blazorType int
     */
    zIndex: number;
    /**
     * Specifies whether to show or hide the clear icon
     * @default true
     */
    showClearButton: boolean;
    /**
     * Specifies whether the today button is to be displayed or not.
     * @default true
     * @hidden
     */
    showTodayButton: boolean;
    /**
     * Specifies the initial view of the Calendar when it is opened.
     * With the help of this property, initial view can be changed to year or decade view.
     * @default Month
     */
    start: CalendarView;
    /**
     * Sets the maximum level of view (month, year, decade) in the Calendar.
     * Depth view should be smaller than the start view to restrict its view navigation.
     * @default Month
     */
    depth: CalendarView;
    /**
     *  Sets the root CSS class to the DateRangePicker which allows you to customize the appearance.
     * @default ''
     */
    cssClass: string;
    /**
     * Sets or gets the string that used between the start and end date string.
     * @default '-'
     */
    separator: string;
    /**
     *  Specifies the minimum span of days that can be allowed in date range selection.
     * > For more details refer to
     * [`Range Span`](../../daterangepicker/range-restriction/#range-span) documentation.
     * @default null
     * @aspType int
     * @blazorType int
     */
    minDays: number;
    /**
     *  Specifies the maximum span of days that can be allowed in a date range selection.
     * > For more details refer to
     * [`Range Span`](../../daterangepicker/range-restriction/#range-span) documentation.
     * @default null
     * @aspType int
     * @blazorType int
     * @isBlazorNullableType true
     */
    maxDays: number;
    /**
     * Specifies the component to act as strict which allows entering only a valid date range in a DateRangePicker.
     * > For more details refer to
     * [`Strict Mode`](../../daterangepicker/range-restriction#strict-mode)documentation.
     * @default false
     */
    strictMode: boolean;
    /**
     * Customizes the key actions in DateRangePicker.
     * For example, when using German keyboard, the key actions can be customized using these shortcuts.
     *
     *
     * Input Navigation
     * <table>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * Key action<br/></td><td colSpan=1 rowSpan=1>
     * Key<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * altUpArrow<br/></td><td colSpan=1 rowSpan=1>
     * alt+uparrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * altDownArrow<br/></td><td colSpan=1 rowSpan=1>
     * alt+downarrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * escape<br/></td><td colSpan=1 rowSpan=1>
     * escape<br/></td></tr>
     * </table>
     *
     * Calendar Navigation (Use the following list of keys to navigate the currently focused Calendar after the popup has opened).
     * <table>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * Key action<br/></td><td colSpan=1 rowSpan=1>
     * Key<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * controlUp<br/></td><td colSpan=1 rowSpan=1>
     * ctrl+38<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * controlDown<br/></td><td colSpan=1 rowSpan=1>
     * ctrl+40<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * moveDown<br/></td><td colSpan=1 rowSpan=1>
     * downarrow<br/></td></tr>
     * <td colSpan=1 rowSpan=1>
     * pageUp<br/></td><td colSpan=1 rowSpan=1>
     * pageup<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * pageDown<br/></td><td colSpan=1 rowSpan=1>
     * pagedown<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * shiftPageUp<br/></td><td colSpan=1 rowSpan=1>
     * shift+pageup<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * shiftPageDown<br/></td><td colSpan=1 rowSpan=1>
     * shift+pagedown<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * moveUp<br/></td><td colSpan=1 rowSpan=1>
     * uparrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * moveLeft<br/></td><td colSpan=1 rowSpan=1>
     * leftarrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * moveRight<br/></td><td colSpan=1 rowSpan=1>
     * rightarrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * select<br/></td><td colSpan=1 rowSpan=1>
     * enter<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * home<br/></td><td colSpan=1 rowSpan=1>
     * home<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * end<br/></td><td colSpan=1 rowSpan=1>
     * end<br/></td></tr>
     * <tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * controlHome<br/></td><td colSpan=1 rowSpan=1>
     * ctrl+home<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * controlEnd<br/></td><td colSpan=1 rowSpan=1>
     * ctrl+end<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * altUpArrow<br/></td><td colSpan=1 rowSpan=1>
     * alt+uparrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * spacebar<br/></td><td colSpan=1 rowSpan=1>
     * space<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * enter<br/></td><td colSpan=1 rowSpan=1>
     * enter<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * altRightArrow<br/></td><td colSpan=1 rowSpan=1>
     * alt+rightarrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * altLeftArrow<br/></td><td colSpan=1 rowSpan=1>
     * alt+leftarrow<br/></td></tr>
     * </table>
     *
     * @default null
     * @blazorType object
     */
    keyConfigs: {
        [key: string]: string;
    };
    /**
     * Sets or gets the required date format to the start and end date string.
     * > For more details refer to
     * [`Format`](https://ej2.syncfusion.com/demos/#/material/daterangepicker/format.html)sample.
     * @aspType string
     * @default null
     * @blazorType string
     */
    format: string | RangeFormatObject;
    /**
     * Specifies the component to be disabled which prevents the DateRangePicker from user interactions.
     * @default true
     */
    enabled: boolean;
    /**
     * Denies the editing the ranges in the DateRangePicker component.
     * @default false
     */
    readonly: boolean;
    /**
     * > Support for `allowEdit` has been provided from
     * [`v16.2.46`](https://ej2.syncfusion.com/angular/documentation/release-notes/16.2.46/#daterangepicker).
     *
     * Specifies whether the input textbox is editable or not. Here the user can select the value from the
     * popup and cannot edit in the input textbox.
     * @default true
     */
    allowEdit: boolean;
    /**
     * Specifies the placeholder text to be floated.
     * Possible values are:
     * Never: The label will never float in the input when the placeholder is available.
     * Always: The floating label will always float above the input.
     * Auto: The floating label will float above the input after focusing or entering a value in the input.
     * @default Syncfusion.EJ2.Inputs.inputs.FloatLabelType.Never
     * @aspType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     * @blazorType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     * @isEnumeration true
     */
    floatLabelType: inputs.FloatLabelType | string;
    /**
     * Specifies the placeholder text that need to be displayed in the DateRangePicker component.
     *
     * @default null
     */
    placeholder: string;
    /**
     * You can add the additional html attributes such as disabled, value etc., to the element.
     * If you configured both property and equivalent html attribute then the component considers the property value.
     * @default {}
     */
    htmlAttributes: {
        [key: string]: string;
    };
    /**
     * Triggers when the DateRangePicker is opened.
     * @event
     * @blazorProperty 'OnOpen'
     * @blazorType RangePopupEventArgs
     */
    open: base.EmitType<Object>;
    /**
     * Triggers when the DateRangePicker is closed.
     * @event
     * @blazorProperty 'OnClose'
     * @blazorType RangePopupEventArgs
     */
    close: base.EmitType<Object>;
    /**
     * Triggers on selecting the start and end date.
     * @event
     * @blazorProperty 'RangeSelected'
     * @blazorType RangeEventArgs
     */
    select: base.EmitType<Object>;
    /**
     *  Triggers when the control gets focus.
     * @event
     */
    focus: base.EmitType<FocusEventArgs>;
    /**
     * Triggers when the control loses the focus.
     * @event
     */
    blur: base.EmitType<BlurEventArgs>;
    /**
     * Constructor for creating the widget
     */
    constructor(options?: DateRangePickerModel, element?: string | HTMLInputElement);
    /**
     * To Initialize the control rendering.
     * @return void
     * @private
     */
    protected render(): void;
    /**
     * Initialize the event handler
     * @returns void
     * @private
     */
    protected preRender(): void;
    private updateValue;
    private initProperty;
    protected checkFormat(): void;
    private initialize;
    private setRangeAllowEdit;
    private updateClearIconState;
    protected validationAttribute(element: HTMLElement, input: Element): void;
    private updateHtmlAttributeToWrapper;
    private updateHtmlAttributeToElement;
    private processPresets;
    protected bindEvents(): void;
    private updateHiddenInput;
    private inputChangeHandler;
    private bindClearEvent;
    protected resetHandler(e: MouseEvent): void;
    private restoreValue;
    protected formResetHandler(e: MouseEvent): void;
    private clear;
    private rangeIconHandler;
    private checkHtmlAttributes;
    private createPopup;
    private renderControl;
    private clearCalendarEvents;
    private updateNavIcons;
    private calendarIconEvent;
    private bindCalendarEvents;
    private calendarIconRipple;
    private deviceCalendarEvent;
    private deviceNavNext;
    private deviceNavPrevious;
    private updateDeviceCalendar;
    private deviceHeaderClick;
    private inputFocusHandler;
    private inputBlurHandler;
    private clearRange;
    private errorClass;
    private keyCalendarUpdate;
    private navInCalendar;
    private keyInputHandler;
    private keyNavigation;
    private inputHandler;
    private bindCalendarCellEvents;
    private removeFocusedDate;
    private hoverSelection;
    private isSameStartEnd;
    private updateRange;
    private checkMinMaxDays;
    private rangeArgs;
    private otherMonthSelect;
    private selectRange;
    private selectableDates;
    private updateMinMaxDays;
    private removeClassDisabled;
    private updateHeader;
    private removeSelection;
    private addSelectedAttributes;
    private removeSelectedAttributes;
    private updateCalendarElement;
    private navPrevMonth;
    private deviceNavigation;
    private updateControl;
    private navNextMonth;
    private compareMonths;
    private compareYears;
    private compareDecades;
    private isPopupOpen;
    protected createRangeHeader(): HTMLElement;
    private disableInput;
    private validateMinMax;
    private validateRangeStrict;
    private validateRange;
    private validateMinMaxDays;
    private renderCalendar;
    private isSameMonth;
    private isSameYear;
    private isSameDecade;
    private startMonthCurrentDate;
    private selectNextMonth;
    private selectNextYear;
    private selectNextDecade;
    private selectStartMonth;
    private createCalendar;
    private leftNavTitle;
    private calendarNavigation;
    private rightNavTitle;
    protected clickEventEmitter(e: MouseEvent): void;
    /**
     * Gets the current view of the Calendar.
     * @returns string
     * @private
     * @hidden
     */
    currentView(): string;
    protected getCalendarView(view: string): CalendarView;
    protected navigatedEvent(e: MouseEvent): void;
    private createControl;
    private cancelFunction;
    private deviceHeaderUpdate;
    private applyFunction;
    private onMouseClick;
    private onMouseOver;
    private onMouseLeave;
    private setListSelection;
    private removeListSelection;
    private setValue;
    private applyPresetRange;
    private showPopup;
    private renderCustomPopup;
    private listRippleEffect;
    private createPresets;
    private wireListEvents;
    private unWireListEvents;
    private renderPopup;
    protected popupCloseHandler(e: base.KeyboardEventArgs): void;
    private calendarFocus;
    private presetHeight;
    private presetKeyActionHandler;
    private listMoveDown;
    private listMoveUp;
    private getHoverLI;
    private getActiveLI;
    private popupKeyBoardHandler;
    private setScrollPosition;
    private popupKeyActionHandle;
    private documentHandler;
    private createInput;
    private setEleWidth;
    private adjustLongHeaderWidth;
    private refreshControl;
    private updateInput;
    protected checkInvalidRange(value: String | DateRange | Date[]): void;
    private getstringvalue;
    private checkInvalidValue;
    private isDateDisabled;
    private disabledDateRender;
    private virtualRenderCellEvent;
    private disabledDates;
    private setModelValue;
    /**
     * To dispatch the event manually
     */
    protected dispatchEvent(element: HTMLElement, type: string): void;
    private changeTrigger;
    /**
     * This method is used to navigate to the month/year/decade view of the Calendar.
     * @param  {string} view - Specifies the view of the Calendar.
     * @param  {Date} date - Specifies the focused date in a view.
     * @returns void
     * @hidden
     */
    navigateTo(view: CalendarView, date: Date): void;
    private navigate;
    /**
     * Sets the focus to widget for interaction.
     * @returns void
     */
    focusIn(): void;
    /**
     * Remove the focus from widget, if the widget is in focus state.
     * @returns void
     */
    focusOut(): void;
    /**
     * To destroy the widget.
     * @returns void
     */
    destroy(): void;
    protected ensureInputAttribute(): void;
    /**
     * To get component name
     * @returns string
     * @private
     */
    protected getModuleName(): string;
    /**
     * Return the properties that are maintained upon browser refresh.
     * @returns string
     */
    getPersistData(): string;
    /**
     * Return the selected range and day span in the DateRangePicker.
     * @returns Object
     */
    getSelectedRange(): Object;
    /**
     * To open the popups.Popup container in the DateRangePicker component.
     * @returns void
     */
    show(element?: HTMLElement, event?: MouseEvent | base.KeyboardEventArgs | Event): void;
    /**
     * To close the popups.Popup container in the DateRangePicker component.
     * @returns void
     */
    hide(event?: base.KeyboardEventArgs | MouseEvent | Event): void;
    private setLocale;
    private refreshChange;
    private setDate;
    private enableInput;
    private clearModelvalue;
    private createHiddenInput;
    /**
     * Called internally if any of the property value changed.
     * returns void
     * @private
     */
    onPropertyChanged(newProp: DateRangePickerModel, oldProp: DateRangePickerModel): void;
}
//node_modules/@syncfusion/ej2-calendars/src/daterangepicker/index.d.ts
/**
 * DateRangePicker modules
 */
//node_modules/@syncfusion/ej2-calendars/src/datetimepicker/datetimepicker-model.d.ts
/**
 * Interface for a class DateTimePicker
 */
export interface DateTimePickerModel extends DatePickerModel{
    /**
     * Specifies the format of the time value that to be displayed in time popup list.
     * @default null
     */
    timeFormat?: string;
    /**
     * Specifies the time interval between the two adjacent time values in the time popup list . 
     * @default 30
     * @blazorType int
     */
    step?: number;
    /**
     * Specifies the scroll bar position if there is no value is selected in the timepicker popup list or
     * the given value is not present in the timepicker popup list.
     * @default null
     * @isBlazorNullableType true
     */
    scrollTo?: Date;
    /**
     * specifies the z-index value of the popup element.
     * @default 1000
     * @aspType int
     * @blazorType int
     */
    zIndex?: number;
    /**
     * Customizes the key actions in DateTimePicker.
     * For example, when using German keyboard, the key actions can be customized using these shortcuts.
     * 
     * 
     * inputs.Input Navigation
     * <table> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * Key action<br/></td><td colSpan=1 rowSpan=1> 
     * Key<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * altUpArrow<br/></td><td colSpan=1 rowSpan=1> 
     * alt+uparrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * altDownArrow<br/></td><td colSpan=1 rowSpan=1> 
     * alt+downarrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * escape<br/></td><td colSpan=1 rowSpan=1> 
     * escape<br/></td></tr> 
     * </table> 
     * 
     * Calendar Navigation (Use the following list of keys to navigate the currently focused Calendar after the popup has opened). 
     * <table> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * Key action<br/></td><td colSpan=1 rowSpan=1> 
     * Key<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * controlUp<br/></td><td colSpan=1 rowSpan=1> 
     * ctrl+38<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * controlDown<br/></td><td colSpan=1 rowSpan=1> 
     * ctrl+40<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * moveDown<br/></td><td colSpan=1 rowSpan=1> 
     * downarrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * moveUp<br/></td><td colSpan=1 rowSpan=1> 
     * uparrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * moveLeft<br/></td><td colSpan=1 rowSpan=1> 
     * leftarrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * moveRight<br/></td><td colSpan=1 rowSpan=1> 
     * rightarrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * select<br/></td><td colSpan=1 rowSpan=1> 
     * enter<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * home<br/></td><td colSpan=1 rowSpan=1> 
     * home<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * end<br/></td><td colSpan=1 rowSpan=1> 
     * end<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * pageUp<br/></td><td colSpan=1 rowSpan=1> 
     * pageup<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * pageDown<br/></td><td colSpan=1 rowSpan=1> 
     * pagedown<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * shiftPageUp<br/></td><td colSpan=1 rowSpan=1> 
     * shift+pageup<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * shiftPageDown<br/></td><td colSpan=1 rowSpan=1> 
     * shift+pagedown<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * controlHome<br/></td><td colSpan=1 rowSpan=1> 
     * ctrl+home<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * controlEnd<br/></td><td colSpan=1 rowSpan=1> 
     * ctrl+end<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * altUpArrow<br/></td><td colSpan=1 rowSpan=1> 
     * alt+uparrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * spacebar<br/></td><td colSpan=1 rowSpan=1> 
     * space<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * altRightArrow<br/></td><td colSpan=1 rowSpan=1> 
     * alt+rightarrow<br/></td></tr>  
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * altLeftArrow<br/></td><td colSpan=1 rowSpan=1> 
     * alt+leftarrow<br/></td></tr> 
     * </table> 
     * 
     * TimePicker Navigation (Use the below list of shortcut keys to interact with the TimePicker after the TimePicker popups.Popup has opened).
     * <table> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * Key action<br/></td><td colSpan=1 rowSpan=1> 
     * Key<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * down<br/></td><td colSpan=1 rowSpan=1> 
     * downarrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * up<br/></td><td colSpan=1 rowSpan=1> 
     * uparrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * left<br/></td><td colSpan=1 rowSpan=1> 
     * leftarrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * right<br/></td><td colSpan=1 rowSpan=1> 
     * rightarrow<br/></td></tr> 
     * </table>
     * 
     * @default null
     * @blazorType object 
     */
    keyConfigs?: { [key: string]: string };
    /**
     * You can add the additional html base.attributes such as disabled, value etc., to the element.
     * If you configured both property and equivalent html attribute then the component considers the property value.
     * @default {}
     */
    htmlAttributes?: { [key: string]: string;
 };
    /**
     * Enable or disable persisting component's state between page reloads. If enabled, following list of states will be persisted.
     * 1. value
     * @default false
     */
    enablePersistence?: boolean;
    /**
     * > Support for `allowEdit` has been provided from 
     * [`v16.2.46`](https://ej2.syncfusion.com/angular/documentation/release-notes/16.2.46/#datetimepicker).
     * 
     * Specifies whether the input textbox is editable or not. Here the user can select the value from the 
     * popup and cannot edit in the input textbox.
     * @default true
     */
    allowEdit?: boolean;
    /**
     * Specifies the option to enable the multiple dates selection of the calendar.
     * @default false
     * @private
     */
    isMultiSelection?: boolean;
    /**
     * Gets or sets multiple selected dates of the calendar.
     * @default null
     * @private
     */
    values?: Date[];
    /**
     * Specifies whether to show or hide the clear icon in textbox.
     * @default true
     */
    showClearButton?: boolean;
    /**
     * Specifies the placeholder text that to be is displayed in textbox.
     * @default null
     */
    placeholder?: string;
    /**
     * Specifies the component to act as strict. So that, it allows to enter only a valid
     * date and time value within a specified range or else it 
     * will resets to previous value. By default, strictMode is in false.
     * it allows invalid or out-of-range value with highlighted error class.
     * @default false
     * > For more details refer to 
     * [`Strict Mode`](../../datetimepicker/strict-mode/) documentation.
     */
    strictMode?: boolean;
    /**
     * Triggers when popup is opened.
     * @event 
     * @blazorProperty 'OnOpen'
     * @blazorType PopupObjectArgs
     */
    open?: base.EmitType<Object>;
    /**
     * Triggers when popup is closed.
     * @event 
     * @blazorProperty 'OnClose'
     * @blazorType PopupObjectArgs
     */
    close?: base.EmitType<Object>;
    /**
     * Triggers when input loses the focus.
     * @event
     */
    blur?: base.EmitType<Object>;
    /**
     * Triggers when input gets focus.
     * @event
     */
    focus?: base.EmitType<Object>;
    /**
     * Triggers when DateTimePicker is created.
     * @event 
     * @blazorProperty 'Created'
     */
    created?: base.EmitType<Object>;
    /**
     * Triggers when DateTimePicker is destroyed.
     * @event 
     * @blazorProperty 'Destroyed'
     */
    destroyed?: base.EmitType<Object>;
}
//node_modules/@syncfusion/ej2-calendars/src/datetimepicker/datetimepicker.d.ts

/**
 * Represents the DateTimePicker component that allows user to select
 * or enter a date time value.
 * ```html
 * <input id="dateTimePicker"/>
 * ```
 * ```typescript
 * <script>
 *   let dateTimePickerObject:DateTimePicker = new DateTimePicker({ value: new Date() });
 *   dateTimePickerObject.appendTo("#dateTimePicker");
 * </script>
 * ```
 */
export  class DateTimePicker extends DatePicker {
    private timeIcon;
    private cloneElement;
    private dateTimeWrapper;
    private rippleFn;
    private listWrapper;
    private liCollections;
    private timeCollections;
    private listTag;
    private selectedElement;
    private containerStyle;
    private popupObject;
    protected timeModal: HTMLElement;
    private isNavigate;
    protected isPreventBlur: Boolean;
    private timeValue;
    protected l10n: base.L10n;
    private keyboardHandler;
    protected inputEvent: base.KeyboardEvents;
    private activeIndex;
    private valueWithMinutes;
    private previousDateTime;
    private initValue;
    protected tabIndex: string;
    private isValidState;
    protected timekeyConfigure: {
        [key: string]: string;
    };
    protected preventArgs: PopupObjectArgs;
    private dateTimeOptions;
    /**
     * Specifies the format of the time value that to be displayed in time popup list.
     * @default null
     */
    timeFormat: string;
    /**
     * Specifies the time interval between the two adjacent time values in the time popup list .
     * @default 30
     * @blazorType int
     */
    step: number;
    /**
     * Specifies the scroll bar position if there is no value is selected in the timepicker popup list or
     * the given value is not present in the timepicker popup list.
     * @default null
     * @isBlazorNullableType true
     */
    scrollTo: Date;
    /**
     * specifies the z-index value of the popup element.
     * @default 1000
     * @aspType int
     * @blazorType int
     */
    zIndex: number;
    /**
     * Customizes the key actions in DateTimePicker.
     * For example, when using German keyboard, the key actions can be customized using these shortcuts.
     *
     *
     * Input Navigation
     * <table>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * Key action<br/></td><td colSpan=1 rowSpan=1>
     * Key<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * altUpArrow<br/></td><td colSpan=1 rowSpan=1>
     * alt+uparrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * altDownArrow<br/></td><td colSpan=1 rowSpan=1>
     * alt+downarrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * escape<br/></td><td colSpan=1 rowSpan=1>
     * escape<br/></td></tr>
     * </table>
     *
     * Calendar Navigation (Use the following list of keys to navigate the currently focused Calendar after the popup has opened).
     * <table>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * Key action<br/></td><td colSpan=1 rowSpan=1>
     * Key<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * controlUp<br/></td><td colSpan=1 rowSpan=1>
     * ctrl+38<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * controlDown<br/></td><td colSpan=1 rowSpan=1>
     * ctrl+40<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * moveDown<br/></td><td colSpan=1 rowSpan=1>
     * downarrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * moveUp<br/></td><td colSpan=1 rowSpan=1>
     * uparrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * moveLeft<br/></td><td colSpan=1 rowSpan=1>
     * leftarrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * moveRight<br/></td><td colSpan=1 rowSpan=1>
     * rightarrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * select<br/></td><td colSpan=1 rowSpan=1>
     * enter<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * home<br/></td><td colSpan=1 rowSpan=1>
     * home<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * end<br/></td><td colSpan=1 rowSpan=1>
     * end<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * pageUp<br/></td><td colSpan=1 rowSpan=1>
     * pageup<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * pageDown<br/></td><td colSpan=1 rowSpan=1>
     * pagedown<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * shiftPageUp<br/></td><td colSpan=1 rowSpan=1>
     * shift+pageup<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * shiftPageDown<br/></td><td colSpan=1 rowSpan=1>
     * shift+pagedown<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * controlHome<br/></td><td colSpan=1 rowSpan=1>
     * ctrl+home<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * controlEnd<br/></td><td colSpan=1 rowSpan=1>
     * ctrl+end<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * altUpArrow<br/></td><td colSpan=1 rowSpan=1>
     * alt+uparrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * spacebar<br/></td><td colSpan=1 rowSpan=1>
     * space<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * altRightArrow<br/></td><td colSpan=1 rowSpan=1>
     * alt+rightarrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * altLeftArrow<br/></td><td colSpan=1 rowSpan=1>
     * alt+leftarrow<br/></td></tr>
     * </table>
     *
     * TimePicker Navigation (Use the below list of shortcut keys to interact with the TimePicker after the TimePicker Popup has opened).
     * <table>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * Key action<br/></td><td colSpan=1 rowSpan=1>
     * Key<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * down<br/></td><td colSpan=1 rowSpan=1>
     * downarrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * up<br/></td><td colSpan=1 rowSpan=1>
     * uparrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * left<br/></td><td colSpan=1 rowSpan=1>
     * leftarrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * right<br/></td><td colSpan=1 rowSpan=1>
     * rightarrow<br/></td></tr>
     * </table>
     *
     * @default null
     * @blazorType object
     */
    keyConfigs: {
        [key: string]: string;
    };
    /**
     * You can add the additional html attributes such as disabled, value etc., to the element.
     * If you configured both property and equivalent html attribute then the component considers the property value.
     * @default {}
     */
    htmlAttributes: {
        [key: string]: string;
    };
    /**
     * Enable or disable persisting component's state between page reloads. If enabled, following list of states will be persisted.
     * 1. value
     * @default false
     */
    enablePersistence: boolean;
    /**
     * > Support for `allowEdit` has been provided from
     * [`v16.2.46`](https://ej2.syncfusion.com/angular/documentation/release-notes/16.2.46/#datetimepicker).
     *
     * Specifies whether the input textbox is editable or not. Here the user can select the value from the
     * popup and cannot edit in the input textbox.
     * @default true
     */
    allowEdit: boolean;
    /**
     * Specifies the option to enable the multiple dates selection of the calendar.
     * @default false
     * @private
     */
    isMultiSelection: boolean;
    /**
     * Gets or sets multiple selected dates of the calendar.
     * @default null
     * @private
     */
    values: Date[];
    /**
     * Specifies whether to show or hide the clear icon in textbox.
     * @default true
     */
    showClearButton: boolean;
    /**
     * Specifies the placeholder text that to be is displayed in textbox.
     * @default null
     */
    placeholder: string;
    /**
     * Specifies the component to act as strict. So that, it allows to enter only a valid
     * date and time value within a specified range or else it
     * will resets to previous value. By default, strictMode is in false.
     * it allows invalid or out-of-range value with highlighted error class.
     * @default false
     * > For more details refer to
     * [`Strict Mode`](../../datetimepicker/strict-mode/) documentation.
     */
    strictMode: boolean;
    /**
     * Triggers when popup is opened.
     * @event
     * @blazorProperty 'OnOpen'
     * @blazorType PopupObjectArgs
     */
    open: base.EmitType<Object>;
    /**
     * Triggers when popup is closed.
     * @event
     * @blazorProperty 'OnClose'
     * @blazorType PopupObjectArgs
     */
    close: base.EmitType<Object>;
    /**
     * Triggers when input loses the focus.
     * @event
     */
    blur: base.EmitType<Object>;
    /**
     * Triggers when input gets focus.
     * @event
     */
    focus: base.EmitType<Object>;
    /**
     * Triggers when DateTimePicker is created.
     * @event
     * @blazorProperty 'Created'
     */
    created: base.EmitType<Object>;
    /**
     * Triggers when DateTimePicker is destroyed.
     * @event
     * @blazorProperty 'Destroyed'
     */
    destroyed: base.EmitType<Object>;
    /**
     * Constructor for creating the widget
     */
    constructor(options?: DateTimePickerModel, element?: string | HTMLInputElement);
    private focusHandler;
    /**
     * Sets the focus to widget for interaction.
     * @returns void
     */
    focusIn(): void;
    /**
     * Remove the focus from widget, if the widget is in focus state.
     * @returns void
     */
    focusOut(): void;
    protected blurHandler(e: MouseEvent): void;
    /**
     * To destroy the widget.
     * @returns void
     */
    destroy(): void;
    /**
     * To Initialize the control rendering.
     * @return void
     * @private
     */
    render(): void;
    private setValue;
    private validateMinMaxRange;
    private checkValidState;
    private checkErrorState;
    private validateValue;
    private disablePopupButton;
    private getFormattedValue;
    private isDateObject;
    private createInputElement;
    private renderTimeIcon;
    private bindInputEvents;
    private unBindInputEvents;
    private cldrTimeFormat;
    private cldrDateTimeFormat;
    private getCldrFormat;
    private isNullOrEmpty;
    protected getCultureTimeObject(ld: Object, c: string): Object;
    private timeHandler;
    private dateHandler;
    show(type?: string, e?: MouseEvent | KeyboardEvent | base.KeyboardEventArgs): void;
    toggle(e?: base.KeyboardEventArgs): void;
    private listCreation;
    private popupCreation;
    private openPopup;
    private documentClickHandler;
    private isTimePopupOpen;
    private isDatePopupOpen;
    private renderPopup;
    private setDimension;
    private setPopupWidth;
    protected wireTimeListEvents(): void;
    protected unWireTimeListEvents(): void;
    private onMouseOver;
    private onMouseLeave;
    private setTimeHover;
    protected getPopupHeight(): number;
    protected changeEvent(e: Event): void;
    private updateValue;
    private setTimeScrollPosition;
    private findScrollTop;
    private setScrollTo;
    private setInputValue;
    private getFullDateTime;
    private combineDateTime;
    private onMouseClick;
    private setSelection;
    private setTimeActiveClass;
    private setTimeActiveDescendant;
    protected addTimeSelection(): void;
    protected removeTimeSelection(): void;
    protected removeTimeHover(className: string): void;
    protected getTimeHoverItem(className: string): Element[];
    protected isValidLI(li: Element | HTMLElement): boolean;
    private calculateStartEnd;
    private startTime;
    private endTime;
    hide(e?: KeyboardEvent | MouseEvent | Event): void;
    private dateTimeCloseEventCallback;
    private closePopup;
    protected preRender(): void;
    protected getProperty(date: DateTimePickerModel, val: string): void;
    protected checkAttributes(isDynamic: boolean): void;
    requiredModules(): base.ModuleDeclaration[];
    private getTimeActiveElement;
    protected createDateObj(val: Date | string): Date;
    private getDateObject;
    protected findNextTimeElement(event: base.KeyboardEventArgs): void;
    protected setTimeValue(date: Date, value: Date): Date;
    protected timeElementValue(value: Date): Date;
    protected timeKeyHandler(event: base.KeyboardEventArgs): void;
    protected TimeKeyActionHandle(event: base.KeyboardEventArgs): void;
    protected inputKeyAction(event: base.KeyboardEventArgs): void;
    onPropertyChanged(newProp: DateTimePickerModel, oldProp: DateTimePickerModel): void;
    /**
     * To get component name.
     * @private
     */
    protected getModuleName(): string;
    protected restoreValue(): void;
}
//node_modules/@syncfusion/ej2-calendars/src/datetimepicker/index.d.ts
/**
 * DateTimePicker modules
 */
//node_modules/@syncfusion/ej2-calendars/src/index.d.ts
/**
 * Calendar all modules
 */
//node_modules/@syncfusion/ej2-calendars/src/timepicker/index.d.ts
/**
 * TimePicker modules
 */
//node_modules/@syncfusion/ej2-calendars/src/timepicker/timepicker-model.d.ts
/**
 * Interface for a class TimePicker
 */
export interface TimePickerModel extends base.ComponentModel{
    /**
     * Gets or sets the width of the TimePicker component. The width of the popup is based on the width of the component.
     * @default null
     */
    width?: string | number;
    /**
     * Specifies the root CSS class of the TimePicker that allows to
     * customize the appearance by overriding the styles.
     * @default null
     */
    cssClass?: string;
    /**
     * Specifies the component to act as strict so that, it allows to enter only a valid time value within a specified range or else 
     * resets to previous value. By default, strictMode is in false.
     * > For more details refer to 
     * [`Strict Mode`](../../timepicker/strict-mode/) documentation.
     * @default false
     */
    strictMode?: boolean;
    /**
     * Customizes the key actions in TimePicker.
     * For example, when using German keyboard, the key actions can be customized using these shortcuts.
     * 
     * <table> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * Key action<br/></td><td colSpan=1 rowSpan=1> 
     * Key<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * enter<br/></td><td colSpan=1 rowSpan=1> 
     * enter<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * escape<br/></td><td colSpan=1 rowSpan=1> 
     * escape<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * end<br/></td><td colSpan=1 rowSpan=1> 
     * end<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * tab<br/></td><td colSpan=1 rowSpan=1> 
     * tab<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * home<br/></td><td colSpan=1 rowSpan=1> 
     * home<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * down<br/></td><td colSpan=1 rowSpan=1> 
     * downarrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * up<br/></td><td colSpan=1 rowSpan=1> 
     * uparrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * left<br/></td><td colSpan=1 rowSpan=1> 
     * leftarrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * right<br/></td><td colSpan=1 rowSpan=1> 
     * rightarrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * open<br/></td><td colSpan=1 rowSpan=1> 
     * alt+downarrow<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * close<br/></td><td colSpan=1 rowSpan=1> 
     * alt+uparrow<br/></td></tr> 
     * </table>
     * 
     * @default null
     * @blazorType object 
     */
    keyConfigs?: { [key: string]: string };
    /**
     * Specifies the format of value that is to be displayed in component. By default, the format is
     * based on the culture. 
     * > For more details refer to 
     * [`Format`](../../timepicker/getting-started#setting-the-time-format) documentation.
     * @default null
     * @aspType string
     * @blazorType string
     */
    format?: string | TimeFormatObject;
    /**
     * Specifies whether the component to be disabled or not.
     * @default true
     */
    enabled?: boolean;
    /**
     * Specifies the component in readonly state. 
     * @default false
     */
    readonly?: boolean;
    /**
     * You can add the additional html base.attributes such as disabled, value etc., to the element.
     * If you configured both property and equivalent html attribute then the component considers the property value.
     * @default {}
     */
    htmlAttributes?: { [key: string]: string;
 };
    /**
     * Specifies the placeholder text to be floated.
     * Possible values are:
     * Never: The label will never float in the input when the placeholder is available.
     * Always: The floating label will always float above the input.
     * Auto: The floating label will float above the input after focusing or entering a value in the input.
     * @default Syncfusion.EJ2.Inputs.inputs.FloatLabelType.Never
     * @aspType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     * @blazorType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     * @isEnumeration true
     */
    floatLabelType?: inputs.FloatLabelType | string;
    /**
     * Specifies the placeholder text that is displayed in textbox.
     * @default null
     */
    placeholder?: string;
    /**
     * specifies the z-index value of the timePicker popup element.
     * @default 1000
     * @aspType int
     * @blazorType int
     */
    zIndex?: number;
    /**
     * Enable or disable the persisting component's state between the page reloads. If enabled, following list of states will be persisted.
     * 1. Value
     * @default false
     */
    enablePersistence?: boolean;
    /**
     * Specifies whether to show or hide the clear icon.
     * @default true
     */
    showClearButton?: boolean;
    /**
     * Specifies the time interval between the two adjacent time values in the popup list. 
     * > For more details refer to 
     * [`Format`](../../timepicker/getting-started#setting-the-time-format)documentation.
     * @default 30
     * @blazorType int
     * 
     */
    step?: number;
    /**
     * Specifies the scroll bar position if there is no value is selected in the popup list or
     *  the given value is not present in the popup list.
     * > For more details refer to 
     * [`Time Duration`](https://ej2.syncfusion.com/demos/#/material/timepicker/list-formatting.html) sample. 
     * @default null
     * @isBlazorNullableType true
     */
    scrollTo?: Date;
    /**
     * Gets or sets the value of the component. The value is parsed based on the culture specific time format.
     * @default null
     * @isBlazorNullableType true
     */
    value?: Date;
    /**
     * Gets or sets the minimum time value that can be allowed to select in TimePicker.
     * > For more details refer to 
     * [`Time Range`](../../timepicker/time-range/) documentation.
     * @default 00:00
     * @blazorDefaultValue new DateTime(1900, 01, 01, 00, 00, 00)
     */
    min?: Date;
    /**
     * Gets or sets the maximum time value that can be allowed to select in TimePicker.
     * > For more details refer to 
     * [`Time Range`](../../timepicker/time-range/) documentation.
     * @default 00:00
     * @blazorDefaultValue new DateTime(2099, 12, 31, 23, 59, 59)
     */
    max?: Date;
    /**
     * > Support for `allowEdit` has been provided from 
     * [`v16.2.46`](https://ej2.syncfusion.com/angular/documentation/release-notes/16.2.46/#timepicker).
     * 
     * Specifies whether the input textbox is editable or not. Here the user can select the value from the 
     * popup and cannot edit in the input textbox.
     * @default true
     */
    allowEdit?: boolean;
    /**
     * Triggers when the value is changed.
     * @event  
     * @blazorProperty 'ValueChange'
     */
    change?: base.EmitType<ChangeEventArgs>;
    /**
     * Triggers when the component is created.
     * @event
     * @blazorProperty 'Created'
     */
    created?: base.EmitType<Object>;
    /**
     * Triggers when the component is destroyed.
     * @event
     * @blazorProperty 'Destroyed'
     */
    destroyed?: base.EmitType<Object>;
    /**
     * Triggers when the popup is opened.
     * @event
     * @blazorProperty 'OnOpen'
     */
    open?: base.EmitType<PopupEventArgs>;
    /**
     * Triggers while rendering the each popup list item.
     * @event
     * @blazorProperty 'OnItemRender'
     */
    itemRender?: base.EmitType<ItemEventArgs>;
    /**
     * Triggers when the popup is closed.
     * @event
     * @blazorProperty 'OnClose'
     */
    close?: base.EmitType<PopupEventArgs>;
    /**
     * Triggers when the control loses the focus.
     * @event
     */
    blur?: base.EmitType<BlurEventArgs>;
    /**
     * Triggers when the control gets focused.
     * @event
     */
    focus?: base.EmitType<FocusEventArgs>;
}
//node_modules/@syncfusion/ej2-calendars/src/timepicker/timepicker.d.ts
export interface ChangeEventArgs {
    /** Defines the boolean that returns true when the value is changed by user interaction, otherwise returns false. */
    isInteracted?: boolean;
    /** Defines the selected time value of the TimePicker. */
    value?: Date;
    /** Defines the selected time value as string. */
    text?: string;
    /** Defines the original event arguments. */
    event?: base.KeyboardEventArgs | FocusEvent | MouseEvent | Event;
    /** Defines the element */
    element: HTMLInputElement | HTMLElement;
}
/**
 * Interface for before list item render .
 */
export interface ItemEventArgs extends base.BaseEventArgs {
    /** Defines the created LI element. */
    element: HTMLElement;
    /** Defines the displayed text value in a popup list. */
    text: string;
    /** Defines the Date object of displayed text in a popup list. */
    value: Date;
    /** Specifies whether to disable the current time value or not. */
    isDisabled: Boolean;
}
export interface CursorPositionDetails {
    /** Defines the text selection starting position. */
    start: number;
    /** Defines the text selection end position. */
    end: number;
}
export interface MeridianText {
    /** Defines the culture specific meridian text for AM. */
    am: string;
    /** Defines the culture specific meridian text for PM. */
    pm: string;
}
export interface TimeFormatObject {
    /**
     * Specifies the format in which the date format will process
     */
    skeleton?: string;
}
export interface PopupEventArgs {
    /** Specifies the name of the event  */
    name?: string;
    /**
     * Illustrates whether the current action needs to be prevented or not.
     */
    cancel?: boolean;
    /**
     * Defines the TimePicker popup object.
     * @deprecated
     */
    popup?: popups.Popup;
    /**
     * Specifies the original event arguments.
     */
    event?: MouseEvent | KeyboardEvent | FocusEvent | Event;
    /**
     * Specifies the node to which the popup element to be appended.
     */
    appendTo?: HTMLElement;
}
export  namespace TimePickerBase {
    function createListItems(createdEl: lists.createElementParams, min: Date, max: Date, globalize: base.Internationalization, timeFormat: string, step: number): {
        collection: number[];
        list: HTMLElement;
    };
}
/**
 * TimePicker is an intuitive interface component which provides an options to select a time value
 * from popup list or to set a desired time value.
 * ```
 * <input id='timepicker' type='text'/>
 * <script>
 *   var timePickerObj = new TimePicker({ value: new Date() });
 *   timePickerObj.appendTo('#timepicker');
 * </script>
 * ```
 */
export  class TimePicker extends base.Component<HTMLElement> implements inputs.IInput {
    private inputWrapper;
    private popupWrapper;
    private cloneElement;
    private listWrapper;
    private listTag;
    private anchor;
    private selectedElement;
    private liCollections;
    protected inputElement: HTMLInputElement;
    private popupObj;
    protected inputEvent: base.KeyboardEvents;
    protected globalize: base.Internationalization;
    private defaultCulture;
    private containerStyle;
    private rippleFn;
    private l10n;
    private cursorDetails;
    private activeIndex;
    private timeCollections;
    private isNavigate;
    private disableItemCollection;
    protected isPreventBlur: boolean;
    private isTextSelected;
    private prevValue;
    private inputStyle;
    private angularTag;
    private valueWithMinutes;
    private prevDate;
    private initValue;
    private initMin;
    private initMax;
    private inputEleValue;
    private openPopupEventArgs;
    private formatString;
    protected tabIndex: string;
    private formElement;
    private modal;
    private invalidValueString;
    protected keyConfigure: {
        [key: string]: string;
    };
    private timeOptions;
    /**
     * Gets or sets the width of the TimePicker component. The width of the popup is based on the width of the component.
     * @default null
     */
    width: string | number;
    /**
     * Specifies the root CSS class of the TimePicker that allows to
     * customize the appearance by overriding the styles.
     * @default null
     */
    cssClass: string;
    /**
     * Specifies the component to act as strict so that, it allows to enter only a valid time value within a specified range or else
     * resets to previous value. By default, strictMode is in false.
     * > For more details refer to
     * [`Strict Mode`](../../timepicker/strict-mode/) documentation.
     * @default false
     */
    strictMode: boolean;
    /**
     * Customizes the key actions in TimePicker.
     * For example, when using German keyboard, the key actions can be customized using these shortcuts.
     *
     * <table>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * Key action<br/></td><td colSpan=1 rowSpan=1>
     * Key<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * enter<br/></td><td colSpan=1 rowSpan=1>
     * enter<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * escape<br/></td><td colSpan=1 rowSpan=1>
     * escape<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * end<br/></td><td colSpan=1 rowSpan=1>
     * end<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * tab<br/></td><td colSpan=1 rowSpan=1>
     * tab<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * home<br/></td><td colSpan=1 rowSpan=1>
     * home<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * down<br/></td><td colSpan=1 rowSpan=1>
     * downarrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * up<br/></td><td colSpan=1 rowSpan=1>
     * uparrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * left<br/></td><td colSpan=1 rowSpan=1>
     * leftarrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * right<br/></td><td colSpan=1 rowSpan=1>
     * rightarrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * open<br/></td><td colSpan=1 rowSpan=1>
     * alt+downarrow<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * close<br/></td><td colSpan=1 rowSpan=1>
     * alt+uparrow<br/></td></tr>
     * </table>
     *
     * @default null
     * @blazorType object
     */
    keyConfigs: {
        [key: string]: string;
    };
    /**
     * Specifies the format of value that is to be displayed in component. By default, the format is
     * based on the culture.
     * > For more details refer to
     * [`Format`](../../timepicker/getting-started#setting-the-time-format) documentation.
     * @default null
     * @aspType string
     * @blazorType string
     */
    format: string | TimeFormatObject;
    /**
     * Specifies whether the component to be disabled or not.
     * @default true
     */
    enabled: boolean;
    /**
     * Specifies the component in readonly state.
     * @default false
     */
    readonly: boolean;
    /**
     * You can add the additional html attributes such as disabled, value etc., to the element.
     * If you configured both property and equivalent html attribute then the component considers the property value.
     * @default {}
     */
    htmlAttributes: {
        [key: string]: string;
    };
    /**
     * Specifies the placeholder text to be floated.
     * Possible values are:
     * Never: The label will never float in the input when the placeholder is available.
     * Always: The floating label will always float above the input.
     * Auto: The floating label will float above the input after focusing or entering a value in the input.
     * @default Syncfusion.EJ2.Inputs.inputs.FloatLabelType.Never
     * @aspType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     * @blazorType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     * @isEnumeration true
     */
    floatLabelType: inputs.FloatLabelType | string;
    /**
     * Specifies the placeholder text that is displayed in textbox.
     * @default null
     */
    placeholder: string;
    /**
     * specifies the z-index value of the timePicker popup element.
     * @default 1000
     * @aspType int
     * @blazorType int
     */
    zIndex: number;
    /**
     * Enable or disable the persisting component's state between the page reloads. If enabled, following list of states will be persisted.
     * 1. Value
     * @default false
     */
    enablePersistence: boolean;
    /**
     * Specifies whether to show or hide the clear icon.
     * @default true
     */
    showClearButton: boolean;
    /**
     * Specifies the time interval between the two adjacent time values in the popup list.
     * > For more details refer to
     * [`Format`](../../timepicker/getting-started#setting-the-time-format)documentation.
     * @default 30
     * @blazorType int
     *
     */
    step: number;
    /**
     * Specifies the scroll bar position if there is no value is selected in the popup list or
     *  the given value is not present in the popup list.
     * > For more details refer to
     * [`Time Duration`](https://ej2.syncfusion.com/demos/#/material/timepicker/list-formatting.html) sample.
     * @default null
     * @isBlazorNullableType true
     */
    scrollTo: Date;
    /**
     * Gets or sets the value of the component. The value is parsed based on the culture specific time format.
     * @default null
     * @isBlazorNullableType true
     */
    value: Date;
    /**
     * Gets or sets the minimum time value that can be allowed to select in TimePicker.
     * > For more details refer to
     * [`Time Range`](../../timepicker/time-range/) documentation.
     * @default 00:00
     * @blazorDefaultValue new DateTime(1900, 01, 01, 00, 00, 00)
     */
    min: Date;
    /**
     * Gets or sets the maximum time value that can be allowed to select in TimePicker.
     * > For more details refer to
     * [`Time Range`](../../timepicker/time-range/) documentation.
     * @default 00:00
     * @blazorDefaultValue new DateTime(2099, 12, 31, 23, 59, 59)
     */
    max: Date;
    /**
     * > Support for `allowEdit` has been provided from
     * [`v16.2.46`](https://ej2.syncfusion.com/angular/documentation/release-notes/16.2.46/#timepicker).
     *
     * Specifies whether the input textbox is editable or not. Here the user can select the value from the
     * popup and cannot edit in the input textbox.
     * @default true
     */
    allowEdit: boolean;
    /**
     * Triggers when the value is changed.
     * @event
     * @blazorProperty 'ValueChange'
     */
    change: base.EmitType<ChangeEventArgs>;
    /**
     * Triggers when the component is created.
     * @event
     * @blazorProperty 'Created'
     */
    created: base.EmitType<Object>;
    /**
     * Triggers when the component is destroyed.
     * @event
     * @blazorProperty 'Destroyed'
     */
    destroyed: base.EmitType<Object>;
    /**
     * Triggers when the popup is opened.
     * @event
     * @blazorProperty 'OnOpen'
     */
    open: base.EmitType<PopupEventArgs>;
    /**
     * Triggers while rendering the each popup list item.
     * @event
     * @blazorProperty 'OnItemRender'
     */
    itemRender: base.EmitType<ItemEventArgs>;
    /**
     * Triggers when the popup is closed.
     * @event
     * @blazorProperty 'OnClose'
     */
    close: base.EmitType<PopupEventArgs>;
    /**
     * Triggers when the control loses the focus.
     * @event
     */
    blur: base.EmitType<BlurEventArgs>;
    /**
     * Triggers when the control gets focused.
     * @event
     */
    focus: base.EmitType<FocusEventArgs>;
    /**
     * Constructor for creating the widget
     */
    constructor(options?: TimePickerModel, element?: string | HTMLInputElement);
    /**
     * Initialize the event handler
     * @private
     */
    protected preRender(): void;
    protected render(): void;
    private setTimeAllowEdit;
    private clearIconState;
    private validateDisable;
    protected validationAttribute(target: HTMLElement, input: Element): void;
    private initialize;
    protected checkTimeFormat(): void;
    private checkDateValue;
    private createInputElement;
    private getCldrDateTimeFormat;
    private checkInvalidValue;
    private CldrFormat;
    destroy(): void;
    protected ensureInputAttribute(): void;
    private popupCreation;
    protected getPopupHeight(): number;
    private generateList;
    private renderPopup;
    private getFormattedValue;
    private getDateObject;
    private updateHtmlAttributeToWrapper;
    private updateHtmlAttributeToElement;
    private removeErrorClass;
    private checkErrorState;
    private validateInterval;
    private disableTimeIcon;
    private disableElement;
    private enableElement;
    private selectInputText;
    private getMeridianText;
    private getCursorSelection;
    private getActiveElement;
    private isNullOrEmpty;
    private setWidth;
    private setPopupWidth;
    private setScrollPosition;
    private findScrollTop;
    private setScrollTo;
    private getText;
    private getValue;
    private cldrDateFormat;
    private cldrTimeFormat;
    private dateToNumeric;
    private getExactDateTime;
    private setValue;
    private compareFormatChange;
    private updatePlaceHolder;
    private popupHandler;
    private mouseDownHandler;
    private mouseUpHandler;
    private focusSelection;
    private inputHandler;
    private onMouseClick;
    private closePopup;
    private checkValueChange;
    private onMouseOver;
    private setHover;
    private setSelection;
    private onMouseLeave;
    private scrollHandler;
    private setMinMax;
    protected validateMinMax(dateVal: Date | string, minVal: Date, maxVal: Date): Date | string;
    private valueIsDisable;
    protected validateState(val: string | Date): boolean;
    protected strictOperation(minimum: Date, maximum: Date, dateVal: Date | string, val: Date): Date | string;
    protected bindEvents(): void;
    protected formResetHandler(): void;
    private inputChangeHandler;
    protected unBindEvents(): void;
    private bindClearEvent;
    protected clearHandler(e: MouseEvent): void;
    private clear;
    protected setZIndex(): void;
    protected checkAttributes(isDynamic: boolean): void;
    protected setCurrentDate(value: Date): Date;
    protected getTextFormat(): number;
    protected updateValue(value: string | Date, event: base.KeyboardEventArgs | FocusEvent | MouseEvent): void;
    protected previousState(date: Date): string;
    protected resetState(): void;
    protected objToString(val: Date): string;
    protected checkValue(value: string | Date): string;
    protected validateValue(date: Date, value: string | Date): string;
    protected findNextElement(event: base.KeyboardEventArgs): void;
    protected elementValue(value: Date): void;
    private validLiElement;
    protected keyHandler(event: base.KeyboardEventArgs): void;
    protected getCultureTimeObject(ld: Object, c: string): Object;
    protected getCultureDateObject(ld: Object, c: string): Object;
    protected wireListEvents(): void;
    protected unWireListEvents(): void;
    protected valueProcess(event: base.KeyboardEventArgs | FocusEvent | MouseEvent, value: Date): void;
    protected changeEvent(e: base.KeyboardEventArgs | FocusEvent | MouseEvent): void;
    protected updateInput(isUpdate: boolean, date: Date): void;
    protected setActiveDescendant(): void;
    protected removeSelection(): void;
    protected removeHover(className: string): void;
    protected getHoverItem(className: string): Element[];
    private setActiveClass;
    protected addSelection(): void;
    protected isValidLI(li: Element | HTMLElement): boolean;
    protected createDateObj(val: Date | string): Date;
    protected TimeParse(today: string, val: Date | string): Date;
    protected createListItems(): void;
    private documentClickHandler;
    protected setEnableRtl(): void;
    protected setEnable(): void;
    protected getProperty(date: TimePickerModel, val: string): void;
    protected inputBlurHandler(e: MouseEvent): void;
    /**
     * Focuses out the TimePicker textbox element.
     * @returns void
     */
    focusOut(): void;
    private isPopupOpen;
    private inputFocusHandler;
    /**
     * Focused the TimePicker textbox element.
     * @returns void
     */
    focusIn(): void;
    /**
     * Hides the TimePicker popup.
     * @returns void
     */
    hide(): void;
    /**
     * Opens the popup to show the list items.
     * @returns void
     */
    show(event?: KeyboardEvent | MouseEvent | Event): void;
    private formatValues;
    private popupAlignment;
    /**
     * Gets the properties to be maintained upon browser refresh.
     * @returns string
     */
    getPersistData(): string;
    /**
     * To get component name
     * @private
     */
    protected getModuleName(): string;
    /**
     * Called internally if any of the property value changed.
     * returns void
     * @private
     */
    onPropertyChanged(newProp: TimePickerModel, oldProp: TimePickerModel): void;
    protected checkInValue(inValue: string | Date | number): string;
}
 }
export namespace charts { 

//node_modules/@syncfusion/ej2-charts/src/accumulation-chart/accumulation-model.d.ts
/**
 * Interface for a class AccumulationChart
 */
export interface AccumulationChartModel extends base.ComponentModel{
    /**
     * The width of the chart as a string in order to provide input as both like '100px' or '100%'.
     * If specified as '100%, chart will render to the full width of its parent element.
     * @default null
     */
    width?: string;
    /**
     * The height of the chart as a string in order to provide input as both like '100px' or '100%'.
     * If specified as '100%, chart will render to the full height of its parent element.
     * @default null
     */
    height?: string;
    /**
     * Title for accumulation chart
     * @default null
     */
    title?: string;
    /**
     * Center of pie
     */
    center?: PieCenterModel;
    /**
    * Specifies the dataSource for the AccumulationChart. It can be an array of JSON objects or an instance of data.DataManager.
    * ```html
    * <div id='Pie'></div>
    * ```
    * ```typescript
    * let dataManager: data.DataManager = new data.DataManager({
    *         url: 'http://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/'
    * });
    * let query: Query = new Query().take(50).where('Estimate', 'greaterThan', 0, false);
    * let pie: AccumulationChart = new AccumulationChart({
    * ...
    *     dataSource: dataManager,
    *     series: [{
    *        xName: 'Id',
    *        yName: 'Estimate',
    *        query: query
    *    }],
    * ...
    * });
    * pie.appendTo('#Pie');
    * ```
    * @default ''
    */
    dataSource?: Object | data.DataManager;
    /**
     * Options for customizing the `title` of accumulation chart.
     */
    titleStyle?: FontModel;
    /**
     * SubTitle for accumulation chart
     * @default null
     */
    subTitle?: string;
    /**
     * Options for customizing the `subtitle` of accumulation chart.
     */
    subTitleStyle?: FontModel;
    /**
     * Options for customizing the legend of accumulation chart.
     */
    legendSettings?: LegendSettingsModel;
    /**
     * Options for customizing the tooltip of accumulation chart.
     */
    tooltip?:  TooltipSettingsModel;
    /**
     * Specifies whether point has to get selected or not. Takes value either 'None 'or 'Point'
     * @default None
     */
    selectionMode?: AccumulationSelectionMode;
    /**
     * If set true, enables the multi selection in accumulation chart. It requires `selectionMode` to be `Point`.
     * @default false
     */
    isMultiSelect?: boolean;
    /**
     * If set true, enables the animation for both chart and accumulation.
     * @default true
     */
    enableAnimation?: boolean;
    /**
     * Specifies the point indexes to be selected while loading a accumulation chart.
     * It requires `selectionMode` to be `Point`.
     * ```html
     * <div id='Pie'></div>
     * ```
     * ```typescript
     * let pie: AccumulationChart = new AccumulationChart({
     * ...
     *   selectionMode: 'Point',
     *   selectedDataIndexes: [ { series: 0, point: 1},
     *                          { series: 2, point: 3} ],
     * ...
     * });
     * pie.appendTo('#Pie');
     * ```
     * @default []
     */
    selectedDataIndexes?: IndexesModel[];
    /**
     *  Options to customize the left, right, top and bottom margins of accumulation chart.
     */
    margin?: MarginModel;
    /**
     * If set true, labels for the point will be placed smartly without overlapping.
     * @default true
     */
    enableSmartLabels?: boolean;
    /**
     * Options for customizing the color and width of the chart border.
     */
    border?: BorderModel;
    /**
     * The background color of the chart, which accepts value in hex, rgba as a valid CSS color string.
     * @default null
     */
    background?: string;
    /**
     * The configuration for series in accumulation chart.
     */
    series?: AccumulationSeriesModel[];
    /**
     * The configuration for annotation in chart.
     */
    annotations?: AccumulationAnnotationSettingsModel[];
    /**
     * Specifies the theme for accumulation chart.
     * @default 'Material'
     */
    theme?: AccumulationTheme;
    /**
     * Specifies whether a grouping separator should be used for a number.
     * @default false
     */
    useGroupingSeparator?: boolean;
    /**
     * To enable export feature in chart.
     * @default true
     */
    enableExport?: boolean;
    /**
     * Triggers after accumulation chart loaded.
     * @event
     * @blazorProperty 'Loaded'
     */
    loaded?: base.EmitType<IAccLoadedEventArgs>;
    /**
     * Triggers before accumulation chart load.
     * @event
     * @deprecated
     */
    load?: base.EmitType<IAccLoadedEventArgs>;
    /**
     * Triggers before the series gets rendered.
     * @event
     * @deprecated
     */
    seriesRender?: base.EmitType<IAccSeriesRenderEventArgs>;
    /**
     * Triggers before the legend gets rendered.
     * @event
     * @deprecated
     */
    legendRender?: base.EmitType<ILegendRenderEventArgs>;
    /**
     * Triggers before the data label for series gets rendered.
     * @event
     * @deprecated
     */
    textRender?: base.EmitType<IAccTextRenderEventArgs>;
    /**
     * Triggers before the tooltip for series gets rendered.
     * @event
     */
    tooltipRender?: base.EmitType<ITooltipRenderEventArgs>;
    /**
     * Triggers before each points for series gets rendered.
     * @event
     * @deprecated
     */
    pointRender?: base.EmitType<IAccPointRenderEventArgs>;
    /**
     * Triggers before the annotation gets rendered.
     * @event
     * @deprecated
     */
    annotationRender?: base.EmitType<IAnnotationRenderEventArgs>;
    /**
     * Triggers before the prints gets started.
     * @event
     * @blazorProperty 'OnPrint'
     */
    beforePrint?: base.EmitType<IPrintEventArgs>;
    /**
     * Triggers on hovering the accumulation chart.
     * @event
     * @blazorProperty 'OnChartMouseMove'
     */
    chartMouseMove?: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on clicking the accumulation chart.
     * @event
     * @blazorProperty 'OnChartMouseClick'
     */
    chartMouseClick?: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on point click.
     * @event
     * @blazorProperty 'OnPointClick'
     */
    pointClick?: base.EmitType<IPointEventArgs>;
    /**
     * Triggers on point move.
     * @event
     * @blazorProperty 'PointMoved'
     */
    pointMove?: base.EmitType<IPointEventArgs>;
    /**
     * Triggers after animation gets completed for series.
     * @event
     * @blazorProperty 'OnAnimationComplete'
     */
    animationComplete?: base.EmitType<IAccAnimationCompleteEventArgs>;
    /**
     * Triggers on mouse down.
     * @event
     * @blazorProperty 'OnChartMouseDown'
     */
    chartMouseDown?: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers while cursor leaves the accumulation chart.
     * @event
     * @blazorProperty 'OnChartMouseLeave'
     */
    chartMouseLeave?: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on mouse up.
     * @event
     * @blazorProperty 'OnChartMouseUp'
     */
    chartMouseUp?: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers after window resize.
     * @event
     * @blazorProperty 'Resized'
     */
    resized?: base.EmitType<IAccResizeEventArgs>;
    /**
     * Defines the currencyCode format of the accumulation chart
     * @private
     * @aspType string
     */
    currencyCode?: string;
}
//node_modules/@syncfusion/ej2-charts/src/accumulation-chart/accumulation.d.ts
/**
 * AccumulationChart file
 */
/**
 * Represents the AccumulationChart control.
 * ```html
 * <div id="accumulation"/>
 * <script>
 *   var accObj = new AccumulationChart({ });
 *   accObj.appendTo("#accumulation");
 * </script>
 * ```
 * @public
 */
export  class AccumulationChart extends base.Component<HTMLElement> implements base.INotifyPropertyChanged {
    /**
     * `accBaseModue` is used to define the common functionalities of accumulation series
     * @private
     */
    accBaseModule: AccumulationBase;
    /**
     * `pieSeriesModule` is used to render pie series.
     * @private
     */
    pieSeriesModule: PieSeries;
    /**
     * `funnelSeriesModule` is used to render funnel series.
     * @private
     */
    funnelSeriesModule: FunnelSeries;
    /**
     * `pyramidSeriesModule` is used to render funnel series.
     * @private
     */
    pyramidSeriesModule: PyramidSeries;
    /**
     * `accumulationLegendModule` is used to manipulate and add legend in accumulation chart.
     */
    accumulationLegendModule: AccumulationLegend;
    /**
     * `accumulationDataLabelModule` is used to manipulate and add dataLabel in accumulation chart.
     */
    accumulationDataLabelModule: AccumulationDataLabel;
    /**
     * `accumulationTooltipModule` is used to manipulate and add tooltip in accumulation chart.
     */
    accumulationTooltipModule: AccumulationTooltip;
    /**
     * `accumulationSelectionModule` is used to manipulate and add selection in accumulation chart.
     */
    accumulationSelectionModule: AccumulationSelection;
    /**
     * `annotationModule` is used to manipulate and add annotation in chart.
     */
    annotationModule: AccumulationAnnotation;
    /**
     * Export Module is used to export Accumulation chart.
     */
    exportModule: Export;
    /**
     * The width of the chart as a string in order to provide input as both like '100px' or '100%'.
     * If specified as '100%, chart will render to the full width of its parent element.
     * @default null
     */
    width: string;
    /**
     * The height of the chart as a string in order to provide input as both like '100px' or '100%'.
     * If specified as '100%, chart will render to the full height of its parent element.
     * @default null
     */
    height: string;
    /**
     * Title for accumulation chart
     * @default null
     */
    title: string;
    /**
     * Center of pie
     */
    center: PieCenterModel;
    /**
     * Specifies the dataSource for the AccumulationChart. It can be an array of JSON objects or an instance of data.DataManager.
     * ```html
     * <div id='Pie'></div>
     * ```
     * ```typescript
     * let dataManager$: data.DataManager = new data.DataManager({
     *         url: 'http://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/'
     * });
     * let query$: Query = new Query().take(50).where('Estimate', 'greaterThan', 0, false);
     * let pie$: AccumulationChart = new AccumulationChart({
     * ...
     *     dataSource: dataManager,
     *     series: [{
     *        xName: 'Id',
     *        yName: 'Estimate',
     *        query: query
     *    }],
     * ...
     * });
     * pie.appendTo('#Pie');
     * ```
     * @default ''
     */
    dataSource: Object | data.DataManager;
    /**
     * Options for customizing the `title` of accumulation chart.
     */
    titleStyle: FontModel;
    /**
     * SubTitle for accumulation chart
     * @default null
     */
    subTitle: string;
    /**
     * Options for customizing the `subtitle` of accumulation chart.
     */
    subTitleStyle: FontModel;
    /**
     * Options for customizing the legend of accumulation chart.
     */
    legendSettings: LegendSettingsModel;
    /**
     * Options for customizing the tooltip of accumulation chart.
     */
    tooltip: TooltipSettingsModel;
    /**
     * Specifies whether point has to get selected or not. Takes value either 'None 'or 'Point'
     * @default None
     */
    selectionMode: AccumulationSelectionMode;
    /**
     * If set true, enables the multi selection in accumulation chart. It requires `selectionMode` to be `Point`.
     * @default false
     */
    isMultiSelect: boolean;
    /**
     * If set true, enables the animation for both chart and accumulation.
     * @default true
     */
    enableAnimation: boolean;
    /**
     * Specifies the point indexes to be selected while loading a accumulation chart.
     * It requires `selectionMode` to be `Point`.
     * ```html
     * <div id='Pie'></div>
     * ```
     * ```typescript
     * let pie$: AccumulationChart = new AccumulationChart({
     * ...
     *   selectionMode: 'Point',
     *   selectedDataIndexes: [ { series: 0, point: 1},
     *                          { series: 2, point: 3} ],
     * ...
     * });
     * pie.appendTo('#Pie');
     * ```
     * @default []
     */
    selectedDataIndexes: IndexesModel[];
    /**
     *  Options to customize the left, right, top and bottom margins of accumulation chart.
     */
    margin: MarginModel;
    /**
     * If set true, labels for the point will be placed smartly without overlapping.
     * @default true
     */
    enableSmartLabels: boolean;
    /**
     * Options for customizing the color and width of the chart border.
     */
    border: BorderModel;
    /**
     * The background color of the chart, which accepts value in hex, rgba as a valid CSS color string.
     * @default null
     */
    background: string;
    /**
     * The configuration for series in accumulation chart.
     */
    series: AccumulationSeriesModel[];
    /**
     * The configuration for annotation in chart.
     */
    annotations: AccumulationAnnotationSettingsModel[];
    /**
     * Specifies the theme for accumulation chart.
     * @default 'Material'
     */
    theme: AccumulationTheme;
    /**
     * Specifies whether a grouping separator should be used for a number.
     * @default false
     */
    useGroupingSeparator: boolean;
    /**
     * To enable1 export feature in chart.
     * @default true
     */
    enableExport: boolean;
    /**
     * Triggers after accumulation chart loaded.
     * @event
     * @blazorProperty 'Loaded'
     */
    loaded: base.EmitType<IAccLoadedEventArgs>;
    /**
     * Triggers before accumulation chart load.
     * @event
     * @deprecated
     */
    load: base.EmitType<IAccLoadedEventArgs>;
    /**
     * Triggers before the series gets rendered.
     * @event
     * @deprecated
     */
    seriesRender: base.EmitType<IAccSeriesRenderEventArgs>;
    /**
     * Triggers before the legend gets rendered.
     * @event
     * @deprecated
     */
    legendRender: base.EmitType<ILegendRenderEventArgs>;
    /**
     * Triggers before the data label for series gets rendered.
     * @event
     * @deprecated
     */
    textRender: base.EmitType<IAccTextRenderEventArgs>;
    /**
     * Triggers before the tooltip for series gets rendered.
     * @event
     */
    tooltipRender: base.EmitType<ITooltipRenderEventArgs>;
    /**
     * Triggers before each points for series gets rendered.
     * @event
     * @deprecated
     */
    pointRender: base.EmitType<IAccPointRenderEventArgs>;
    /**
     * Triggers before the annotation gets rendered.
     * @event
     * @deprecated
     */
    annotationRender: base.EmitType<IAnnotationRenderEventArgs>;
    /**
     * Triggers before the prints gets started.
     * @event
     * @blazorProperty 'OnPrint'
     */
    beforePrint: base.EmitType<IPrintEventArgs>;
    /**
     * Triggers on hovering the accumulation chart.
     * @event
     * @blazorProperty 'OnChartMouseMove'
     */
    chartMouseMove: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on clicking the accumulation chart.
     * @event
     * @blazorProperty 'OnChartMouseClick'
     */
    chartMouseClick: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on point click.
     * @event
     * @blazorProperty 'OnPointClick'
     */
    pointClick: base.EmitType<IPointEventArgs>;
    /**
     * Triggers on point move.
     * @event
     * @blazorProperty 'PointMoved'
     */
    pointMove: base.EmitType<IPointEventArgs>;
    /**
     * Triggers after animation gets completed for series.
     * @event
     * @blazorProperty 'OnAnimationComplete'
     */
    animationComplete: base.EmitType<IAccAnimationCompleteEventArgs>;
    /**
     * Triggers on mouse down.
     * @event
     * @blazorProperty 'OnChartMouseDown'
     */
    chartMouseDown: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers while cursor leaves the accumulation chart.
     * @event
     * @blazorProperty 'OnChartMouseLeave'
     */
    chartMouseLeave: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on mouse up.
     * @event
     * @blazorProperty 'OnChartMouseUp'
     */
    chartMouseUp: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers after window resize.
     * @event
     * @blazorProperty 'Resized'
     */
    resized: base.EmitType<IAccResizeEventArgs>;
    /**
     * Defines the currencyCode format of the accumulation chart
     * @private
     * @aspType string
     */
    private currencyCode;
    /**
     * Animate the series bounds on data change.
     * @private
     */
    animate(duration?: number): void;
    /** @private */
    svgObject: Element;
    /** @private */
    private animateselected;
    /** @public */
    duration: number;
    /** @private */
    initialClipRect: svgBase.Rect;
    /** @private */
    availableSize: svgBase.Size;
    /** @private */
    renderer: svgBase.SvgRenderer | svgBase.CanvasRenderer;
    /** @private */
    intl: base.Internationalization;
    /** @private */
    visibleSeries: AccumulationSeries[];
    /** @private */
    seriesCounts: number;
    /** @private explode radius internal property */
    explodeDistance: number;
    /** @private Mouse position x */
    mouseX: number;
    /** @private Mouse position y */
    mouseY: number;
    private resizeTo;
    /** @private */
    origin: ChartLocation;
    /** @private */
    readonly type: AccumulationType;
    /** @private */
    isTouch: boolean;
    /** @private */
    redraw: boolean;
    /** @private */
    animateSeries: boolean;
    private titleCollection;
    private subTitleCollection;
    /** @private */
    themeStyle: IThemeStyle;
    private chartid;
    /** @private */
    isBlazor: boolean;
    /**
     * Constructor for creating the AccumulationChart widget
     * @private
     */
    constructor(options?: AccumulationChartModel, element?: string | HTMLElement);
    /**
     *  To create svg object, renderer and binding events for the container.
     */
    protected preRender(): void;
    /**
     * Themeing for chart goes here
     */
    private setTheme;
    /**
     * To render the accumulation chart elements
     */
    protected render(): void;
    /**
     * Method to unbind events for accumulation chart
     */
    private unWireEvents;
    /**
     * Method to bind events for the accumulation chart
     */
    private wireEvents;
    /**
     * Method to set mouse x, y from events
     */
    private setMouseXY;
    /**
     * Handles the mouse end.
     * @return {boolean}
     * @private
     */
    accumulationMouseEnd(e: PointerEvent): boolean;
    /**
     * Handles the mouse start.
     * @return {boolean}
     * @private
     */
    accumulationMouseStart(e: PointerEvent): boolean;
    /**
     * Handles the accumulation chart resize.
     * @return {boolean}
     * @private
     */
    accumulationResize(e: Event): boolean;
    /**
     * Handles the print method for accumulation chart control.
     */
    print(id?: string[] | string | Element): void;
    /**
     * Export method for the chart.
     */
    export(type: ExportType, fileName: string): void;
    /**
     * Applying styles for accumulation chart element
     */
    private setStyle;
    /**
     * Method to set the annotation content dynamically for accumulation.
     */
    setAnnotationValue(annotationIndex: number, content: string): void;
    /**
     * Handles the mouse move on accumulation chart.
     * @return {boolean}
     * @private
     */
    accumulationMouseMove(e: PointerEvent): boolean;
    titleTooltip(event: Event, x: number, y: number, isTouch?: boolean): void;
    /**
     * Handles the mouse click on accumulation chart.
     * @return {boolean}
     * @private
     */
    accumulationOnMouseClick(e: PointerEvent): boolean;
    private triggerPointEvent;
    /**
     * Handles the mouse right click on accumulation chart.
     * @return {boolean}
     * @private
     */
    accumulationRightClick(event: MouseEvent | PointerEvent): boolean;
    /**
     * Handles the mouse leave on accumulation chart.
     * @return {boolean}
     * @private
     */
    accumulationMouseLeave(e: PointerEvent): boolean;
    /**
     * Method to set culture for chart
     */
    private setCulture;
    /**
     * Method to create SVG element for accumulation chart.
     */
    private createPieSvg;
    /**
     * To Remove the SVG from accumulation chart.
     * @return {boolean}
     * @private
     */
    removeSvg(): void;
    /**
     * Method to create the secondary element for tooltip, datalabel and annotaitons.
     */
    private createSecondaryElement;
    /**
     * Method to find visible series based on series types
     */
    private calculateVisibleSeries;
    /**
     * To find points from dataSource
     */
    private processData;
    /**
     * To refresh the accumulation chart
     * @private
     */
    refreshChart(): void;
    /**
     * Method to find groupped points
     */
    private doGrouppingProcess;
    /**
     * Method to calculate bounds for accumulation chart
     */
    private calculateBounds;
    private calculateLegendBounds;
    /**
     * To render elements for accumulation chart
     * @private
     */
    renderElements(): void;
    /**
     * To set the left and top position for data label template for center aligned chart
     * @private
     */
    setSecondaryElementPosition(): void;
    /**
     * To render the annotaitions for accumulation series.
     * @private
     */
    renderAnnotation(): void;
    /**
     * Method to process the explode in accumulation chart
     * @private
     */
    processExplode(): void;
    /**
     * Method to render series for accumulation chart
     */
    private renderSeries;
    /**
     * Method to render border for accumulation chart
     */
    private renderBorder;
    /**
     * Method to render legend for accumulation chart
     */
    private renderLegend;
    /**
     * To process the selection in accumulation chart
     * @private
     */
    processSelection(): void;
    /**
     * To render title for accumulation chart
     */
    private renderTitle;
    private renderSubTitle;
    /**
     * To get the series parent element
     * @private
     */
    getSeriesElement(): Element;
    /**
     * To refresh the all visible series points
     * @private
     */
    refreshSeries(): void;
    /**
     * To refresh points label region and visible
     * @private
     */
    refreshPoints(points: AccPoints[]): void;
    /**
     * To get Module name
     *  @private
     */
    getModuleName(): string;
    /**
     * To destroy the accumulationcharts
     * @private
     */
    destroy(): void;
    /**
     * To provide the array of modules needed for control rendering
     * @return {base.ModuleDeclaration[]}
     * @private
     */
    requiredModules(): base.ModuleDeclaration[];
    /**
     * To find datalabel visibility in series
     */
    private findDatalabelVisibility;
    /**
     * Get the properties to be maintained in the persisted state.
     * @private
     */
    getPersistData(): string;
    /**
     * Called internally if any of the property value changed.
     * @private
     */
    onPropertyChanged(newProp: AccumulationChartModel, oldProp: AccumulationChartModel): void;
}
//node_modules/@syncfusion/ej2-charts/src/accumulation-chart/annotation/annotation.d.ts
/**
 * AccumulationChart annotation properties
 */
/**
 * `AccumulationAnnotation` module handles the annotation for accumulation chart.
 */
export  class AccumulationAnnotation extends AnnotationBase {
    private pie;
    private parentElement;
    private annotations;
    /**
     * Constructor for accumulation chart annotation.
     * @private.
     */
    constructor(control: AccumulationChart);
    /**
     * Method to render the annotation for accumulation chart
     * @param element
     */
    renderAnnotations(element: Element): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the annotation.
     * @return {void}
     * @private
     */
    destroy(control: AccumulationChart): void;
}
//node_modules/@syncfusion/ej2-charts/src/accumulation-chart/index.d.ts
/**
 * Pie Component items exported
 */
//node_modules/@syncfusion/ej2-charts/src/accumulation-chart/model/acc-base-model.d.ts
/**
 * Interface for a class AccumulationAnnotationSettings
 */
export interface AccumulationAnnotationSettingsModel {
    /**
     * Content of the annotation, which accepts the id of the custom element.
     * @default null
     */
    content?: string;
    /**
     * if set coordinateUnit as `Pixel` X specifies the axis value
     * else is specifies pixel or percentage of coordinate
     * @default '0'
     */
    x?: string | Date | number;
    /**
     * if set coordinateUnit as `Pixel` Y specifies the axis value
     * else is specifies pixel or percentage of coordinate
     * @default '0'
     */
    y?: string | number;
    /**
     * Specifies the coordinate units of the annotation. They are
     * * Pixel - Annotation renders based on x and y pixel value.
     * * Point - Annotation renders based on x and y axis value.
     * @default 'Pixel'
     */
    coordinateUnits?: Units;
    /**
     * Specifies the regions of the annotation. They are
     * * Chart - Annotation renders based on chart coordinates.
     * * Series - Annotation renders based on series coordinates.
     * @default 'Chart'
     */
    region?: Regions;
    /**
     * Specifies the position of the annotation. They are
     * * Top - Align the annotation element as top side.
     * * Bottom - Align the annotation element as bottom side.
     * * Middle - Align the annotation element as mid point.
     * @default 'Middle'
     */
    verticalAlignment?: Position;
    /**
     * Specifies the alignment of the annotation. They are
     * * Near - Align the annotation element as top side.
     * * Far - Align the annotation element as bottom side.
     * * Center - Align the annotation element as mid point.
     * @default 'Center'
     */
    horizontalAlignment?: Alignment;
    /**
     * Information about annotation for assistive technology.
     * @default null
     */
    description?: string;
}
/**
 * Interface for a class AccumulationDataLabelSettings
 */
export interface AccumulationDataLabelSettingsModel {
    /**
     * If set true, data label for series gets render.
     * @default false
     */
    visible?: boolean;
    /**
     * The DataSource field which contains the data label value.
     * @default null
     */
    name?: string;
    /**
     * The background color of the data label, which accepts value in hex, rgba as a valid CSS color string.
     * @default 'transparent'
     */
    fill?: string;
    /**
     * Specifies the position of data label. They are.
     * * Outside - Places label outside the point.
     * * Inside - Places label inside the point.
     * @default 'Inside'
     */
    position?: AccumulationLabelPosition;
    /**
     * The roundedCornerX for the data label. It requires `border` values not to be null.
     * @default 5
     */
    rx?: number;
    /**
     * The roundedCornerY for the data label. It requires `border` values not to be null.
     * @default 5
     */
    ry?: number;
    /**
     * Specifies angle for data label.
     * @default 0
     */
    angle?: number;
    /**
     * Enables rotation for data label.
     * @default false
     */
    enableRotation?: boolean;
    /**
     * Option for customizing the border lines.
     */
    border?: BorderModel;
    /**
     * Option for customizing the data label text.
     */
    font?: FontModel;
    /**
     * Options for customize the connector line in series.
     * This property is applicable for Pie, Funnel and Pyramid series.
     * The default connector length for Pie series is '4%'. For other series, it is null.
     */
    connectorStyle?: ConnectorModel;
    /**
     * Custom template to format the data label content. Use ${point.x} and ${point.y} as a placeholder
     * text to display the corresponding data point.
     * @default null
     */
    template?: string;
}
/**
 * Interface for a class PieCenter
 */
export interface PieCenterModel {
    /**
     * X value of the center.
     * @default '50%'
     */
    x?: string;
    /**
     * Y value of the center.
     * @default '50%'
     */
    y?: string;
}
/**
 * Interface for a class AccPoints
 */
export interface AccPointsModel {
}
/**
 * Interface for a class AccumulationSeries
 */
export interface AccumulationSeriesModel {
    /**
     * Specifies the dataSource for the series. It can be an array of JSON objects or an instance of data.DataManager.
     * ```html
     * <div id='Pie'></div>
     * ```
     * ```typescript
     * let dataManager$: data.DataManager = new data.DataManager({
     *         url: 'http://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/'
     * });
     * let query$: data.Query = new data.Query().take(50).where('Estimate', 'greaterThan', 0, false);
     * let pie$: AccumulationChart = new AccumulationChart({
     * ...
     *     series: [{
     *        dataSource: dataManager,
     *        xName: 'Id',
     *        yName: 'Estimate',
     *        query: query
     *    }],
     * ...
     * });
     * pie.appendTo('#Pie');
     * ```
     * @default ''
     */
    dataSource?: Object | data.DataManager;
    /**
     * Specifies data.Query to select data from dataSource. This property is applicable only when the dataSource is `ej.data.DataManager`.
     * @default null
     */
    query?: data.Query;
    /**
     * The DataSource field which contains the x value.
     * @default ''
     */
    xName?: string;
    /**
     * Specifies the series name
     * @default ''
     */
    name?: string;
    /**
     * The provided value will be considered as a Tooltip Mapping name
     * @default ''
     */
    tooltipMappingName?: string;
    /**
     * The DataSource field which contains the y value.
     * @default ''
     */
    yName?: string;
    /**
     * Specifies the series visibility.
     * @default true
     */
    visible?: boolean;
    /**
     * Options for customizing the border of the series.
     */
    border?: BorderModel;
    /**
     * Options for customizing the animation for series.
     */
    animation?: AnimationModel;
    /**
     * The shape of the legend. Each series has its own legend shape. They are
     * * Circle - Renders a circle.
     * * Rectangle - Renders a rectangle.
     * * Triangle - Renders a triangle.
     * * Diamond - Renders a diamond.
     * * Cross - Renders a cross.
     * * HorizontalLine - Renders a horizontalLine.
     * * VerticalLine - Renders a verticalLine.
     * * Pentagon - Renders a pentagon.
     * * InvertedTriangle - Renders a invertedTriangle.
     * * SeriesType -Render a legend shape based on series type.
     * @default 'SeriesType'
     */
    legendShape?: LegendShape;
    /**
     * The DataSource field that contains the color value of point
     * It is applicable for series
     * @default ''
     */
    pointColorMapping?: string;
    /**
     * Custom style for the selected series or points.
     * @default null
     */
    selectionStyle?: string;
    /**
     * AccumulationSeries y values less than groupTo are combined into single slice named others
     * @default null
     */
    groupTo?: string;
    /**
     * AccumulationSeries y values less than groupMode are combined into single slice named others
     * @default Value
     */
    groupMode?: GroupModes;
    /**
     * The data label for the series.
     */
    dataLabel?: AccumulationDataLabelSettingsModel;
    /**
     * Palette for series points.
     * @default []
     */
    palettes?: string[];
    /**
     * Start angle for a series.
     * @default 0
     */
    startAngle?: number;
    /**
     * End angle for a series.
     * @default null
     */
    endAngle?: number;
    /**
     * Radius of the pie series and its values in percentage.
     * @default '80%'
     */
    radius?: string;
    /**
     * When the innerRadius value is greater than 0 percentage, a donut will appear in pie series. It takes values only in percentage.
     * @default '0'
     */
    innerRadius?: string;
    /**
     * Specify the type of the series in accumulation chart.
     * @default 'Pie'
     */
    type?: AccumulationType;
    /**
     * To enable or disable tooltip for a series.
     * @default true
     */
    enableTooltip?: boolean;
    /**
     * If set true, series points will be exploded on mouse click or touch.
     * @default false
     */
    explode?: boolean;
    /**
     * Distance of the point from the center, which takes values in both pixels and percentage.
     * @default '30%'
     */
    explodeOffset?: string;
    /**
     * If set true, all the points in the series will get exploded on load.
     * @default false
     */
    explodeAll?: boolean;
    /**
     * Index of the point, to be exploded on load.
     * @default null
     * @aspDefaultValueIgnore
     */
    explodeIndex?: number;
    /**
     * options to customize the empty points in series
     */
    emptyPointSettings?: EmptyPointSettingsModel;
    /**
     * Defines the distance between the segments of a funnel/pyramid series. The range will be from 0 to 1
     * @default 0
     */
    gapRatio?: number;
    /**
     * Defines the width of the funnel/pyramid with respect to the chart area
     * @default '80%'
     */
    width?: string;
    /**
     * Defines the height of the funnel/pyramid with respect to the chart area
     * @default '80%'
     */
    height?: string;
    /**
     * Defines the width of the funnel neck with respect to the chart area
     * @default '20%'
     */
    neckWidth?: string;
    /**
     * Defines the height of the funnel neck with respect to the chart area
     * @default '20%'
     */
    neckHeight?: string;
    /**
     * Defines how the values have to be reflected, whether through height/surface of the segments
     * @default 'Linear'
     */
    pyramidMode?: PyramidModes;
    /**
     * The opacity of the series.
     * @default 1.
     */
    opacity?: number;
}
//node_modules/@syncfusion/ej2-charts/src/accumulation-chart/model/acc-base.d.ts
/**
 * AccumulationChart base file
 */
/**
 * Annotation for accumulation series
 */
export  class AccumulationAnnotationSettings extends base.ChildProperty<AccumulationAnnotationSettings> {
    /**
     * Content of the annotation, which accepts the id of the custom element.
     * @default null
     */
    content: string;
    /**
     * if set coordinateUnit as `Pixel` X specifies the axis value
     * else is specifies pixel or percentage of coordinate
     * @default '0'
     */
    x: string | Date | number;
    /**
     * if set coordinateUnit as `Pixel` Y specifies the axis value
     * else is specifies pixel or percentage of coordinate
     * @default '0'
     */
    y: string | number;
    /**
     * Specifies the coordinate units of the annotation. They are
     * * Pixel - Annotation renders based on x and y pixel value.
     * * Point - Annotation renders based on x and y axis value.
     * @default 'Pixel'
     */
    coordinateUnits: Units;
    /**
     * Specifies the regions of the annotation. They are
     * * Chart - Annotation renders based on chart coordinates.
     * * Series - Annotation renders based on series coordinates.
     * @default 'Chart'
     */
    region: Regions;
    /**
     * Specifies the position of the annotation. They are
     * * Top - Align the annotation element as top side.
     * * Bottom - Align the annotation element as bottom side.
     * * Middle - Align the annotation element as mid point.
     * @default 'Middle'
     */
    verticalAlignment: Position;
    /**
     * Specifies the alignment of the annotation. They are
     * * Near - Align the annotation element as top side.
     * * Far - Align the annotation element as bottom side.
     * * Center - Align the annotation element as mid point.
     * @default 'Center'
     */
    horizontalAlignment: Alignment;
    /**
     * Information about annotation for assistive technology.
     * @default null
     */
    description: string;
}
/**
 * Configures the dataLabel in accumulation chart.
 */
export  class AccumulationDataLabelSettings extends base.ChildProperty<AccumulationDataLabelSettings> {
    /**
     * If set true, data label for series gets render.
     * @default false
     */
    visible: boolean;
    /**
     * The DataSource field which contains the data label value.
     * @default null
     */
    name: string;
    /**
     * The background color of the data label, which accepts value in hex, rgba as a valid CSS color string.
     * @default 'transparent'
     */
    fill: string;
    /**
     * Specifies the position of data label. They are.
     * * Outside - Places label outside the point.
     * * Inside - Places label inside the point.
     * @default 'Inside'
     */
    position: AccumulationLabelPosition;
    /**
     * The roundedCornerX for the data label. It requires `border` values not to be null.
     * @default 5
     */
    rx: number;
    /**
     * The roundedCornerY for the data label. It requires `border` values not to be null.
     * @default 5
     */
    ry: number;
    /**
     * Specifies angle for data label.
     * @default 0
     */
    angle: number;
    /**
     * Enables rotation for data label.
     * @default false
     */
    enableRotation: boolean;
    /**
     * Option for customizing the border lines.
     */
    border: BorderModel;
    /**
     * Option for customizing the data label text.
     */
    font: FontModel;
    /**
     * Options for customize the connector line in series.
     * This property is applicable for Pie, Funnel and Pyramid series.
     * The default connector length for Pie series is '4%'. For other series, it is null.
     */
    connectorStyle: ConnectorModel;
    /**
     * Custom template to format the data label content. Use ${point.x} and ${point.y} as a placeholder
     * text to display the corresponding data point.
     * @default null
     */
    template: string;
}
/**
 * Center value of the Pie series.
 */
export  class PieCenter extends base.ChildProperty<PieCenter> {
    /**
     * X value of the center.
     * @default '50%'
     */
    x: string;
    /**
     * Y value of the center.
     * @default '50%'
     */
    y: string;
}
/**
 * Points model for the series.
 * @public
 */
export  class AccPoints {
    /** accumulation point x value */
    x: Object;
    /** accumulation point y value */
    y: number;
    /** accumulation point visibility */
    visible: boolean;
    /** accumulation point text */
    text: string;
    /** accumulation point tooltip */
    tooltip: string;
    /** accumulation point slice radius */
    sliceRadius: string;
    /** accumulation point original text */
    originalText: string;
    /** @private */
    label: string;
    /** accumulation point color */
    color: string;
    /** accumulation point percentage value */
    percentage: number;
    /** accumulation point symbol location */
    symbolLocation: ChartLocation;
    /** accumulation point index */
    index: number;
    /** @private */
    midAngle: number;
    /** @private */
    startAngle: number;
    /** @private */
    endAngle: number;
    /** @private */
    labelAngle: number;
    /** @private */
    region: svgBase.Rect;
    /** @private */
    labelRegion: svgBase.Rect;
    /** @private */
    labelVisible: boolean;
    /** @private */
    labelPosition: AccumulationLabelPosition;
    /** @private */
    yRatio: number;
    /** @private */
    heightRatio: number;
    /** @private */
    labelOffset: ChartLocation;
    regions: svgBase.Rect[];
    /** @private */
    isExplode: boolean;
    /** @private */
    isClubbed: boolean;
    /** @private */
    isSliced: boolean;
    /** @private */
    start: number;
    /** @private */
    degree: number;
    /** @private */
    transform: string;
}
/**
 *  Configures the series in accumulation chart.
 */
export  class AccumulationSeries extends base.ChildProperty<AccumulationSeries> {
    /**
     * Specifies the dataSource for the series. It can be an array of JSON objects or an instance of data.DataManager.
     * ```html
     * <div id='Pie'></div>
     * ```
     * ```typescript
     * let dataManager$: data.DataManager = new data.DataManager({
     *         url: 'http://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/'
     * });
     * let query$: data.Query = new data.Query().take(50).where('Estimate', 'greaterThan', 0, false);
     * let pie$: AccumulationChart = new AccumulationChart({
     * ...
     *     series: [{
     *        dataSource: dataManager,
     *        xName: 'Id',
     *        yName: 'Estimate',
     *        query: query
     *    }],
     * ...
     * });
     * pie.appendTo('#Pie');
     * ```
     * @default ''
     */
    dataSource: Object | data.DataManager;
    /**
     * Specifies data.Query to select data from dataSource. This property is applicable only when the dataSource is `ej.data.DataManager`.
     * @default null
     */
    query: data.Query;
    /**
     * The DataSource field which contains the x value.
     * @default ''
     */
    xName: string;
    /**
     * Specifies the series name
     * @default ''
     */
    name: string;
    /**
     * The provided value will be considered as a Tooltip Mapping name
     * @default ''
     */
    tooltipMappingName: string;
    /**
     * The DataSource field which contains the y value.
     * @default ''
     */
    yName: string;
    /**
     * Specifies the series visibility.
     * @default true
     */
    visible: boolean;
    /**
     * Options for customizing the border of the series.
     */
    border: BorderModel;
    /**
     * Options for customizing the animation for series.
     */
    animation: AnimationModel;
    /**
     * The shape of the legend. Each series has its own legend shape. They are
     * * Circle - Renders a circle.
     * * Rectangle - Renders a rectangle.
     * * Triangle - Renders a triangle.
     * * Diamond - Renders a diamond.
     * * Cross - Renders a cross.
     * * HorizontalLine - Renders a horizontalLine.
     * * VerticalLine - Renders a verticalLine.
     * * Pentagon - Renders a pentagon.
     * * InvertedTriangle - Renders a invertedTriangle.
     * * SeriesType -Render a legend shape based on series type.
     * @default 'SeriesType'
     */
    legendShape: LegendShape;
    /**
     * The DataSource field that contains the color value of point
     * It is applicable for series
     * @default ''
     */
    pointColorMapping: string;
    /**
     * Custom style for the selected series or points.
     * @default null
     */
    selectionStyle: string;
    /**
     * AccumulationSeries y values less than groupTo are combined into single slice named others
     * @default null
     */
    groupTo: string;
    /**
     * AccumulationSeries y values less than groupMode are combined into single slice named others
     * @default Value
     */
    groupMode: GroupModes;
    /**
     * The data label for the series.
     */
    dataLabel: AccumulationDataLabelSettingsModel;
    /**
     * Palette for series points.
     * @default []
     */
    palettes: string[];
    /**
     * Start angle for a series.
     * @default 0
     */
    startAngle: number;
    /**
     * End angle for a series.
     * @default null
     */
    endAngle: number;
    /**
     * Radius of the pie series and its values in percentage.
     * @default '80%'
     */
    radius: string;
    /**
     * When the innerRadius value is greater than 0 percentage, a donut will appear in pie series. It takes values only in percentage.
     * @default '0'
     */
    innerRadius: string;
    /**
     * Specify the type of the series in accumulation chart.
     * @default 'Pie'
     */
    type: AccumulationType;
    /**
     * To enable or disable tooltip for a series.
     * @default true
     */
    enableTooltip: boolean;
    /**
     * If set true, series points will be exploded on mouse click or touch.
     * @default false
     */
    explode: boolean;
    /**
     * Distance of the point from the center, which takes values in both pixels and percentage.
     * @default '30%'
     */
    explodeOffset: string;
    /**
     * If set true, all the points in the series will get exploded on load.
     * @default false
     */
    explodeAll: boolean;
    /**
     * Index of the point, to be exploded on load.
     * @default null
     * @aspDefaultValueIgnore
     */
    explodeIndex: number;
    /**
     * options to customize the empty points in series
     */
    emptyPointSettings: EmptyPointSettingsModel;
    /**
     * Defines the distance between the segments of a funnel/pyramid series. The range will be from 0 to 1
     * @default 0
     */
    gapRatio: number;
    /**
     * Defines the width of the funnel/pyramid with respect to the chart area
     * @default '80%'
     */
    width: string;
    /**
     * Defines the height of the funnel/pyramid with respect to the chart area
     * @default '80%'
     */
    height: string;
    /**
     * Defines the width of the funnel neck with respect to the chart area
     * @default '20%'
     */
    neckWidth: string;
    /**
     * Defines the height of the funnel neck with respect to the chart area
     * @default '20%'
     */
    neckHeight: string;
    /**
     * Defines how the values have to be reflected, whether through height/surface of the segments
     * @default 'Linear'
     */
    pyramidMode: PyramidModes;
    /**
     * The opacity of the series.
     * @default 1.
     */
    opacity: number;
    /** @private */
    points: AccPoints[];
    /** @private */
    clubbedPoints: AccPoints[];
    /** @private */
    dataModule: Data;
    /** @private */
    sumOfPoints: number;
    /** @private */
    index: number;
    /** @private */
    sumOfClub: number;
    /** @private */
    resultData: Object;
    /** @private */
    lastGroupTo: string;
    /** @private */
    isRectSeries: boolean;
    /** @private */
    clipRect: svgBase.Rect;
    /** @private */
    category: SeriesCategories;
    /**
     * To find the max bounds of the data label to place smart legend
     *  @private
     */
    labelBound: svgBase.Rect;
    /**
     * To find the max bounds of the accumulation segment to place smart legend
     *  @private
     */
    accumulationBound: svgBase.Rect;
    /**
     * Defines the funnel size
     * @private
     */
    triangleSize: svgBase.Size;
    /**
     * Defines the size of the funnel neck
     * @private
     */
    neckSize: svgBase.Size;
    /** @private To refresh the Datamanager for series */
    refreshDataManager(accumulation: AccumulationChart, render: boolean): void;
    /**
     * To get points on dataManager is success
     * @private
     */
    dataManagerSuccess(e: {
        result: Object;
        count: number;
    }, accumulation: AccumulationChart, render: boolean): void;
    /** @private To find points from result data */
    getPoints(result: Object, accumulation: AccumulationChart): void;
    generateClubPoint(): AccPoints;
    /**
     * Method to set point index and color
     */
    private pushPoints;
    /**
     * Method to find club point
     */
    private isClub;
    /**
     * Method to find sum of points in the series
     */
    private findSumOfPoints;
    /**
     * Method to set points x, y and text from data source
     */
    private setPoints;
    /**
     * Method render the series elements for accumulation chart
     * @private
     */
    renderSeries(accumulation: AccumulationChart, redraw?: boolean): void;
    /**
     * Method render the points elements for accumulation chart series.
     */
    private renderPoints;
    /**
     * Method render the datalabel elements for accumulation chart.
     */
    private renderDataLabel;
    /**
     * To find maximum bounds for smart legend placing
     * @private
     */
    findMaxBounds(totalbound: svgBase.Rect, bound: svgBase.Rect): void;
    /**
     * To set empty point value for null points
     * @private
     */
    setAccEmptyPoint(point: AccPoints, i: number, data: Object, colors: string[]): void;
    /**
     * To find point is empty
     */
    private isEmpty;
}
/**
 * method to get series from index
 * @private
 */
export  function getSeriesFromIndex(index: number, visibleSeries: AccumulationSeries[]): AccumulationSeries;
/**
 * method to get point from index
 * @private
 */
export  function pointByIndex(index: number, points: AccPoints[]): AccPoints;
//node_modules/@syncfusion/ej2-charts/src/accumulation-chart/model/enum.d.ts
/**
 * Accumulation charts Enum file
 */
/**
 * Defines the Accumulation Chart series type.
 */
export  type AccumulationType = 
/** Accumulation chart Pie series type */
'Pie' | 
/** Accumulation chart Funnel series type */
'Funnel' | 
/** Accumulation chart Pyramid series type */
'Pyramid';
/**
 * Defines the AccumulationLabelPosition. They are
 * * Inside - Define the data label position for the accumulation series Inside.
 * * Outside - Define the data label position for the accumulation series Outside.
 * *
 */
export  type AccumulationLabelPosition = 
/** Define the data label position for the accumulation series Inside */
'Inside' | 
/** Define the data label position for the accumulation series Outside */
'Outside';
/**
 * Defines the ConnectorType. They are
 * * Line - Accumulation series Connector line type as Straight line.
 * * Curve - Accumulation series Connector line type as Curved line.
 * *
 */
export  type ConnectorType = 
/** Accumulation series Connector line type as Straight line */
'Line' | 
/** Accumulation series Connector line type as Curved line */
'Curve';
/**
 * Defines the SelectionMode, They are.
 * * none - Disable the selection.
 * * point - To select a point.
 */
export  type AccumulationSelectionMode = 
/** Disable the selection. */
'None' | 
/** To select a point. */
'Point';
/**
 * Defines Theme of the accumulation chart. They are
 * * Material - Render a accumulation chart with Material theme.
 * * Fabric - Render a accumulation chart with fabric theme.
 */
export  type AccumulationTheme = 
/**  Render a accumulation chart with Material theme. */
'Material' | 
/**  Render a accumulation chart with Fabric theme. */
'Fabric' | 
/**  Render a accumulation chart with Bootstrap theme. */
'Bootstrap' | 
/**  Render a accumulation chart with Highcontrast Light theme. */
'HighContrastLight' | 
/**  Render a accumulation chart with MaterialDark theme. */
'MaterialDark' | 
/**  Render a accumulation chart with FabricDark theme. */
'FabricDark' | 
/**  Render a accumulation chart with HighContrastDark theme. */
'HighContrast' | 
/**  Render a accumulation chart with BootstrapDark theme. */
'BootstrapDark' | 
/**  Render a accumulation chart with BootstrapDark theme. */
'Bootstrap4';
/**
 * Defines the empty point mode of the chart.
 * * Zero - Used to display empty points as zero.
 * * Drop - Used to ignore the empty point while rendering.
 * * Average - Used to display empty points as previous and next point average.
 */
export  type AccEmptyPointMode = 
/** Used to display empty points as zero  */
'Zero' | 
/** Used to ignore the empty point while rendering  */
'Drop' | 
/** Used to display empty points as previous and next point average  */
'Average' | 
/** Used to ignore the empty point while rendering   */
'Gap';
/**
 * Defines the mode of the pyramid
 * * Linear - Height of the pyramid segments reflects the values
 * * Surface - Surface/Area of the  pyramid segments reflects the values
 */
export  type PyramidModes = 
/** Height of the pyramid segments reflects the values */
'Linear' | 
/** Surface/Area of the  pyramid segments reflects the values */
'Surface';
/**
 * Defines the mode of the group mode
 * * Point - When choosing points, the selected points get grouped.
 * * Value - When choosing values, the points which less then values get grouped.
 */
export  type GroupModes = 
/** When choosing points, the selected points get grouped */
'Point' | 
/** When choosing values, the points which less then values get grouped. */
'Value';
//node_modules/@syncfusion/ej2-charts/src/accumulation-chart/model/pie-interface.d.ts
/**
 * Interface for Accumulation chart
 */
/**
 * Accumulation Chart SeriesRender event arguments.
 */
export interface IAccSeriesRenderEventArgs {
    /** Defines the current series */
    series: AccumulationSeries;
    /** Defines the current data object */
    data: Object;
    /** Defines the current series name */
    name: string;
}
/**
 * Accumulation Chart TextRender event arguments.
 */
export interface IAccTextRenderEventArgs extends IChartEventArgs {
    /** Defines the current series */
    series: AccumulationSeriesModel;
    /** Defines the current point */
    point: AccPoints;
    /** Defines the current text */
    text: string;
    /** Defines the current fill color */
    color: string;
    /** Defines the current label border */
    border: BorderModel;
    /** Defines the current text template */
    template: string;
    /** Defines the current font */
    font: FontModel;
}
/**
 * Accumulation Chart TooltipRender event arguments.
 */
export interface IAccTooltipRenderEventArgs extends IChartEventArgs {
    /** Defines the current tooltip content */
    content?: string | HTMLElement;
    /** Defines the current tooltip text style */
    textStyle?: FontModel;
    /** Defines the current tooltip series */
    series: AccumulationSeries;
    /** Defines the current tooltip point */
    point: AccPoints;
}
/**
 * Accumulation Chart AnimationComplete event arguments.
 */
export interface IAccAnimationCompleteEventArgs extends IChartEventArgs {
    /** Defines the current animation series */
    series: AccumulationSeries;
    /** Defines the accumulation chart instance */
    accumulation: AccumulationChart;
    /** Defines the accumulation chart instance */
    chart: AccumulationChart;
}
/**
 * Accumulation Chart Resize event arguments.
 */
export interface IAccResizeEventArgs {
    /** Defines the name of the Event */
    name: string;
    /** Defines the previous size of the accumulation chart */
    previousSize: svgBase.Size;
    /** Defines the current size of the accumulation chart */
    currentSize: svgBase.Size;
    /** Defines the accumulation chart instance */
    accumulation: AccumulationChart;
    /** Defines the accumulation chart instance */
    chart: AccumulationChart;
}
/**
 * Accumulation Chart PointRender event arguments.
 */
export interface IAccPointRenderEventArgs extends IChartEventArgs {
    /** Defines the current series of the point */
    series: AccumulationSeries;
    /** Defines the current point */
    point: AccPoints;
    /** Defines the current point fill color */
    fill: string;
    /** Defines the current point border color */
    border: BorderModel;
    /** Defines the current point height */
    height?: number;
    /** Defines the current point width */
    width?: number;
}
/**
 * Accumulation Chart Load or Loaded event arguments.
 */
export interface IAccLoadedEventArgs extends IChartEventArgs {
    /** Defines the accumulation chart instance */
    accumulation: AccumulationChart;
    /** Defines the accumulation chart instance */
    chart: AccumulationChart;
}
export interface IAccLegendRenderEventArgs extends IChartEventArgs {
    /** Defines the current legend shape */
    shape: LegendShape;
    /** Defines the current legend fill color */
    fill: string;
    /** Defines the current legend text */
    text: string;
}
export interface IAccChartTooltipTemplate {
    /** accumulation point x value */
    x?: Object;
    /** accumulation point y value */
    y?: number;
    /** accumulation point color */
    label?: string;
    /** accumulation point percentage value */
    percentage?: number;
}
//node_modules/@syncfusion/ej2-charts/src/accumulation-chart/renderer/accumulation-base.d.ts
/**
 * Accumulation Base used to do some base calculation for accumulation chart.
 */
export  class AccumulationBase {
    /** @private */
    constructor(accumulation: AccumulationChart);
    private pieCenter;
    /**
     * Gets the center of the pie
     * @private
     */
    /**
    * Sets the center of the pie
    * @private
    */
    center: ChartLocation;
    private pieRadius;
    /**
     * Gets the radius of the pie
     * @private
     */
    /**
    * Sets the radius of the pie
    * @private
    */
    radius: number;
    private pieLabelRadius;
    /**
     * Gets the label radius of the pie
     * @private
     */
    /**
    * Sets the label radius of the pie
    * @private
    */
    labelRadius: number;
    /** @private */
    protected accumulation: AccumulationChart;
    /**
     * Checks whether the series is circular or not
     * @private
     */
    protected isCircular(): boolean;
    /**
     * To check various radius pie
     * @private
     */
    protected isVariousRadius(): boolean;
    /**
     * To process the explode on accumulation chart loading
     * @private
     */
    processExplode(event: Event): void;
    /**
     * To invoke the explode on accumulation chart loading
     * @private
     */
    invokeExplode(): void;
    /**
     * To deExplode all points in the series
     * @private
     */
    deExplodeAll(index: number, animationDuration: number): void;
    /**
     * To explode point by index
     * @private
     */
    explodePoints(index: number, chart: AccumulationChart, explode?: boolean): void;
    private getSum;
    private clubPointExplode;
    /**
     * To Explode points
     * @param index
     * @param point
     * @param explode
     */
    private pointExplode;
    /**
     * To check point is exploded by id
     */
    private isExplode;
    /**
     * To deExplode the point by index
     */
    private deExplodeSlice;
    /**
     * To translate the point elements by index and position
     */
    private setTranslate;
    /**
     * To translate the point element by id and position
     */
    private setElementTransform;
    /**
     * To translate the point elements by index position
     */
    private explodeSlice;
    /**
     * To Perform animation point explode
     * @param index
     * @param sliceId
     * @param start
     * @param endX
     * @param endY
     */
    private performAnimation;
}
//node_modules/@syncfusion/ej2-charts/src/accumulation-chart/renderer/dataLabel.d.ts
/**
 * AccumulationDataLabel module used to render `dataLabel`.
 */
export  class AccumulationDataLabel extends AccumulationBase {
    /** @private */
    titleRect: svgBase.Rect;
    /** @private */
    areaRect: svgBase.Rect;
    /** @private */
    clearTooltip: number;
    private id;
    marginValue: number;
    constructor(accumulation: AccumulationChart);
    /**
     * Method to get datalabel text location.
     * @private
     */
    getDataLabelPosition(point: AccPoints, dataLabel: AccumulationDataLabelSettingsModel, textSize: svgBase.Size, points: AccPoints[], parent: Element, id: string): void;
    /**
     * Method to get datalabel bound.
     */
    private getLabelRegion;
    /**
     * Method to get datalabel smart position.
     */
    private getSmartLabel;
    /**
     * To find trimmed datalabel tooltip needed.
     * @return {void}
     * @private
     */
    move(e: Event, x: number, y: number, isTouch?: boolean): void;
    /**
     * To find previous valid label point
     */
    private findPreviousPoint;
    /**
     * To find current point datalabel is overlapping with other points
     */
    private isOverlapping;
    /**
     * To get text trimmed while exceeds the accumulation chart area.
     */
    private textTrimming;
    /**
     * To set point label visible and region to disable.
     */
    private setPointVisibileFalse;
    /**
     * To set datalabel angle position for outside labels
     */
    private setOuterSmartLabel;
    /**
     * Sets smart label positions for funnel and pyramid series
     */
    private setSmartLabelForSegments;
    /**
     * To find connector line overlapping.
     */
    private isConnectorLineOverlapping;
    /**
     * To find two rectangle intersect
     */
    private isLineRectangleIntersect;
    /**
     * To find two line intersect
     */
    private isLinesIntersect;
    /**
     * To get two rectangle overlapping angles.
     */
    private getOverlappedAngle;
    /**
     * To get connector line path
     */
    private getConnectorPath;
    /**
     * Finds the curved path for funnel/pyramid data label connectors
     */
    private getPolyLinePath;
    /**
     * Finds the bezier point for funnel/pyramid data label connectors
     */
    private getBezierPoint;
    /**
     * To get label edges based on the center and label rect position.
     */
    private getEdgeOfLabel;
    /**
     * Finds the distance between the label position and the edge/center of the funnel/pyramid
     */
    private getLabelDistance;
    /**
     * Finds the label position / beginning of the connector(ouside funnel labels)
     */
    private getLabelLocation;
    /**
     * Finds the beginning of connector line
     */
    private getConnectorStartPoint;
    /**
     * To find area rect based on margin, available size.
     * @private
     */
    findAreaRect(): void;
    /**
     * To render the data labels from series points.
     */
    renderDataLabel(point: AccPoints, dataLabel: AccumulationDataLabelSettingsModel, parent: Element, points: AccPoints[], series: number, templateElement?: HTMLElement, redraw?: boolean): void;
    /**
     * To find the template element size
     * @param element
     * @param point
     * @param argsData
     */
    private getTemplateSize;
    /**
     * To set the template element style
     * @param childElement
     * @param point
     * @param parent
     * @param labelColor
     * @param fill
     */
    private setTemplateStyle;
    /**
     * To find saturated color for datalabel
     */
    private getSaturatedColor;
    /**
     * Animates the data label template.
     * @return {void}.
     * @private
     */
    doTemplateAnimation(accumulation: AccumulationChart, element: Element): void;
    /**
     * To find background color for the datalabel
     */
    private getLabelBackground;
    /**
     * To correct the padding between datalabel regions.
     */
    private correctLabelRegion;
    /**
     * To get the dataLabel module name
     */
    protected getModuleName(): string;
    /**
     * To destroy the data label.
     * @return {void}
     * @private
     */
    destroy(accumulation: AccumulationChart): void;
}
//node_modules/@syncfusion/ej2-charts/src/accumulation-chart/renderer/funnel-series.d.ts
/**
 * Defines the behavior of a funnel series
 */
/**
 * FunnelSeries module used to render `Funnel` Series.
 */
export  class FunnelSeries extends TriangularBase {
    /**
     * Defines the path of a funnel segment
     */
    private getSegmentData;
    /**
     * Renders a funnel segment
     * @private
     */
    renderPoint(point: AccPoints, series: AccumulationSeries, chart: AccumulationChart, options: svgBase.PathOption, seriesGroup: Element, redraw: boolean): void;
    /**
     * To get the module name of the funnel series.
     */
    protected getModuleName(): string;
    /**
     * To destroy the funnel series.
     * @return {void}
     * @private
     */
    destroy(accumulation: AccumulationChart): void;
}
//node_modules/@syncfusion/ej2-charts/src/accumulation-chart/renderer/legend.d.ts
/**
 * AccumulationLegend module used to render `Legend` for Accumulation chart.
 */
export  class AccumulationLegend extends BaseLegend {
    titleRect: svgBase.Rect;
    private totalRowCount;
    private maxColumnWidth;
    /**
     * Constructor for Accumulation Legend.
     * @param chart
     */
    constructor(chart: AccumulationChart);
    /**
     * Get the legend options.
     * @return {void}
     * @private
     */
    getLegendOptions(chart: AccumulationChart, series: AccumulationSeries[]): void;
    /**
     * To find legend bounds for accumulation chart.
     * @private
     */
    getLegendBounds(availableSize: svgBase.Size, legendBounds: svgBase.Rect, legend: LegendSettingsModel): void;
    /**
     * To find maximum column size for legend
     */
    private getMaxColumn;
    /**
     * To find available width from legend x position.
     */
    private getAvailWidth;
    /**
     * To find legend rendering locations from legend options.
     * @private
     */
    getRenderPoint(legendOption: LegendOptions, start: ChartLocation, textPadding: number, prevLegend: LegendOptions, rect: svgBase.Rect, count: number, firstLegend: number): void;
    /**
     * finding the smart legend place according to positions.
     * @return {void}
     * @private
     */
    getSmartLegendLocation(labelBound: svgBase.Rect, legendBound: svgBase.Rect, margin: MarginModel): void;
    /**
     * To get title rect.
     */
    private getTitleRect;
    /**
     * To get legend by index
     */
    private legendByIndex;
    /**
     * To show or hide the legend on clicking the legend.
     * @return {void}
     */
    click(event: Event): void;
    /**
     * To translate the point elements by index and position
     */
    private sliceVisibility;
    /**
     * Slice animation
     * @param element
     * @param name
     * @param isVisible
     */
    private sliceAnimate;
    /**
     * Get module name
     */
    protected getModuleName(): string;
    /**
     * To destroy the Legend.
     * @return {void}
     * @private
     */
    destroy(chart: AccumulationChart): void;
}
//node_modules/@syncfusion/ej2-charts/src/accumulation-chart/renderer/pie-base.d.ts
/**
 * PieBase class used to do pie base calculations.
 */
export  class PieBase extends AccumulationBase {
    protected startAngle: number;
    protected totalAngle: number;
    innerRadius: number;
    center: ChartLocation;
    radius: number;
    labelRadius: number;
    isRadiusMapped: boolean;
    seriesRadius: number;
    size: number;
    /**
     * To initialize the property values.
     * @private
     */
    initProperties(chart: AccumulationChart, series: AccumulationSeries): void;
    getLabelRadius(series: AccumulationSeriesModel, point: AccPoints): number;
    /**
     * To find the center of the accumulation.
     * @private
     */
    findCenter(accumulation: AccumulationChart, series: AccumulationSeries): void;
    /**
     * To find angles from series.
     */
    private initAngles;
    /**
     * To calculate data-label bound
     * @private
     */
    defaultLabelBound(series: AccumulationSeries, visible: boolean, position: AccumulationLabelPosition): void;
    /**
     * To calculate series bound
     * @private
     */
    getSeriesBound(series: AccumulationSeries): svgBase.Rect;
    /**
     * To get rect location size from angle
     */
    private getRectFromAngle;
    /**
     * To get path arc direction
     */
    protected getPathArc(center: ChartLocation, start: number, end: number, radius: number, innerRadius: number): string;
    /**
     * To get pie direction
     */
    protected getPiePath(center: ChartLocation, start: ChartLocation, end: ChartLocation, radius: number, clockWise: number): string;
    /**
     * To get doughnut direction
     */
    protected getDoughnutPath(center: ChartLocation, start: ChartLocation, end: ChartLocation, radius: number, innerStart: ChartLocation, innerEnd: ChartLocation, innerRadius: number, clockWise: number): string;
    /**
     * Method to start animation for pie series.
     */
    protected doAnimation(slice: Element, series: AccumulationSeries): void;
}
//node_modules/@syncfusion/ej2-charts/src/accumulation-chart/renderer/pie-series.d.ts
/**
 * AccumulationChart series file
 */
/**
 * PieSeries module used to render `Pie` Series.
 */
export  class PieSeries extends PieBase {
    /**
     * To get path option, degree, symbolLocation from the point.
     * @private
     */
    renderPoint(point: AccPoints, series: AccumulationSeries, chart: AccumulationChart, option: svgBase.PathOption, seriesGroup: Element, redraw?: boolean): void;
    findSeries(e: PointerEvent | TouchEvent): void;
    toggleInnerPoint(event: PointerEvent | TouchEvent, radius: number, innerRadius: number): void;
    removeBorder(borderElement: Element, duration: number): void;
    private refresh;
    /**
     * To get path option from the point.
     */
    private getPathOption;
    /**
     * To animate the pie series.
     * @private
     */
    animateSeries(accumulation: AccumulationChart, option: AnimationModel, series: AccumulationSeries, slice: Element): void;
    /**
     * To get the module name of the Pie series.
     */
    protected getModuleName(): string;
    /**
     * To destroy the pie series.
     * @return {void}
     * @private
     */
    destroy(accumulation: AccumulationChart): void;
}
//node_modules/@syncfusion/ej2-charts/src/accumulation-chart/renderer/pyramid-series.d.ts
/**
 * Defines the behavior of a pyramid series
 */
/**
 * PyramidSeries module used to render `Pyramid` Series.
 */
export  class PyramidSeries extends TriangularBase {
    /**
     * Defines the path of a pyramid segment
     */
    private getSegmentData;
    /**
     * Initializes the size of the pyramid segments
     * @private
     */
    protected initializeSizeRatio(points: AccPoints[], series: AccumulationSeries): void;
    /**
     * Defines the size of the pyramid segments, the surface of that will reflect the values
     */
    private calculateSurfaceSegments;
    /**
     * Finds the height of pyramid segment
     */
    private getSurfaceHeight;
    /**
     * Solves quadratic equation
     */
    private solveQuadraticEquation;
    /**
     * Renders a pyramid segment
     */
    private renderPoint;
    /**
     * To get the module name of the Pyramid series.
     */
    protected getModuleName(): string;
    /**
     * To destroy the pyramid series
     * @return {void}
     * @private
     */
    destroy(accumulation: AccumulationChart): void;
}
//node_modules/@syncfusion/ej2-charts/src/accumulation-chart/renderer/triangular-base.d.ts
/**
 * Defines the common behavior of funnel and pyramid series
 */
/**
 * TriangularBase is used to calculate base functions for funnel/pyramid series.
 */
export  class TriangularBase extends AccumulationBase {
    /**
     * Initializes the properties of funnel/pyramid series
     * @private
     */
    initProperties(chart: AccumulationChart, series: AccumulationSeries): void;
    /**
     * Initializes the size of the pyramid/funnel segments
     * @private
     */
    protected initializeSizeRatio(points: AccPoints[], series: AccumulationSeries, reverse?: boolean): void;
    /**
     * Marks the label location from the set of points that forms a pyramid/funnel segment
     * @private
     */
    protected setLabelLocation(series: AccumulationSeries, point: AccPoints, points: ChartLocation[]): void;
    /**
     * Finds the path to connect the list of points
     * @private
     */
    protected findPath(locations: ChartLocation[]): string;
    /**
     * To calculate data-label bounds
     * @private
     */
    defaultLabelBound(series: AccumulationSeries, visible: boolean, position: AccumulationLabelPosition, chart: AccumulationChart): void;
}
//node_modules/@syncfusion/ej2-charts/src/accumulation-chart/user-interaction/selection.d.ts
/**
 * `AccumulationSelection` module handles the selection for accumulation chart.
 */
export  class AccumulationSelection extends BaseSelection {
    private renderer;
    /** @private */
    rectPoints: svgBase.Rect;
    selectedDataIndexes: Indexes[];
    private series;
    constructor(accumulation: AccumulationChart);
    /**
     * To initialize the private variables
     */
    private initPrivateVariables;
    /**
     * Invoke selection for rendered chart.
     * @param  {AccumulationChart} chart - Define the chart to invoke the selection.
     * @return {void}
     */
    invokeSelection(accumulation: AccumulationChart): void;
    /**
     * To get series selection style by series.
     */
    private generateStyle;
    /**
     * To get elements by index, series
     */
    private findElements;
    /**
     * To get series point element by index
     */
    private getElementByIndex;
    /**
     * To calculate selected elements on mouse click or touch
     * @private
     */
    calculateSelectedElements(accumulation: AccumulationChart, event: Event): void;
    /**
     * To perform the selection process based on index and element.
     */
    private performSelection;
    /**
     * To select the element by index. Adding or removing selection style class name.
     */
    private selection;
    /**
     * To redraw the selection process on accumulation chart refresh.
     * @private
     */
    redrawSelection(accumulation: AccumulationChart, oldMode: AccumulationSelectionMode): void;
    /**
     * To remove the selected elements style classes by indexes.
     */
    private removeSelectedElements;
    /**
     * To perform the selection for legend elements.
     * @private
     */
    legendSelection(accumulation: AccumulationChart, series: number, pointIndex: number): void;
    /**
     * To select the element by selected data indexes.
     */
    private selectDataIndex;
    /**
     * To remove the selection styles for multi selection process.
     */
    private removeMultiSelectEelments;
    /**
     * To apply the opacity effect for accumulation chart series elements.
     */
    private blurEffect;
    /**
     * To check selection elements by style class name.
     */
    private checkSelectionElements;
    /**
     * To apply selection style for elements.
     */
    private applyStyles;
    /**
     * To get selection style class name by id
     */
    private getSelectionClass;
    /**
     * To remove selection style for elements.
     */
    private removeStyles;
    /**
     * To apply or remove selected elements index.
     */
    private addOrRemoveIndex;
    /**
     * To check two index, point and series are equal
     */
    private checkEquals;
    /**
     * To check selected points are visibility
     */
    private checkPointVisibility;
    /**
     * Get module name.
     */
    getModuleName(): string;
    /**
     * To destroy the selection.
     * @return {void}
     * @private
     */
    destroy(accumulation: AccumulationChart): void;
}
//node_modules/@syncfusion/ej2-charts/src/accumulation-chart/user-interaction/tooltip.d.ts
/**
 * `AccumulationTooltip` module is used to render tooltip for accumulation chart.
 */
export  class AccumulationTooltip extends BaseTooltip {
    accumulation: AccumulationChart;
    constructor(accumulation: AccumulationChart);
    /**
     * @hidden
     */
    private addEventListener;
    private mouseLeaveHandler;
    private mouseUpHandler;
    private mouseMoveHandler;
    /**
     * Renders the tooltip.
     * @param  {PointerEvent} event - Mouse move event.
     * @return {void}
     */
    tooltip(event: PointerEvent | TouchEvent): void;
    private renderSeriesTooltip;
    private triggerTooltipRender;
    private getPieData;
    /**
     * To get series from index
     */
    private getSeriesFromIndex;
    private getTooltipText;
    private findHeader;
    private parseTemplate;
    /**
     * Get module name
     */
    protected getModuleName(): string;
    /**
     * To destroy the Tooltip.
     * @return {void}
     * @private
     */
    destroy(chart: AccumulationChart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/annotation/annotation.d.ts
/**
 * `ChartAnnotation` module handles the annotation for chart.
 */
export  class ChartAnnotation extends AnnotationBase {
    private chart;
    private annotations;
    private parentElement;
    /**
     * Constructor for chart annotation.
     * @private.
     */
    constructor(control: Chart, annotations: ChartAnnotationSettings[]);
    /**
     * Method to render the annotation for chart
     * @param element
     * @private
     */
    renderAnnotations(element: Element): void;
    /**
     * To destroy the annotation.
     * @return {void}
     * @private
     */
    destroy(control: Chart): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
}
//node_modules/@syncfusion/ej2-charts/src/chart/axis/axis-helper.d.ts
/**
 * Common axis classes
 * @private
 */
export  class NiceInterval extends Double {
    /**
     * Method to calculate numeric datetime interval
     */
    calculateDateTimeNiceInterval(axis: Axis, size: svgBase.Size, start: number, end: number, isChart?: boolean): number;
    /**
     * To get the skeleton for the DateTime axis.
     * @return {string}
     * @private
     */
    getSkeleton(axis: Axis, currentValue: number, previousValue: number): string;
    /**
     * Get intervalType month format
     * @param currentValue
     * @param previousValue
     */
    private getMonthFormat;
    /**
     * Get intervalType day label format for the axis
     * @param axis
     * @param currentValue
     * @param previousValue
     */
    private getDayFormat;
    /**
     * Find label format for axis
     * @param axis
     * @param currentValue
     * @param previousValue
     * @private
     */
    findCustomFormats(axis: Axis, currentValue: number, previousValue: number): string;
}
//node_modules/@syncfusion/ej2-charts/src/chart/axis/axis-model.d.ts
/**
 * Interface for a class Row
 */
export interface RowModel {
    /**
     * The height of the row as a string accept input both as '100px' and '100%'.
     * If specified as '100%, row renders to the full height of its chart.
     * @default '100%'
     */
    height?: string;
    /**
     * Options to customize the border of the rows.
     */
    border?: BorderModel;
}
/**
 * Interface for a class Column
 */
export interface ColumnModel {
    /**
     * The width of the column as a string accepts input both as like '100px' or '100%'.
     * If specified as '100%, column renders to the full width of its chart.
     * @default '100%'
     */
    width?: string;
    /**
     * Options to customize the border of the columns.
     */
    border?: BorderModel;
}
/**
 * Interface for a class MajorGridLines
 */
export interface MajorGridLinesModel {
    /**
     * The width of the line in pixels.
     * @default 1
     */
    width?: number;
    /**
     * The dash array of the grid lines.
     * @default ''
     */
    dashArray?: string;
    /**
     * The color of the major grid line that accepts value in hex and rgba as a valid CSS color string.
     * @default null
     */
    color?: string;
}
/**
 * Interface for a class MinorGridLines
 */
export interface MinorGridLinesModel {
    /**
     * The width of the line in pixels.
     * @default 0.7
     */
    width?: number;
    /**
     * The dash array of grid lines.
     * @default ''
     */
    dashArray?: string;
    /**
     * The color of the minor grid line that accepts value in hex and rgba as a valid CSS color string.
     * @default null
     */
    color?: string;
}
/**
 * Interface for a class AxisLine
 */
export interface AxisLineModel {
    /**
     * The width of the line in pixels.
     * @default 1
     */
    width?: number;
    /**
     * The dash array of the axis line.
     * @default ''
     */
    dashArray?: string;
    /**
     * The color of the axis line that accepts value in hex and rgba as a valid CSS color string.
     * @default null
     */
    color?: string;
}
/**
 * Interface for a class MajorTickLines
 */
export interface MajorTickLinesModel {
    /**
     * The width of the tick lines in pixels.
     * @default 1
     */
    width?: number;
    /**
     * The height of the ticks in pixels.
     * @default 5
     */
    height?: number;
    /**
     * The color of the major tick line that accepts value in hex and rgba as a valid CSS color string.
     * @default null
     */
    color?: string;
}
/**
 * Interface for a class MinorTickLines
 */
export interface MinorTickLinesModel {
    /**
     * The width of the tick line in pixels.
     * @default 0.7
     */
    width?: number;
    /**
     * The height of the ticks in pixels.
     * @default 5
     */
    height?: number;
    /**
     * The color of the minor tick line that accepts value in hex and rgba as a valid CSS color string.
     * @default null
     */
    color?: string;
}
/**
 * Interface for a class CrosshairTooltip
 */
export interface CrosshairTooltipModel {
    /**
     * If set to true, crosshair ToolTip will be visible.
     *  @default false
     */
    enable?: Boolean;
    /**
     * The fill color of the ToolTip accepts value in hex and rgba as a valid CSS color string.
     * @default null
     */
    fill?: string;
    /**
     * Options to customize the crosshair ToolTip text.
     */
    textStyle?: FontModel;
}
/**
 * Interface for a class Axis
 */
export interface AxisModel {
    /**
     * Options to customize the axis label.
     */
    labelStyle?: FontModel;
    /**
     * Options to customize the crosshair ToolTip.
     */
    crosshairTooltip?: CrosshairTooltipModel;
    /**
     * Specifies the title of an axis.
     * @default ''
     */
    title?: string;
    /**
     * Options for customizing the axis title.
     */
    titleStyle?: FontModel;
    /**
     * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc.
     * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.
     * @default ''
     */
    labelFormat?: string;
    /**
     * Specifies the skeleton format in which the dateTime format will process.
     * @default ''
     */
    skeleton?: string;
    /**
     * It specifies the type of format to be used in dateTime format process.
     * @default 'DateTime'
     */
    skeletonType?: SkeletonType;
    /**
     * Left and right padding for the plot area in pixels.
     * @default 0
     */
    plotOffset?: number;
    /**
     * Specifies indexed category  axis.
     * @default false
     */
    isIndexed?: boolean;
    /**
     * The base value for logarithmic axis. It requires `valueType` to be `Logarithmic`.
     * @default 10
     */
    logBase?: number;
    /**
     * Specifies the index of the column where the axis is associated,
     * when the chart area is divided into multiple plot areas by using `columns`.
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let chart: Chart = new Chart({
     * ...
     *     columns: [{ width: '50%' },
     *               { width: '50%' }],
     *     axes: [{
     *                name: 'xAxis 1',
     *                columnIndex: 1,
     *     }],
     * ...
     * });
     * chart.appendTo('#Chart');
     * ```
     * @default 0
     */
    columnIndex?: number;
    /**
     * Specifies the index of the row where the axis is associated, when the chart area is divided into multiple plot areas by using `rows`.
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let chart: Chart = new Chart({
     * ...
     *     rows: [{ height: '50%' },
     *            { height: '50%' }],
     *     axes: [{
     *                name: 'yAxis 1',
     *                rowIndex: 1,
     *      }],
     * ...
     * });
     * chart.appendTo('#Chart');
     * ```
     * @default 0
     */
    rowIndex?: number;
    /**
     * Specifies the number of `columns` or `rows` an axis has to span horizontally or vertically.
     * @default 1
     */
    span?: number;
    /**
     * With this property, you can request axis to calculate intervals approximately equal to your specified interval.
     * @default null
     * @aspDefaultValueIgnore
     */
    desiredIntervals?: number;
    /**
     * The maximum number of label count per 100 pixels with respect to the axis length.
     * @default 3
     */
    maximumLabels?: number;
    /**
     * The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.
     * @default 1
     */
    zoomFactor?: number;
    /**
     * Position of the zoomed axis. Value ranges from 0 to 1.
     * @default 0
     */
    zoomPosition?: number;
    /**
     * If set to true, the axis will render at the opposite side of its default position.
     * @default false
     */
    opposedPosition?: boolean;
    /**
     * If set to true, axis interval will be calculated automatically with respect to the zoomed range.
     * @default true
     */
    enableAutoIntervalOnZooming?: boolean;
    /**
     * Specifies the padding for the axis range in terms of interval.They are,
     * * none: Padding cannot be applied to the axis.
     * * normal: Padding is applied to the axis based on the range calculation.
     * * additional: Interval of the axis is added as padding to the minimum and maximum values of the range.
     * * round: Axis range is rounded to the nearest possible value divided by the interval.
     * @default 'Auto'
     */
    rangePadding?: ChartRangePadding;
    /**
     * Specifies the type of data the axis is handling.
     * * Double:  Renders a numeric axis.
     * * DateTime: Renders a dateTime axis.
     * * Category: Renders a category axis.
     * * Logarithmic: Renders a log axis.
     * @default 'Double'
     * @blazorType Syncfusion.EJ2.Blazor.Charts.ValueType
     * @isEnumeration true
     */
    valueType?: ValueType;
    /**
     * Specifies the position of labels at the edge of the axis.They are,
     * * None: No action will be performed.
     * * Hide: Edge label will be hidden.
     * * Shift: Shifts the edge labels.
     * @default 'None'
     */
    edgeLabelPlacement?: EdgeLabelPlacement;
    /**
     * Specifies the types like `Years`, `Months`, `Days`, `Hours`, `Minutes`, `Seconds` in date time axis.They are,
     * * Auto: Defines the interval of the axis based on data.
     * * Years: Defines the interval of the axis in years.
     * * Months: Defines the interval of the axis in months.
     * * Days: Defines the interval of the axis in days.
     * * Hours: Defines the interval of the axis in hours.
     * * Minutes: Defines the interval of the axis in minutes.
     * @default 'Auto'
     */
    intervalType?: IntervalType;
    /**
     * Specifies the placement of a label for category axis. They are,
     * * betweenTicks: Renders the label between the ticks.
     * * onTicks: Renders the label on the ticks.
     * @default 'BetweenTicks'
     */
    labelPlacement?: LabelPlacement;
    /**
     * Specifies the placement of a ticks to the axis line. They are,
     * * inside: Renders the ticks inside to the axis line.
     * * outside: Renders the ticks outside to the axis line.
     * @default 'Outside'
     */
    tickPosition?: AxisPosition;
    /**
     * Specifies the placement of a labels to the axis line. They are,
     * * inside: Renders the labels inside to the axis line.
     * * outside: Renders the labels outside to the axis line.
     * @default 'Outside'
     */
    labelPosition?: AxisPosition;
    /**
     * Unique identifier of an axis.
     * To associate an axis with the series, set this name to the xAxisName/yAxisName properties of the series.
     * @default ''
     */
    name?: string;
    /**
     * If set to true, axis label will be visible.
     * @default true
     */
    visible?: boolean;
    /**
     * Specifies the number of minor ticks per interval.
     * @default 0
     */
    minorTicksPerInterval?: number;
    /**
     * The angle to which the axis label gets rotated.
     * @default 0
     */
    labelRotation?: number;
    /**
     * Specifies the value at which the axis line has to be intersect with the vertical axis or vice versa.
     * @default null
     */
    crossesAt?: Object;
    /**
     * Specifies whether axis elements like axis labels, axis title, etc has to be crossed with axis line
     * @default true
     */
    placeNextToAxisLine?: boolean;
    /**
     * Specifies axis name with which the axis line has to be crossed
     * @default null
     */
    crossesInAxis?: string;
    /**
     * Specifies the minimum range of an axis.
     * @default null
     */
    minimum?: Object;
    /**
     * Specifies the maximum range of an axis.
     * @default null
     */
    maximum?: Object;
    /**
     * Specifies the interval for an axis.
     * @default null
     * @aspDefaultValueIgnore
     */
    interval?: number;
    /**
     * Specifies the maximum width of an axis label.
     * @default 34.
     */
    maximumLabelWidth?: number;
    /**
     * Specifies the Trim property for an axis.
     * @default false
     */
    enableTrim?: boolean;
    /**
     * Options for customizing major tick lines.
     */
    majorTickLines?: MajorTickLinesModel;
    /**
     * Options for customizing minor tick lines.
     */
    minorTickLines?: MinorTickLinesModel;
    /**
     * Options for customizing major grid lines.
     */
    majorGridLines?: MajorGridLinesModel;
    /**
     * Options for customizing minor grid lines.
     */
    minorGridLines?: MinorGridLinesModel;
    /**
     * Options for customizing axis lines.
     */
    lineStyle?: AxisLineModel;
    /**
     * Specifies the actions like `None`, `Hide`, `Trim`, `Wrap`, `MultipleRows`, `Rotate45`, and `Rotate90`
     * when the axis labels intersect with each other.They are,
     * * None: Shows all the labels.
     * * Hide: Hides the label when it intersects.
     * * Trim: Trim the label when it intersects.
     * * Wrap: Wrap the label when it intersects.
     * * MultipleRows: Shows the label in MultipleRows when it intersects.
     * * Rotate45: Rotates the label to 45 degree when it intersects.
     * * Rotate90: Rotates the label to 90 degree when it intersects.
     * @default Trim
     */
    labelIntersectAction?: LabelIntersectAction;
    /**
     * It specifies whether the axis to be rendered in inversed manner or not.
     * @default false
     */
    isInversed?: boolean;
    /**
     * The polar radar radius position.
     * @default 100
     */
    coefficient?: number;
    /**
     * The start angle for the series.
     * @default 0
     */
    startAngle?: number;
    /**
     * Description for axis and its element.
     * @default null
     */
    description?: string;
    /**
     * TabIndex value for the axis.
     * @default 2
     */
    tabIndex?: number;
    /**
     * Specifies the stripLine collection for the axis
     */
    stripLines?: StripLineSettingsModel[];
    /**
     * Specifies the multi level labels collection for the axis
     */
    multiLevelLabels?: MultiLevelLabelsModel[];
    /**
     * Border of the multi level labels.
     */
    border?: LabelBorderModel;
    /**
     * Option to customize scrollbar with lazy loading
     */
    scrollbarSettings?: ScrollbarSettingsModel;
}
/**
 * Interface for a class VisibleLabels
 * @private
 */
export interface VisibleLabelsModel {
}
//node_modules/@syncfusion/ej2-charts/src/chart/axis/axis.d.ts
/**
 * Configures the `rows` of the chart.
 */
export  class Row extends base.ChildProperty<Row> {
    /**
     * The height of the row as a string accept input both as '100px' and '100%'.
     * If specified as '100%, row renders to the full height of its chart.
     * @default '100%'
     */
    height: string;
    /**
     * Options to customize the border of the rows.
     */
    border: BorderModel;
    /** @private */
    axes: Axis[];
    /** @private */
    computedHeight: number;
    /** @private */
    computedTop: number;
    /** @private */
    nearSizes: number[];
    /** @private */
    farSizes: number[];
    /**
     * Measure the row size
     * @return {void}
     * @private
     */
    computeSize(axis: Axis, clipRect: svgBase.Rect, scrollBarHeight: number): void;
}
/**
 * Configures the `columns` of the chart.
 */
export  class Column extends base.ChildProperty<Column> {
    /**
     * The width of the column as a string accepts input both as like '100px' or '100%'.
     * If specified as '100%, column renders to the full width of its chart.
     * @default '100%'
     */
    width: string;
    /**
     * Options to customize the border of the columns.
     */
    border: BorderModel;
    /** @private */
    axes: Axis[];
    /** @private */
    computedWidth: number;
    /** @private */
    computedLeft: number;
    /** @private */
    nearSizes: number[];
    /** @private */
    farSizes: number[];
    /** @private */
    private padding;
    /**
     * Measure the column size
     * @return {void}
     * @private
     */
    computeSize(axis: Axis, clipRect: svgBase.Rect, scrollBarHeight: number): void;
}
/**
 * Configures the major grid lines in the `axis`.
 */
export  class MajorGridLines extends base.ChildProperty<MajorGridLines> {
    /**
     * The width of the line in pixels.
     * @default 1
     */
    width: number;
    /**
     * The dash array of the grid lines.
     * @default ''
     */
    dashArray: string;
    /**
     * The color of the major grid line that accepts value in hex and rgba as a valid CSS color string.
     * @default null
     */
    color: string;
}
/**
 * Configures the minor grid lines in the `axis`.
 */
export  class MinorGridLines extends base.ChildProperty<MinorGridLines> {
    /**
     * The width of the line in pixels.
     * @default 0.7
     */
    width: number;
    /**
     * The dash array of grid lines.
     * @default ''
     */
    dashArray: string;
    /**
     * The color of the minor grid line that accepts value in hex and rgba as a valid CSS color string.
     * @default null
     */
    color: string;
}
/**
 * Configures the axis line of a chart.
 */
export  class AxisLine extends base.ChildProperty<AxisLine> {
    /**
     * The width of the line in pixels.
     * @default 1
     */
    width: number;
    /**
     * The dash array of the axis line.
     * @default ''
     */
    dashArray: string;
    /**
     * The color of the axis line that accepts value in hex and rgba as a valid CSS color string.
     * @default null
     */
    color: string;
}
/**
 * Configures the major tick lines.
 */
export  class MajorTickLines extends base.ChildProperty<MajorTickLines> {
    /**
     * The width of the tick lines in pixels.
     * @default 1
     */
    width: number;
    /**
     * The height of the ticks in pixels.
     * @default 5
     */
    height: number;
    /**
     * The color of the major tick line that accepts value in hex and rgba as a valid CSS color string.
     * @default null
     */
    color: string;
}
/**
 * Configures the minor tick lines.
 */
export  class MinorTickLines extends base.ChildProperty<MinorTickLines> {
    /**
     * The width of the tick line in pixels.
     * @default 0.7
     */
    width: number;
    /**
     * The height of the ticks in pixels.
     * @default 5
     */
    height: number;
    /**
     * The color of the minor tick line that accepts value in hex and rgba as a valid CSS color string.
     * @default null
     */
    color: string;
}
/**
 * Configures the crosshair ToolTip.
 */
export  class CrosshairTooltip extends base.ChildProperty<CrosshairTooltip> {
    /**
     * If set to true, crosshair ToolTip will be visible.
     *  @default false
     */
    enable: Boolean;
    /**
     * The fill color of the ToolTip accepts value in hex and rgba as a valid CSS color string.
     * @default null
     */
    fill: string;
    /**
     * Options to customize the crosshair ToolTip text.
     */
    textStyle: FontModel;
}
/**
 * Configures the axes in the chart.
 * @public
 */
export  class Axis extends base.ChildProperty<Axis> {
    /**
     * Options to customize the axis label.
     */
    labelStyle: FontModel;
    /**
     * Options to customize the crosshair ToolTip.
     */
    crosshairTooltip: CrosshairTooltipModel;
    /**
     * Specifies the title of an axis.
     * @default ''
     */
    title: string;
    /**
     * Options for customizing the axis title.
     */
    titleStyle: FontModel;
    /**
     * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc.
     * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.
     * @default ''
     */
    labelFormat: string;
    /**
     * Specifies the skeleton format in which the dateTime format will process.
     * @default ''
     */
    skeleton: string;
    /**
     * It specifies the type of format to be used in dateTime format process.
     * @default 'DateTime'
     */
    skeletonType: SkeletonType;
    /**
     * Left and right padding for the plot area in pixels.
     * @default 0
     */
    plotOffset: number;
    /**
     * Specifies indexed category  axis.
     * @default false
     */
    isIndexed: boolean;
    /**
     * The base value for logarithmic axis. It requires `valueType` to be `Logarithmic`.
     * @default 10
     */
    logBase: number;
    /**
     * Specifies the index of the column where the axis is associated,
     * when the chart area is divided into multiple plot areas by using `columns`.
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let chart$: Chart = new Chart({
     * ...
     *     columns: [{ width: '50%' },
     *               { width: '50%' }],
     *     axes: [{
     *                name: 'xAxis 1',
     *                columnIndex: 1,
     *     }],
     * ...
     * });
     * chart.appendTo('#Chart');
     * ```
     * @default 0
     */
    columnIndex: number;
    /**
     * Specifies the index of the row where the axis is associated, when the chart area is divided into multiple plot areas by using `rows`.
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let chart$: Chart = new Chart({
     * ...
     *     rows: [{ height: '50%' },
     *            { height: '50%' }],
     *     axes: [{
     *                name: 'yAxis 1',
     *                rowIndex: 1,
     *      }],
     * ...
     * });
     * chart.appendTo('#Chart');
     * ```
     * @default 0
     */
    rowIndex: number;
    /**
     * Specifies the number of `columns` or `rows` an axis has to span horizontally or vertically.
     * @default 1
     */
    span: number;
    /**
     * With this property, you can request axis to calculate intervals approximately equal to your specified interval.
     * @default null
     * @aspDefaultValueIgnore
     */
    desiredIntervals: number;
    /**
     * The maximum number of label count per 100 pixels with respect to the axis length.
     * @default 3
     */
    maximumLabels: number;
    /**
     * The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.
     * @default 1
     */
    zoomFactor: number;
    /**
     * Position of the zoomed axis. Value ranges from 0 to 1.
     * @default 0
     */
    zoomPosition: number;
    /**
     * If set to true, the axis will render at the opposite side of its default position.
     * @default false
     */
    opposedPosition: boolean;
    /**
     * If set to true, axis interval will be calculated automatically with respect to the zoomed range.
     * @default true
     */
    enableAutoIntervalOnZooming: boolean;
    /**
     * Specifies the padding for the axis range in terms of interval.They are,
     * * none: Padding cannot be applied to the axis.
     * * normal: Padding is applied to the axis based on the range calculation.
     * * additional: Interval of the axis is added as padding to the minimum and maximum values of the range.
     * * round: Axis range is rounded to the nearest possible value divided by the interval.
     * @default 'Auto'
     */
    rangePadding: ChartRangePadding;
    /**
     * Specifies the type of data the axis is handling.
     * * Double:  Renders a numeric axis.
     * * DateTime: Renders a dateTime axis.
     * * Category: Renders a category axis.
     * * Logarithmic: Renders a log axis.
     * @default 'Double'
     * @blazorType Syncfusion.EJ2.Blazor.Charts.ValueType
     * @isEnumeration true
     */
    valueType: ValueType;
    /**
     * Specifies the position of labels at the edge of the axis.They are,
     * * None: No action will be performed.
     * * Hide: Edge label will be hidden.
     * * Shift: Shifts the edge labels.
     * @default 'None'
     */
    edgeLabelPlacement: EdgeLabelPlacement;
    /**
     * Specifies the types like `Years`, `Months`, `Days`, `Hours`, `Minutes`, `Seconds` in date time axis.They are,
     * * Auto: Defines the interval of the axis based on data.
     * * Years: Defines the interval of the axis in years.
     * * Months: Defines the interval of the axis in months.
     * * Days: Defines the interval of the axis in days.
     * * Hours: Defines the interval of the axis in hours.
     * * Minutes: Defines the interval of the axis in minutes.
     * @default 'Auto'
     */
    intervalType: IntervalType;
    /**
     * Specifies the placement of a label for category axis. They are,
     * * betweenTicks: Renders the label between the ticks.
     * * onTicks: Renders the label on the ticks.
     * @default 'BetweenTicks'
     */
    labelPlacement: LabelPlacement;
    /**
     * Specifies the placement of a ticks to the axis line. They are,
     * * inside: Renders the ticks inside to the axis line.
     * * outside: Renders the ticks outside to the axis line.
     * @default 'Outside'
     */
    tickPosition: AxisPosition;
    /**
     * Specifies the placement of a labels to the axis line. They are,
     * * inside: Renders the labels inside to the axis line.
     * * outside: Renders the labels outside to the axis line.
     * @default 'Outside'
     */
    labelPosition: AxisPosition;
    /**
     * Unique identifier of an axis.
     * To associate an axis with the series, set this name to the xAxisName/yAxisName properties of the series.
     * @default ''
     */
    name: string;
    /**
     * If set to true, axis label will be visible.
     * @default true
     */
    visible: boolean;
    /**
     * Specifies the number of minor ticks per interval.
     * @default 0
     */
    minorTicksPerInterval: number;
    /**
     * The angle to which the axis label gets rotated.
     * @default 0
     */
    labelRotation: number;
    /**
     * Specifies the value at which the axis line has to be intersect with the vertical axis or vice versa.
     * @default null
     */
    crossesAt: Object;
    /**
     * Specifies whether axis elements like axis labels, axis title, etc has to be crossed with axis line
     * @default true
     */
    placeNextToAxisLine: boolean;
    /**
     * Specifies axis name with which the axis line has to be crossed
     * @default null
     */
    crossesInAxis: string;
    /**
     * Specifies the minimum range of an axis.
     * @default null
     */
    minimum: Object;
    /**
     * Specifies the maximum range of an axis.
     * @default null
     */
    maximum: Object;
    /**
     * Specifies the interval for an axis.
     * @default null
     * @aspDefaultValueIgnore
     */
    interval: number;
    /**
     * Specifies the maximum width of an axis label.
     * @default 34.
     */
    maximumLabelWidth: number;
    /**
     * Specifies the Trim property for an axis.
     * @default false
     */
    enableTrim: boolean;
    /**
     * Options for customizing major tick lines.
     */
    majorTickLines: MajorTickLinesModel;
    /**
     * Options for customizing minor tick lines.
     */
    minorTickLines: MinorTickLinesModel;
    /**
     * Options for customizing major grid lines.
     */
    majorGridLines: MajorGridLinesModel;
    /**
     * Options for customizing minor grid lines.
     */
    minorGridLines: MinorGridLinesModel;
    /**
     * Options for customizing axis lines.
     */
    lineStyle: AxisLineModel;
    /**
     * Specifies the actions like `None`, `Hide`, `Trim`, `Wrap`, `MultipleRows`, `Rotate45`, and `Rotate90`
     * when the axis labels intersect with each other.They are,
     * * None: Shows all the labels.
     * * Hide: Hides the label when it intersects.
     * * Trim: Trim the label when it intersects.
     * * Wrap: Wrap the label when it intersects.
     * * MultipleRows: Shows the label in MultipleRows when it intersects.
     * * Rotate45: Rotates the label to 45 degree when it intersects.
     * * Rotate90: Rotates the label to 90 degree when it intersects.
     * @default Trim
     */
    labelIntersectAction: LabelIntersectAction;
    /**
     * It specifies whether the axis to be rendered in inversed manner or not.
     * @default false
     */
    isInversed: boolean;
    /**
     * The polar radar radius position.
     * @default 100
     */
    coefficient: number;
    /**
     * The start angle for the series.
     * @default 0
     */
    startAngle: number;
    /**
     * Description for axis and its element.
     * @default null
     */
    description: string;
    /**
     * TabIndex value for the axis.
     * @default 2
     */
    tabIndex: number;
    /**
     * Specifies the stripLine collection for the axis
     */
    stripLines: StripLineSettingsModel[];
    /**
     * Specifies the multi level labels collection for the axis
     */
    multiLevelLabels: MultiLevelLabelsModel[];
    /**
     * Border of the multi level labels.
     */
    border: LabelBorderModel;
    /**
     * Option to customize scrollbar with lazy loading
     */
    scrollbarSettings: ScrollbarSettingsModel;
    /** @private */
    visibleRange: VisibleRangeModel;
    /** @private */
    visibleLabels: VisibleLabels[];
    /** @private */
    actualRange: VisibleRangeModel;
    /** @private */
    series: Series[];
    /** @private */
    doubleRange: DoubleRange;
    /** @private */
    maxLabelSize: svgBase.Size;
    /** @private */
    rotatedLabel: string;
    /** @private */
    rect: svgBase.Rect;
    /** @private */
    axisBottomLine: BorderModel;
    /** @private */
    orientation: Orientation;
    /** @private */
    intervalDivs: number[];
    /** @private */
    actualIntervalType: IntervalType;
    /** @private */
    labels: string[];
    /** @private */
    format: Function;
    /** @private */
    baseModule: Double | DateTime | Category | DateTimeCategory;
    /** @private */
    startLabel: string;
    /** @private */
    endLabel: string;
    /** @private */
    angle: number;
    /** @private */
    dateTimeInterval: number;
    /** @private */
    isStack100: boolean;
    /** @private */
    crossInAxis: this;
    /** @private */
    crossAt: number;
    /** @private */
    updatedRect: svgBase.Rect;
    /** @private */
    multiLevelLabelHeight: number;
    zoomingScrollBar: ScrollBar;
    /** @private */
    scrollBarHeight: number;
    /** @private */
    isChart: boolean;
    /** @private */
    maxPointLength: number;
    constructor(parent: any, propName: string, defaultValue: Object, isArray?: boolean);
    /**
     * The function used to find tick size.
     * @return {number}
     * @private
     */
    findTickSize(crossAxis: Axis): number;
    /**
     * The function used to find axis position.
     * @return {number}
     * @private
     */
    isInside(range: VisibleRangeModel): boolean;
    /**
     * The function used to find label svgBase.Size.
     * @return {number}
     * @private
     */
    findLabelSize(crossAxis: Axis, innerPadding: number): number;
    /**
     * The function used to find axis position.
     * @return {number}
     * @private
     */
    updateCrossValue(chart: Chart): void;
    private findDifference;
    /**
     * Calculate visible range for axis.
     * @return {void}
     * @private
     */
    calculateVisibleRange(size: svgBase.Size): void;
    /**
     * Triggers the event.
     * @return {void}
     * @private
     */
    triggerRangeRender(chart: Chart, minimum: number, maximum: number, interval: number): void;
    /**
     * Calculate padding for the axis.
     * @return {string}
     * @private
     */
    getRangePadding(chart: Chart): string;
    /**
     * Calculate maximum label width for the axis.
     * @return {void}
     * @private
     */
    getMaxLabelWidth(chart: Chart): void;
    /**
     * Finds the multiple rows for axis.
     * @return {void}
     */
    private findMultiRows;
    /**
     * Finds the default module for axis.
     * @return {void}
     * @private
     */
    getModule(chart: Chart): void;
}
/**
 * Axis visible range
 * @public
 */
export interface VisibleRangeModel {
    /** axis minimum value */
    min?: number;
    /** axis maximum value */
    max?: number;
    /** axis interval value */
    interval?: number;
    /** axis delta value */
    delta?: number;
}
/** @private */
export  class VisibleLabels {
    text: string | string[];
    value: number;
    labelStyle: FontModel;
    size: svgBase.Size;
    breakLabelSize: svgBase.Size;
    index: number;
    originalText: string;
    constructor(text: string | string[], value: number, labelStyle: FontModel, originalText: string | string[], size?: svgBase.Size, breakLabelSize?: svgBase.Size, index?: number);
}
//node_modules/@syncfusion/ej2-charts/src/chart/axis/cartesian-panel.d.ts
export  class CartesianAxisLayoutPanel {
    private chart;
    private initialClipRect;
    private htmlObject;
    private element;
    private padding;
    /** @private */
    leftSize: number;
    /** @private */
    rightSize: number;
    /** @private */
    topSize: number;
    /** @private */
    bottomSize: number;
    /** @private */
    seriesClipRect: svgBase.Rect;
    /** @private */
    constructor(chartModule?: Chart);
    /**
     * Measure the axis size.
     * @return {void}
     * @private
     */
    measureAxis(rect: svgBase.Rect): void;
    private measureRowAxis;
    private measureColumnAxis;
    /**
     * Measure the column and row in chart.
     * @return {void}
     * @private
     */
    measureDefinition(definition: Row | Column, chart: Chart, size: svgBase.Size, clipRect: svgBase.Rect): void;
    /**
     * Measure the axis.
     * @return {void}
     * @private
     */
    private calculateAxisSize;
    /**
     * Measure the axis.
     * @return {void}
     * @private
     */
    measure(): void;
    private crossAt;
    private updateCrossAt;
    private pushAxis;
    private arrangeAxis;
    private getActualColumn;
    private getActualRow;
    /**
     * Measure the row size.
     * @return {void}
     */
    private calculateRowSize;
    /**
     * Measure the row size.
     * @param rect
     */
    private calculateColumnSize;
    /**
     * To render the axis element.
     * @return {void}
     * @private
     */
    renderAxes(): Element;
    /**
     * To render the axis scrollbar
     * @param chart
     * @param axis
     */
    private renderScrollbar;
    /**
     * To find the axis position
     * @param axis
     */
    private findAxisPosition;
    /**
     * To render the bootom line of the columns and rows
     * @param definition
     * @param index
     * @param isRow
     */
    private drawBottomLine;
    /**
     * To render the axis line
     * @param axis
     * @param index
     * @param plotX
     * @param plotY
     * @param parent
     * @param rect
     */
    private drawAxisLine;
    /**
     * To render the yAxis grid line
     * @param axis
     * @param index
     * @param parent
     * @param rect
     */
    private drawYAxisGridLine;
    /**
     * To check the border of the axis
     * @param axis
     * @param index
     * @param value
     */
    private isBorder;
    /**
     * To render the yAxis label
     * @param axis
     * @param index
     * @param parent
     * @param rect
     * @private
     */
    drawYAxisLabels(axis: Axis, index: number, parent: Element, rect: svgBase.Rect): void;
    /**
     * To render the yAxis label border.
     * @param axis
     * @param index
     * @param parent
     * @param rect
     */
    private drawYAxisBorder;
    /**
     * To render the yAxis title
     * @param axis
     * @param index
     * @param parent
     * @param rect
     */
    private drawYAxisTitle;
    /**
     * xAxis grid line calculation performed here
     * @param axis
     * @param index
     * @param parent
     * @param rect
     */
    private drawXAxisGridLine;
    /**
     * To calcualte the axis minor line
     * @param axis
     * @param tempInterval
     * @param rect
     * @param labelIndex
     */
    private drawAxisMinorLine;
    /**
     * To find the numeric value of the log
     * @param axis
     * @param logPosition
     * @param logInterval
     * @param value
     * @param labelIndex
     */
    private findLogNumeric;
    /**
     * To render the xAxis Labels
     * @param axis
     * @param index
     * @param parent
     * @param rect
     * @private
     */
    drawXAxisLabels(axis: Axis, index: number, parent: Element, rect: svgBase.Rect): void;
    /**
     * To get axis label text
     * @param breakLabels
     * @param label
     * @param axis
     * @param intervalLength
     */
    private getLabelText;
    /**
     * To render the x-axis label border.
     * @param axis
     * @param index
     * @param parent
     * @param axisRect
     */
    private drawXAxisBorder;
    /**
     * To create border element of the axis
     * @param axis
     * @param index
     * @param labelBorder
     * @param parent
     */
    private createAxisBorderElement;
    /**
     * To find the axis label of the intersect action
     * @param axis
     * @param label
     * @param width
     */
    private findAxisLabel;
    /**
     * X-Axis Title function performed
     * @param axis
     * @param index
     * @param parent
     * @param rect
     */
    private drawXAxisTitle;
    /**
     * To render the axis grid and tick lines(Both Major and Minor)
     * @param axis
     * @param index
     * @param gridDirection
     * @param gridModel
     * @param gridId
     * @param gridIndex
     * @param parent
     * @param themeColor
     * @param dashArray
     */
    private renderGridLine;
    /**
     * To Find the parent node of the axis
     * @param chart
     * @param label
     * @param axis
     * @param index
     */
    private findParentNode;
    /**
     * Create Zooming Labels Function Called here
     * @param chart
     * @param labelElement
     * @param axis
     * @param index
     * @param rect
     */
    private createZoomingLabel;
    /**
     * To get Rotate text size
     * @param isBreakLabel
     * @param axis
     * @param label
     * @param angle
     * @param chart
     */
    private getRotateText;
}
//node_modules/@syncfusion/ej2-charts/src/chart/axis/category-axis.d.ts
/**
 * `Category` module is used to render category axis.
 */
export  class Category extends NiceInterval {
    /**
     * Constructor for the category module.
     * @private
     */
    constructor(chart: Chart);
    /**
     * The function to calculate the range and labels for the axis.
     * @return {void}
     */
    calculateRangeAndInterval(size: svgBase.Size, axis: Axis): void;
    /**
     * Actual Range for the axis.
     * @private
     */
    getActualRange(axis: Axis, size: svgBase.Size): void;
    /**
     * Padding for the axis.
     * @private
     */
    applyRangePadding(axis: Axis, size: svgBase.Size): void;
    /**
     * Calculate label for the axis.
     * @private
     */
    calculateVisibleLabels(axis: Axis): void;
    /**
     * Get module name
     */
    protected getModuleName(): string;
    /**
     * To destroy the category axis.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/axis/date-time-axis.d.ts
/**
 * `DateTime` module is used to render datetime axis.
 */
export  class DateTime extends NiceInterval {
    min: number;
    max: number;
    /**
     * Constructor for the dateTime module.
     * @private
     */
    constructor(chart?: Chart);
    /**
     * The function to calculate the range and labels for the axis.
     * @return {void}
     */
    calculateRangeAndInterval(size: svgBase.Size, axis: Axis): void;
    /**
     * Actual Range for the axis.
     * @private
     */
    getActualRange(axis: Axis, size: svgBase.Size): void;
    /**
     * Apply padding for the range.
     * @private
     */
    applyRangePadding(axis: Axis, size: svgBase.Size): void;
    private getYear;
    private getMonth;
    private getDay;
    private getHour;
    /**
     * Calculate visible range for axis.
     * @private
     */
    protected calculateVisibleRange(size: svgBase.Size, axis: Axis): void;
    /**
     * Calculate visible labels for the axis.
     * @param axis
     * @param chart
     * @private
     */
    calculateVisibleLabels(axis: Axis, chart: Chart | RangeNavigator): void;
    /** @private */
    increaseDateTimeInterval(axis: Axis, value: number, interval: number): Date;
    private alignRangeStart;
    /**
     * Get module name
     */
    protected getModuleName(): string;
    /**
     * To destroy the category axis.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/axis/date-time-category-axis.d.ts
/**
 * Category module is used to render category axis.
 */
export  class DateTimeCategory extends Category {
    private axisSize;
    /**
     * Constructor for the category module.
     * @private
     */
    constructor(chart: Chart);
    /**
     * The function to calculate the range and labels for the axis.
     * @return {void}
     * @private
     */
    calculateRangeAndInterval(size: svgBase.Size, axis: Axis): void;
    /**
     * Calculate label for the axis.
     * @private
     */
    calculateVisibleLabels(axis: Axis): void;
    /**
     * To get the Indexed axis label text with axis format for DateTimeCategory axis
     * @param value
     * @param format
     */
    getIndexedAxisLabel(value: string, format: Function): string;
    /**
     * get same interval
     */
    private sameInterval;
    /**
     * Get module name
     */
    protected getModuleName(): string;
    /**
     * To destroy the category axis.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/axis/double-axis.d.ts
/**
 * Numeric module is used to render numeric axis.
 */
export  class Double {
    /** @private */
    chart: Chart;
    /** @private */
    min: Object;
    /** @private */
    max: Object;
    private isDrag;
    private interval;
    private paddingInterval;
    /**
     * Constructor for the dateTime module.
     * @private
     */
    constructor(chart?: Chart);
    /**
     * Numeric Nice Interval for the axis.
     * @private
     */
    protected calculateNumericNiceInterval(axis: Axis, delta: number, size: svgBase.Size): number;
    /**
     * Actual Range for the axis.
     * @private
     */
    getActualRange(axis: Axis, size: svgBase.Size): void;
    /**
     * Range for the axis.
     * @private
     */
    initializeDoubleRange(axis: Axis): void;
    /**
     * The function to calculate the range and labels for the axis.
     * @return {void}
     * @private
     */
    calculateRangeAndInterval(size: svgBase.Size, axis: Axis): void;
    /**
     * Calculate Range for the axis.
     * @private
     */
    protected calculateRange(axis: Axis, size: svgBase.Size): void;
    private yAxisRange;
    private findMinMax;
    /**
     * Apply padding for the range.
     * @private
     */
    applyRangePadding(axis: Axis, size: svgBase.Size): void;
    updateActualRange(axis: Axis, minimum: number, maximum: number, interval: number): void;
    private findAdditional;
    private findNormal;
    /**
     * Calculate visible range for axis.
     * @private
     */
    protected calculateVisibleRange(size: svgBase.Size, axis: Axis): void;
    /**
     * Calculate label for the axis.
     * @private
     */
    calculateVisibleLabels(axis: Axis, chart: Chart | RangeNavigator): void;
    /**
     * Format of the axis label.
     * @private
     */
    protected getFormat(axis: Axis): string;
    /**
     * Formatted the axis label.
     * @private
     */
    formatValue(axis: Axis, isCustom: boolean, format: string, tempInterval: number): string;
}
//node_modules/@syncfusion/ej2-charts/src/chart/axis/logarithmic-axis.d.ts
/**
 * `Logarithmic` module is used to render log axis.
 */
export  class Logarithmic extends Double {
    /**
     * Constructor for the logerithmic module.
     * @private
     */
    constructor(chart: Chart);
    /**
     * The method to calculate the range and labels for the axis.
     * @return {void}
     */
    calculateRangeAndInterval(size: svgBase.Size, axis: Axis): void;
    /**
     * Calculates actual range for the axis.
     * @private
     */
    getActualRange(axis: Axis, size: svgBase.Size): void;
    /**
     * Calculates visible range for the axis.
     * @private
     */
    protected calculateVisibleRange(size: svgBase.Size, axis: Axis): void;
    /**
     * Calculates log iInteval for the axis.
     * @private
     */
    protected calculateLogNiceInterval(delta: number, size: svgBase.Size, axis: Axis): number;
    /**
     * Calculates labels for the axis.
     * @private
     */
    calculateVisibleLabels(axis: Axis, chart: Chart | RangeNavigator): void;
    /**
     * Get module name
     */
    protected getModuleName(): string;
    /**
     * To destroy the category axis.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/axis/multi-level-labels.d.ts
/**
 * MultiLevel Labels src
 */
/**
 * `MultiLevelLabel` module is used to render the multi level label in chart.
 */
export  class MultiLevelLabel {
    /** @private */
    chart: Chart;
    /** @private */
    xAxisPrevHeight: number[];
    /** @private */
    xAxisMultiLabelHeight: number[];
    /** @private */
    yAxisPrevHeight: number[];
    /** @private */
    yAxisMultiLabelHeight: number[];
    /** @private */
    multiElements: Element;
    /** @private */
    labelElement: Element;
    /**
     * Constructor for the logerithmic module.
     * @private
     */
    constructor(chart: Chart);
    /**
     * Binding events for multi level module.
     */
    private addEventListener;
    /**
     * Finds multilevel label height
     * @return {void}
     */
    getMultilevelLabelsHeight(axis: Axis): void;
    /**
     * render x axis multi level labels
     * @private
     * @return {void}
     */
    renderXAxisMultiLevelLabels(axis: Axis, index: number, parent: Element, axisRect: svgBase.Rect): void;
    /**
     * render x axis multi level labels border
     * @private
     * @return {void}
     */
    private renderXAxisLabelBorder;
    /**
     * render y axis multi level labels
     * @private
     * @return {void}
     */
    renderYAxisMultiLevelLabels(axis: Axis, index: number, parent: Element, rect: svgBase.Rect): void;
    /**
     * render y axis multi level labels border
     * @private
     * @return {void}
     */
    private renderYAxisLabelBorder;
    /**
     * create cliprect
     * @return {void}
     * @private
     */
    createClipRect(x: number, y: number, height: number, width: number, clipId: string, axisId: string): void;
    /**
     * create borer element
     * @return {void}
     * @private
     */
    createBorderElement(borderIndex: number, axisIndex: number, axis: Axis, path: string, pointIndex?: number): void;
    /**
     * Triggers the event.
     * @return {void}
     * @private
     */
    triggerMultiLabelRender(axis: Axis, text: string, textStyle: FontModel, textAlignment: Alignment, customAttributes: object): IAxisMultiLabelRenderEventArgs;
    /**
     * Triggers the event.
     * @return {void}
     * @private
     */
    MultiLevelLabelClick(labelIndex: string, axisIndex: number): IMultiLevelLabelClickEventArgs;
    /**
     * To click the multi level label
     * @return {void}
     * @private
     */
    click(event: Event): void;
    /**
     * To get the module name for `MultiLevelLabel`.
     * @private
     */
    getModuleName(): string;
    /**
     * To destroy the `MultiLevelLabel` module.
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/axis/polar-radar-panel.d.ts
export  class PolarRadarPanel extends LineBase {
    private initialClipRect;
    private htmlObject;
    private element;
    private centerX;
    private centerY;
    private startAngle;
    /** @private */
    seriesClipRect: svgBase.Rect;
    /**
     * Measure the polar radar axis size.
     * @return {void}
     * @private
     */
    measureAxis(rect: svgBase.Rect): void;
    private measureRowAxis;
    private measureColumnAxis;
    /**
     * Measure the column and row in chart.
     * @return {void}
     * @private
     */
    measureDefinition(definition: Row | Column, chart: Chart, size: svgBase.Size, clipRect: svgBase.Rect): void;
    /**
     * Measure the axis.
     * @return {void}
     * @private
     */
    private calculateAxisSize;
    /**
     * Measure the axis.
     * @return {void}
     * @private
     */
    measure(): void;
    /**
     * Measure the row size.
     * @return {void}
     */
    private calculateRowSize;
    /**
     * Measure the row size.
     * @return {void}
     */
    private calculateColumnSize;
    /**
     * To render the axis element.
     * @return {void}
     * @private
     */
    renderAxes(): Element;
    private drawYAxisLine;
    drawYAxisLabels(axis: Axis, index: number): void;
    private drawYAxisGridLine;
    private drawXAxisGridLine;
    private drawAxisMinorLine;
    /**
     * To render the axis label.
     * @return {void}
     * @private
     */
    drawXAxisLabels(axis: Axis, index: number): void;
    private renderTickLine;
    private renderGridLine;
}
//node_modules/@syncfusion/ej2-charts/src/chart/axis/strip-line.d.ts
/**
 * `StripLine` module is used to render the stripLine in chart.
 */
export  class StripLine {
    /**
     * Finding x, y, width and height of the strip line
     * @param axis
     * @param strip line
     * @param seriesClipRect
     * @param startValue
     * @param segmentAxis
     */
    private measureStripLine;
    /**
     * To get from to value from start, end, size, start from axis
     * @param start
     * @param end
     * @param size
     * @param startFromAxis
     * @param axis
     * @param strip line
     */
    private getFromTovalue;
    /**
     * Finding end value of the strip line
     * @param to
     * @param from
     * @param size
     * @param axis
     * @param end
     * @param strip line
     */
    private getToValue;
    /**
     * To check the strip line values within range
     * @param value
     * @param axis
     */
    private findValue;
    /**
     * To render strip lines based start and end.
     * @private
     * @param chart
     * @param position
     * @param axes
     */
    renderStripLine(chart: Chart, position: ZIndex, axes: Axis[]): void;
    /**
     * To draw the single line strip line
     * @param strip line
     * @param rect
     * @param id
     * @param parent
     * @param chart
     * @param axis
     */
    private renderPath;
    /**
     * To draw the rectangle
     * @param strip line
     * @param rect
     * @param id
     * @param parent
     * @param chart
     */
    private renderRectangle;
    /**
     * To create the text on strip line
     * @param strip line
     * @param rect
     * @param id
     * @param parent
     * @param chart
     * @param axis
     */
    private renderText;
    private invertAlignment;
    /**
     * To find the next value of the recurrence strip line
     * @param axis
     * @param stripline
     * @param startValue
     */
    private getStartValue;
    /**
     * Finding segment axis for segmented strip line
     * @param axes
     * @param axis
     * @param strip line
     */
    private getSegmentAxis;
    /**
     * To render strip line on chart
     * @param axis
     * @param stripline
     * @param seriesClipRect
     * @param id
     * @param striplineGroup
     * @param chart
     * @param startValue
     * @param segmentAxis
     * @param count
     */
    private renderStripLineElement;
    /**
     * To find the factor of the text
     * @param anchor
     */
    private factor;
    /**
     * To find the start value of the text
     * @param xy
     * @param size
     * @param textAlignment
     */
    private getTextStart;
    /**
     * To get the module name for `StripLine`.
     * @private
     */
    getModuleName(): string;
    /**
     * To destroy the `StripLine` module.
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/chart-model.d.ts
/**
 * Interface for a class CrosshairSettings
 */
export interface CrosshairSettingsModel {
    /**
     * If set to true, crosshair line becomes visible.
     * @default false
     */
    enable?: boolean;
    /**
     * DashArray for crosshair.
     * @default ''
     */
    dashArray?: string;
    /**
     * Options to customize the crosshair line.
     */
    line?: BorderModel;
    /**
     * Specifies the line type. Horizontal mode enables the horizontal line and Vertical mode enables the vertical line. They are,
     * * None: Hides both vertical and horizontal crosshair lines.
     * * Both: Shows both vertical and horizontal crosshair lines.
     * * Vertical: Shows the vertical line.
     * * Horizontal: Shows the horizontal line.
     * @default Both
     */
    lineType?: LineType;
}
/**
 * Interface for a class ZoomSettings
 */
export interface ZoomSettingsModel {
    /**
     * If set to true, chart can be zoomed by a rectangular selecting region on the plot area.
     * @default false
     */
    enableSelectionZooming?: boolean;
    /**
     * If to true, chart can be pinched to zoom in / zoom out.
     * @default false
     */
    enablePinchZooming?: boolean;
    /**
     * If set to true, chart can be zoomed by using mouse wheel.
     * @default false
     */
    enableMouseWheelZooming?: boolean;
    /**
     * If set to true, zooming will be performed on mouse up. It requires `enableSelectionZooming` to be true.
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let chart$: Chart = new Chart({
     * ...
     *    zoomSettings: {
     *      enableSelectionZooming: true,
     *      enableDeferredZooming: false
     *    }
     * ...
     * });
     * chart.appendTo('#Chart');
     * ```
     * @default true
     */
    enableDeferredZooming?: boolean;
    /**
     * Specifies whether to allow zooming vertically or horizontally or in both ways. They are,
     * * x,y: Chart can be zoomed both vertically and horizontally.
     * * x: Chart can be zoomed horizontally.
     * * y: Chart can be zoomed  vertically.
     *  It requires `enableSelectionZooming` to be true.
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let chart$: Chart = new Chart({
     * ...
     *    zoomSettings: {
     *      enableSelectionZooming: true,
     *      mode: 'XY'
     *    }
     * ...
     * });
     * chart.appendTo('#Chart');
     * ```
     * @default 'XY'
     */
    mode?: ZoomMode;
    /**
     * Specifies the toolkit options for the zooming as follows:
     * * Zoom
     * * ZoomIn
     * * ZoomOut
     * * Pan
     * * Reset
     * @default '["Zoom", "ZoomIn", "ZoomOut", "Pan", "Reset"]'
     */
    toolbarItems?: ToolbarItems[];
    /**
     * Specifies whether chart needs to be panned by default.
     * @default false.
     */
    enablePan?: boolean;
    /**
     * Specifies whether axis needs to have scrollbar.
     * @default false.
     */
    enableScrollbar?: boolean;
}
/**
 * Interface for a class Chart
 */
export interface ChartModel extends base.ComponentModel{
    /**
     * The width of the chart as a string accepts input as both like '100px' or '100%'.
     * If specified as '100%, chart renders to the full width of its parent element.
     * @default null
     */
    width?: string;
    /**
     * The height of the chart as a string accepts input both as '100px' or '100%'.
     * If specified as '100%, chart renders to the full height of its parent element.
     * @default null
     */
    height?: string;
    /**
     * Title of the chart
     * @default ''
     */
    title?: string;
    /**
     * Specifies the DataSource for the chart. It can be an array of JSON objects or an instance of data.DataManager.
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let dataManager$: data.DataManager = new data.DataManager({
     *         url: 'http://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/'
     * });
     * let query$: Query = new Query().take(50).where('Estimate', 'greaterThan', 0, false);
     * let chart$: Chart = new Chart({
     * ...
     *  dataSource:dataManager,
     *   series: [{
     *        xName: 'Id',
     *        yName: 'Estimate',
     *        query: query
     *    }],
     * ...
     * });
     * chart.appendTo('#Chart');
     * ```
     * @default ''
     */
    dataSource?: Object | data.DataManager;
    /**
     * Options for customizing the title of the Chart.
     */
    titleStyle?: FontModel;
    /**
     * SubTitle of the chart
     * @default ''
     */
    subTitle?: string;
    /**
     * Options for customizing the Subtitle of the Chart.
     */
    subTitleStyle?: FontModel;
    /**
     *  Options to customize left, right, top and bottom margins of the chart.
     */
    margin?: MarginModel;
    /**
     * Options for customizing the color and width of the chart border.
     */
    border?: BorderModel;
    /**
     * The background color of the chart that accepts value in hex and rgba as a valid CSS color string.
     * @default null
     */
    background?: string;
    /**
     * Options for configuring the border and background of the chart area.
     */
    chartArea?: ChartAreaModel;
    /**
     * Options to configure the horizontal axis.
     */
    primaryXAxis?: AxisModel;
    /**
     * Options to configure the vertical axis.
     */
    primaryYAxis?: AxisModel;
    /**
     * Options to split Chart into multiple plotting areas horizontally.
     * Each object in the collection represents a plotting area in the Chart.
     */
    rows?: RowModel[];
    /**
     * Options to split chart into multiple plotting areas vertically.
     * Each object in the collection represents a plotting area in the chart.
     */
    columns?: ColumnModel[];
    /**
     * Secondary axis collection for the chart.
     */
    axes?: AxisModel[];
    /**
     * The configuration for series in the chart.
     */
    series?: SeriesModel[];
    /**
     * The configuration for annotation in chart.
     */
    annotations?: ChartAnnotationSettingsModel[];
    /**
     * Palette for the chart series.
     * @default []
     */
    palettes?: string[];
    /**
     * Specifies the theme for the chart.
     * @default 'Material'
     */
    theme?: ChartTheme;
    /**
     * Options for customizing the tooltip of the chart.
     */
    tooltip?: TooltipSettingsModel;
    /**
     * Options for customizing the crosshair of the chart.
     */
    crosshair?: CrosshairSettingsModel;
    /**
     * Options for customizing the legend of the chart.
     */
    legendSettings?: LegendSettingsModel;
    /**
     * Options to enable the zooming feature in the chart.
     */
    zoomSettings?: ZoomSettingsModel;
    /**
     * Specifies whether series or data point has to be selected. They are,
     * * none: Disables the selection.
     * * series: selects a series.
     * * point: selects a point.
     * * cluster: selects a cluster of point
     * * dragXY: selects points by dragging with respect to both horizontal and vertical axes
     * * dragX: selects points by dragging with respect to horizontal axis.
     * * dragY: selects points by dragging with respect to vertical axis.
     * * lasso: selects points by dragging with respect to free form.
     * @default None
     */
    selectionMode?: SelectionMode;
    /**
     * If set true, enables the multi selection in chart. It requires `selectionMode` to be `Point` | `Series` | or `Cluster`.
     * @default false
     */
    isMultiSelect?: boolean;
    /**
     * If set true, enables the multi drag selection in chart. It requires `selectionMode` to be `Dragx` | `DragY` | or `DragXY`.
     * @default false
     */
    allowMultiSelection?: boolean;
    /**
     * To enable11 export feature in chart.
     * @default true
     */
    enableExport?: boolean;
    /**
     * Specifies the point indexes to be selected while loading a chart.
     * It requires `selectionMode` to be `Point` | `Series` | or `Cluster`.
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let chart$: Chart = new Chart({
     * ...
     *   selectionMode: 'Point',
     *   selectedDataIndexes: [ { series: 0, point: 1},
     *                          { series: 2, point: 3} ],
     * ...
     * });
     * chart.appendTo('#Chart');
     * ```
     * @default []
     */
    selectedDataIndexes?: IndexesModel[];
    /**
     * Specifies whether a grouping separator should be used for a number.
     * @default false
     */
    useGroupingSeparator?: boolean;
    /**
     * It specifies whether the chart should be render in transposed manner or not.
     * @default false
     */
    isTransposed?: boolean;
    /**
      * It specifies whether the chart should be rendered in canvas mode
      * @default false
      */
    enableCanvas?: boolean;
    /**
     * Defines the collection of technical indicators, that are used in financial markets
     */
    indicators?: TechnicalIndicatorModel[];
    /**
     * If set true, Animation process will be executed.
     * @default true
     */
    enableAnimation?: boolean;
    /**
     * Description for chart.
     * @default null
     */
    description?: string;
    /**
     * TabIndex value for the chart.
     * @default 1
     */
    tabIndex?: number;
    /**
     * To enable the side by side placing the points for column type series.
     * @default true
     */
    enableSideBySidePlacement?: boolean;
    /**
     * Triggers after resizing of chart
     * @event
     * @blazorProperty 'Resized'
     */
    resized?: base.EmitType<IResizeEventArgs>;
    /**
     * Triggers before the annotation gets rendered.
     * @event
     * @deprecated
     */
    annotationRender?: base.EmitType<IAnnotationRenderEventArgs>;
    /**
     * Triggers before the prints gets started.
     * @event
     * @blazorProperty 'OnPrint'
     */
    beforePrint?: base.EmitType<IPrintEventArgs>;
    /**
     * Triggers after chart load.
     * @event
     * @blazorProperty 'Loaded'
     */
    loaded?: base.EmitType<ILoadedEventArgs>;
    /**
     * Triggers before chart load.
     * @event
     * @deprecated
     */
    load?: base.EmitType<ILoadedEventArgs>;
    /**
     * Triggers after animation is completed for the series.
     * @event
     * @blazorProperty 'OnAnimationComplete'
     */
    animationComplete?: base.EmitType<IAnimationCompleteEventArgs>;
    /**
     * Triggers before the legend is rendered.
     * @event
     * @deprecated
     */
    legendRender?: base.EmitType<ILegendRenderEventArgs>;
    /**
     * Triggers before the data label for series is rendered.
     * @event
     * @deprecated
     */
    textRender?: base.EmitType<ITextRenderEventArgs>;
    /**
     * Triggers before each points for the series is rendered.
     * @event
     * @deprecated
     */
    pointRender?: base.EmitType<IPointRenderEventArgs>;
    /**
     * Triggers before the series is rendered.
     * @event
     * @deprecated
     */
    seriesRender?: base.EmitType<ISeriesRenderEventArgs>;
    /**
     * Triggers before each axis label is rendered.
     * @event
     * @deprecated
     */
    axisLabelRender?: base.EmitType<IAxisLabelRenderEventArgs>;
    /**
     * Triggers before each axis range is rendered.
     * @event
     * @deprecated
     */
    axisRangeCalculated?: base.EmitType<IAxisRangeCalculatedEventArgs>;
    /**
     * Triggers before each axis multi label is rendered.
     * @event
     * @deprecated
     */
    axisMultiLabelRender?: base.EmitType<IAxisMultiLabelRenderEventArgs>;
    /**
     * Triggers after click on legend
     * @event
     */
    legendClick?: base.EmitType<ILegendClickEventArgs>;
    /**
     * Triggers after click on multiLevelLabelClick
     * @event
     */
    multiLevelLabelClick?: base.EmitType<IMultiLevelLabelClickEventArgs>;
    /**
     * Triggers before the tooltip for series is rendered.
     * @event
     */
    tooltipRender?: base.EmitType<ITooltipRenderEventArgs>;
    /**
     * Triggers on hovering the chart.
     * @event
     * @blazorProperty 'OnChartMouseMove'
     */
    chartMouseMove?: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on clicking the chart.
     * @event
     * @blazorProperty 'OnChartMouseClick'
     */
    chartMouseClick?: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on point click.
     * @event
     * @blazorProperty 'OnPointClick'
     */
    pointClick?: base.EmitType<IPointEventArgs>;
    /**
     * Triggers on point move.
     * @event
     * @blazorProperty 'PointMoved'
     */
    pointMove?: base.EmitType<IPointEventArgs>;
    /**
     * Triggers when cursor leaves the chart.
     * @event
     * @blazorProperty 'OnChartMouseLeave'
     */
    chartMouseLeave?: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on mouse down.
     * @event
     * @blazorProperty 'OnChartMouseDown'
     */
    chartMouseDown?: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on mouse up.
     * @event
     * @blazorProperty 'OnChartMouseUp'
     */
    chartMouseUp?: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers after the drag selection is completed.
     * @event
     * @blazorProperty 'OnDragComplete'
     */
    dragComplete?: base.EmitType<IDragCompleteEventArgs>;
    /**
     * Triggers after the selection is completed.
     * @event
     * @blazorProperty 'OnSelectionComplete'
     */
    selectionComplete?: base.EmitType<ISelectionCompleteEventArgs>;
    /**
     * Triggers after the zoom selection is completed.
     * @event
     * @deprecated
     */
    zoomComplete?: base.EmitType<IZoomCompleteEventArgs>;
    /**
     * Triggers when start the scroll.
     * @event
     * @blazorProperty 'OnScrollStart'
     */
    scrollStart?: base.EmitType<IScrollEventArgs>;
    /**
     * Triggers after the scroll end.
     * @event
     * @blazorProperty 'OnScrollEnd'
     */
    scrollEnd?: base.EmitType<IScrollEventArgs>;
    /**
     * Triggers when change the scroll.
     * @event
     * @blazorProperty 'ScrollChanged'
     */
    scrollChanged?: base.EmitType<IScrollEventArgs>;
    /**
     * Triggers when the point drag start.
     * @event
     */
    dragStart?: base.EmitType<IDataEditingEventArgs>;
    /**
     * Triggers when the point is dragging.
     * @event
     */
    drag?: base.EmitType<IDataEditingEventArgs>;
    /**
     * Triggers when the point drag end.
     * @event
     */
    dragEnd?: base.EmitType<IDataEditingEventArgs>;
    /**
     * Defines the currencyCode format of the chart
     * @private
     * @aspType string
     */
    currencyCode?: string;
}
//node_modules/@syncfusion/ej2-charts/src/chart/chart.d.ts
/**
 * Configures the crosshair in the chart.
 */
export  class CrosshairSettings extends base.ChildProperty<CrosshairSettings> {
    /**
     * If set to true, crosshair line becomes visible.
     * @default false
     */
    enable: boolean;
    /**
     * DashArray for crosshair.
     * @default ''
     */
    dashArray: string;
    /**
     * Options to customize the crosshair line.
     */
    line: BorderModel;
    /**
     * Specifies the line type. Horizontal mode enables the horizontal line and Vertical mode enables the vertical line. They are,
     * * None: Hides both vertical and horizontal crosshair lines.
     * * Both: Shows both vertical and horizontal crosshair lines.
     * * Vertical: Shows the vertical line.
     * * Horizontal: Shows the horizontal line.
     * @default Both
     */
    lineType: LineType;
}
/**
 * Configures the zooming behavior for the chart.
 */
export  class ZoomSettings extends base.ChildProperty<ZoomSettings> {
    /**
     * If set to true, chart can be zoomed by a rectangular selecting region on the plot area.
     * @default false
     */
    enableSelectionZooming: boolean;
    /**
     * If to true, chart can be pinched to zoom in / zoom out.
     * @default false
     */
    enablePinchZooming: boolean;
    /**
     * If set to true, chart can be zoomed by using mouse wheel.
     * @default false
     */
    enableMouseWheelZooming: boolean;
    /**
     * If set to true, zooming will be performed on mouse up. It requires `enableSelectionZooming` to be true.
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let chart$: Chart = new Chart({
     * ...
     *    zoomSettings: {
     *      enableSelectionZooming: true,
     *      enableDeferredZooming: false
     *    }
     * ...
     * });
     * chart.appendTo('#Chart');
     * ```
     * @default true
     */
    enableDeferredZooming: boolean;
    /**
     * Specifies whether to allow zooming vertically or horizontally or in both ways. They are,
     * * x,y: Chart can be zoomed both vertically and horizontally.
     * * x: Chart can be zoomed horizontally.
     * * y: Chart can be zoomed  vertically.
     *  It requires `enableSelectionZooming` to be true.
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let chart$: Chart = new Chart({
     * ...
     *    zoomSettings: {
     *      enableSelectionZooming: true,
     *      mode: 'XY'
     *    }
     * ...
     * });
     * chart.appendTo('#Chart');
     * ```
     * @default 'XY'
     */
    mode: ZoomMode;
    /**
     * Specifies the toolkit options for the zooming as follows:
     * * Zoom
     * * ZoomIn
     * * ZoomOut
     * * Pan
     * * Reset
     * @default '["Zoom", "ZoomIn", "ZoomOut", "Pan", "Reset"]'
     */
    toolbarItems: ToolbarItems[];
    /**
     * Specifies whether chart needs to be panned by default.
     * @default false.
     */
    enablePan: boolean;
    /**
     * Specifies whether axis needs to have scrollbar.
     * @default false.
     */
    enableScrollbar: boolean;
}
/**
 * Represents the Chart control.
 * ```html
 * <div id="chart"/>
 * <script>
 *   var chartObj = new Chart({ isResponsive : true });
 *   chartObj.appendTo("#chart");
 * </script>
 * ```
 * @public
 */
export  class Chart extends base.Component<HTMLElement> implements base.INotifyPropertyChanged {
    /**
     * `lineSeriesModule` is used to add line series to the chart.
     */
    lineSeriesModule: LineSeries;
    /**
     * `multiColoredLineSeriesModule` is used to add multi colored line series to the chart.
     */
    multiColoredLineSeriesModule: MultiColoredLineSeries;
    /**
     * `multiColoredAreaSeriesModule` is used to add multi colored area series to the chart.
     */
    multiColoredAreaSeriesModule: MultiColoredAreaSeries;
    /**
     * `columnSeriesModule` is used to add column series to the chart.
     */
    columnSeriesModule: ColumnSeries;
    /**
     * `ParetoSeriesModule` is used to add pareto series in the chart.
     */
    paretoSeriesModule: ParetoSeries;
    /**
     * `areaSeriesModule` is used to add area series in the chart.
     */
    areaSeriesModule: AreaSeries;
    /**
     * `barSeriesModule` is used to add bar series to the chart.
     */
    barSeriesModule: BarSeries;
    /**
     * `stackingColumnSeriesModule` is used to add stacking column series in the chart.
     */
    stackingColumnSeriesModule: StackingColumnSeries;
    /**
     * `stackingAreaSeriesModule` is used to add stacking area series to the chart.
     */
    stackingAreaSeriesModule: StackingAreaSeries;
    /**
     * `stackingLineSeriesModule` is used to add stacking line series to the chart.
     */
    stackingLineSeriesModule: StackingLineSeries;
    /**
     * 'CandleSeriesModule' is used to add candle series in the chart.
     */
    candleSeriesModule: CandleSeries;
    /**
     * `stackingBarSeriesModule` is used to add stacking bar series to the chart.
     */
    stackingBarSeriesModule: StackingBarSeries;
    /**
     * `stepLineSeriesModule` is used to add step line series to the chart.
     */
    stepLineSeriesModule: StepLineSeries;
    /**
     * `stepAreaSeriesModule` is used to add step area series to the chart.
     */
    stepAreaSeriesModule: StepAreaSeries;
    /**
     * `polarSeriesModule` is used to add polar series in the chart.
     */
    polarSeriesModule: PolarSeries;
    /**
     *  `radarSeriesModule` is used to add radar series in the chart.
     */
    radarSeriesModule: RadarSeries;
    /**
     * `splineSeriesModule` is used to add spline series to the chart.
     */
    splineSeriesModule: SplineSeries;
    /**
     * `splineAreaSeriesModule` is used to add spline area series to the chart.
     */
    splineAreaSeriesModule: SplineAreaSeries;
    /**
     * `scatterSeriesModule` is used to add scatter series to the chart.
     */
    scatterSeriesModule: ScatterSeries;
    /**
     * `boxAndWhiskerSeriesModule` is used to add line series to the chart.
     */
    boxAndWhiskerSeriesModule: BoxAndWhiskerSeries;
    /**
     * `rangeColumnSeriesModule` is used to add rangeColumn series to the chart.
     */
    rangeColumnSeriesModule: RangeColumnSeries;
    /**
     * histogramSeriesModule is used to add histogram series in chart
     */
    histogramSeriesModule: HistogramSeries;
    /**
     * hiloSeriesModule is used to add hilo series in chart
     */
    hiloSeriesModule: HiloSeries;
    /**
     * hiloOpenCloseSeriesModule is used to add hilo series in chart
     */
    hiloOpenCloseSeriesModule: HiloOpenCloseSeries;
    /**
     * `waterfallSeries` is used to add waterfall series in chart.
     */
    waterfallSeriesModule: WaterfallSeries;
    /**
     * `bubbleSeries` is used to add bubble series in chart.
     */
    bubbleSeriesModule: BubbleSeries;
    /**
     * `rangeAreaSeriesModule` is used to add rangeArea series in chart.
     */
    rangeAreaSeriesModule: RangeAreaSeries;
    /**
     * `tooltipModule` is used to manipulate and add tooltip to the series.
     */
    tooltipModule: Tooltip;
    /**
     * `crosshairModule` is used to manipulate and add crosshair to the chart.
     */
    crosshairModule: Crosshair;
    /**
     * `errorBarModule` is used to manipulate and add errorBar for series.
     */
    errorBarModule: ErrorBar;
    /**
     * `dataLabelModule` is used to manipulate and add data label to the series.
     */
    dataLabelModule: DataLabel;
    /**
     * `datetimeModule` is used to manipulate and add dateTime axis to the chart.
     */
    dateTimeModule: DateTime;
    /**
     * `categoryModule` is used to manipulate and add category axis to the chart.
     */
    categoryModule: Category;
    /**
     * `dateTimeCategoryModule` is used to manipulate date time and category axis
     */
    dateTimeCategoryModule: DateTimeCategory;
    /**
     * `logarithmicModule` is used to manipulate and add log axis to the chart.
     */
    logarithmicModule: Logarithmic;
    /**
     * `legendModule` is used to manipulate and add legend to the chart.
     */
    legendModule: Legend;
    /**
     * `zoomModule` is used to manipulate and add zooming to the chart.
     */
    zoomModule: Zoom;
    /**
     * `dataEditingModule` is used to drag and drop of the point.
     */
    dataEditingModule: DataEditing;
    /**
     * `selectionModule` is used to manipulate and add selection to the chart.
     */
    selectionModule: Selection;
    /**
     * `annotationModule` is used to manipulate and add annotation in chart.
     */
    annotationModule: ChartAnnotation;
    /**
     * `stripLineModule` is used to manipulate and add stripLine in chart.
     */
    stripLineModule: StripLine;
    /**
     * `multiLevelLabelModule` is used to manipulate and add multiLevelLabel in chart.
     */
    multiLevelLabelModule: MultiLevelLabel;
    /**
     * 'TrendlineModule' is used to predict the market trend using trendlines
     */
    trendLineModule: Trendlines;
    /**
     * `sMAIndicatorModule` is used to predict the market trend using SMA approach
     */
    sMAIndicatorModule: SmaIndicator;
    /**
     * `eMAIndicatorModule` is used to predict the market trend using EMA approach
     */
    eMAIndicatorModule: EmaIndicator;
    /**
     * `tMAIndicatorModule` is used to predict the market trend using TMA approach
     */
    tMAIndicatorModule: TmaIndicator;
    /**
     * `accumulationDistributionIndicatorModule` is used to predict the market trend using Accumulation Distribution approach
     */
    accumulationDistributionIndicatorModule: AccumulationDistributionIndicator;
    /**
     * `atrIndicatorModule` is used to predict the market trend using ATR approach
     */
    atrIndicatorModule: AtrIndicator;
    /**
     * `rSIIndicatorModule` is used to predict the market trend using RSI approach
     */
    rsiIndicatorModule: RsiIndicator;
    /**
     * `macdIndicatorModule` is used to predict the market trend using Macd approach
     */
    macdIndicatorModule: MacdIndicator;
    /**
     * `stochasticIndicatorModule` is used to predict the market trend using Stochastic approach
     */
    stochasticIndicatorModule: StochasticIndicator;
    /**
     * `momentumIndicatorModule` is used to predict the market trend using Momentum approach
     */
    momentumIndicatorModule: MomentumIndicator;
    /**
     * `bollingerBandsModule` is used to predict the market trend using Bollinger approach
     */
    bollingerBandsModule: BollingerBands;
    /**
     * ScrollBar Module is used to render scrollbar in chart while zooming.
     */
    scrollBarModule: ScrollBar;
    /**
     * Export Module1 is used to export chart.
     */
    exportModule: Export;
    /**
     * The width of the chart as a string accepts input as both like '100px' or '100%'.
     * If specified as '100%, chart renders to the full width of its parent element.
     * @default null
     */
    width: string;
    /**
     * The height of the chart as a string accepts input both as '100px' or '100%'.
     * If specified as '100%, chart renders to the full height of its parent element.
     * @default null
     */
    height: string;
    /**
     * Title of the chart
     * @default ''
     */
    title: string;
    /**
     * Specifies the DataSource for the chart. It can be an array of JSON objects or an instance of data.DataManager.
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let dataManager$: data.DataManager = new data.DataManager({
     *         url: 'http://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/'
     * });
     * let query$: Query = new Query().take(50).where('Estimate', 'greaterThan', 0, false);
     * let chart$: Chart = new Chart({
     * ...
     *  dataSource:dataManager,
     *   series: [{
     *        xName: 'Id',
     *        yName: 'Estimate',
     *        query: query
     *    }],
     * ...
     * });
     * chart.appendTo('#Chart');
     * ```
     * @default ''
     */
    dataSource: Object | data.DataManager;
    /**
     * Options for customizing the title of the Chart.
     */
    titleStyle: FontModel;
    /**
     * SubTitle of the chart
     * @default ''
     */
    subTitle: string;
    /**
     * Options for customizing the Subtitle of the Chart.
     */
    subTitleStyle: FontModel;
    /**
     *  Options to customize left, right, top and bottom margins of the chart.
     */
    margin: MarginModel;
    /**
     * Options for customizing the color and width of the chart border.
     */
    border: BorderModel;
    /**
     * The background color of the chart that accepts value in hex and rgba as a valid CSS color string.
     * @default null
     */
    background: string;
    /**
     * Options for configuring the border and background of the chart area.
     */
    chartArea: ChartAreaModel;
    /**
     * Options to configure the horizontal axis.
     */
    primaryXAxis: AxisModel;
    /**
     * Options to configure the vertical axis.
     */
    primaryYAxis: AxisModel;
    /**
     * Options to split Chart into multiple plotting areas horizontally.
     * Each object in the collection represents a plotting area in the Chart.
     */
    rows: RowModel[];
    /**
     * Options to split chart into multiple plotting areas vertically.
     * Each object in the collection represents a plotting area in the chart.
     */
    columns: ColumnModel[];
    /**
     * Secondary axis collection for the chart.
     */
    axes: AxisModel[];
    /**
     * The configuration for series in the chart.
     */
    series: SeriesModel[];
    /**
     * The configuration for annotation in chart.
     */
    annotations: ChartAnnotationSettingsModel[];
    /**
     * Palette for the chart series.
     * @default []
     */
    palettes: string[];
    /**
     * Specifies the theme for the chart.
     * @default 'Material'
     */
    theme: ChartTheme;
    /**
     * Options for customizing the tooltip of the chart.
     */
    tooltip: TooltipSettingsModel;
    /**
     * Options for customizing the crosshair of the chart.
     */
    crosshair: CrosshairSettingsModel;
    /**
     * Options for customizing the legend of the chart.
     */
    legendSettings: LegendSettingsModel;
    /**
     * Options to enable the zooming feature in the chart.
     */
    zoomSettings: ZoomSettingsModel;
    /**
     * Specifies whether series or data point has to be selected. They are,
     * * none: Disables the selection.
     * * series: selects a series.
     * * point: selects a point.
     * * cluster: selects a cluster of point
     * * dragXY: selects points by dragging with respect to both horizontal and vertical axes
     * * dragX: selects points by dragging with respect to horizontal axis.
     * * dragY: selects points by dragging with respect to vertical axis.
     * * lasso: selects points by dragging with respect to free form.
     * @default None
     */
    selectionMode: SelectionMode;
    /**
     * If set true, enables the multi selection in chart. It requires `selectionMode` to be `Point` | `Series` | or `Cluster`.
     * @default false
     */
    isMultiSelect: boolean;
    /**
     * If set true, enables the multi drag selection in chart. It requires `selectionMode` to be `Dragx` | `DragY` | or `DragXY`.
     * @default false
     */
    allowMultiSelection: boolean;
    /**
     * To enable111 export feature in chart.
     * @default true
     */
    enableExport: boolean;
    /**
     * Specifies the point indexes to be selected while loading a chart.
     * It requires `selectionMode` to be `Point` | `Series` | or `Cluster`.
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let chart$: Chart = new Chart({
     * ...
     *   selectionMode: 'Point',
     *   selectedDataIndexes: [ { series: 0, point: 1},
     *                          { series: 2, point: 3} ],
     * ...
     * });
     * chart.appendTo('#Chart');
     * ```
     * @default []
     */
    selectedDataIndexes: IndexesModel[];
    /**
     * Specifies whether a grouping separator should be used for a number.
     * @default false
     */
    useGroupingSeparator: boolean;
    /**
     * It specifies whether the chart should be render in transposed manner or not.
     * @default false
     */
    isTransposed: boolean;
    /**
     * It specifies whether the chart should be rendered in canvas mode
     * @default false
     */
    enableCanvas: boolean;
    /**
     * Defines the collection of technical indicators, that are used in financial markets
     */
    indicators: TechnicalIndicatorModel[];
    /**
     * If set true, Animation process will be executed.
     * @default true
     */
    enableAnimation: boolean;
    /**
     * Description for chart.
     * @default null
     */
    description: string;
    /**
     * TabIndex value for the chart.
     * @default 1
     */
    tabIndex: number;
    /**
     * To enable the side by side placing the points for column type series.
     * @default true
     */
    enableSideBySidePlacement: boolean;
    /**
     * Triggers after resizing of chart
     * @event
     * @blazorProperty 'Resized'
     */
    resized: base.EmitType<IResizeEventArgs>;
    /**
     * Triggers before the annotation gets rendered.
     * @event
     * @deprecated
     */
    annotationRender: base.EmitType<IAnnotationRenderEventArgs>;
    /**
     * Triggers before the prints gets started.
     * @event
     * @blazorProperty 'OnPrint'
     */
    beforePrint: base.EmitType<IPrintEventArgs>;
    /**
     * Triggers after chart load.
     * @event
     * @blazorProperty 'Loaded'
     */
    loaded: base.EmitType<ILoadedEventArgs>;
    /**
     * Triggers before chart load.
     * @event
     * @deprecated
     */
    load: base.EmitType<ILoadedEventArgs>;
    /**
     * Triggers after animation is completed for the series.
     * @event
     * @blazorProperty 'OnAnimationComplete'
     */
    animationComplete: base.EmitType<IAnimationCompleteEventArgs>;
    /**
     * Triggers before the legend is rendered.
     * @event
     * @deprecated
     */
    legendRender: base.EmitType<ILegendRenderEventArgs>;
    /**
     * Triggers before the data label for series is rendered.
     * @event
     * @deprecated
     */
    textRender: base.EmitType<ITextRenderEventArgs>;
    /**
     * Triggers before each points for the series is rendered.
     * @event
     * @deprecated
     */
    pointRender: base.EmitType<IPointRenderEventArgs>;
    /**
     * Triggers before the series is rendered.
     * @event
     * @deprecated
     */
    seriesRender: base.EmitType<ISeriesRenderEventArgs>;
    /**
     * Triggers before each axis label is rendered.
     * @event
     * @deprecated
     */
    axisLabelRender: base.EmitType<IAxisLabelRenderEventArgs>;
    /**
     * Triggers before each axis range is rendered.
     * @event
     * @deprecated
     */
    axisRangeCalculated: base.EmitType<IAxisRangeCalculatedEventArgs>;
    /**
     * Triggers before each axis multi label is rendered.
     * @event
     * @deprecated
     */
    axisMultiLabelRender: base.EmitType<IAxisMultiLabelRenderEventArgs>;
    /**
     * Triggers after click on legend
     * @event
     */
    legendClick: base.EmitType<ILegendClickEventArgs>;
    /**
     * Triggers after click on multiLevelLabelClick
     * @event
     */
    multiLevelLabelClick: base.EmitType<IMultiLevelLabelClickEventArgs>;
    /**
     * Triggers before the tooltip for series is rendered.
     * @event
     */
    tooltipRender: base.EmitType<ITooltipRenderEventArgs>;
    /**
     * Triggers on hovering the chart.
     * @event
     * @blazorProperty 'OnChartMouseMove'
     */
    chartMouseMove: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on clicking the chart.
     * @event
     * @blazorProperty 'OnChartMouseClick'
     */
    chartMouseClick: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on point click.
     * @event
     * @blazorProperty 'OnPointClick'
     */
    pointClick: base.EmitType<IPointEventArgs>;
    /**
     * Triggers on point move.
     * @event
     * @blazorProperty 'PointMoved'
     */
    pointMove: base.EmitType<IPointEventArgs>;
    /**
     * Triggers when cursor leaves the chart.
     * @event
     * @blazorProperty 'OnChartMouseLeave'
     */
    chartMouseLeave: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on mouse down.
     * @event
     * @blazorProperty 'OnChartMouseDown'
     */
    chartMouseDown: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on mouse up.
     * @event
     * @blazorProperty 'OnChartMouseUp'
     */
    chartMouseUp: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers after the drag selection is completed.
     * @event
     * @blazorProperty 'OnDragComplete'
     */
    dragComplete: base.EmitType<IDragCompleteEventArgs>;
    /**
     * Triggers after the selection is completed.
     * @event
     * @blazorProperty 'OnSelectionComplete'
     */
    selectionComplete: base.EmitType<ISelectionCompleteEventArgs>;
    /**
     * Triggers after the zoom selection is completed.
     * @event
     * @deprecated
     */
    zoomComplete: base.EmitType<IZoomCompleteEventArgs>;
    /**
     * Triggers when start the scroll.
     * @event
     * @blazorProperty 'OnScrollStart'
     */
    scrollStart: base.EmitType<IScrollEventArgs>;
    /**
     * Triggers after the scroll end.
     * @event
     * @blazorProperty 'OnScrollEnd'
     */
    scrollEnd: base.EmitType<IScrollEventArgs>;
    /**
     * Triggers when change the scroll.
     * @event
     * @blazorProperty 'ScrollChanged'
     */
    scrollChanged: base.EmitType<IScrollEventArgs>;
    /**
     * Triggers when the point drag start.
     * @event
     */
    dragStart: base.EmitType<IDataEditingEventArgs>;
    /**
     * Triggers when the point is dragging.
     * @event
     */
    drag: base.EmitType<IDataEditingEventArgs>;
    /**
     * Triggers when the point drag end.
     * @event
     */
    dragEnd: base.EmitType<IDataEditingEventArgs>;
    /**
     * Defines the currencyCode format of the chart
     * @private
     * @aspType string
     */
    private currencyCode;
    private htmlObject;
    private isLegend;
    /** @private */
    stockChart: StockChart;
    /**
     * localization object
     * @private
     */
    localeObject: base.L10n;
    /**
     * It contains default values of localization values
     */
    private defaultLocalConstants;
    /**
     * Gets the current visible axis of the Chart.
     * @hidden
     */
    axisCollections: Axis[];
    /**
     * Gets the current visible series of the Chart.
     * @hidden
     */
    visibleSeries: Series[];
    /**
     * Render panel for chart.
     * @hidden
     */
    chartAxisLayoutPanel: CartesianAxisLayoutPanel | PolarRadarPanel;
    /**
     * Gets all the horizontal axis of the Chart.
     * @hidden
     */
    horizontalAxes: Axis[];
    /**
     * Gets all the vertical axis of the Chart.
     * @hidden
     */
    verticalAxes: Axis[];
    /**
     * Gets the inverted chart.
     * @hidden
     */
    requireInvertedAxis: boolean;
    /** @private */
    svgObject: Element;
    /** @private */
    isTouch: boolean;
    /** @private */
    renderer: svgBase.SvgRenderer | svgBase.CanvasRenderer;
    /** @private */
    svgRenderer: svgBase.SvgRenderer;
    /** @private */
    canvasRender: svgBase.CanvasRenderer;
    /** @private */
    initialClipRect: svgBase.Rect;
    /** @private */
    seriesElements: Element;
    /** @private */
    indicatorElements: Element;
    /** @private */
    trendLineElements: Element;
    /** @private */
    visibleSeriesCount: number;
    /** @private */
    intl: base.Internationalization;
    /** @private */
    dataLabelCollections: svgBase.Rect[];
    /** @private */
    dataLabelElements: Element;
    /** @private */
    mouseX: number;
    /** @private */
    mouseY: number;
    /** @private */
    animateSeries: boolean;
    /** @private */
    redraw: boolean;
    /** @public */
    animated: boolean;
    /** @public */
    duration: number;
    /** @private */
    availableSize: svgBase.Size;
    /** @private */
    delayRedraw: boolean;
    /** @private */
    isDoubleTap: boolean;
    /** @private */
    mouseDownX: number;
    /** @private */
    mouseDownY: number;
    /** @private */
    previousMouseMoveX: number;
    /** @private */
    previousMouseMoveY: number;
    /** @private */
    private threshold;
    /** @private */
    isChartDrag: boolean;
    /** @private */
    isPointMouseDown: boolean;
    /** @private */
    isScrolling: boolean;
    /** @private */
    dragY: number;
    private resizeTo;
    /** @private */
    disableTrackTooltip: boolean;
    /** @private */
    startMove: boolean;
    /** @private */
    yAxisElements: Element;
    /** @private */
    radius: number;
    /** @private */
    chartAreaType: string;
    /**
     * `markerModule` is used to manipulate and add marker to the series.
     * @private
     */
    markerRender: Marker;
    private titleCollection;
    private subTitleCollection;
    /** @private */
    themeStyle: IThemeStyle;
    /** @private */
    scrollElement: Element;
    /** @private */
    scrollSettingEnabled: boolean;
    private chartid;
    /** @private */
    svgId: string;
    /** @private */
    isBlazor: boolean;
    /**
     * Touch object to unwire the touch event from element
     */
    private touchObject;
    /** @private */
    resizeBound: any;
    /** @private */
    longPressBound: any;
    /**
     * Constructor for creating the widget
     * @hidden
     */
    constructor(options?: ChartModel, element?: string | HTMLElement);
    /**
     * To manage persist chart data
     */
    private mergePersistChartData;
    /**
     * Initialize the event handler.
     */
    protected preRender(): void;
    private initPrivateVariable;
    /**
     * To Initialize the control rendering.
     */
    protected render(): void;
    /**
     * Gets the localized label by locale keyword.
     * @param  {string} key
     * @return {string}
     */
    getLocalizedLabel(key: string): string;
    /**
     * Animate the series bounds.
     * @private
     */
    animate(duration?: number): void;
    /**
     * Refresh the chart bounds.
     * @private
     */
    refreshBound(): void;
    /**
     * To calcualte the stack values
     */
    private calculateStackValues;
    private removeSelection;
    private renderElements;
    /**
     * To render the legend
     * @private
     */
    renderAxes(): Element;
    /**
     * To render the legend
     */
    private renderLegend;
    /**
     * To set the left and top position for data label template for center aligned chart
     */
    private setSecondaryElementPosition;
    private initializeModuleElements;
    private hasTrendlines;
    private renderSeriesElements;
    /**
     * @private
     */
    renderSeries(): void;
    protected renderCanvasSeries(item: Series): void;
    private initializeIndicator;
    private initializeTrendLine;
    private appendElementsAfterSeries;
    private applyZoomkit;
    /**
     * Render annotation perform here
     * @param redraw
     * @private
     */
    private renderAnnotation;
    private performSelection;
    private processData;
    private initializeDataModule;
    private calculateBounds;
    /**
     * Handles the print method for chart control.
     */
    print(id?: string[] | string | Element): void;
    /**
     * Defines the trendline initialization
     */
    private initTrendLines;
    private calculateAreaType;
    /**
     * Calculate the visible axis
     * @private
     */
    private calculateVisibleAxis;
    private initAxis;
    private initTechnicalIndicators;
    /** @private */
    refreshTechnicalIndicator(series: SeriesBase): void;
    private calculateVisibleSeries;
    private renderTitle;
    private renderSubTitle;
    private renderBorder;
    /**
     * @private
     */
    renderAreaBorder(): void;
    /**
     * To add series for the chart
     * @param {SeriesModel[]} seriesCollection - Defines the series collection to be added in chart.
     * @return {void}.
     */
    addSeries(seriesCollection: SeriesModel[]): void;
    /**
     * To Remove series for the chart
     * @param index - Defines the series index to be remove in chart series
     * @return {void}
     */
    removeSeries(index: number): void;
    /**
     * To destroy the widget
     * @method destroy
     * @return {void}.
     * @member of Chart
     */
    destroy(): void;
    /**
     * Get component name
     */
    getModuleName(): string;
    /**
     * Get the properties to be maintained in the persisted state.
     * @private
     */
    getPersistData(): string;
    /**
     * Method to create SVG element.
     */
    createChartSvg(): void;
    /**
     * Method to bind events for chart
     */
    private unWireEvents;
    private wireEvents;
    private chartRightClick;
    private setStyle;
    /**
     * Finds the orientation.
     * @return {boolean}
     * @private
     */
    isOrientation(): boolean;
    /**
     * Handles the long press on chart.
     * @return {boolean}
     * @private
     */
    longPress(e?: base.TapEventArgs): boolean;
    /**
     * To find mouse x, y for aligned chart element svg position
     */
    private setMouseXY;
    /**
     * Export method for the chart.
     */
    export(type: ExportType, fileName: string): void;
    /**
     * Handles the chart resize.
     * @return {boolean}
     * @private
     */
    chartResize(e: Event): boolean;
    /**
     * Handles the mouse move.
     * @return {boolean}
     * @private
     */
    mouseMove(e: PointerEvent): boolean;
    /**
     * Handles the mouse leave.
     * @return {boolean}
     * @private
     */
    mouseLeave(e: PointerEvent): boolean;
    /**
     * Handles the mouse leave on chart.
     * @return {boolean}
     * @private
     */
    chartOnMouseLeave(e: PointerEvent | TouchEvent): boolean;
    /**
     * Handles the mouse click on chart.
     * @return {boolean}
     * @private
     */
    chartOnMouseClick(e: PointerEvent | TouchEvent): boolean;
    private triggerPointEvent;
    /**
     * Handles the mouse move on chart.
     * @return {boolean}
     * @private
     */
    chartOnMouseMove(e: PointerEvent | TouchEvent): boolean;
    private titleTooltip;
    private axisTooltip;
    private findAxisLabel;
    /**
     * Handles the mouse down on chart.
     * @return {boolean}
     * @private
     */
    chartOnMouseDown(e: PointerEvent): boolean;
    /**
     * Handles the mouse up.
     * @return {boolean}
     * @private
     */
    mouseEnd(e: PointerEvent): boolean;
    /**
     * Handles the mouse up.
     * @return {boolean}
     * @private
     */
    chartOnMouseUp(e: PointerEvent | TouchEvent): boolean;
    /**
     * Method to set culture for chart
     */
    private setCulture;
    /**
     * Method to set the annotation content dynamically for chart.
     */
    setAnnotationValue(annotationIndex: number, content: string): void;
    /**
     * Method to set locale constants
     */
    private setLocaleConstants;
    /**
     * Theming for chart
     */
    private setTheme;
    /**
     * To provide the array of modules needed for control rendering
     * @return {base.ModuleDeclaration[]}
     * @private
     */
    requiredModules(): base.ModuleDeclaration[];
    private findAxisModule;
    private findIndicatorModules;
    private findTrendLineModules;
    private findStriplineVisibility;
    /**
     * To Remove the SVG.
     * @return {boolean}
     * @private
     */
    removeSvg(): void;
    private refreshDefinition;
    /**
     * Refresh the axis default value.
     * @return {boolean}
     * @private
     */
    refreshAxis(): void;
    private axisChange;
    /**
     * Get visible series by index
     */
    private getVisibleSeries;
    /**
     * Clear visible Axis labels
     */
    private clearVisibleAxisLabels;
    /**
     * Called internally if any of the property value changed.
     * @private
     */
    onPropertyChanged(newProp: ChartModel, oldProp: ChartModel): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/index.d.ts
/**
 * Chart component exported items
 */
//node_modules/@syncfusion/ej2-charts/src/chart/legend/legend.d.ts
/**
 * `Legend` module is used to render legend for the chart.
 */
export  class Legend extends BaseLegend {
    constructor(chart: Chart);
    /**
     * Binding events for legend module.
     */
    private addEventListener;
    /**
     * UnBinding events for legend module.
     */
    private removeEventListener;
    /**
     * To handle mosue move for legend module
     */
    private mouseMove;
    /**
     * To handle mosue end for legend module
     */
    private mouseEnd;
    /**
     * Get the legend options.
     * @return {void}
     * @private
     */
    getLegendOptions(visibleSeriesCollection: Series[], chart: Chart): void;
    /** @private */
    getLegendBounds(availableSize: svgBase.Size, legendBounds: svgBase.Rect, legend: LegendSettingsModel): void;
    /** @private */
    getRenderPoint(legendOption: LegendOptions, start: ChartLocation, textPadding: number, prevLegend: LegendOptions, rect: svgBase.Rect, count: number, firstLegend: number): void;
    /** @private */
    LegendClick(seriesIndex: number): void;
    private redrawSeriesElements;
    private refreshSeries;
    /**
     * To show the tooltip for the trimmed text in legend.
     * @return {void}
     */
    click(event: Event | PointerEvent): void;
    /**
     * To check click position is within legend bounds
     */
    protected checkWithinBounds(pageX: number, pageY: number): void;
    /**
     * Get module name
     */
    protected getModuleName(): string;
    /**
     * To destroy the Legend.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/model/chart-base-model.d.ts
/**
 * Interface for a class ChartAnnotationSettings
 */
export interface ChartAnnotationSettingsModel {
    /**
     * if set coordinateUnit as `Pixel` X specifies the axis value
     * else is specifies pixel or percentage of coordinate
     * @default '0'
     */
    x?: string | Date | number;
    /**
     * if set coordinateUnit as `Pixel` Y specifies the axis value
     * else is specifies pixel or percentage of coordinate
     * @default '0'
     */
    y?: string | number;
    /**
     * Content of the annotation, which accepts the id of the custom element.
     * @default null
     */
    content?: string;
    /**
     * Specifies the alignment of the annotation. They are
     * * Near - Align the annotation element as left side.
     * * Far - Align the annotation element as right side.
     * * Center - Align the annotation element as mid point.
     * @default 'Center'
     */
    horizontalAlignment?: Alignment;
    /**
     * Specifies the coordinate units of the annotation. They are
     * * Pixel - Annotation renders based on x and y pixel value.
     * * Point - Annotation renders based on x and y axis value.
     * @default 'Pixel'
     */
    coordinateUnits?: Units;
    /**
     * Specifies the regions of the annotation. They are
     * * Chart - Annotation renders based on chart coordinates.
     * * Series - Annotation renders based on series coordinates.
     * @default 'Chart'
     */
    region?: Regions;
    /**
     * Specifies the position of the annotation. They are
     * * Top - Align the annotation element as top side.
     * * Bottom - Align the annotation element as bottom side.
     * * Middle - Align the annotation element as mid point.
     * @default 'Middle'
     */
    verticalAlignment?: Position;
    /**
     * The name of horizontal axis associated with the annotation.
     * It requires `axes` of chart.
     * @default null
     */
    xAxisName?: string;
    /**
     * The name of vertical axis associated with the annotation.
     * It requires `axes` of chart.
     * @default null
     */
    yAxisName?: string;
    /**
     * Information about annotation for assistive technology.
     * @default null
     */
    description?: string;
}
/**
 * Interface for a class LabelBorder
 */
export interface LabelBorderModel {
    /**
     * The color of the border that accepts value in hex and rgba as a valid CSS color string.
     * @default ''
     */
    color?: string;
    /**
     * The width of the border in pixels.
     * @default 1
     */
    width?: number;
    /**
     * Border type for labels
     * * Rectangle
     * * Without Top Border
     * * Without Top and BottomBorder
     * * Without Border
     * * Brace
     * * CurlyBrace
     * @default 'Rectangle'
     */
    type?: BorderType;
}
/**
 * Interface for a class MultiLevelCategories
 */
export interface MultiLevelCategoriesModel {
    /**
     * Start value of the multi level labels
     * @default null
     * @aspDefaultValueIgnore
     */
    start?: number | Date | string;
    /**
     * End value of the multi level labels
     * @default null
     * @aspDefaultValueIgnore
     */
    end?: number | Date | string;
    /**
     * multi level labels text.
     * @default ''
     */
    text?: string;
    /**
     * Maximum width of the text for multi level labels.
     * @default null
     * @aspDefaultValueIgnore
     */
    maximumTextWidth?: number;
    /**
     * multi level labels custom data.
     * @default null
     */
    customAttributes?: object;
    /**
     * Border type for labels
     * * Rectangle
     * * Without Top Border
     * * Without Top and BottomBorder
     * * Without Border
     * * Brace
     * * CurlyBrace
     * @default 'Rectangle'
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     */
    type?: BorderType;
}
/**
 * Interface for a class StripLineSettings
 */
export interface StripLineSettingsModel {
    /**
     * If set true, strip line for axis renders.
     * @default true
     */
    visible?: boolean;
    /**
     *  If set true, strip line get render from axis origin.
     *  @default false
     */
    startFromAxis?: boolean;
    /**
     * Start value of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    start?: number | Date;
    /**
     * End value of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    end?: number | Date;
    /**
     * Size of the strip line, when it starts from the origin.
     * @default null
     * @aspDefaultValueIgnore
     */
    size?: number;
    /**
     * Color of the strip line.
     * @default '#808080'
     */
    color?: string;
    /**
     * Dash Array of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    dashArray?: string;
    /**
     * Size type of the strip line
     * @default Auto
     */
    sizeType?: SizeType;
    /**
     * isRepeat value of the strip line.
     * @default false
     * @aspDefaultValueIgnore
     */
    isRepeat?: boolean;
    /**
     * repeatEvery value of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    repeatEvery?: number | Date;
    /**
     * repeatUntil value of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    repeatUntil?: number | Date;
    /**
     * isSegmented value of the strip line
     * @default false
     * @aspDefaultValueIgnore
     */
    isSegmented?: boolean;
    /**
     * segmentStart value of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    segmentStart?: number | Date;
    /**
     * segmentEnd value of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    segmentEnd?: number | Date;
    /**
     * segmentAxisName of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    segmentAxisName?: string;
    /**
     * Border of the strip line.
     */
    border?: BorderModel;
    /**
     * Strip line text.
     * @default ''
     */
    text?: string;
    /**
     * The angle to which the strip line text gets rotated.
     * @default null
     * @aspDefaultValueIgnore
     */
    rotation?: number;
    /**
     * Defines the position of the strip line text horizontally. They are,
     * * Start: Places the strip line text at the start.
     * * Middle: Places the strip line text in the middle.
     * * End: Places the strip line text at the end.
     * @default 'Middle'
     */
    horizontalAlignment?: Anchor;
    /**
     * Defines the position of the strip line text vertically. They are,
     * * Start: Places the strip line text at the start.
     * * Middle: Places the strip line text in the middle.
     * * End: Places the strip line text at the end.
     * @default 'Middle'
     */
    verticalAlignment?: Anchor;
    /**
     * Options to customize the strip line text.
     */
    textStyle?: FontModel;
    /**
     * Specifies the order of the strip line. They are,
     * * Behind: Places the strip line behind the series elements.
     * * Over: Places the strip line over the series elements.
     * @default 'Behind'
     */
    zIndex?: ZIndex;
    /**
     * Strip line Opacity
     * @default 1
     */
    opacity?: number;
}
/**
 * Interface for a class MultiLevelLabels
 */
export interface MultiLevelLabelsModel {
    /**
     * Defines the position of the multi level labels. They are,
     * * Near: Places the multi level labels at Near.
     * * Center: Places the multi level labels at Center.
     * * Far: Places the multi level labels at Far.
     * @default 'Center'
     */
    alignment?: Alignment;
    /**
     * Defines the textOverFlow for multi level labels. They are,
     * * Trim: Trim textOverflow for multi level labels.
     * * Wrap: Wrap textOverflow for multi level labels.
     * * none: None textOverflow for multi level labels.
     * @default 'Wrap'
     */
    overflow?: TextOverflow;
    /**
     * Options to customize the multi level labels.
     */
    textStyle?: FontModel;
    /**
     * Border of the multi level labels.
     */
    border?: LabelBorderModel;
    /**
     * multi level categories for multi level labels.
     */
    categories?: MultiLevelCategoriesModel[];
}
/**
 * Interface for a class ScrollbarSettingsRange
 */
export interface ScrollbarSettingsRangeModel {
    /**
     * Specifies the minimum range of an scrollbar.
     * @default null
     */
    minimum?: Date | string | number;
    /**
      * Specifies the maximum range of an scrollbar.
      * @default null
      */
    maximum?: Date | string | number;
}
/**
 * Interface for a class ScrollbarSettings
 */
export interface ScrollbarSettingsModel {
    /**
       * Enables the scrollbar for lazy loading.
       * @default false
       */
    enable?: boolean;
    /**
       * Defines the length of the points for numeric and logarithmic values.
       * @default null
       */
    pointsLength?: number;
    /**
      * Specifies the range for date time values alone.
      */
    range?: ScrollbarSettingsRangeModel;
}
//node_modules/@syncfusion/ej2-charts/src/chart/model/chart-base.d.ts
/**
 * Configures the Annotation for chart.
 */
export  class ChartAnnotationSettings extends base.ChildProperty<ChartAnnotationSettings> {
    /**
     * if set coordinateUnit as `Pixel` X specifies the axis value
     * else is specifies pixel or percentage of coordinate
     * @default '0'
     */
    x: string | Date | number;
    /**
     * if set coordinateUnit as `Pixel` Y specifies the axis value
     * else is specifies pixel or percentage of coordinate
     * @default '0'
     */
    y: string | number;
    /**
     * Content of the annotation, which accepts the id of the custom element.
     * @default null
     */
    content: string;
    /**
     * Specifies the alignment of the annotation. They are
     * * Near - Align the annotation element as left side.
     * * Far - Align the annotation element as right side.
     * * Center - Align the annotation element as mid point.
     * @default 'Center'
     */
    horizontalAlignment: Alignment;
    /**
     * Specifies the coordinate units of the annotation. They are
     * * Pixel - Annotation renders based on x and y pixel value.
     * * Point - Annotation renders based on x and y axis value.
     * @default 'Pixel'
     */
    coordinateUnits: Units;
    /**
     * Specifies the regions of the annotation. They are
     * * Chart - Annotation renders based on chart coordinates.
     * * Series - Annotation renders based on series coordinates.
     * @default 'Chart'
     */
    region: Regions;
    /**
     * Specifies the position of the annotation. They are
     * * Top - Align the annotation element as top side.
     * * Bottom - Align the annotation element as bottom side.
     * * Middle - Align the annotation element as mid point.
     * @default 'Middle'
     */
    verticalAlignment: Position;
    /**
     * The name of horizontal axis associated with the annotation.
     * It requires `axes` of chart.
     * @default null
     */
    xAxisName: string;
    /**
     * The name of vertical axis associated with the annotation.
     * It requires `axes` of chart.
     * @default null
     */
    yAxisName: string;
    /**
     * Information about annotation for assistive technology.
     * @default null
     */
    description: string;
}
/**
 * label border properties.
 */
export  class LabelBorder extends base.ChildProperty<LabelBorder> {
    /**
     * The color of the border that accepts value in hex and rgba as a valid CSS color string.
     * @default ''
     */
    color: string;
    /**
     * The width of the border in pixels.
     * @default 1
     */
    width: number;
    /**
     * Border type for labels
     * * Rectangle
     * * Without Top Border
     * * Without Top and BottomBorder
     * * Without Border
     * * Brace
     * * CurlyBrace
     * @default 'Rectangle'
     */
    type: BorderType;
}
/**
 * categories for multi level labels
 */
export  class MultiLevelCategories extends base.ChildProperty<MultiLevelCategories> {
    /**
     * Start value of the multi level labels
     * @default null
     * @aspDefaultValueIgnore
     */
    start: number | Date | string;
    /**
     * End value of the multi level labels
     * @default null
     * @aspDefaultValueIgnore
     */
    end: number | Date | string;
    /**
     * multi level labels text.
     * @default ''
     */
    text: string;
    /**
     * Maximum width of the text for multi level labels.
     * @default null
     * @aspDefaultValueIgnore
     */
    maximumTextWidth: number;
    /**
     * multi level labels custom data.
     * @default null
     */
    customAttributes: object;
    /**
     * Border type for labels
     * * Rectangle
     * * Without Top Border
     * * Without Top and BottomBorder
     * * Without Border
     * * Brace
     * * CurlyBrace
     * @default 'Rectangle'
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     */
    type: BorderType;
}
/**
 * Strip line properties
 */
export  class StripLineSettings extends base.ChildProperty<StripLineSettings> {
    /**
     * If set true, strip line for axis renders.
     * @default true
     */
    visible: boolean;
    /**
     *  If set true, strip line get render from axis origin.
     *  @default false
     */
    startFromAxis: boolean;
    /**
     * Start value of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    start: number | Date;
    /**
     * End value of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    end: number | Date;
    /**
     * Size of the strip line, when it starts from the origin.
     * @default null
     * @aspDefaultValueIgnore
     */
    size: number;
    /**
     * Color of the strip line.
     * @default '#808080'
     */
    color: string;
    /**
     * Dash Array of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    dashArray: string;
    /**
     * Size type of the strip line
     * @default Auto
     */
    sizeType: SizeType;
    /**
     * isRepeat value of the strip line.
     * @default false
     * @aspDefaultValueIgnore
     */
    isRepeat: boolean;
    /**
     * repeatEvery value of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    repeatEvery: number | Date;
    /**
     * repeatUntil value of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    repeatUntil: number | Date;
    /**
     * isSegmented value of the strip line
     * @default false
     * @aspDefaultValueIgnore
     */
    isSegmented: boolean;
    /**
     * segmentStart value of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    segmentStart: number | Date;
    /**
     * segmentEnd value of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    segmentEnd: number | Date;
    /**
     * segmentAxisName of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    segmentAxisName: string;
    /**
     * Border of the strip line.
     */
    border: BorderModel;
    /**
     * Strip line text.
     * @default ''
     */
    text: string;
    /**
     * The angle to which the strip line text gets rotated.
     * @default null
     * @aspDefaultValueIgnore
     */
    rotation: number;
    /**
     * Defines the position of the strip line text horizontally. They are,
     * * Start: Places the strip line text at the start.
     * * Middle: Places the strip line text in the middle.
     * * End: Places the strip line text at the end.
     * @default 'Middle'
     */
    horizontalAlignment: Anchor;
    /**
     * Defines the position of the strip line text vertically. They are,
     * * Start: Places the strip line text at the start.
     * * Middle: Places the strip line text in the middle.
     * * End: Places the strip line text at the end.
     * @default 'Middle'
     */
    verticalAlignment: Anchor;
    /**
     * Options to customize the strip line text.
     */
    textStyle: FontModel;
    /**
     * Specifies the order of the strip line. They are,
     * * Behind: Places the strip line behind the series elements.
     * * Over: Places the strip line over the series elements.
     * @default 'Behind'
     */
    zIndex: ZIndex;
    /**
     * Strip line Opacity
     * @default 1
     */
    opacity: number;
}
/**
 * MultiLevelLabels properties
 */
export  class MultiLevelLabels extends base.ChildProperty<MultiLevelLabels[]> {
    /**
     * Defines the position of the multi level labels. They are,
     * * Near: Places the multi level labels at Near.
     * * Center: Places the multi level labels at Center.
     * * Far: Places the multi level labels at Far.
     * @default 'Center'
     */
    alignment: Alignment;
    /**
     * Defines the textOverFlow for multi level labels. They are,
     * * Trim: Trim textOverflow for multi level labels.
     * * Wrap: Wrap textOverflow for multi level labels.
     * * none: None textOverflow for multi level labels.
     * @default 'Wrap'
     */
    overflow: TextOverflow;
    /**
     * Options to customize the multi level labels.
     */
    textStyle: FontModel;
    /**
     * Border of the multi level labels.
     */
    border: LabelBorderModel;
    /**
     * multi level categories for multi level labels.
     */
    categories: MultiLevelCategoriesModel[];
}
/**
 * Specifies range for scrollbarSettings property
 * @public
 */
export  class ScrollbarSettingsRange extends base.ChildProperty<ScrollbarSettingsRange> {
    /**
     * Specifies the minimum range of an scrollbar.
     * @default null
     */
    minimum: Date | string | number;
    /**
     * Specifies the maximum range of an scrollbar.
     * @default null
     */
    maximum: Date | string | number;
}
/**
 * Scrollbar Settings Properties for Lazy Loading
 */
export  class ScrollbarSettings extends base.ChildProperty<ScrollbarSettings> {
    /**
     * Enables the scrollbar for lazy loading.
     * @default false
     */
    enable: boolean;
    /**
     * Defines the length of the points for numeric and logarithmic values.
     * @default null
     */
    pointsLength: number;
    /**
     * Specifies the range for date time values alone.
     */
    range: ScrollbarSettingsRangeModel;
}
//node_modules/@syncfusion/ej2-charts/src/chart/model/chart-interface.d.ts
export interface IChartEventArgs {
    /** Defines the name of the event */
    name: string;
    /** Defines the event cancel status */
    cancel: boolean;
}
export interface IAnimationCompleteEventArgs extends IChartEventArgs {
    /** Defines the current animation series */
    series: Series;
}
export interface IAxisMultiLabelRenderEventArgs extends IChartEventArgs {
    /** Defines the current axis */
    axis: Axis;
    /** Defines axis current label text */
    text: string;
    /** Defines font style for multi labels */
    textStyle: FontModel;
    /** Defines text alignment for multi labels */
    alignment: Alignment;
    /** Defines custom objects for multi labels */
    customAttributes: object;
}
export interface IMultiLevelLabelClickEventArgs extends IChartEventArgs {
    /** Defines the current axis */
    axis: Axis;
    /** Defines label current label text */
    text: string;
    level: number;
    start: number | Date | string;
    end: number | Date | string;
    /** Defines custom objects for multi labels */
    customAttributes: object;
}
export interface IPointEventArgs extends IChartEventArgs {
    /** Defines the current series */
    series: SeriesModel;
    /** Defines the current point */
    point: Points;
    /** Defines the point index */
    pointIndex: number;
    /** Defines the series index */
    seriesIndex: number;
    /** Defines the current chart instance */
    chart: Chart;
    /** Defines current mouse x location */
    x: number;
    /** Defines current mouse y location */
    y: number;
}
/**
 * Defines the scroll events
 */
export interface IScrollEventArgs {
    /** Defines the name of the event */
    name?: string;
    /** Defines the current Zoom Position */
    zoomPosition?: number;
    /** Defines the current Zoom Factor */
    zoomFactor?: number;
    /** Defines the current range */
    range?: VisibleRangeModel;
    /** Defines the previous Zoom Position */
    previousZoomPosition?: number;
    /** Defines the previous Zoom Factor */
    previousZoomFactor?: number;
    /** Defines the previous range */
    previousRange?: VisibleRangeModel;
    /** Defines the current scroll axis */
    axis?: Axis;
    /** Defines axis previous range */
    previousAxisRange?: ScrollbarSettingsRangeModel;
    /** Defines axis current range */
    currentRange?: ScrollbarSettingsRangeModel;
}
export interface IZoomCompleteEventArgs extends IChartEventArgs {
    /** Defines the zoomed axis */
    axis: AxisModel;
    /** Defines the previous zoom factor */
    previousZoomFactor: number;
    /** Defines the previous zoom position */
    previousZoomPosition: number;
    /** Defines the current zoom factor */
    currentZoomFactor: number;
    /** Defines the current zoom position */
    currentZoomPosition: number;
}
export interface ITooltipRenderEventArgs extends IChartEventArgs {
    /** Defines tooltip text collections */
    text?: string;
    /** Defines tooltip text style */
    textStyle?: FontModel;
    /** Defines current tooltip series */
    series: Series | AccumulationSeries;
    /** Defines current tooltip point */
    point: Points | AccPoints;
    /** Defines the header text for the tooltip */
    headerText?: string;
    /** point informations */
    data?: IPointInformation;
}
export interface IPointInformation {
    /** point xValue */
    pointX: object;
    /** point yValue */
    pointY: object;
    /** point index */
    pointIndex: number;
    /** series index */
    seriesIndex: number;
    /** series name */
    seriesName: string;
    /** point text */
    pointText: string;
}
export interface IAxisLabelRenderEventArgs extends IChartEventArgs {
    /** Defines the current axis */
    axis: Axis;
    /** Defines axis current label text */
    text: string;
    /** Defines axis current label value */
    value: number;
    /** Defines axis current label font style */
    labelStyle: FontModel;
}
export interface ILegendRenderEventArgs extends IChartEventArgs {
    /** Defines the current legend text */
    text: string;
    /** Defines the current legend fill color */
    fill: string;
    /** Defines the current legend shape */
    shape: LegendShape;
    /** Defines the current legend marker shape */
    markerShape?: ChartShape;
}
export interface ILegendClickEventArgs extends IChartEventArgs {
    /** Defines the chart when legendClick */
    chart: Chart;
    /** Defines the current legend shape */
    legendShape: LegendShape;
    /** Defines the current series */
    series: Series;
    /** Defines the current legend text */
    legendText: string;
}
export interface ITextRenderEventArgs extends IChartEventArgs {
    /** Defines the current series of the label */
    series: SeriesModel;
    /** Defines the current point of the label */
    point: Points;
    /** Defines the current text */
    text: string;
    /** Defines the current label fill color */
    color: string;
    /** Defines the current label border */
    border: BorderModel;
    /** Defines the current label template */
    template: string;
    /** Defines the current font */
    font: FontModel;
}
export interface IAnnotationRenderEventArgs extends IChartEventArgs {
    /** Defines the current annotation content */
    content: HTMLElement;
    /** Defines the current annotation location */
    location: ChartLocation;
}
export interface IPointRenderEventArgs extends IChartEventArgs {
    /** Defines the current series of the point */
    series: Series;
    /** Defines the current point */
    point: Points;
    /** Defines the current point fill color */
    fill: string;
    /** Defines the current point border */
    border: BorderModel;
    /** Defines the current point height */
    height?: number;
    /** Defines the current point width */
    width?: number;
    /** Defines the current point marker shape */
    shape?: ChartShape;
}
export interface ISeriesRenderEventArgs {
    /** Defines the current series */
    series: Series;
    /** Defines the current series data object */
    data: Object;
    /** Defines name of the event */
    name: string;
    /** Defines the current series fill */
    fill: string;
}
export interface IAxisRangeCalculatedEventArgs extends IChartEventArgs {
    /** Defines the current axis */
    axis: Axis;
    /** Defines axis current range */
    minimum: number;
    /** Defines axis current range */
    maximum: number;
    /** Defines axis current interval */
    interval: number;
}
export interface IMouseEventArgs extends IChartEventArgs {
    /** Defines current mouse event target id */
    target: string;
    /** Defines current mouse x location */
    x: number;
    /** Defines current mouse y location */
    y: number;
}
export interface IDragCompleteEventArgs extends IChartEventArgs {
    /** Defines current selected Data X, Y values */
    selectedDataValues: {
        x: string | number | Date;
        y: number;
    }[][];
}
export interface ISelectionCompleteEventArgs extends IChartEventArgs {
    /** Defines current selected Data X, Y values */
    selectedDataValues: {
        x?: string | number | Date;
        y?: number;
        seriesIndex?: number;
        pointIndex?: number;
    }[];
}
export interface ILoadedEventArgs extends IChartEventArgs {
    /** Defines the current chart instance */
    chart: Chart;
}
export interface IPrintEventArgs extends IChartEventArgs {
    htmlContent: Element;
}
/** @private */
export interface IBoxPlotQuartile {
    minimum: number;
    maximum: number;
    outliers: number[];
    upperQuartile: number;
    lowerQuartile: number;
    average: number;
    median: number;
}
/** @private */
/**
 * Specifies the Theme style for chart and accumulation.
 */
export interface IThemeStyle {
    axisLabel: string;
    axisTitle: string;
    axisLine: string;
    majorGridLine: string;
    minorGridLine: string;
    majorTickLine: string;
    minorTickLine: string;
    chartTitle: string;
    legendLabel: string;
    background: string;
    areaBorder: string;
    errorBar: string;
    crosshairLine: string;
    crosshairFill: string;
    crosshairLabel: string;
    tooltipFill: string;
    tooltipBoldLabel: string;
    tooltipLightLabel: string;
    tooltipHeaderLine: string;
    markerShadow: string;
    selectionRectFill: string;
    selectionRectStroke: string;
    selectionCircleStroke: string;
}
export interface IRangeSelectorRenderEventArgs extends IChartEventArgs {
    /** Defines selector collections */
    selector: navigations.ItemModel[];
    /** enable custom format for calendar */
    enableCustomFormat: boolean;
    /** content fro calendar format */
    content: string;
}
/** @private */
export interface ITouches {
    pageX?: number;
    pageY?: number;
    pointerId?: number;
}
/** @private */
export interface IZoomAxisRange {
    actualMin?: number;
    actualDelta?: number;
    min?: number;
    delta?: number;
}
export interface IResizeEventArgs {
    /** Defines the name of the Event */
    name: string;
    /** Defines the previous size of the accumulation chart */
    previousSize: svgBase.Size;
    /** Defines the current size of the accumulation chart */
    currentSize: svgBase.Size;
    /** Defines the accumulation chart instance */
    chart: Chart | AccumulationChart | StockChart;
}
/**
 * Interface for point drag and drop
 */
export interface IDataEditingEventArgs {
    /**
     * current series index
     */
    seriesIndex: number;
    /**
     * Current point index
     */
    pointIndex: number;
    /**
     * current point old value
     */
    oldValue: number;
    /**
     * current point new value
     */
    newValue: number;
    /**
     * current series
     */
    series: Series;
    /**
     * current point
     */
    point: Points;
}
export interface IChartTooltipTemplate {
    /** point x */
    x?: object;
    /** point y */
    y?: number;
    /** point text */
    text?: string;
    /** point open value */
    open?: number;
    /** point close value */
    close?: number;
    /** point high value */
    high?: number;
    /** point low value */
    low?: number;
    /** point volume value */
    volume?: number;
}
//node_modules/@syncfusion/ej2-charts/src/chart/print-export/export.d.ts
/**
 * `ExportModule` module is used to print and export the rendered chart.
 */
export  class Export {
    private chart;
    /**
     * Constructor for export module.
     * @private
     */
    constructor(chart: Chart);
    /**
     * Handles the export method for chart control.
     * @param type
     * @param fileName
     */
    export(type: ExportType, fileName: string, orientation?: pdfExport.PdfPageOrientation, controls?: (Chart | AccumulationChart | RangeNavigator | StockChart)[], width?: number, height?: number, isVertical?: boolean): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the chart.
     * @return {void}
     * @private
     */
    destroy(chart: Chart | AccumulationChart | RangeNavigator): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/area-series.d.ts
/**
 * `AreaSeries` module is used to render the area series.
 */
export  class AreaSeries extends MultiColoredSeries {
    /**
     * Render Area series.
     * @return {void}
     * @private
     */
    render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
    /**
     * To destroy the area series.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
    /**
     * Get module name
     */
    protected getModuleName(): string;
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/bar-series.d.ts
/**
 * `BarSeries` module is used to render the bar series.
 */
export  class BarSeries extends ColumnBase {
    /**
     * Render Bar series.
     * @return {void}
     * @private
     */
    render(series: Series): void;
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
    /**
     * To destroy the bar series.
     * @return {void}
     * @private
     */
    protected destroy(chart: Chart): void;
    /**
     * Get module name
     */
    protected getModuleName(): string;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/box-and-whisker-series.d.ts
/**
 * `BoxAndWhiskerSeries` module is used to render the box and whisker series.
 */
export  class BoxAndWhiskerSeries extends ColumnBase {
    /**
     * Render BoxAndWhisker series.
     * @return {void}
     * @private
     */
    render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
    /**
     * update the tip region fo box plot
     * @param series
     * @param point
     * @param sideBySideInfo
     */
    private updateTipRegion;
    /**
     * Update tip size to tip regions
     * @param series
     * @param point
     * @param region
     * @param isInverted
     */
    private updateTipSize;
    /**
     * Calculation for path direction performed here
     * @param point
     * @param series
     * @param median
     * @param average
     */
    getPathString(point: Points, series: Series, median: ChartLocation, average: ChartLocation): string;
    /**
     * Rendering for box and whisker append here.
     * @param series
     * @param point
     * @param rect
     * @param argsData
     * @param direction
     */
    renderBoxAndWhisker(series: Series, point: Points, rect: svgBase.Rect, argsData: IPointRenderEventArgs, direction: string, median: number): void;
    /**
     * To find the box plot values
     * @param yValues
     * @param point
     * @param mode
     */
    findBoxPlotValues(yValues: number[], point: Points, mode: BoxPlotMode): void;
    /**
     * to find the exclusive quartile values
     * @param yValues
     * @param count
     * @param percentile
     */
    private getExclusiveQuartileValue;
    /**
     * to find the inclusive quartile values
     * @param yValues
     * @param count
     * @param percentile
     */
    private getInclusiveQuartileValue;
    /**
     * To find the quartile values
     * @param yValues
     * @param count
     * @param lowerQuartile
     * @param upperQuartile
     */
    private getQuartileValues;
    /**
     * To find the min, max and outlier values
     * @param yValues
     * @param lowerQuartile
     * @param upperQuartile
     * @param minimum
     * @param maximum
     * @param outliers
     */
    private getMinMaxOutlier;
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the candle series.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/bubble-series.d.ts
/**
 * `BubbleSeries` module is used to render the bubble series.
 */
export  class BubbleSeries {
    /**
     * Render the Bubble series.
     * @return {void}
     * @private
     */
    render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
    /**
     * To destroy the Bubble.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/candle-series.d.ts
/**
 * `CandleSeries` module is used to render the candle series.
 */
export  class CandleSeries extends ColumnBase {
    /**
     * Render Candle series.
     * @return {void}
     * @private
     */
    render(series: Series): void;
    /**
     * Trigger point rendering event
     */
    protected triggerPointRenderEvent(series: Series, point: Points): IPointRenderEventArgs;
    /**
     * Find the color of the candle
     * @param series
     * @private
     */
    private getCandleColor;
    /**
     * Finds the path of the candle shape
     * @param Series
     * @private
     */
    getPathString(topRect: svgBase.Rect, midRect: svgBase.Rect, series: Series): string;
    /**
     * Draws the candle shape
     * @param series
     * @private
     */
    drawCandle(series: Series, point: Points, rect: svgBase.Rect, argsData: IPointRenderEventArgs, direction: string): void;
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the candle series.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/chart-series-model.d.ts
/**
 * Interface for a class DataLabelSettings
 */
export interface DataLabelSettingsModel {
    /**
     * If set true, data label for series renders.
     * @default false
     */
    visible?: boolean;
    /**
     * The DataSource field that contains the data label value.
     * @default null
     */
    name?: string;
    /**
     * The background color of the data label accepts value in hex and rgba as a valid CSS color string.
     * @default 'transparent'
     */
    fill?: string;
    /**
     * The opacity for the background.
     * @default 1
     */
    opacity?: number;
    /**
     * Specifies angle for data label.
     * @default 0
     */
    angle?: number;
    /**
     * Enables rotation for data label.
     * @default false
     */
    enableRotation?: boolean;
    /**
     * Specifies the position of the data label. They are,
     * * Outer: Positions the label outside the point.
     * * top: Positions the label on top of the point.
     * * Bottom: Positions the label at the bottom of the point.
     * * Middle: Positions the label to the middle of the point.
     * * Auto: Positions the label based on series.
     * @default 'Auto'
     */
    position?: LabelPosition;
    /**
     * The roundedCornerX for the data label. It requires `border` values not to be null.
     * @default 5
     */
    rx?: number;
    /**
     * The roundedCornerY for the data label. It requires `border` values not to be null.
     * @default 5
     */
    ry?: number;
    /**
     * Specifies the alignment for data Label. They are,
     * * Near: Aligns the label to the left of the point.
     * * Center: Aligns the label to the center of the point.
     * * Far: Aligns the label to the right of the point.
     * @default 'Center'
     */
    alignment?: Alignment;
    /**
     * Option for customizing the border lines.
     */
    border?: BorderModel;
    /**
     * Margin configuration for the data label.
     */
    margin?: MarginModel;
    /**
     * Option for customizing the data label text.
     */
    font?: FontModel;
    /**
     * Custom template to show the data label. Use ${point.x} and ${point.y} as a placeholder
     * text to display the corresponding data point.
     * @default null
     */
    template?: string;
}
/**
 * Interface for a class MarkerSettings
 */
export interface MarkerSettingsModel {
    /**
     * If set to true the marker for series is rendered. This is applicable only for line and area type series.
     * @default false
     */
    visible?: boolean;
    /**
     * The different shape of a marker:
     * * Circle
     * * Rectangle
     * * Triangle
     * * Diamond
     * * HorizontalLine
     * * VerticalLine
     * * Pentagon
     * * InvertedTriangle
     * * Image
     * @default 'Circle'
     */
    shape?: ChartShape;
    /**
     * The URL for the Image that is to be displayed as a marker.  It requires marker `shape` value to be an `Image`.
     * @default ''
     */
    imageUrl?: string;
    /**
     * The height of the marker in pixels.
     * @default 5
     */
    height?: number;
    /**
     * The width of the marker in pixels.
     * @default 5
     */
    width?: number;
    /**
     * Options for customizing the border of a marker.
     */
    border?: BorderModel;
    /**
     * Options for customizing the marker position.
     */
    offset?: OffsetModel;
    /**
     *  The fill color of the marker that accepts value in hex and rgba as a valid CSS color string. By default, it will take series' color.
     * @default null
     */
    fill?: string;
    /**
     * The opacity of the marker.
     * @default 1
     */
    opacity?: number;
    /**
     * The data label for the series.
     */
    dataLabel?: DataLabelSettingsModel;
}
/**
 * Interface for a class Points
 */
export interface PointsModel {
}
/**
 * Interface for a class Trendline
 */
export interface TrendlineModel {
    /**
     * Defines the name of trendline
     * @default ''
     */
    name?: string;
    /**
     * Defines the type of the trendline
     * @default 'Linear'
     */
    type?: TrendlineTypes;
    /**
     * Defines the period, the price changes over which will be considered to predict moving average trend line
     * @default 2
     */
    period?: number;
    /**
     * Defines the polynomial order of the polynomial trendline
     * @default 2
     */
    polynomialOrder?: number;
    /**
     * Defines the period, by which the trend has to backward forecast
     * @default 0
     */
    backwardForecast?: number;
    /**
     * Defines the period, by which the trend has to forward forecast
     * @default 0
     */
    forwardForecast?: number;
    /**
     * Options to customize the animation for trendlines
     */
    animation?: AnimationModel;
    /**
     * Options to customize the marker for trendlines
     */
    marker?: MarkerSettingsModel;
    /**
     * Enables/disables tooltip for trendlines
     * @default true
     */
    enableTooltip?: boolean;
    /**
     * Defines the intercept of the trendline
     * @default null
     * @aspDefaultValueIgnore
     */
    intercept?: number;
    /**
     * Defines the fill color of trendline
     * @default ''
     */
    fill?: string;
    /**
     * Defines the width of the trendline
     * @default 1
     */
    width?: number;
    /**
     * Sets the legend shape of the trendline
     * @default 'SeriesType'
     */
    legendShape?: LegendShape;
}
/**
 * Interface for a class ErrorBarCapSettings
 */
export interface ErrorBarCapSettingsModel {
    /**
     * The width of the error bar in pixels.
     * @default 1
     */
    width?: number;
    /**
     * The length of the error bar in pixels.
     * @default 10
     */
    length?: number;
    /**
     *  The stroke color of the cap, which accepts value in hex, rgba as a valid CSS color string.
     * @default null
     */
    color?: string;
    /**
     * The opacity of the cap.
     * @default 1
     */
    opacity?: number;
}
/**
 * Interface for a class ChartSegment
 */
export interface ChartSegmentModel {
    /**
     * Defines the starting point of region.
     * @default null
     */
    value?: Object;
    /**
     * Defines the color of a region.
     * @default null
     */
    color?: string;
    /**
     * Defines the pattern of dashes and gaps to stroke.
     * @default '0'
     */
    dashArray?: string;
}
/**
 * Interface for a class ErrorBarSettings
 */
export interface ErrorBarSettingsModel {
    /**
     * If set true, error bar for data gets rendered.
     * @default false
     */
    visible?: boolean;
    /**
     * The type of the error bar . They are
     * * Fixed -  Renders a fixed type error bar.
     * * Percentage - Renders a percentage type error bar.
     * * StandardDeviation - Renders a standard deviation type error bar.
     * * StandardError -Renders a standard error type error bar.
     * * Custom -Renders a custom type error bar.
     * @default 'Fixed'
     */
    type?: ErrorBarType;
    /**
     * The direction of the error bar . They are
     * * both -  Renders both direction of error bar.
     * * minus - Renders minus direction of error bar.
     * * plus - Renders plus direction error bar.
     * @default 'Both'
     */
    direction?: ErrorBarDirection;
    /**
     * The mode of the error bar . They are
     * * Vertical -  Renders a vertical error bar.
     * * Horizontal - Renders a horizontal error bar.
     * * Both - Renders both side error bar.
     * @default 'Vertical'
     */
    mode?: ErrorBarMode;
    /**
     *  The color for stroke of the error bar, which accepts value in hex, rgba as a valid CSS color string.
     * @default null
     */
    color?: string;
    /**
     * The vertical error of the error bar.
     * @default 1
     */
    verticalError?: number;
    /**
     * The stroke width of the error bar..
     * @default 1
     */
    width?: number;
    /**
     * The horizontal error of the error bar.
     * @default 1
     */
    horizontalError?: number;
    /**
     * The vertical positive error of the error bar.
     * @default 3
     */
    verticalPositiveError?: number;
    /**
     * The vertical negative error of the error bar.
     * @default 3
     */
    verticalNegativeError?: number;
    /**
     * The horizontal positive error of the error bar.
     * @default 1
     */
    horizontalPositiveError?: number;
    /**
     * The horizontal negative error of the error bar.
     * @default 1
     */
    horizontalNegativeError?: number;
    /**
     * Options for customizing the cap of the error bar.
     */
    errorBarCap?: ErrorBarCapSettingsModel;
}
/**
 * Interface for a class SeriesBase
 */
export interface SeriesBaseModel {
    /**
     * The DataSource field that contains the x value.
     * It is applicable for series and technical indicators
     * @default ''
     */
    xName?: string;
    /**
     * The DataSource field that contains the high value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    high?: string;
    /**
     * The DataSource field that contains the low value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    low?: string;
    /**
     * The DataSource field that contains the open value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    open?: string;
    /**
     * The DataSource field that contains the close value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    close?: string;
    /**
     * Defines the data source field that contains the volume value in candle charts
     * It is applicable for financial series and technical indicators
     * @default ''
     */
    volume?: string;
    /**
     * The DataSource field that contains the color value of point
     * It is applicable for series
     * @default ''
     */
    pointColorMapping?: string;
    /**
     * The name of the horizontal axis associated with the series. It requires `axes` of the chart.
     * It is applicable for series and technical indicators
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let chart$: Chart = new Chart({
     * ...
     *     columns: [{ width: '50%' },
     *               { width: '50%' }],
     *     axes: [{
     *                name: 'xAxis 1',
     *                columnIndex: 1,
     *            }],
     *     series: [{
     *                dataSource: data,
     *                xName: 'x', yName: 'y',
     *                xAxisName: 'xAxis 1',
     *     }],
     * });
     * chart.appendTo('#Chart');
     * ```
     * @default null
     */
    xAxisName?: string;
    /**
     * The name of the vertical axis associated with the series. It requires `axes` of the chart.
     * It is applicable for series and technical indicators
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let chart$: Chart = new Chart({
     * ...
     *     rows: [{ height: '50%' },
     *            { height: '50%' }],
     *     axes: [{
     *                name: 'yAxis 1',
     *                rowIndex: 1,
     *            }],
     *     series: [{
     *                dataSource: data,
     *                xName: 'x', yName: 'y',
     *                yAxisName: 'yAxis 1'
     *     }],
     * });
     * chart.appendTo('#Chart');
     * ```
     * @default null
     */
    yAxisName?: string;
    /**
     * Options to customizing animation for the series.
     */
    animation?: AnimationModel;
    /**
     * The fill color for the series that accepts value in hex and rgba as a valid CSS color string.
     * It also represents the color of the signal lines in technical indicators.
     * For technical indicators, the default value is 'blue' and for series, it has null.
     * @default null
     */
    fill?: string;
    /**
     * The stroke width for the series that is applicable only for `Line` type series.
     * It also represents the stroke width of the signal lines in technical indicators.
     * @default 1
     */
    width?: number;
    /**
     * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.
     * @default '0'
     */
    dashArray?: string;
    /**
     * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of data.DataManager.
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let dataManager$: data.DataManager = new data.DataManager({
     *         url: 'http://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/'
     * });
     * let query$: data.Query = new data.Query().take(50).where('Estimate', 'greaterThan', 0, false);
     * let chart$: Chart = new Chart({
     * ...
     *     series: [{
     *        dataSource: dataManager,
     *        xName: 'Id',
     *        yName: 'Estimate',
     *        query: query
     *    }],
     * ...
     * });
     * chart.appendTo('#Chart');
     * ```
     * @default ''
     */
    dataSource?: Object | data.DataManager;
    /**
     * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.data.DataManager`.
     * @default ''
     */
    query?: data.Query;
    /**
     * Defines the collection of regions that helps to differentiate a line series.
     */
    segments?: ChartSegmentModel[];
    /**
     * Defines the axis, based on which the line series will be split.
     */
    segmentAxis?: Segment;
    /**
     * This property used to improve chart performance via data mapping for series dataSource.
     * @default false
     */
    enableComplexProperty?: boolean;
}
/**
 * Interface for a class Series
 */
export interface SeriesModel extends SeriesBaseModel{
    /**
     * The name of the series visible in legend.
     * @default ''
     */
    name?: string;
    /**
     * The DataSource field that contains the y value.
     * @default ''
     */
    yName?: string;
    /**
     * Type of series to be drawn in radar or polar series. They are
     *  'Line'
     *  'Column'
     *  'Area'
     *  'Scatter'
     *  'Spline'
     *  'StackingColumn'
     *  'StackingArea'
     *  'RangeColumn'
     *  'SplineArea'
     * @default 'Line'
     */
    drawType?: ChartDrawType;
    /**
     * Specifies whether to join start and end point of a line/area series used in polar/radar chart to form a closed path.
     * @default true
     */
    isClosed?: boolean;
    /**
     * This property is used in financial charts to visualize the price movements in stock.
     * It defines the color of the candle/point, when the opening price is less than the closing price.
     * @default '#2ecd71'
     */
    bearFillColor?: string;
    /**
     * This property is used in financial charts to visualize the price movements in stock.
     * It defines the color of the candle/point, when the opening price is higher than the closing price.
     * @default '#e74c3d'
     */
    bullFillColor?: string;
    /**
     * This property is applicable for candle series.
     * It enables/disables to visually compare the current values with the previous values in stock.
     * @default false
     */
    enableSolidCandles?: boolean;
    /**
     * The DataSource field that contains the size value of y
     * @default ''
     */
    size?: string;
    /**
     * The bin interval of each histogram points.
     * @default null
     * @aspDefaultValueIgnore
     */
    binInterval?: number;
    /**
     * The normal distribution of histogram series.
     * @default false
     */
    showNormalDistribution?: boolean;
    /**
     * This property allows grouping series in `stacked column / bar` charts.
     * Any string value can be provided to the stackingGroup property.
     * If any two or above series have the same value, those series will be grouped together.
     * @default ''
     */
    stackingGroup?: string;
    /**
     * Specifies the visibility of series.
     * @default true
     */
    visible?: boolean;
    /**
     * Options to customizing the border of the series. This is applicable only for `Column` and `Bar` type series.
     */
    border?: BorderModel;
    /**
     * The opacity of the series.
     * @default 1
     */
    opacity?: number;
    /**
     * The z order of the series.
     * @default 0
     */
    zOrder?: number;
    /**
     * The type of the series are
     * * Line
     * * Column
     * * Area
     * * Bar
     * * Histogram
     * * StackingColumn
     * * StackingArea
     * * StackingBar
     * * StepLine
     * * StepArea
     * * Scatter
     * * Spline
     * * StackingColumn100
     * * StackingBar100
     * * StackingArea100
     * * RangeColumn
     * * Hilo
     * * HiloOpenClose
     * * Waterfall
     * * RangeArea
     * * Bubble
     * * Candle
     * * Polar
     * * Radar
     * * BoxAndWhisker
     * * Pareto
     * @default 'Line'
     */
    type?: ChartSeriesType;
    /**
     * Options for displaying and customizing error bar for individual point in a series.
     */
    errorBar?: ErrorBarSettingsModel;
    /**
     * Options for displaying and customizing markers for individual points in a series.
     */
    marker?: MarkerSettingsModel;
    /**
     * Options to customize the drag settings for series
     */
    dragSettings?: DragSettingsModel;
    /**
     * Defines the collection of trendlines that are used to predict the trend
     */
    trendlines?: TrendlineModel[];
    /**
     * If set true, the Tooltip for series will be visible.
     * @default true
     */
    enableTooltip?: boolean;
    /**
     * user can format now each series tooltip format separately.
     * @default ''
     */
    tooltipFormat?: string;
    /**
     * The provided value will be considered as a Tooltip name 
     * @default ''
     */
    tooltipMappingName?: string;
    /**
     * The shape of the legend. Each series has its own legend shape. They are,
     * * Circle
     * * Rectangle
     * * Triangle
     * * Diamond
     * * Cross
     * * HorizontalLine
     * * VerticalLine
     * * Pentagon
     * * InvertedTriangle
     * * SeriesType
     * @default 'SeriesType'
     */
    legendShape?: LegendShape;
    /**
     * Custom style for the selected series or points.
     * @default null
     */
    selectionStyle?: string;
    /**
     * Minimum radius
     * @default 1
     */
    minRadius?: number;
    /**
     * Maximum radius
     * @default 3
     */
    maxRadius?: number;
    /**
     * Defines type of spline to be rendered.
     * @default 'Natural'
     */
    splineType?: SplineType;
    /**
     * It defines tension of cardinal spline types
     * @default 0.5
     */
    cardinalSplineTension?: number;
    /**
     * options to customize the empty points in series
     */
    emptyPointSettings?: EmptyPointSettingsModel;
    /**
     * If set true, the mean value for box and whisker will be visible.
     * @default true
     */
    showMean?: boolean;
    /**
     * The mode of the box and whisker char series. They are,
     * Exclusive
     * Inclusive
     * Normal
     * @default 'Normal'
     */
    boxPlotMode?: BoxPlotMode;
    /**
     * To render the column series points with particular column width. If the series type is histogram the
     * default value is 1 otherwise 0.7.
     * @default null
     * @aspDefaultValueIgnore
     */
    columnWidth?: number;
    /**
     * To render the column series points with particular column spacing. It takes value from 0 - 1.
     * @default 0
     */
    columnSpacing?: number;
    /**
     * Defines the visual representation of the negative changes in waterfall charts.
     * @default '#C64E4A'
     */
    negativeFillColor?: string;
    /**
     * Defines the visual representation of the summaries in waterfall charts.
     * @default '#4E81BC'
     */
    summaryFillColor?: string;
    /**
     * Defines the collection of indexes of the intermediate summary columns in waterfall charts.
     * @default []
     * @aspType int[]
     */
    intermediateSumIndexes?: number[];
    /**
     * Defines the collection of indexes of the overall summary columns in waterfall charts.
     * @default []
     * @aspType int[]
     */
    sumIndexes?: number[];
    /**
     * Defines the appearance of line connecting adjacent points in waterfall charts.
     */
    connector?: ConnectorModel;
    /**
     * To render the column series points with particular rounded corner.
     */
    cornerRadius?: CornerRadiusModel;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/chart-series.d.ts
/**
 * Configures the data label in the series.
 */
export  class DataLabelSettings extends base.ChildProperty<DataLabelSettings> {
    /**
     * If set true, data label for series renders.
     * @default false
     */
    visible: boolean;
    /**
     * The DataSource field that contains the data label value.
     * @default null
     */
    name: string;
    /**
     * The background color of the data label accepts value in hex and rgba as a valid CSS color string.
     * @default 'transparent'
     */
    fill: string;
    /**
     * The opacity for the background.
     * @default 1
     */
    opacity: number;
    /**
     * Specifies angle for data label.
     * @default 0
     */
    angle: number;
    /**
     * Enables rotation for data label.
     * @default false
     */
    enableRotation: boolean;
    /**
     * Specifies the position of the data label. They are,
     * * Outer: Positions the label outside the point.
     * * top: Positions the label on top of the point.
     * * Bottom: Positions the label at the bottom of the point.
     * * Middle: Positions the label to the middle of the point.
     * * Auto: Positions the label based on series.
     * @default 'Auto'
     */
    position: LabelPosition;
    /**
     * The roundedCornerX for the data label. It requires `border` values not to be null.
     * @default 5
     */
    rx: number;
    /**
     * The roundedCornerY for the data label. It requires `border` values not to be null.
     * @default 5
     */
    ry: number;
    /**
     * Specifies the alignment for data Label. They are,
     * * Near: Aligns the label to the left of the point.
     * * Center: Aligns the label to the center of the point.
     * * Far: Aligns the label to the right of the point.
     * @default 'Center'
     */
    alignment: Alignment;
    /**
     * Option for customizing the border lines.
     */
    border: BorderModel;
    /**
     * Margin configuration for the data label.
     */
    margin: MarginModel;
    /**
     * Option for customizing the data label text.
     */
    font: FontModel;
    /**
     * Custom template to show the data label. Use ${point.x} and ${point.y} as a placeholder
     * text to display the corresponding data point.
     * @default null
     */
    template: string;
}
/**
 *  Configures the marker in the series.
 */
export  class MarkerSettings extends base.ChildProperty<MarkerSettings> {
    /**
     * If set to true the marker for series is rendered. This is applicable only for line and area type series.
     * @default false
     */
    visible: boolean;
    /**
     * The different shape of a marker:
     * * Circle
     * * Rectangle
     * * Triangle
     * * Diamond
     * * HorizontalLine
     * * VerticalLine
     * * Pentagon
     * * InvertedTriangle
     * * Image
     * @default 'Circle'
     */
    shape: ChartShape;
    /**
     * The URL for the Image that is to be displayed as a marker.  It requires marker `shape` value to be an `Image`.
     * @default ''
     */
    imageUrl: string;
    /**
     * The height of the marker in pixels.
     * @default 5
     */
    height: number;
    /**
     * The width of the marker in pixels.
     * @default 5
     */
    width: number;
    /**
     * Options for customizing the border of a marker.
     */
    border: BorderModel;
    /**
     * Options for customizing the marker position.
     */
    offset: OffsetModel;
    /**
     *  The fill color of the marker that accepts value in hex and rgba as a valid CSS color string. By default, it will take series' color.
     * @default null
     */
    fill: string;
    /**
     * The opacity of the marker.
     * @default 1
     */
    opacity: number;
    /**
     * The data label for the series.
     */
    dataLabel: DataLabelSettingsModel;
}
/**
 * Points model for the series.
 * @public
 */
export  class Points {
    /** point x */
    x: Object;
    /** point y */
    y: Object;
    /** point visibility */
    visible: boolean;
    /** point text */
    text: string;
    /** point tooltip */
    tooltip: string;
    /** point color */
    color: string;
    /** point open value */
    open: Object;
    /** point close value */
    close: Object;
    /** point symbol location */
    symbolLocations: ChartLocation[];
    /** point x value */
    xValue: number;
    /** point y value */
    yValue: number;
    /** point index value */
    index: number;
    /** point region */
    regions: svgBase.Rect[];
    /** point percentage value */
    percentage: number;
    /** point high value */
    high: Object;
    /** point low value */
    low: Object;
    /** point volume value */
    volume: Object;
    /** point size value */
    size: Object;
    /** point empty checking */
    isEmpty: boolean;
    /** point region data */
    regionData: PolarArc;
    /** point minimum value */
    minimum: number;
    /** point maximum value */
    maximum: number;
    /** point upper quartile value */
    upperQuartile: number;
    /** point lower quartile value */
    lowerQuartile: number;
    /** point median value */
    median: number;
    /** point outliers value */
    outliers: number[];
    /** point average value */
    average: number;
    /** point error value */
    error: number;
    /** point interior value */
    interior: string;
    /** To know the point is selected */
    isSelect: boolean;
    /** point marker */
    marker: MarkerSettingsModel;
}
/**
 * Defines the behavior of the Trendlines
 */
export  class Trendline extends base.ChildProperty<Trendline> {
    /**
     * Defines the name of trendline
     * @default ''
     */
    name: string;
    /**
     * Defines the type of the trendline
     * @default 'Linear'
     */
    type: TrendlineTypes;
    /**
     * Defines the period, the price changes over which will be considered to predict moving average trend line
     * @default 2
     */
    period: number;
    /**
     * Defines the polynomial order of the polynomial trendline
     * @default 2
     */
    polynomialOrder: number;
    /**
     * Defines the period, by which the trend has to backward forecast
     * @default 0
     */
    backwardForecast: number;
    /**
     * Defines the period, by which the trend has to forward forecast
     * @default 0
     */
    forwardForecast: number;
    /**
     * Options to customize the animation for trendlines
     */
    animation: AnimationModel;
    /**
     * Options to customize the marker for trendlines
     */
    marker: MarkerSettingsModel;
    /**
     * Enables/disables tooltip for trendlines
     * @default true
     */
    enableTooltip: boolean;
    /**
     * Defines the intercept of the trendline
     * @default null
     * @aspDefaultValueIgnore
     */
    intercept: number;
    /**
     * Defines the fill color of trendline
     * @default ''
     */
    fill: string;
    /**
     * Defines the width of the trendline
     * @default 1
     */
    width: number;
    /**
     * Sets the legend shape of the trendline
     * @default 'SeriesType'
     */
    legendShape: LegendShape;
    /** @private */
    targetSeries: Series;
    /** @private */
    trendLineElement: Element;
    /** @private */
    points: Points[];
    /** @private */
    clipRectElement: Element;
    /** @private */
    clipRect: svgBase.Rect;
    /** @private */
    polynomialSlopes: number[];
    /** @private */
    sourceIndex: number;
    /** @private */
    index: number;
    /** @private */
    setDataSource(series: Series, chart: Chart): void;
}
/**
 * Configures Error bar in series.
 */
export  class ErrorBarCapSettings extends base.ChildProperty<ErrorBarCapSettings> {
    /**
     * The width of the error bar in pixels.
     * @default 1
     */
    width: number;
    /**
     * The length of the error bar in pixels.
     * @default 10
     */
    length: number;
    /**
     *  The stroke color of the cap, which accepts value in hex, rgba as a valid CSS color string.
     * @default null
     */
    color: string;
    /**
     * The opacity of the cap.
     * @default 1
     */
    opacity: number;
}
export  class ChartSegment extends base.ChildProperty<ChartSegment> {
    /**
     * Defines the starting point of region.
     * @default null
     */
    value: Object;
    /**
     * Defines the color of a region.
     * @default null
     */
    color: string;
    /**
     * Defines the pattern of dashes and gaps to stroke.
     * @default '0'
     */
    dashArray: string;
    /** @private */
    startValue: number;
    /** @private */
    endValue: number;
}
/**
 * Error bar settings
 * @public
 */
export  class ErrorBarSettings extends base.ChildProperty<ErrorBarSettings> {
    /**
     * If set true, error bar for data gets rendered.
     * @default false
     */
    visible: boolean;
    /**
     * The type of the error bar . They are
     * * Fixed -  Renders a fixed type error bar.
     * * Percentage - Renders a percentage type error bar.
     * * StandardDeviation - Renders a standard deviation type error bar.
     * * StandardError -Renders a standard error type error bar.
     * * Custom -Renders a custom type error bar.
     * @default 'Fixed'
     */
    type: ErrorBarType;
    /**
     * The direction of the error bar . They are
     * * both -  Renders both direction of error bar.
     * * minus - Renders minus direction of error bar.
     * * plus - Renders plus direction error bar.
     * @default 'Both'
     */
    direction: ErrorBarDirection;
    /**
     * The mode of the error bar . They are
     * * Vertical -  Renders a vertical error bar.
     * * Horizontal - Renders a horizontal error bar.
     * * Both - Renders both side error bar.
     * @default 'Vertical'
     */
    mode: ErrorBarMode;
    /**
     *  The color for stroke of the error bar, which accepts value in hex, rgba as a valid CSS color string.
     * @default null
     */
    color: string;
    /**
     * The vertical error of the error bar.
     * @default 1
     */
    verticalError: number;
    /**
     * The stroke width of the error bar..
     * @default 1
     */
    width: number;
    /**
     * The horizontal error of the error bar.
     * @default 1
     */
    horizontalError: number;
    /**
     * The vertical positive error of the error bar.
     * @default 3
     */
    verticalPositiveError: number;
    /**
     * The vertical negative error of the error bar.
     * @default 3
     */
    verticalNegativeError: number;
    /**
     * The horizontal positive error of the error bar.
     * @default 1
     */
    horizontalPositiveError: number;
    /**
     * The horizontal negative error of the error bar.
     * @default 1
     */
    horizontalNegativeError: number;
    /**
     * Options for customizing the cap of the error bar.
     */
    errorBarCap: ErrorBarCapSettingsModel;
}
/**
 * Defines the common behavior of Series and Technical Indicators
 */
export  class SeriesBase extends base.ChildProperty<SeriesBase> {
    /**
     * The DataSource field that contains the x value.
     * It is applicable for series and technical indicators
     * @default ''
     */
    xName: string;
    /**
     * The DataSource field that contains the high value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    high: string;
    /**
     * The DataSource field that contains the low value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    low: string;
    /**
     * The DataSource field that contains the open value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    open: string;
    /**
     * The DataSource field that contains the close value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    close: string;
    /**
     * Defines the data source field that contains the volume value in candle charts
     * It is applicable for financial series and technical indicators
     * @default ''
     */
    volume: string;
    /**
     * The DataSource field that contains the color value of point
     * It is applicable for series
     * @default ''
     */
    pointColorMapping: string;
    /**
     * The name of the horizontal axis associated with the series. It requires `axes` of the chart.
     * It is applicable for series and technical indicators
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let chart$: Chart = new Chart({
     * ...
     *     columns: [{ width: '50%' },
     *               { width: '50%' }],
     *     axes: [{
     *                name: 'xAxis 1',
     *                columnIndex: 1,
     *            }],
     *     series: [{
     *                dataSource: data,
     *                xName: 'x', yName: 'y',
     *                xAxisName: 'xAxis 1',
     *     }],
     * });
     * chart.appendTo('#Chart');
     * ```
     * @default null
     */
    xAxisName: string;
    /**
     * The name of the vertical axis associated with the series. It requires `axes` of the chart.
     * It is applicable for series and technical indicators
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let chart$: Chart = new Chart({
     * ...
     *     rows: [{ height: '50%' },
     *            { height: '50%' }],
     *     axes: [{
     *                name: 'yAxis 1',
     *                rowIndex: 1,
     *            }],
     *     series: [{
     *                dataSource: data,
     *                xName: 'x', yName: 'y',
     *                yAxisName: 'yAxis 1'
     *     }],
     * });
     * chart.appendTo('#Chart');
     * ```
     * @default null
     */
    yAxisName: string;
    /**
     * Options to customizing animation for the series.
     */
    animation: AnimationModel;
    /**
     * The fill color for the series that accepts value in hex and rgba as a valid CSS color string.
     * It also represents the color of the signal lines in technical indicators.
     * For technical indicators, the default value is 'blue' and for series, it has null.
     * @default null
     */
    fill: string;
    /**
     * The stroke width for the series that is applicable only for `Line` type series.
     * It also represents the stroke width of the signal lines in technical indicators.
     * @default 1
     */
    width: number;
    /**
     * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.
     * @default '0'
     */
    dashArray: string;
    /**
     * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of data.DataManager.
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let dataManager$: data.DataManager = new data.DataManager({
     *         url: 'http://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/'
     * });
     * let query$: data.Query = new data.Query().take(50).where('Estimate', 'greaterThan', 0, false);
     * let chart$: Chart = new Chart({
     * ...
     *     series: [{
     *        dataSource: dataManager,
     *        xName: 'Id',
     *        yName: 'Estimate',
     *        query: query
     *    }],
     * ...
     * });
     * chart.appendTo('#Chart');
     * ```
     * @default ''
     */
    dataSource: Object | data.DataManager;
    /**
     * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.data.DataManager`.
     * @default ''
     */
    query: data.Query;
    /**
     * Defines the collection of regions that helps to differentiate a line series.
     */
    segments: ChartSegmentModel[];
    /**
     * Defines the axis, based on which the line series will be split.
     */
    segmentAxis: Segment;
    /**
     * This property used to improve chart performance via data mapping for series dataSource.
     * @default false
     */
    enableComplexProperty: boolean;
    /**
     * Process data for the series.
     * @hidden
     */
    processJsonData(): void;
    private pushData;
    /** @private */
    protected dataPoint(i: number, textMappingName: string, xName: string): Points;
    private getObjectValue;
    /**
     * To set empty point value based on empty point mode
     * @private
     */
    setEmptyPoint(point: Points, i: number): void;
    private findVisibility;
    /**
     * To get Y min max for the provided point seriesType XY
     */
    private setXYMinMax;
    /**
     * To get Y min max for the provided point seriesType XY
     */
    private setHiloMinMax;
    /**
     * Finds the type of the series
     * @private
     */
    private getSeriesType;
    /** @private */
    protected pushCategoryData(point: Points, index: number, pointX: string): void;
    /**
     * To find average of given property
     */
    private getAverage;
    /**
     * To find the control points for spline.
     * @return {void}
     * @private
     */
    refreshDataManager(chart: Chart): void;
    private dataManagerSuccess;
    private refreshChart;
    /** @private */
    xMin: number;
    /** @private */
    xMax: number;
    /** @private */
    yMin: number;
    /** @private */
    yMax: number;
    /** @private */
    xAxis: Axis;
    /** @private */
    yAxis: Axis;
    /** @private */
    chart: Chart;
    /** @private */
    currentViewData: Object;
    /** @private */
    clipRect: svgBase.Rect;
    /** @private */
    xData: number[];
    /** @private */
    yData: number[];
    /** @private */
    index: number;
    /** @private */
    dataModule: Data;
    /** @private */
    points: Points[];
    /** @private */
    seriesType: SeriesValueType;
    /** @private */
    sizeMax: number;
    /** @private */
    private recordsCount;
}
/**
 * Configures the series in charts.
 * @public
 */
export  class Series extends SeriesBase {
    /**
     * The name of the series visible in legend.
     * @default ''
     */
    name: string;
    /**
     * The DataSource field that contains the y value.
     * @default ''
     */
    yName: string;
    /**
     * Type of series to be drawn in radar or polar series. They are
     *  'Line'
     *  'Column'
     *  'Area'
     *  'Scatter'
     *  'Spline'
     *  'StackingColumn'
     *  'StackingArea'
     *  'RangeColumn'
     *  'SplineArea'
     * @default 'Line'
     */
    drawType: ChartDrawType;
    /**
     * Specifies whether to join start and end point of a line/area series used in polar/radar chart to form a closed path.
     * @default true
     */
    isClosed: boolean;
    /**
     * This property is used in financial charts to visualize the price movements in stock.
     * It defines the color of the candle/point, when the opening price is less than the closing price.
     * @default '#2ecd71'
     */
    bearFillColor: string;
    /**
     * This property is used in financial charts to visualize the price movements in stock.
     * It defines the color of the candle/point, when the opening price is higher than the closing price.
     * @default '#e74c3d'
     */
    bullFillColor: string;
    /**
     * This property is applicable for candle series.
     * It enables/disables to visually compare the current values with the previous values in stock.
     * @default false
     */
    enableSolidCandles: boolean;
    /**
     * The DataSource field that contains the size value of y
     * @default ''
     */
    size: string;
    /**
     * The bin interval of each histogram points.
     * @default null
     * @aspDefaultValueIgnore
     */
    binInterval: number;
    /**
     * The normal distribution of histogram series.
     * @default false
     */
    showNormalDistribution: boolean;
    /**
     * This property allows grouping series in `stacked column / bar` charts.
     * Any string value can be provided to the stackingGroup property.
     * If any two or above series have the same value, those series will be grouped together.
     * @default ''
     */
    stackingGroup: string;
    /**
     * Specifies the visibility of series.
     * @default true
     */
    visible: boolean;
    /**
     * Options to customizing the border of the series. This is applicable only for `Column` and `Bar` type series.
     */
    border: BorderModel;
    /**
     * The opacity of the series.
     * @default 1
     */
    opacity: number;
    /**
     * The z order of the series.
     * @default 0
     */
    zOrder: number;
    /**
     * The type of the series are
     * * Line
     * * Column
     * * Area
     * * Bar
     * * Histogram
     * * StackingColumn
     * * StackingArea
     * * StackingBar
     * * StepLine
     * * StepArea
     * * Scatter
     * * Spline
     * * StackingColumn100
     * * StackingBar100
     * * StackingArea100
     * * RangeColumn
     * * Hilo
     * * HiloOpenClose
     * * Waterfall
     * * RangeArea
     * * Bubble
     * * Candle
     * * Polar
     * * Radar
     * * BoxAndWhisker
     * * Pareto
     * @default 'Line'
     */
    type: ChartSeriesType;
    /**
     * Options for displaying and customizing error bar for individual point in a series.
     */
    errorBar: ErrorBarSettingsModel;
    /**
     * Options for displaying and customizing markers for individual points in a series.
     */
    marker: MarkerSettingsModel;
    /**
     * Options to customize the drag settings for series
     */
    dragSettings: DragSettingsModel;
    /**
     * Defines the collection of trendlines that are used to predict the trend
     */
    trendlines: TrendlineModel[];
    /**
     * If set true, the Tooltip for series will be visible.
     * @default true
     */
    enableTooltip: boolean;
    /**
     * user can format now each series tooltip format separately.
     * @default ''
     */
    tooltipFormat: string;
    /**
     * The provided value will be considered as a Tooltip name
     * @default ''
     */
    tooltipMappingName: string;
    /**
     * The shape of the legend. Each series has its own legend shape. They are,
     * * Circle
     * * Rectangle
     * * Triangle
     * * Diamond
     * * Cross
     * * HorizontalLine
     * * VerticalLine
     * * Pentagon
     * * InvertedTriangle
     * * SeriesType
     * @default 'SeriesType'
     */
    legendShape: LegendShape;
    /**
     * Custom style for the selected series or points.
     * @default null
     */
    selectionStyle: string;
    /**
     * Minimum radius
     * @default 1
     */
    minRadius: number;
    /**
     * Maximum radius
     * @default 3
     */
    maxRadius: number;
    /**
     * Defines type of spline to be rendered.
     * @default 'Natural'
     */
    splineType: SplineType;
    /**
     * It defines tension of cardinal spline types
     * @default 0.5
     */
    cardinalSplineTension: number;
    /**
     * options to customize the empty points in series
     */
    emptyPointSettings: EmptyPointSettingsModel;
    /**
     * If set true, the mean value for box and whisker will be visible.
     * @default true
     */
    showMean: boolean;
    /**
     * The mode of the box and whisker char series. They are,
     * Exclusive
     * Inclusive
     * Normal
     * @default 'Normal'
     */
    boxPlotMode: BoxPlotMode;
    /**
     * To render the column series points with particular column width. If the series type is histogram the
     * default value is 1 otherwise 0.7.
     * @default null
     * @aspDefaultValueIgnore
     */
    columnWidth: number;
    /**
     * To render the column series points with particular column spacing. It takes value from 0 - 1.
     * @default 0
     */
    columnSpacing: number;
    /**
     * Defines the visual representation of the negative changes in waterfall charts.
     * @default '#C64E4A'
     */
    negativeFillColor: string;
    /**
     * Defines the visual representation of the summaries in waterfall charts.
     * @default '#4E81BC'
     */
    summaryFillColor: string;
    /**
     * Defines the collection of indexes of the intermediate summary columns in waterfall charts.
     * @default []
     * @aspType int[]
     */
    intermediateSumIndexes: number[];
    /**
     * Defines the collection of indexes of the overall summary columns in waterfall charts.
     * @default []
     * @aspType int[]
     */
    sumIndexes: number[];
    /**
     * Defines the appearance of line connecting adjacent points in waterfall charts.
     */
    connector: ConnectorModel;
    /**
     * To render the column series points with particular rounded corner.
     */
    cornerRadius: CornerRadiusModel;
    visibleSeriesCount: number;
    /** @private */
    position: number;
    /** @private */
    rectCount: number;
    /** @private */
    seriesElement: Element;
    /** @private */
    errorBarElement: Element;
    /** @private */
    symbolElement: Element;
    /** @private */
    shapeElement: Element;
    /** @private */
    textElement: Element;
    /** @private */
    pathElement: Element;
    /** @private */
    sourceIndex: number;
    /** @private */
    category: SeriesCategories;
    /** @private */
    isRectSeries: boolean;
    /** @private */
    clipRectElement: Element;
    /** @private */
    stackedValues: StackValues;
    /** @private */
    interior: string;
    /** @private */
    histogramValues: IHistogramValues;
    /** @private */
    drawPoints: ControlPoints[];
    /** @private */
    delayedAnimation: boolean;
    constructor(parent: any, propName: string, defaultValue: Object, isArray?: boolean);
    /**
     * Refresh the axis label.
     * @return {boolean}
     * @private
     */
    refreshAxisLabel(): void;
    /**
     * To get the series collection.
     * @return {void}
     * @private
     */
    findSeriesCollection(column: Column, row: Row, isStack: boolean): Series[];
    /**
     * To get the column type series.
     * @return {void}
     * @private
     */
    private rectSeriesInChart;
    /**
     * To calculate the stacked values.
     * @return {void}
     * @private
     */
    calculateStackedValue(isStacking100: boolean, chart: Chart): void;
    private calculateStackingValues;
    private findPercentageOfStacking;
    private findFrequencies;
    /** @private */
    renderSeries(chart: Chart): void;
    /**
     * To create seris element.
     * @return {void}
     * @private
     */
    createSeriesElements(chart: Chart): void;
    /**
     * To append the series.
     * @return {void}
     * @private
     */
    appendSeriesElement(element: Element, chart: Chart): void;
    /**
     * To perform animation for chart series.
     * @return {void}
     * @private
     */
    performAnimation(chart: Chart, type: string, errorBar: ErrorBarSettingsModel, marker: MarkerSettingsModel, dataLabel: DataLabelSettingsModel): void;
    /**
     * To set border color for empty point
     * @private
     */
    setPointColor(point: Points, color: string): string;
    /**
     * To set border color for empty point
     * @private
     */
    setBorderColor(point: Points, border: BorderModel): BorderModel;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/column-base.d.ts
/**
 * Column Series Base
 */
export  class ColumnBase {
    /**
     * To get the position of the column series.
     * @return {DoubleRange}
     * @private
     */
    protected getSideBySideInfo(series: Series): DoubleRange;
    /**
     * To get the rect values.
     * @return {svgBase.Rect}
     * @private
     */
    protected getRectangle(x1: number, y1: number, x2: number, y2: number, series: Series): svgBase.Rect;
    /**
     * To get the position of each series.
     * @return {void}
     * @private
     */
    private getSideBySidePositions;
    private findRectPosition;
    /**
     * Updates the symbollocation for points
     * @return void
     * @private
     */
    protected updateSymbolLocation(point: Points, rect: svgBase.Rect, series: Series): void;
    /**
     * Update the region for the point.
     * @return {void}
     * @private
     */
    protected updateXRegion(point: Points, rect: svgBase.Rect, series: Series): void;
    /**
     * Update the region for the point in bar series.
     * @return {void}
     * @private
     */
    protected updateYRegion(point: Points, rect: svgBase.Rect, series: Series): void;
    /**
     * To render the marker for the series.
     * @return {void}
     * @private
     */
    renderMarker(series: Series): void;
    /**
     * To trigger the point rendering event.
     * @return {void}
     * @private
     */
    protected triggerEvent(series: Series, point: Points, fill: string, border: BorderModel): IPointRenderEventArgs;
    /**
     * To draw the rectangle for points.
     * @return {void}
     * @private
     */
    protected drawRectangle(series: Series, point: Points, rect: svgBase.Rect, argsData: IPointRenderEventArgs): void;
    /**
     * To animate the series.
     * @return {void}
     * @private
     */
    animate(series: Series): void;
    /**
     * To animate the series.
     * @return {void}
     * @private
     */
    private animateRect;
    /**
     * To get rounded rect path direction
     */
    private calculateRoundedRectPath;
}
export interface RectPosition {
    position: number;
    rectCount: number;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/column-series.d.ts
/**
 * `ColumnSeries` Module used to render the column series.
 */
export  class ColumnSeries extends ColumnBase {
    /**
     * Render Column series.
     * @return {void}
     * @private
     */
    render(series: Series): void;
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the column series.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/data-label.d.ts
/**
 * `DataLabel` module is used to render data label for the data point.
 */
export  class DataLabel {
    private chart;
    private margin;
    private isShape;
    private locationX;
    private locationY;
    private fontBackground;
    private borderWidth;
    private markerHeight;
    private commonId;
    private yAxisInversed;
    private inverted;
    private errorHeight;
    private chartBackground;
    /**
     * Constructor for the data label module.
     * @private
     */
    constructor(chart: Chart);
    private initPrivateVariables;
    private calculateErrorHeight;
    private isRectSeries;
    /**
     * Render the data label for series.
     * @return {void}
     */
    render(series: Series, chart: Chart, dataLabel: DataLabelSettingsModel): void;
    /**
     * Render the data label template.
     * @return {void}
     * @private
     */
    private createDataLabelTemplate;
    private calculateTextPosition;
    private calculatePolarRectPosition;
    /**
     * Get the label location
     */
    private getLabelLocation;
    private calculateRectPosition;
    private calculatePathPosition;
    private isDataLabelShape;
    private calculateRectActualPosition;
    private calculateAlignment;
    private calculateTopAndOuterPosition;
    /**
     * Updates the label location
     */
    private updateLabelLocation;
    private calculatePathActualPosition;
    /**
     * Animates the data label.
     * @param  {Series} series - Data label of the series gets animated.
     * @return {void}
     */
    doDataLabelAnimation(series: Series, element?: Element): void;
    private getPosition;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the dataLabel for series.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/error-bar.d.ts
/**
 * `ErrorBar` module is used to render the error bar for series.
 */
export  class ErrorBar {
    private chart;
    errorHeight: number;
    error: number;
    positiveHeight: number;
    negativeHeight: number;
    /**
     * Constructor for the error bar module.
     * @private
     */
    constructor(chart: Chart);
    /**
     * Render the error bar for series.
     * @return {void}
     */
    render(series: Series): void;
    private renderErrorBar;
    private findLocation;
    private calculateFixedValue;
    private calculatePercentageValue;
    private calculateStandardDeviationValue;
    private calculateStandardErrorValue;
    private calculateCustomValue;
    private getHorizontalDirection;
    private getVerticalDirection;
    private getBothDirection;
    private getErrorDirection;
    meanCalculation(series: Series, mode: ErrorBarMode): Mean;
    private createElement;
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doErrorBarAnimation(series: Series): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the errorBar for series.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/hilo-open-close-series.d.ts
/**
 * `HiloOpenCloseSeries` module is used to render the hiloOpenClose series.
 */
export  class HiloOpenCloseSeries extends ColumnBase {
    /**
     * Render HiloOpenCloseSeries series.
     * @return {void}
     * @private
     */
    render(series: Series): void;
    /**
     * Updates the tick region
     */
    private updateTickRegion;
    /**
     * Trigger point rendering event
     */
    private triggerPointRenderEvent;
    /**
     * To draw the rectangle for points.
     * @return {void}
     * @private
     */
    protected drawHiloOpenClosePath(series: Series, point: Points, open: ChartLocation, close: ChartLocation, rect: svgBase.Rect, argsData: IPointRenderEventArgs): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
    /**
     * To destroy the column series.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/hilo-series.d.ts
/**
 * `HiloSeries` module is used to render the hilo series.
 */
export  class HiloSeries extends ColumnBase {
    /**
     * Render Hiloseries.
     * @return {void}
     * @private
     */
    render(series: Series): void;
    /**
     * To trigger the point rendering event.
     * @return {void}
     * @private
     */
    private triggerPointRenderEvent;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
    /**
     * To destroy the Hilo series.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/histogram-series.d.ts
/**
 * `HistogramSeries` Module used to render the histogram series.
 */
export  class HistogramSeries extends ColumnSeries {
    /**
     * Render Histogram series.
     * @return {void}
     * @private
     */
    render(series: Series): void;
    /**
     * To calculate bin interval for Histogram series.
     * @return number
     * @private
     */
    private calculateBinInterval;
    /**
     * Add data points for Histogram series.
     * @return {object[]}
     * @private
     */
    processInternalData(data: Object[], series: Series): Object[];
    /**
     * Render Normal Distribution for Histogram series.
     * @return {void}
     * @private
     */
    private renderNormalDistribution;
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the histogram series.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/line-base.d.ts
/**
 * Base for line type series.
 */
export  class LineBase {
    chart: Chart;
    /** @private */
    constructor(chartModule?: Chart);
    /**
     * To improve the chart performance.
     * @return {void}
     * @private
     */
    enableComplexProperty(series: Series): Points[];
    /**
     * To generate the line path direction
     * @param firstPoint
     * @param secondPoint
     * @param series
     * @param isInverted
     * @param getPointLocation
     * @param startPoint
     */
    getLineDirection(firstPoint: Points, secondPoint: Points, series: Series, isInverted: Boolean, getPointLocation: Function, startPoint: string): string;
    /**
     * To append the line path.
     * @return {void}
     * @private
     */
    appendLinePath(options: svgBase.PathOption, series: Series, clipRect: string): void;
    /**
     * To render the marker for the series.
     * @return {void}
     * @private
     */
    renderMarker(series: Series): void;
    /**
     * To do the progressive animation.
     * @return {void}
     * @private
     */
    doProgressiveAnimation(series: Series, option: AnimationModel): void;
    /**
     * To store the symbol location and region
     * @param point
     * @param series
     * @param isInverted
     * @param getLocation
     */
    storePointLocation(point: Points, series: Series, isInverted: boolean, getLocation: Function): void;
    /**
     * To do the linear animation.
     * @return {void}
     * @private
     */
    doLinearAnimation(series: Series, animation: AnimationModel): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/line-series.d.ts
/**
 * `LineSeries` module used to render the line series.
 */
export  class LineSeries extends LineBase {
    /**
     * Render Line Series.
     * @return {void}.
     * @private
     */
    render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the line series.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/marker-explode.d.ts
/**
 * Marker Module used to render the marker for line type series.
 */
export  class MarkerExplode extends ChartData {
    private markerExplode;
    private isRemove;
    /** @private */
    elementId: string;
    /**
     * Constructor for the marker module.
     * @private
     */
    constructor(chart: Chart);
    /**
     * @hidden
     */
    addEventListener(): void;
    /**
     * @hidden
     */
    removeEventListener(): void;
    /**
     * @hidden
     */
    private mouseUpHandler;
    /**
     * @hidden
     */
    private mouseMoveHandler;
    private markerMove;
    private drawTrackBall;
    /**
     * @hidden
     */
    removeHighlightedMarker(): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/marker.d.ts
/**
 * Marker module used to render the marker for line type series.
 */
export  class Marker extends MarkerExplode {
    /**
     * Constructor for the marker module.
     * @private
     */
    constructor(chart: Chart);
    /**
     * Render the marker for series.
     * @return {void}
     * @private
     */
    render(series: Series): void;
    private renderMarker;
    createElement(series: Series, redraw: boolean): void;
    private getRangeLowPoint;
    /**
     * Animates the marker.
     * @return {void}.
     * @private
     */
    doMarkerAnimation(series: Series): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/multi-colored-area-series.d.ts
/**
 * `MultiColoredAreaSeries` module used to render the area series with multi color.
 */
export  class MultiColoredAreaSeries extends MultiColoredSeries {
    /**
     * Render Area series.
     * @return {void}
     * @private
     */
    render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
    /**
     * To Store the path directions of the area
     */
    private generatePathOption;
    /**
     * To destroy the area series.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
    /**
     * Get module name
     */
    protected getModuleName(): string;
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/multi-colored-base.d.ts
/**
 * Base class for multi colored series
 */
export  class MultiColoredSeries extends LineBase {
    /**
     * To Generate the area path direction
     * @param xValue
     * @param yValue
     * @param series
     * @param isInverted
     * @param getPointLocation
     * @param startPoint
     * @param startPath
     */
    getAreaPathDirection(xValue: number, yValue: number, series: Series, isInverted: boolean, getPointLocation: Function, startPoint: ChartLocation, startPath: string): string;
    /**
     * To Generate the empty point direction
     * @param firstPoint
     * @param secondPoint
     * @param series
     * @param isInverted
     * @param getPointLocation
     */
    getAreaEmptyDirection(firstPoint: ChartLocation, secondPoint: ChartLocation, series: Series, isInverted: boolean, getPointLocation: Function): string;
    /**
     * To set point color
     * @param points
     */
    setPointColor(currentPoint: Points, previous: Points, series: Series, isXSegment: boolean, segments: ChartSegmentModel[]): boolean;
    sortSegments(series: Series, chartSegments: ChartSegmentModel[]): ChartSegmentModel[];
    /**
     * Segment calculation performed here
     * @param series
     * @param options
     * @param chartSegments
     */
    applySegmentAxis(series: Series, options: svgBase.PathOption[], segments: ChartSegmentModel[]): void;
    private includeSegment;
    /**
     * To create clip rect for segment axis
     * @param startValue
     * @param endValue
     * @param series
     * @param index
     * @param isX
     * @param chart
     */
    createClipRect(startValue: number, endValue: number, series: Series, index: number, isX: boolean): string;
    /**
     * To get exact value from segment value
     * @param segmentValue
     * @param axis
     * @param chart
     */
    getAxisValue(segmentValue: Object, axis: Axis, chart: Chart): number;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/multi-colored-line-series.d.ts
/**
 * `MultiColoredLineSeries` used to render the line series with multi color.
 */
export  class MultiColoredLineSeries extends MultiColoredSeries {
    /**
     * Render Line Series.
     * @return {void}.
     * @private
     */
    render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the line series.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/pareto-series.d.ts
/**
 * `Pareto series` module used to render the Pareto series.
 */
export  class ParetoSeries extends ColumnBase {
    paretoAxes: Axis[];
    /**
     * Defines the Line initialization
     */
    initSeries(targetSeries: Series, chart: Chart): void;
    /**
     * Defines the Axis initialization for Line
     */
    initAxis(paretoSeries: Series, targetSeries: Series, chart: Chart): void;
    /**
     * Render Pareto series.
     * @return {void}
     * @private
     */
    render(series: Series): void;
    /**
     * To perform the cumulative calculation for pareto series.
     */
    performCumulativeCalculation(json: Object, series: Series): Object[];
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the pareto series.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/polar-series.d.ts
/**
 * `PolarSeries` module is used to render the polar series.
 */
export  class PolarSeries extends PolarRadarPanel {
    /**
     * Render Polar Series.
     * @return {void}.
     * @private
     */
    render(series: Series, xAxis: Axis, yAxis: Axis, inverted: boolean): void;
    /**
     * Render Column DrawType.
     * @return {void}.
     * @private
     */
    columnDrawTypeRender(series: Series, xAxis: Axis, yAxis: Axis): void;
    /**
     * To trigger the point rendering event.
     * @return {void}
     * @private
     */
    triggerEvent(chart: Chart, series: Series, point: Points): IPointRenderEventArgs;
    /** get position for column drawtypes
     * @return {void}.
     * @private
     */
    getSeriesPosition(series: Series): void;
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
    /**
     * To do the Polar Radar draw type column animation.
     * @return {void}
     * @private
     */
    doPolarRadarAnimation(animateElement: Element, delay: number, duration: number, series: Series): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the polar series.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/radar-series.d.ts
/**
 * `RadarSeries` module is used to render the radar series.
 */
export  class RadarSeries extends PolarSeries {
    /**
     * Render radar Series.
     * @return {void}.
     * @private
     */
    render(series: Series, xAxis: Axis, yAxis: Axis, inverted: boolean): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the radar series.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/range-area-series.d.ts
/**
 * `RangeAreaSeries` module is used to render the range area series.
 */
export  class RangeAreaSeries extends LineBase {
    /**
     * Render RangeArea Series.
     * @return {void}.
     * @private
     */
    render(series: Series, xAxis: Axis, yAxis: Axis, inverted: boolean): void;
    /**
     * path for rendering the low points
     * @return {void}.
     * @private
     */
    protected closeRangeAreaPath(visiblePoints: Points[], point: Points, series: Series, direction: string, i: number): string;
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the line series.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/range-column-series.d.ts
/**
 * `RangeColumnSeries` module is used to render the range column series.
 */
export  class RangeColumnSeries extends ColumnBase {
    /**
     * Render Range Column series.
     * @return {void}
     * @private
     */
    render(series: Series): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
    /**
     * To destroy the range column series.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/scatter-series.d.ts
/**
 * `ScatterSeries` module is used to render the scatter series.
 */
export  class ScatterSeries {
    /**
     * Render the scatter series.
     * @return {void}
     * @private
     */
    render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
    /**
     * To append scatter element
     * @param series
     * @param point
     * @param argsData
     * @param startLocation
     */
    private refresh;
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the scatter.
     * @return {void}
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/spline-area-series.d.ts
/**
 * `SplineAreaSeries` module used to render the spline area series.
 */
export  class SplineAreaSeries extends SplineBase {
    /**
     * Render the splineArea series.
     * @return {void}
     * @private
     */
    render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the spline.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/spline-base.d.ts
/**
 * render Line series
 */
export  class SplineBase extends LineBase {
    private splinePoints;
    /** @private */
    constructor(chartModule?: Chart);
    /**
     * To find the control points for spline.
     * @return {void}
     * @private
     */
    findSplinePoint(series: Series): void;
    protected getPreviousIndex(points: Points[], i: number, series: Series): number;
    getNextIndex(points: Points[], i: number, series: Series): number;
    filterEmptyPoints(series: Series): Points[];
    /**
     * To find the natural spline.
     * @return {void}
     * @private
     */
    findSplineCoefficients(points: Points[], series: Series): number[];
    /**
     * To find the control points for spline.
     * @return {void}
     * @private
     */
    getControlPoints(point1: Points, point2: Points, ySpline1: number, ySpline2: number, series: Series): ControlPoints;
    /**
     * calculate datetime interval in hours
     *
     */
    protected dateTimeInterval(series: Series): number;
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/spline-series.d.ts
/**
 * `SplineSeries` module is used to render the spline series.
 */
export  class SplineSeries extends SplineBase {
    /**
     * Render the spline series.
     * @return {void}
     * @private
     */
    render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the spline.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/stacking-area-series.d.ts
/**
 * `StackingAreaSeries` module used to render the Stacking Area series.
 */
export  class StackingAreaSeries extends LineBase {
    /**
     * Render the Stacking area series.
     * @return {void}
     * @private
     */
    render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
    /**
     * To destroy the stacking area.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To find previous visible series
     */
    private getPreviousSeries;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/stacking-bar-series.d.ts
/**
 * `StackingBarSeries` module is used to render the stacking bar series.
 */
export  class StackingBarSeries extends ColumnBase {
    /**
     * Render the Stacking bar series.
     * @return {void}
     * @private
     */
    render(series: Series): void;
    /**
     * To destroy the stacking bar.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/stacking-column-series.d.ts
/**
 * `StackingColumnSeries` module used to render the stacking column series.
 */
export  class StackingColumnSeries extends ColumnBase {
    /**
     * Render the Stacking column series.
     * @return {void}
     * @private
     */
    render(series: Series): void;
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
    /**
     * To destroy the stacking column.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/stacking-line-series.d.ts
/**
 * `StackingLineSeries` module used to render the Stacking Line series.
 */
export  class StackingLineSeries extends LineBase {
    /**
     * Render the Stacking line series.
     * @return {void}
     * @private
     */
    render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
    /**
     * To destroy the stacking line.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/step-area-series.d.ts
/**
 * `StepAreaSeries` Module used to render the step area series.
 */
export  class StepAreaSeries extends LineBase {
    /**
     * Render StepArea series.
     * @return {void}
     * @private
     */
    render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
    /**
     * To destroy the step Area series.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/step-line-series.d.ts
/**
 * `StepLineSeries` module is used to render the step line series.
 */
export  class StepLineSeries extends LineBase {
    /**
     * Render the Step line series.
     * @return {void}
     * @private
     */
    render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
    /**
     * To destroy the step line series.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
}
//node_modules/@syncfusion/ej2-charts/src/chart/series/waterfall-series.d.ts
/**
 * `WaterfallSeries` module is used to render the waterfall series.
 */
export  class WaterfallSeries extends ColumnBase {
    /**
     * Render waterfall series.
     * @return {void}
     * @private
     */
    render(series: Series): void;
    /**
     * To check intermediateSumIndex in waterfall series.
     * @return boolean
     * @private
     */
    private isIntermediateSum;
    /**
     * To check sumIndex in waterfall series.
     * @return boolean
     * @private
     */
    private isSumIndex;
    /**
     * To trigger the point rendering event for waterfall series.
     * @return IPointRenderEventArgs
     * @private
     */
    private triggerPointRenderEvent;
    /**
     * Add sumIndex and intermediateSumIndex data.
     * @return {object[]}
     * @private
     */
    processInternalData(json: Object[], series: Series): Object[];
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doAnimation(series: Series): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the waterfall series.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/ad-indicator.d.ts
/**
 * `AccumulationDistributionIndicator` module is used to render accumulation distribution indicator.
 */
export  class AccumulationDistributionIndicator extends TechnicalAnalysis {
    /**
     * Defines the predictions using accumulation distribution approach
     * @private
     */
    initDataSource(indicator: TechnicalIndicator, chart: Chart): void;
    /**
     *  Calculates the Accumulation Distribution values
     * @private
     */
    private calculateADPoints;
    /**
     * To destroy the Accumulation Distribution Technical Indicator.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
}
//node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/atr-indicator.d.ts
/**
 * `AtrIndicator` module is used to render ATR indicator.
 */
export  class AtrIndicator extends TechnicalAnalysis {
    /**
     * Defines the predictions using Average True Range approach
     * @private
     */
    initDataSource(indicator: TechnicalIndicator, chart: Chart): void;
    /**
     *  To calculate Average True Range indicator points
     * @private
     */
    private calculateATRPoints;
    /**
     * To destroy the Average true range indicator.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
}
//node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/bollinger-bands.d.ts
/**
 * `BollingerBands` module is used to render bollinger band indicator.
 */
export  class BollingerBands extends TechnicalAnalysis {
    /**
     * Initializes the series collection to represent bollinger band
     */
    initSeriesCollection(indicator: TechnicalIndicator, chart: Chart): void;
    /**
     * Defines the predictions using Bollinger Band Approach
     * @private
     */
    initDataSource(indicator: TechnicalIndicator, chart: Chart): void;
    /**
     * To destroy the Bollinger Band.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
}
//node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/ema-indicator.d.ts
/**
 * `EmaIndicator` module is used to render EMA indicator.
 */
export  class EmaIndicator extends TechnicalAnalysis {
    /**
     * Defines the predictions based on EMA approach
     * @private
     */
    initDataSource(indicator: TechnicalIndicator, chart: Chart): void;
    /**
     * To destroy the EMA Indicator
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
}
//node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/indicator-base.d.ts
/**
 * Technical Analysis module helps to predict the market trend
 */
export  class TechnicalAnalysis extends LineBase {
    /**
     * Defines the collection of series, that are used to represent the given technical indicator
     * @private
     */
    initSeriesCollection(indicator: TechnicalIndicator, chart: Chart): void;
    /**
     * Initializes the properties of the given series
     * @private
     */
    protected setSeriesProperties(series: Series, indicator: TechnicalIndicator, name: string, fill: string, width: number, chart: Chart): void;
    /**
     * Creates the elements of a technical indicator
     * @private
     */
    createIndicatorElements(chart: Chart, indicator: TechnicalIndicator, index: number): void;
    protected getDataPoint(x: Object, y: Object, sourcePoint: Points, series: Series, index: number, indicator?: TechnicalIndicator): Points;
    protected getRangePoint(x: Object, high: Object, low: Object, sourcePoint: Points, series: Series, index: number, indicator?: TechnicalIndicator): Points;
    protected setSeriesRange(points: Points[], indicator: TechnicalIndicator, series?: Series): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/macd-indicator.d.ts
/**
 * `MacdIndicator` module is used to render MACD indicator.
 */
export  class MacdIndicator extends TechnicalAnalysis {
    /**
     * Defines the collection of series to represent the MACD indicator
     * @private
     */
    initSeriesCollection(indicator: TechnicalIndicator, chart: Chart): void;
    /**
     * Defines the predictions using MACD approach
     * @private
     */
    initDataSource(indicator: TechnicalIndicator, chart: Chart): void;
    /**
     * Calculates the EMA values for the given period
     */
    private calculateEMAValues;
    /**
     * Defines the MACD Points
     */
    private getMACDPoints;
    /**
     * Calculates the signal points
     */
    private getSignalPoints;
    /**
     * Calculates the MACD values
     */
    private getMACDVales;
    /**
     * Calculates the Histogram Points
     */
    private getHistogramPoints;
    /**
     * To destroy the MACD Indicator.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
}
//node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/momentum-indicator.d.ts
/**
 * `MomentumIndicator` module is used to render Momentum indicator.
 */
export  class MomentumIndicator extends TechnicalAnalysis {
    /**
     * Defines the collection of series to represent a momentum indicator
     * @private
     */
    initSeriesCollection(indicator: TechnicalIndicator, chart: Chart): void;
    /**
     * Defines the predictions using momentum approach
     * @private
     */
    initDataSource(indicator: TechnicalIndicator, chart: Chart): void;
    /**
     * To destroy the momentum indicator
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
}
//node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/rsi-indicator.d.ts
/**
 * `RsiIndicator` module is used to render RSI indicator.
 */
export  class RsiIndicator extends TechnicalAnalysis {
    /**
     * Initializes the series collection to represent the RSI Indicator
     * @private
     */
    initSeriesCollection(indicator: TechnicalIndicator, chart: Chart): void;
    /**
     * Defines the predictions using RSI approach
     * @private
     */
    initDataSource(indicator: TechnicalIndicator, chart: Chart): void;
    /**
     * To destroy the RSI Indicator.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
}
//node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/sma-indicator.d.ts
/**
 * `SmaIndicator` module is used to render SMA indicator.
 */
export  class SmaIndicator extends TechnicalAnalysis {
    /**
     * Defines the predictions based on SMA approach
     * @private
     */
    initDataSource(indicator: TechnicalIndicator, chart: Chart): void;
    /**
     * To destroy the SMA indicator
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
}
//node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/stochastic-indicator.d.ts
/**
 * `StochasticIndicator` module is used to render stochastic indicator.
 */
export  class StochasticIndicator extends TechnicalAnalysis {
    /**
     * Defines the collection of series that represents the stochastic indicator
     * @private
     */
    initSeriesCollection(indicator: TechnicalIndicator, chart: Chart): void;
    /**
     * Defines the predictions based on stochastic approach
     * @private
     */
    initDataSource(indicator: TechnicalIndicator, chart: Chart): void;
    /**
     * Calculates the SMA Values
     * @private
     */
    private smaCalculation;
    /**
     * Calculates the period line values.
     * @private
     */
    private calculatePeriod;
    /**
     * To destroy the Stocastic Indicator.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
}
//node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/technical-indicator-model.d.ts
/**
 * Interface for a class TechnicalIndicator
 */
export interface TechnicalIndicatorModel extends SeriesBaseModel{
    /**
     * Defines the type of the technical indicator
     * @default 'Sma'
     */
    type?: TechnicalIndicators;
    /**
     * Defines the period, the price changes over which will be considered to predict the trend
     * @default 14
     */
    period?: number;
    /**
     * Defines the look back period, the price changes over which will define the %K value in stochastic indicators
     * @default 14
     */
    kPeriod?: number;
    /**
     * Defines the period, the price changes over which will define the %D value in stochastic indicators
     * @default 3
     */
    dPeriod?: number;
    /**
     * Defines the over-bought(threshold) values. It is applicable for RSI and stochastic indicators
     * @default 80
     */
    overBought?: number;
    /**
     * Defines the over-sold(threshold) values. It is applicable for RSI and stochastic indicators
     * @default 20
     */
    overSold?: number;
    /**
     * Sets the standard deviation values that helps to define the upper and lower bollinger bands
     * @default 2
     */
    standardDeviation?: number;
    /**
     * Defines the field to compare the current value with previous values
     * @default 'Close'
     */
    field?: FinancialDataFields;
    /**
     * Sets the slow period to define the Macd line
     * @default 12
     */
    slowPeriod?: number;
    /**
     * Sets the fast period to define the Macd line
     * @default 26
     */
    fastPeriod?: number;
    /**
     * Enables/Disables the over-bought and over-sold regions
     * @default true
     */
    showZones?: boolean;
    /**
     * Defines the appearance of the the MacdLine of Macd indicator
     * @default { color: '#ff9933', width: 2 }
     */
    macdLine?: ConnectorModel;
    /**
     * Defines the type of the Macd indicator.
     * @default 'Both'
     */
    macdType?: MacdType;
    /**
     * Defines the color of the positive bars in Macd indicators
     * @default '#2ecd71'
     */
    macdPositiveColor?: string;
    /**
     * Defines the color of the negative bars in Macd indicators
     * @default '#e74c3d'
     */
    macdNegativeColor?: string;
    /**
     * Options for customizing the BollingerBand in the indicator.
     * @default 'rgba(211,211,211,0.25)'
     */
    bandColor?: string;
    /**
     * Defines the appearance of the upper line in technical indicators
     */
    upperLine?: ConnectorModel;
    /**
     * Defines the appearance of lower line in technical indicators
     */
    lowerLine?: ConnectorModel;
    /**
     * Defines the appearance of period line in technical indicators
     */
    periodLine?: ConnectorModel;
    /**
     * Defines the name of the series, the data of which has to be depicted as indicator
     * @default ''
     */
    seriesName?: string;
}
//node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/technical-indicator.d.ts

/**
 * Defines how to represent the market trend using technical indicators
 */
export  class TechnicalIndicator extends SeriesBase {
    /**
     * Defines the type of the technical indicator
     * @default 'Sma'
     */
    type: TechnicalIndicators;
    /**
     * Defines the period, the price changes over which will be considered to predict the trend
     * @default 14
     */
    period: number;
    /**
     * Defines the look back period, the price changes over which will define the %K value in stochastic indicators
     * @default 14
     */
    kPeriod: number;
    /**
     * Defines the period, the price changes over which will define the %D value in stochastic indicators
     * @default 3
     */
    dPeriod: number;
    /**
     * Defines the over-bought(threshold) values. It is applicable for RSI and stochastic indicators
     * @default 80
     */
    overBought: number;
    /**
     * Defines the over-sold(threshold) values. It is applicable for RSI and stochastic indicators
     * @default 20
     */
    overSold: number;
    /**
     * Sets the standard deviation values that helps to define the upper and lower bollinger bands
     * @default 2
     */
    standardDeviation: number;
    /**
     * Defines the field to compare the current value with previous values
     * @default 'Close'
     */
    field: FinancialDataFields;
    /**
     * Sets the slow period to define the Macd line
     * @default 12
     */
    slowPeriod: number;
    /**
     * Sets the fast period to define the Macd line
     * @default 26
     */
    fastPeriod: number;
    /**
     * Enables/Disables the over-bought and over-sold regions
     * @default true
     */
    showZones: boolean;
    /**
     * Defines the appearance of the the MacdLine of Macd indicator
     * @default { color: '#ff9933', width: 2 }
     */
    macdLine: ConnectorModel;
    /**
     * Defines the type of the Macd indicator.
     * @default 'Both'
     */
    macdType: MacdType;
    /**
     * Defines the color of the positive bars in Macd indicators
     * @default '#2ecd71'
     */
    macdPositiveColor: string;
    /**
     * Defines the color of the negative bars in Macd indicators
     * @default '#e74c3d'
     */
    macdNegativeColor: string;
    /**
     * Options for customizing the BollingerBand in the indicator.
     * @default 'rgba(211,211,211,0.25)'
     */
    bandColor: string;
    /**
     * Defines the appearance of the upper line in technical indicators
     */
    upperLine: ConnectorModel;
    /**
     * Defines the appearance of lower line in technical indicators
     */
    lowerLine: ConnectorModel;
    /**
     * Defines the appearance of period line in technical indicators
     */
    periodLine: ConnectorModel;
    /**
     * Defines the name of the series, the data of which has to be depicted as indicator
     * @default ''
     */
    seriesName: string;
    /** @private */
    targetSeries: Series[];
    /** @private */
    sourceSeries: Series;
    /** @private */
    indicatorElement: Element;
    /** @private */
    clipRectElement: Element;
    /** @private */
    clipRect: svgBase.Rect;
    /** @private */
    setDataSource(series: Series, chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/tma-indicator.d.ts
/**
 * `TmaIndicator` module is used to render TMA indicator.
 */
export  class TmaIndicator extends TechnicalAnalysis {
    /**
     * Defines the predictions based on TMA approach
     * @private
     */
    initDataSource(indicator: TechnicalIndicator, chart: Chart): void;
    /**
     * To destroy the TMA indicator.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
}
//node_modules/@syncfusion/ej2-charts/src/chart/trend-lines/trend-line.d.ts
/**
 * `Trendline` module is used to render 6 types of trendlines in chart.
 */
export  class Trendlines {
    /**
     * Defines the collection of series, that are used to represent a trendline
     * @private
     */
    initSeriesCollection(trendline: Trendline, chart: Chart): void;
    /**
     * Initializes the properties of the trendline series
     */
    private setSeriesProperties;
    /**
     * Creates the elements of a trendline
     */
    private createTrendLineElements;
    /**
     * Defines the data point of trendline
     */
    private getDataPoint;
    /**
     * Finds the slope and intercept of trendline
     */
    private findSlopeIntercept;
    /**
     * Defines the points to draw the trendlines
     */
    initDataSource(trendline: Trendline, chart: Chart): void;
    /**
     * Calculation of exponential points
     */
    private setExponentialRange;
    /**
     * Calculation of logarithmic points
     */
    private setLogarithmicRange;
    /**
     * Calculation of polynomial points
     */
    private setPolynomialRange;
    /**
     * Calculation of power points
     */
    private setPowerRange;
    /**
     * Calculation of linear points
     */
    private setLinearRange;
    /**
     * Calculation of moving average points
     */
    private setMovingAverageRange;
    /**
     * Calculation of logarithmic points
     */
    private getLogarithmicPoints;
    /**
     * Defines the points based on data point
     */
    private getPowerPoints;
    /**
     * Get the polynomial points based on polynomial slopes
     */
    private getPolynomialPoints;
    /**
     * Defines the moving average points
     */
    private getMovingAveragePoints;
    /**
     * Defines the linear points
     */
    private getLinearPoints;
    /**
     * Defines the exponential points
     */
    private getExponentialPoints;
    /**
     * Defines the points based on data point
     */
    private getPoints;
    /**
     * Defines the polynomial value of y
     */
    private getPolynomialYValue;
    /**
     * Defines the gauss jordan elimination
     */
    private gaussJordanElimination;
    /**
     * Defines the trendline elements
     */
    getTrendLineElements(series: Series, chart: Chart): void;
    /**
     * To destroy the trendline
     */
    destroy(chart: Chart): void;
    /**
     * Get module name
     */
    protected getModuleName(): string;
}
/** @private */
export interface SlopeIntercept {
    slope?: number;
    intercept?: number;
}
//node_modules/@syncfusion/ej2-charts/src/chart/user-interaction/crosshair.d.ts
/**
 * `Crosshair` module is used to render the crosshair for chart.
 */
export  class Crosshair {
    private elementID;
    private elementSize;
    private svgRenderer;
    private crosshairInterval;
    private arrowLocation;
    private isTop;
    private isBottom;
    private isLeft;
    private isRight;
    private valueX;
    private valueY;
    private rx;
    private ry;
    private chart;
    /**
     * Constructor for crosshair module.
     * @private
     */
    constructor(chart: Chart);
    /**
     * @hidden
     */
    private addEventListener;
    private mouseUpHandler;
    private mouseLeaveHandler;
    private mouseMoveHandler;
    /**
     * Handles the long press on chart.
     * @return {boolean}
     * @private
     */
    private longPress;
    /**
     * Renders the crosshair.
     * @return {void}
     */
    crosshair(): void;
    private renderCrosshairLine;
    private drawCrosshairLine;
    private renderAxisTooltip;
    private getAxisText;
    private tooltipLocation;
    private stopAnimation;
    private progressAnimation;
    /**
     * Removes the crosshair on mouse leave.
     * @return {void}
     * @private
     */
    removeCrosshair(duration: number): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the crosshair.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/user-interaction/data-editing.d.ts
/**
 * `DataEditing` module handles data editing
 */
export  class DataEditing {
    private chart;
    private seriesIndex;
    private pointIndex;
    /**
     * Constructor for DataEditing module.
     * @private.
     */
    constructor(chart: Chart);
    /**
     * Point drag start here
     */
    pointMouseDown(): void;
    /**
     * Point dragging
     */
    pointMouseMove(event: PointerEvent | TouchEvent): void;
    /**
     * Get cursor style
     */
    private getCursorStyle;
    /**
     * Dragging calculation
     */
    private pointDragging;
    /**
     * Point drag ends here
     */
    pointMouseUp(): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the DataEditing.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/user-interaction/selection.d.ts
/**
 * `Selection` module handles the selection for chart.
 * @private
 */
export  class Selection extends BaseSelection {
    private renderer;
    private isSeriesMode;
    private isdrawRect;
    private resizing;
    /** @private */
    rectPoints: svgBase.Rect;
    private closeIconId;
    private closeIcon;
    private draggedRectGroup;
    private multiRectGroup;
    private draggedRect;
    private lassoPath;
    /** @private */
    selectedDataIndexes: Indexes[];
    multiDataIndexes: Points[][];
    pathIndex: number;
    seriesIndex: number;
    private series;
    private dragging;
    private count;
    private isMultiDrag;
    private targetIndex;
    private dragRect;
    private dragRectArray;
    filterArray: svgBase.Rect[];
    private totalSelectedPoints;
    private rectGrabbing;
    private path;
    private resizeMode;
    private chart;
    /**
     * Constructor for selection module.
     * @private.
     */
    constructor(chart: Chart);
    /**
     * Binding events for selection module.
     */
    private addEventListener;
    /**
     * Chart mouse down
     */
    private mousedown;
    /**
     * UnBinding events for selection module.
     */
    private removeEventListener;
    /**
     * To find private variable values
     */
    private initPrivateVariables;
    /**
     * Method to select the point and series.
     * @return {void}
     */
    invokeSelection(chart: Chart): void;
    private generateStyle;
    private selectDataIndex;
    private getElementByIndex;
    private getClusterElements;
    private findElements;
    /**
     * To find the selected element.
     * @return {void}
     * @private
     */
    calculateSelectedElements(event: Event): void;
    private performSelection;
    private selectionComplete;
    private selection;
    private clusterSelection;
    private removeMultiSelectEelments;
    private blurEffect;
    private checkSelectionElements;
    private applyStyles;
    private getSelectionClass;
    private removeStyles;
    private addOrRemoveIndex;
    private toEquals;
    /**
     * To redraw the selected points.
     * @return {void}
     * @private
     */
    redrawSelection(chart: Chart, oldMode: SelectionMode): void;
    /** @private */
    legendSelection(chart: Chart, series: number): void;
    private getSeriesElements;
    private indexFinder;
    /**
     * Drag selection that returns the selected data.
     * @return {void}
     * @private
     */
    calculateDragSelectedElements(chart: Chart, dragRect: svgBase.Rect, isClose?: boolean): void;
    private removeOffset;
    private isPointSelect;
    /**
     * Method to draw dragging rect.
     * @return {void}
     * @private
     */
    drawDraggingRect(chart: Chart, dragRect: svgBase.Rect, target?: Element): void;
    /**
     * To get drag selected group element index from its id
     * @param id
     */
    private getIndex;
    private createCloseButton;
    /**
     * Method to remove dragged element.
     * @return {void}
     * @private
     */
    removeDraggedElements(chart: Chart, event: Event): void;
    /**
     * Method to resize the drag rect.
     * @return {void}
     * @private
     */
    resizingSelectionRect(chart: Chart, location: ChartLocation, tapped?: boolean, target?: Element): void;
    private findResizeMode;
    private changeCursorStyle;
    private removeSelectedElements;
    private setAttributes;
    /**
     * Method to move the dragged rect.
     * @return {void}
     * @private
     */
    draggedRectMoved(chart: Chart, grabbedPoint: svgBase.Rect, doDrawing?: boolean, target?: Element): void;
    /**
     * To complete the selection.
     * @return {void}
     * @private
     */
    completeSelection(e: Event): void;
    private getDragRect;
    /** @private */
    dragStart(chart: Chart, seriesClipRect: svgBase.Rect, mouseDownX: number, mouseDownY: number, event: Event): void;
    private isDragRect;
    /** @private */
    mouseMove(event: PointerEvent | TouchEvent): void;
    private getPath;
    private pointChecking;
    /**
     * Get module name.
     * @private
     */
    getModuleName(): string;
    /**
     * To destroy the selection.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/user-interaction/tooltip.d.ts
/**
 * `Tooltip` module is used to render the tooltip for chart series.
 */
export  class Tooltip extends BaseTooltip {
    /**
     * Constructor for tooltip module.
     * @private.
     */
    constructor(chart: Chart);
    /**
     * @hidden
     */
    private addEventListener;
    private mouseUpHandler;
    private mouseLeaveHandler;
    private mouseMoveHandler;
    /**
     * Handles the long press on chart.
     * @return {boolean}
     * @private
     */
    private longPress;
    /**
     * Renders the tooltip.
     * @return {void}
     */
    tooltip(): void;
    private findHeader;
    private findShapes;
    private renderSeriesTooltip;
    private triggerTooltipRender;
    private findMarkerHeight;
    private findData;
    private getSymbolLocation;
    private getRangeArea;
    private getWaterfallRegion;
    private getTooltipText;
    private getTemplateText;
    private findMouseValue;
    private renderGroupedTooltip;
    private triggerSharedTooltip;
    private findSharedLocation;
    private getBoxLocation;
    private parseTemplate;
    private formatPointValue;
    private getFormat;
    private getIndicatorTooltipFormat;
    removeHighlightedMarker(data: PointData[]): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the tooltip.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/user-interaction/zooming-toolkit.d.ts
/**
 * Zooming Toolkit created here
 * @private
 */
export  class Toolkit {
    private chart;
    private selectionColor;
    private fillColor;
    private elementOpacity;
    private elementId;
    private zoomInElements;
    private zoomOutElements;
    private zoomElements;
    private panElements;
    private iconRect;
    private hoveredID;
    private selectedID;
    private iconRectOverFill;
    private iconRectSelectionFill;
    /** @private */
    constructor(chart: Chart);
    /**
     * To create the pan button.
     * @return {void}
     * @private
     */
    createPanButton(childElement: Element, parentElement: Element, chart: Chart): void;
    /**
     * To create the zoom button.
     * @return {void}
     * @private
     */
    createZoomButton(childElement: Element, parentElement: Element, chart: Chart): void;
    /**
     * To create the ZoomIn button.
     * @return {void}
     * @private
     */
    createZoomInButton(childElement: Element, parentElement: Element, chart: Chart): void;
    /**
     * To create the ZoomOut button.
     * @return {void}
     * @private
     */
    createZoomOutButton(childElement: Element, parentElement: Element, chart: Chart): void;
    /**
     * To create the Reset button.
     * @return {void}
     * @private
     */
    createResetButton(childElement: Element, parentElement: Element, chart: Chart, isDevice: Boolean): void;
    /**
     * To bind events.
     * @return {void}
     * @private
     */
    wireEvents(element: Element, process: Function): void;
    /**
     * To show tooltip.
     * @return {void}
     * @private
     */
    private showTooltip;
    /** @private */
    removeTooltip(): void;
    /** @private */
    reset(): boolean;
    private zoomIn;
    private zoomOut;
    private zoom;
    /** @private */
    pan(): boolean;
    private zoomInOutCalculation;
    private applySelection;
}
//node_modules/@syncfusion/ej2-charts/src/chart/user-interaction/zooming.d.ts
/**
 * `Zooming` module handles the zooming for chart.
 */
export  class Zoom {
    private chart;
    private zooming;
    private elementId;
    /** @private */
    zoomingRect: svgBase.Rect;
    /** @private */
    toolkit: Toolkit;
    /** @private */
    toolkitElements: Element;
    /** @private */
    isPanning: boolean;
    /** @private */
    isZoomed: boolean;
    /** @private */
    isPointer: Boolean;
    /** @private */
    pinchTarget: Element;
    /** @private */
    isDevice: Boolean;
    /** @private */
    browserName: string;
    /** @private */
    touchStartList: ITouches[] | TouchList;
    /** @private */
    touchMoveList: ITouches[] | TouchList;
    /** @private */
    offset: svgBase.Rect;
    /** @private */
    zoomAxes: IZoomAxisRange[];
    /** @private */
    isIOS: Boolean;
    /** @private */
    performedUI: boolean;
    private zoomkitOpacity;
    private wheelEvent;
    private cancelEvent;
    /**
     * Constructor for Zooming module.
     * @private.
     */
    constructor(chart: Chart);
    /**
     * Function that handles the Rectangular zooming.
     * @return {void}
     */
    renderZooming(e: PointerEvent | TouchEvent, chart: Chart, isTouch: boolean): void;
    private drawZoomingRectangle;
    private doPan;
    /**
     * Redraw the chart on zooming.
     * @return {void}
     * @private
     */
    performZoomRedraw(chart: Chart): void;
    private refreshAxis;
    private doZoom;
    /**
     * Function that handles the Mouse wheel zooming.
     * @return {void}
     * @private
     */
    performMouseWheelZooming(e: WheelEvent, mouseX: number, mouseY: number, chart: Chart, axes: AxisModel[]): void;
    /**
     * Function that handles the Pinch zooming.
     * @return {void}
     * @private
     */
    performPinchZooming(e: TouchEvent, chart: Chart): boolean;
    private calculatePinchZoomFactor;
    private setTransform;
    private calculateZoomAxesRange;
    private showZoomingToolkit;
    /**
     * To the show the zooming toolkit.
     * @return {void}
     * @private
     */
    applyZoomToolkit(chart: Chart, axes: AxisModel[]): void;
    /**
     * Return boolean property to show zooming toolkit.
     * @return {void}
     * @private
     */
    isAxisZoomed(axes: AxisModel[]): boolean;
    private zoomToolkitMove;
    private zoomToolkitLeave;
    /**
     * @hidden
     */
    addEventListener(): void;
    /**
     * @hidden
     */
    removeEventListener(): void;
    /**
     * Handles the mouse wheel on chart.
     * @return {boolean}
     * @private
     */
    chartMouseWheel(e: WheelEvent): boolean;
    /**
     * @hidden
     */
    private mouseMoveHandler;
    /**
     * @hidden
     */
    private mouseDownHandler;
    /**
     * @hidden
     */
    private mouseUpHandler;
    /**
     * @hidden
     */
    private mouseCancelHandler;
    /**
     * Handles the touch pointer.
     * @return {boolean}
     * @private
     */
    addTouchPointer(touchList: ITouches[], e: PointerEvent, touches: TouchList): ITouches[];
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the zooming.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
//node_modules/@syncfusion/ej2-charts/src/chart/utils/double-range.d.ts
/**
 * Numeric Range.
 * @private
 */
export  class DoubleRange {
    private mStart;
    private mEnd;
    /** @private */
    readonly start: number;
    /** @private */
    readonly end: number;
    /** @private */
    readonly delta: number;
    /** @private */
    readonly median: number;
    constructor(start: number, end: number);
}
//node_modules/@syncfusion/ej2-charts/src/chart/utils/enum.d.ts
/**
 * Defines Orientation of axis. They are
 * * horizontal
 * * vertical
 * @private
 */
export  type Orientation = 
/**  Horizontal Axis. */
'Horizontal' | 
/**  Vertical Axis. */
'Vertical';
/**
 * Defines area type of chart. They are
 * * none
 * * cartesianAxes
 * * polarAxes
 * @private
 */
export  type ChartAreaType = 
/**  Cartesian panel. */
'CartesianAxes' | 
/**  Polar panel. */
'PolarAxes';
/**
 * Defines series type of chart. They are
 * * xy
 * * highLow
 * @private
 */
export  type SeriesValueType = 
/**  XY value. */
'XY' | 
/**  HighLow value. */
'HighLow' | 
/**  HighLowOpenClose value. */
'HighLowOpenClose' | 
/** BoxPlot */
'BoxPlot';
/**
 * Defines the range padding of axis. They are
 * * none - Padding cannot be applied to the axis.
 * * normal - Padding is applied to the axis based on the range calculation.
 * * additional - Interval of the axis is added as padding to the minimum and maximum values of the range.
 * * round - Axis range is rounded to the nearest possible value divided by the interval.
 */
export  type ChartRangePadding = 
/**  Padding Normal is applied for orientation vertical axis and None is applied for orientation horizontal axis */
'Auto' | 
/**  Padding wiil not be applied to the axis. */
'None' | 
/**  Padding is applied to the axis based on the range calculation. */
'Normal' | 
/**  Interval of the axis is added as padding to the minimum and maximum values of the range. */
'Additional' | 
/**  Axis range is rounded to the nearest possible value divided by the interval. */
'Round';
/**
 * Defines the segment axis. They are,
 * * X - Segment calculation rendered based on horizontal axis
 * * Y - Segment calculation rendered based on vertical axis
 */
export  type Segment = 
/** Segment calculation rendered based on horizontal axis */
'X' | 
/** Segment calculation rendered based on verticalal axis */
'Y';
/**
 * Defines the unit of Strip line Size. They are
 * * auto
 * * pixel
 * * year
 * * month
 * * day
 * * hour
 * * minutes
 * * seconds
 */
export  type SizeType = 
/**  Auto - In numeric axis, it will consider a number and DateTime axis, it will consider as milliseconds. */
'Auto' | 
/**  Pixel - The stripline gets their size in pixel */
'Pixel' | 
/**  Years - The stipline size is based on year in the DateTime axis. */
'Years' | 
/**  Months - The stipline size is based on month in the DateTime axis. */
'Months' | 
/**  Days - The stipline size is based on day in the DateTime axis. */
'Days' | 
/**  Hours - The stipline size is based on hour in the DateTime axis. */
'Hours' | 
/**  Minutes - The stipline size is based on minutes in the DateTime axis. */
'Minutes' | 
/**  Seconds - The stipline size is based on seconds in the DateTime axis. */
'Seconds';
/**
 * Defines the type series in chart. They are
 * * line - Renders the line series.
 * * column - Renders the column series.
 * * area - Renders the area series.
 * * pie - Renders the pie series.
 * * polar - Renders the polar series.
 * * radar - Renders the radar series.
 * * bar - Renders the stacking column series
 * * histogram - Renders the histogram series
 * * stackingColumn - Renders the stacking column series.
 * * stackingArea - Renders the stacking area series.
 * * stackingLine - Renders the stacking line series.
 * * stackingBar - Renders the stacking bar series.
 * * StackingColumn100 - Renders the stacking column series.
 * * StackingArea100 - Renders the stacking area 100 percent series
 * * stackingLine100 - Renders the stacking line 100 percent series.
 * * StackingBar100 - Renders the stacking bar 100 percent series.
 * * stepLine -  Renders the step line series.
 * * stepArea -  Renders the step area series.
 * * scatter - Renders the scatter series.
 * * spline - Renders the spline series
 * * rangeColumn - Renders the rangeColumn series.
 * * hilo - Renders the hilo series
 * * hiloOpenClose - Renders the HiloOpenClose Series
 * * Waterfall - Renders the Waterfall Series
 * * rangeArea - Renders the rangeArea series.
 * * Pareto-Render the Pareto series
 */
export  type ChartSeriesType = 
/**  Define the line series. */
'Line' | 
/**  Define the Column series. */
'Column' | 
/**  Define the Area series. */
'Area' | 
/**  Define the Bar series. */
'Bar' | 
/**  Define the Histogram series. */
'Histogram' | 
/**  Define the StackingColumn series. */
'StackingColumn' | 
/**  Define the StackingArea series. */
'StackingArea' | 
/**  Define the StackingLine series. */
'StackingLine' | 
/**  Define the StackingBar series. */
'StackingBar' | 
/**  Define the Stepline series. */
'StepLine' | 
/**  Define the Steparea series. */
'StepArea' | 
/**  Define the Steparea series. */
'SplineArea' | 
/**  Define the Scatter series. */
'Scatter' | 
/**  Define the Spline series. */
'Spline' | 
/** Define the StackingColumn100 series */
'StackingColumn100' | 
/** Define the StackingBar100 series */
'StackingBar100' | 
/** Define the StackingLine100 series */
'StackingLine100' | 
/** Define the StackingArea100 series */
'StackingArea100' | 
/** Define the RangeColumn Series */
'RangeColumn' | 
/** Define the Hilo Series */
'Hilo' | 
/** Define the HiloOpenClose Series */
'HiloOpenClose' | 
/** Define the Waterfall Series */
'Waterfall' | 
/** Define the RangeArea Series */
'RangeArea' | 
/** Define the Bubble Series */
'Bubble' | 
/** Define the Candle Series */
'Candle' | 
/** Define the polar series */
'Polar' | 
/** Define the radar series */
'Radar' | 
/** Define the Box and whisker Series */
'BoxAndWhisker' | 
/** Define the multi color line series */
'MultiColoredLine' | 
/** Define the multi color area series */
'MultiColoredArea' | 
/** Define the Pareto series */
'Pareto';
/**
 * * Type of series to be drawn in radar or polar series. They are
 * * line - Renders the line series.
 * * column - Renders the column series.
 * * area - Renders the area series.
 * * scatter - Renders the scatter series.
 * * spline - Renders the spline series.
 * * stackingColumn - Renders the stacking column series.
 * * stackingArea - Renders the stacking area series.
 * * rangeColumn - Renders the range column series.
 * * splineArea - Renders the spline area series.
 */
export  type ChartDrawType = 
/**  Define the line series. */
'Line' | 
/**  Define the Column series. */
'Column' | 
/**  Define the stacking Column series. */
'StackingColumn' | 
/**  Define the Area series. */
'Area' | 
/**  Define the Scatter series. */
'Scatter' | 
/** Define the Range column series */
'RangeColumn' | 
/** Define the Spline series */
'Spline' | 
/** Define the Spline Area series */
'SplineArea' | 
/** Define the spline series */
'StackingArea' | 
/** Define the Stacking line series */
'StackingLine';
/**
 * Defines the Edge Label Placement for an axis. They are
 * * none - No action will be perform.
 * * hide - Edge label will be hidden.
 * * shift - Shift the edge labels.
 */
export  type EdgeLabelPlacement = 
/**  Render the edge label in axis. */
'None' | 
/**  Hides the edge label in axis. */
'Hide' | 
/**  Shift the edge series in axis. */
'Shift';
/**
 * Defines the Label Placement for category axis. They are
 * * betweenTicks - Render the label between the ticks.
 * * onTicks - Render the label on the ticks.
 */
export  type LabelPlacement = 
/**  Render the label between the ticks. */
'BetweenTicks' | 
/**  Render the label on the ticks. */
'OnTicks';
/**
 * Defines the shape of marker. They are
 * * circle - Renders a circle.
 * * rectangle - Renders a rectangle.
 * * triangle - Renders a triangle.
 * * diamond - Renders a diamond.
 * * cross - Renders a cross.
 * * horizontalLine - Renders a horizontalLine.
 * * verticalLine - Renders a verticalLine.
 * * pentagon- Renders a pentagon.
 * * invertedTriangle - Renders a invertedTriangle.
 * * image - Renders a image.
 */
export  type ChartShape = 
/** Render a circle. */
'Circle' | 
/** Render a Rectangle. */
'Rectangle' | 
/** Render a Triangle. */
'Triangle' | 
/** Render a Diamond. */
'Diamond' | 
/** Render a Cross. */
'Cross' | 
/** Render a HorizontalLine. */
'HorizontalLine' | 
/** Render a VerticalLine. */
'VerticalLine' | 
/** Render a Pentagon. */
'Pentagon' | 
/** Render a InvertedTriangle. */
'InvertedTriangle' | 
/** Render a Image. */
'Image';
/**
 * Defines the type of axis. They are
 * * double -  Renders a numeric axis.
 * * dateTime - Renders a dateTime axis.
 * * category - Renders a category axis.
 * * logarithmic - Renders a log axis.
 * * DateTimeCategory - Renders a datetime DateTimeCategory axis
 */
export  type ValueType = 
/** Define the numeric axis. */
'Double' | 
/** Define the DateTime axis. */
'DateTime' | 
/** Define the Category axis . */
'Category' | 
/** Define the Logarithmic axis . */
'Logarithmic' | 
/** Define the datetime category axis */
'DateTimeCategory';
/**
 * Defines the type of error bar. They are
 * * fixed -  Renders a fixed type error bar.
 * * percentage - Renders a percentage type error bar.
 * * standardDeviation - Renders a standard deviation type error bar.
 * * standardError -Renders a standard error type error bar.
 * * custom -Renders a custom type error bar.
 */
export  type ErrorBarType = 
/** Define the Fixed type. */
'Fixed' | 
/** Define the Percentage type. */
'Percentage' | 
/** Define the StandardDeviation type . */
'StandardDeviation' | 
/** Define the StandardError type . */
'StandardError' | 
/** Define the Custom type . */
'Custom';
/**
 * Defines the direction of error bar. They are
 * * both -  Renders both direction of error bar.
 * * minus - Renders minus direction of error bar.
 * * plus - Renders plus direction error bar.
 */
export  type ErrorBarDirection = 
/** Define the Both direction. */
'Both' | 
/** Define the Minus direction. */
'Minus' | 
/** Define the Plus direction . */
'Plus';
/**
 * Defines the modes of error bar. They are
 * * vertical -  Renders a vertical error bar.
 * * horizontal - Renders a horizontal error bar.
 * * both - Renders both side error bar.
 */
export  type ErrorBarMode = 
/** Define the Vertical mode. */
'Vertical' | 
/** Define the Horizontal mode. */
'Horizontal' | 
/** Define the Both mode . */
'Both';
/**
 * Defines the interval type of datetime axis. They are
 * * auto - Define the interval of the axis based on data.
 * * years - Define the interval of the axis in years.
 * * months - Define the interval of the axis in months.
 * * days - Define the interval of the axis in days.
 * * hours - Define the interval of the axis in hours.
 * * minutes - Define the interval of the axis in minutes.
 */
export  type IntervalType = 
/** Define the interval of the axis based on data. */
'Auto' | 
/** Define the interval of the axis in years. */
'Years' | 
/** Define the interval of the axis in months. */
'Months' | 
/** Define the interval of the axis in days. */
'Days' | 
/** Define the interval of the axis in hours. */
'Hours' | 
/** Define the interval of the axis in minutes. */
'Minutes' | 
/** Define the interval of the axis in seconds. */
'Seconds';
/**
 * Defines the mode of line in crosshair. They are
 * * none - Hides both vertical and horizontal crosshair line.
 * * both - Shows both vertical and horizontal crosshair line.
 * * vertical - Shows the vertical line.
 * * horizontal - Shows the horizontal line.
 */
export  type LineType = 
/** Hides both vertical and horizontal crosshair line. */
'None' | 
/** Shows both vertical and horizontal crosshair line. */
'Both' | 
/** Shows the vertical line. */
'Vertical' | 
/** Shows the horizontal line. */
'Horizontal';
export  type MacdType = 'Line' | 'Histogram' | 'Both';
/**
 * Defines the position of the legend. They are
 * * auto - Places the legend based on area type.
 * * top - Displays the legend on the top of chart.
 * * left - Displays the legend on the left of chart.
 * * bottom - Displays the legend on the bottom of chart.
 * * right - Displays the legend on the right of chart.
 * * custom - Displays the legend  based on given x and y value.
 */
export  type LegendPosition = 
/** Places the legend based on area type. */
'Auto' | 
/** Places the legend on the top of chart. */
'Top' | 
/** Places the legend on the left of chart. */
'Left' | 
/** Places the legend on the bottom of chart. */
'Bottom' | 
/** Places the legend on the right of chart. */
'Right' | 
/** Places the legend based on given x and y. */
'Custom';
/**
 * Defines the shape of legend. They are
 * * circle - Renders a circle.
 * * rectangle - Renders a rectangle.
 * * triangle - Renders a triangle.
 * * diamond - Renders a diamond.
 * * cross - Renders a cross.
 * * horizontalLine - Renders a horizontalLine.
 * * verticalLine - Renders a verticalLine.
 * * pentagon - Renders a pentagon.
 * * invertedTriangle - Renders a invertedTriangle.
 * * SeriesType -Render a legend shape based on series type.
 */
export  type LegendShape = 
/** Render a circle. */
'Circle' | 
/** Render a Rectangle. */
'Rectangle' | 
/** Render a Triangle. */
'Triangle' | 
/** Render a Diamond. */
'Diamond' | 
/** Render a Cross. */
'Cross' | 
/** Render a HorizontalLine. */
'HorizontalLine' | 
/** Render a VerticalLine. */
'VerticalLine' | 
/** Render a Pentagon. */
'Pentagon' | 
/** Render a InvertedTriangle. */
'InvertedTriangle' | 
/** Render a legend shape based on series type. */
'SeriesType';
/**
 * Defines the zooming mode, They are.
 * * x,y - Chart will be zoomed with respect to both vertical and horizontal axis.
 * * x - Chart will be zoomed with respect to horizontal axis.
 * * y - Chart will be zoomed with respect to vertical axis.
 */
export  type ZoomMode = 
/** Chart will be zoomed with respect to both vertical and horizontal axis. */
'XY' | 
/** Chart will be zoomed with respect to horizontal axis. */
'X' | 
/** Chart will be zoomed with respect to vertical axis. */
'Y';
/**
 * Defines the ZoomingToolkit, They are.
 * * zoom - Renders the zoom button.
 * * zoomIn - Renders the zoomIn button.
 * * zoomOut - Renders the zoomOut button.
 * * pan - Renders the pan button.
 * * reset - Renders the reset button.
 */
export  type ToolbarItems = 
/** Renders the zoom button. */
'Zoom' | 
/** Renders the zoomIn button. */
'ZoomIn' | 
/** Renders the zoomOut button. */
'ZoomOut' | 
/** Renders the pan button. */
'Pan' | 
/** Renders the reset button. */
'Reset';
/**
 * Defines the SelectionMode, They are.
 * * none - Disable the selection.
 * * series - To select a series.
 * * point - To select a point.
 * * cluster - To select a cluster of point
 * * dragXY - To select points, by dragging with respect to both horizontal and vertical axis
 * * dragX - To select points, by dragging with respect to horizontal axis.
 * * dragY - To select points, by dragging with respect to vertical axis.
 * * lasso - To select points, by dragging with respect to free form.
 */
export  type SelectionMode = 
/** Disable the selection. */
'None' | 
/** To select a series. */
'Series' | 
/** To select a point. */
'Point' | 
/** To select a cluster of point. */
'Cluster' | 
/** To select points, by dragging with respect to both horizontal and vertical axis. */
'DragXY' | 
/** To select points, by dragging with respect to vertical axis. */
'DragY' | 
/** To select points, by dragging with respect to horizontal axis. */
'DragX' | 
/** To select points, by dragging with respect to free form. */
'Lasso';
/**
 * Defines the LabelPosition, They are.
 * * outer - Position the label outside the point.
 * * top - Position the label on top of the point.
 * * bottom - Position the label on bottom of the point.
 * * middle - Position the label to middle of the point.
 * * auto - Position the label based on series.
 */
export  type LabelPosition = 
/** Position the label outside the point. */
'Outer' | 
/** Position the label on top of the point. */
'Top' | 
/** Position the label on bottom of the point. */
'Bottom' | 
/** Position the label to middle of the point. */
'Middle' | 
/** Position the label based on series. */
'Auto';
/**
 * Defines the Alignment. They are
 * * none - Shows all the labels.
 * * hide - Hide the label when it intersect.
 * * rotate45 - Rotate the label to 45 degree when it intersect.
 * * rotate90 - Rotate the label to 90 degree when it intersect.
 * *
 */
export  type LabelIntersectAction = 
/** Shows all the labels. */
'None' | 
/** Hide the label when it intersect. */
'Hide' | 
/** Trim the label when it intersect. */
'Trim' | 
/** Wrap the label when it intersect. */
'Wrap' | 
/** Arrange the label in multiple row when it intersect. */
'MultipleRows' | 
/** Rotate the label to 45 degree when it intersect. */
'Rotate45' | 
/** Rotate the label to 90 degree when it intersect. */
'Rotate90';
/**
 * Defines the Position. They are
 * * inside - Place the ticks or labels inside to the axis line.
 * * outside - Place the ticks or labels outside to the axis line.
 * *
 */
export  type AxisPosition = 
/** Place the ticks or labels inside to the axis line. */
'Inside' | 
/** Place the ticks or labels outside to the axis line. */
'Outside';
/**
 * Defines Theme of the chart. They are
 * * Material - Render a chart with Material theme.
 * * Fabric - Render a chart with Fabric theme
 */
export  type ChartTheme = 
/**  Render a chart with Material theme. */
'Material' | 
/**  Render a chart with Fabric theme. */
'Fabric' | 
/**  Render a chart with Bootstrap theme. */
'Bootstrap' | 
/**  Render a chart with HighcontrastLight theme. */
'HighContrastLight' | 
/**  Render a chart with MaterialDark theme. */
'MaterialDark' | 
/**  Render a chart with FabricDark theme. */
'FabricDark' | 
/**  Render a chart with HighContrast theme. */
'HighContrast' | 
/**  Render a chart with BootstrapDark theme. */
'BootstrapDark' | 
/**  Render a chart with Bootstrap4 theme. */
'Bootstrap4';
/**
 *  Specifies the order of the strip line. `Over` | `Behind`.
 * * Over - Places the strip line over the series elements.
 * * Behind - laces the strip line behind the series elements.
 */
export  type ZIndex = 
/** Places the strip line over the series elements. */
'Over' | 
/** Places the strip line behind the series elements. */
'Behind';
/**
 * Defines the strip line text position.
 * * Start - Places the strip line text at the start.
 * * Middle - Places the strip line text in the middle.
 * * End - Places the strip line text at the end.
 */
export  type Anchor = 
/** Places the strip line text at the start. */
'Start' | 
/** Places the strip line text in the middle. */
'Middle' | 
/** Places the strip line text at the end. */
'End';
/**
 * Defines the empty point mode of the chart.
 * * Gap - Used to display empty points as space.
 * * Zero - Used to display empty points as zero.
 * * Drop - Used to ignore the empty point while rendering.
 * * Average - Used to display empty points as previous and next point average.
 */
export  type EmptyPointMode = 
/** Used to display empty points as space  */
'Gap' | 
/** Used to display empty points as zero  */
'Zero' | 
/** Used to ignore the empty point while rendering  */
'Drop' | 
/** Used to display empty points as previous and next point average  */
'Average';
/**
 * Defines the type of technical indicators. They are
 * * Sma - Predicts the trend using Simple Moving Average approach
 * * Ema - Predicts the trend using Exponential Moving Average approach
 * * Tma - Predicts the trend using Triangle Moving Average approach
 * * Atr - Predicts the trend using Average True Range approach
 * * AccumulationDistribution - Predicts the trend using Accumulation Distribution approach
 * * Momentum - Predicts the trend using Momentum approach
 * * Rsi - Predicts the trend using RSI approach
 * * Macd - Predicts the trend using Moving Average Convergence Divergence approach
 * * Stochastic - Predicts the trend using Stochastic approach
 * * BollingerBands - Predicts the trend using Bollinger approach
 */
export  type TechnicalIndicators = 
/** Predicts the trend using Simple Moving Average approach */
'Sma' | 
/** Predicts the trend using Exponential Moving Average approach */
'Ema' | 
/** Predicts the trend using Triangle Moving Average approach */
'Tma' | 
/** Predicts the trend using Momentum approach */
'Momentum' | 
/** Predicts the trend using Average True Range approach */
'Atr' | 
/** Predicts the trend using Accumulation Distribution approach */
'AccumulationDistribution' | 
/** Predicts the trend using Bollinger approach */
'BollingerBands' | 
/** Predicts the trend using Moving Average Convergence Divergence approach */
'Macd' | 
/** Predicts the trend using Stochastic approach */
'Stochastic' | 
/** Predicts the trend using RSI approach */
'Rsi';
/**
 * Defines the type of trendlines. They are
 * * Linear - Defines the linear trendline
 * * Exponential - Defines the exponential trendline
 * * Polynomial - Defines the polynomial trendline
 * * Power - Defines the power trendline
 * * Logarithmic - Defines the logarithmic trendline
 * * MovingAverage - Defines the moving average trendline
 */
export  type TrendlineTypes = 
/** Defines the linear trendline */
'Linear' | 
/** Defines the exponential trendline */
'Exponential' | 
/** Defines the polynomial trendline */
'Polynomial' | 
/** Defines the power trendline */
'Power' | 
/** Defines the logarithmic trendline */
'Logarithmic' | 
/** Defines the moving average trendline */
'MovingAverage';
/**
 * Defines the financial data fields
 * * High - Represents the highest price in the stocks over time
 * * Low - Represents the lowest price in the stocks over time
 * * Open - Represents the opening price in the stocks over time
 * * Close - Represents the closing price in the stocks over time
 */
export  type FinancialDataFields = 
/** Represents the highest price in the stocks over time */
'High' | 
/** Represents the lowest price in the stocks over time */
'Low' | 
/** Represents the opening price in the stocks over time */
'Open' | 
/** Represents the closing price in the stocks over time */
'Close';
/**
 * It defines type of spline.
 * Natural - Used to render Natural spline.
 * Cardinal - Used to render cardinal spline.
 * Clamped - Used to render Clamped spline
 * Monotonic - Used to render monotonic spline
 */
export  type SplineType = 
/** Used to render natural spline type */
'Natural' | 
/** Used to render Monotonicspline  */
'Monotonic' | 
/** Used to render Cardinal */
'Cardinal' | 
/** Used to render Clamped */
'Clamped';
/**
 * Defines the BoxPlotMode for box and whisker chart series, They are.
 * * exclusive - Series render based on exclusive mode.
 * * inclusive - Series render based on inclusive mode.
 * * normal - Series render based on normal mode.
 */
export  type BoxPlotMode = 
/** Defines the Exclusive mode. */
'Exclusive' | 
/** Defines the InClusive mode. */
'Inclusive' | 
/** Defines the Normal mode. */
'Normal';
/**
 * Defines the skeleton type for the axis.
 * * Date - it formats date only.
 * * DateTime - it formats date and time.
 * * Time - it formats time only.
 */
export  type SkeletonType = 
/** Used to format date */
'Date' | 
/** Used to format date and time */
'DateTime' | 
/** Used to format time */
'Time';
/**
 * Defines border type for multi level labels.
 *  * Rectangle
 *  * Brace
 *  * WithoutBorder
 *  * Without top Border
 *  * Without top and bottom border
 *  * Curly brace
 */
export  type BorderType = 
/** Rectangle */
'Rectangle' | 
/** Brace */
'Brace' | 
/** WithoutBorder */
'WithoutBorder' | 
/** WithoutTopBorder */
'WithoutTopBorder' | 
/** WithoutTopandBottomBorder */
'WithoutTopandBottomBorder' | 
/** CurlyBrace */
'CurlyBrace';
//node_modules/@syncfusion/ej2-charts/src/chart/utils/get-data.d.ts
/**
 * To get the data on mouse move.
 * @private
 */
export  class ChartData {
    /** @private */
    chart: Chart;
    lierIndex: number;
    /** @private */
    currentPoints: PointData[] | AccPointData[];
    /** @private */
    previousPoints: PointData[] | AccPointData[];
    insideRegion: boolean;
    /**
     * Constructor for the data.
     * @private
     */
    constructor(chart: Chart);
    /**
     * Method to get the Data.
     * @private
     */
    getData(): PointData;
    isSelected(chart: Chart): boolean;
    private getRectPoint;
    /**
     * Checks whether the region contains a point
     */
    private checkRegionContainsPoint;
    /**
     * To find drag region for column and bar series
     * @param x
     * @param y
     * @param point
     * @param rect
     * @param series
     */
    private rectRegion;
    /**
     * @private
     */
    getClosest(series: Series, value: number): number;
    getClosestX(chart: Chart, series: Series): PointData;
}
//node_modules/@syncfusion/ej2-charts/src/common/annotation/annotation.d.ts
/**
 * Annotation Module handles the Annotation for chart and accumulation series.
 */
export  class AnnotationBase {
    private control;
    private annotation;
    private isChart;
    /**
     * Constructor for chart and accumulation annotation
     * @param control
     */
    constructor(control: Chart | AccumulationChart);
    /**
     * Method to render the annotation for chart and accumulation series.
     * @private
     * @param annotation
     * @param index
     */
    render(annotation: AccumulationAnnotationSettings | ChartAnnotationSettings, index: number): HTMLElement;
    /**
     * Method to calculate the location for annotation - coordinate unit as pixel.
     * @private
     * @param location
     */
    setAnnotationPixelValue(location: ChartLocation): boolean;
    /**
     * Method to calculate the location for annotation - coordinate unit as point.
     * @private
     * @param location
     */
    setAnnotationPointValue(location: ChartLocation): boolean;
    /**
     * To process the annotation for accumulation chart
     * @param annotation
     * @param index
     * @param parentElement
     */
    processAnnotation(annotation: ChartAnnotationSettings | AccumulationAnnotationSettings, index: number, parentElement: HTMLElement): void;
    /**
     * Method to calculate the location for annotation - coordinate unit as point in accumulation chart.
     * @private
     * @param location
     */
    setAccumulationPointValue(location: ChartLocation): boolean;
    /**
     * Method to set the element style for accumulation / chart annotation.
     * @private
     * @param location
     * @param element
     * @param parentElement
     */
    setElementStyle(location: ChartLocation, element: HTMLElement, parentElement: HTMLElement): void;
    /**
     * Method to calculate the alignment value for annotation.
     * @private
     * @param alignment
     * @param size
     * @param value
     */
    setAlignmentValue(alignment: Alignment | Position, size: number, value: number): number;
}
//node_modules/@syncfusion/ej2-charts/src/common/common.d.ts
/**
 * Common directory file
 */ 
//node_modules/@syncfusion/ej2-charts/src/common/index.d.ts
/**
 * Chart and accumulation common files
 */
//node_modules/@syncfusion/ej2-charts/src/common/legend/legend-model.d.ts
/**
 * Interface for a class Location
 */
export interface LocationModel {
    /**
     * X coordinate of the legend in pixels.
     * @default 0
     */
    x?: number;
    /**
     * Y coordinate of the legend in pixels.
     * @default 0
     */
    y?: number;
}
/**
 * Interface for a class LegendSettings
 */
export interface LegendSettingsModel {
    /**
     * If set to true, legend will be visible.
     * @default true
     */
    visible?: boolean;
    /**
     * The height of the legend in pixels.
     * @default null
     */
    height?: string;
    /**
     * The width of the legend in pixels.
     * @default null
     */
    width?: string;
    /**
     * Specifies the location of the legend, relative to the chart.
     * If x is 20, legend moves by 20 pixels to the right of the chart. It requires the `position` to be `Custom`.
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let chart$: Chart = new Chart({
     * ...
     *   legendSettings: {
     *     visible: true,
     *     position: 'Custom',
     *     location: { x: 100, y: 150 },
     *   },
     * ...
     * });
     * chart.appendTo('#Chart');
     * ```
     */
    location?: LocationModel;
    /**
     * Position of the legend in the chart are,
     * * Auto: Places the legend based on area type.
     * * Top: Displays the legend at the top of the chart.
     * * Left: Displays the legend at the left of the chart.
     * * Bottom: Displays the legend at the bottom of the chart.
     * * Right: Displays the legend at the right of the chart.
     * * Custom: Displays the legend  based on the given x and y values.
     * @default 'Auto'
     */
    position?: LegendPosition;
    /**
     * Option to customize the padding between legend items.
     * @default 8
     */
    padding?: number;
    /**
     * Legend in chart can be aligned as follows:
     * * Near: Aligns the legend to the left of the chart.
     * * Center: Aligns the legend to the center of the chart.
     * * Far: Aligns the legend to the right of the chart.
     * @default 'Center'
     */
    alignment?: Alignment;
    /**
     * Options to customize the legend text.
     */
    textStyle?: FontModel;
    /**
     * Shape height of the legend in pixels.
     * @default 10
     */
    shapeHeight?: number;
    /**
     * Shape width of the legend in pixels.
     * @default 10
     */
    shapeWidth?: number;
    /**
     * Options to customize the border of the legend.
     */
    border?: BorderModel;
    /**
     *  Options to customize left, right, top and bottom margins of the chart.
     */
    margin?: MarginModel;
    /**
     * Padding between the legend shape and text.
     * @default 5
     */
    shapePadding?: number;
    /**
     * The background color of the legend that accepts value in hex and rgba as a valid CSS color string.
     * @default 'transparent'
     */
    background?: string;
    /**
     * Opacity of the legend.
     * @default 1
     */
    opacity?: number;
    /**
     * If set to true, series' visibility collapses based on the legend visibility.
     * @default true
     */
    toggleVisibility?: boolean;
    /**
     * Description for legends.
     * @default null
     */
    description?: string;
    /**
     * TabIndex value for the legend.
     * @default 3
     */
    tabIndex?: number;
}
/**
 * Interface for a class BaseLegend
 * @private
 */
export interface BaseLegendModel {
}
/**
 * Interface for a class LegendOptions
 * @private
 */
export interface LegendOptionsModel {
}
//node_modules/@syncfusion/ej2-charts/src/common/legend/legend.d.ts
/**
 * Configures the location for the legend.
 */
export  class Location extends base.ChildProperty<Location> {
    /**
     * X coordinate of the legend in pixels.
     * @default 0
     */
    x: number;
    /**
     * Y coordinate of the legend in pixels.
     * @default 0
     */
    y: number;
}
/**
 * Configures the legends in charts.
 */
export  class LegendSettings extends base.ChildProperty<LegendSettings> {
    /**
     * If set to true, legend will be visible.
     * @default true
     */
    visible: boolean;
    /**
     * The height of the legend in pixels.
     * @default null
     */
    height: string;
    /**
     * The width of the legend in pixels.
     * @default null
     */
    width: string;
    /**
     * Specifies the location of the legend, relative to the chart.
     * If x is 20, legend moves by 20 pixels to the right of the chart. It requires the `position` to be `Custom`.
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let chart$: Chart = new Chart({
     * ...
     *   legendSettings: {
     *     visible: true,
     *     position: 'Custom',
     *     location: { x: 100, y: 150 },
     *   },
     * ...
     * });
     * chart.appendTo('#Chart');
     * ```
     */
    location: LocationModel;
    /**
     * Position of the legend in the chart are,
     * * Auto: Places the legend based on area type.
     * * Top: Displays the legend at the top of the chart.
     * * Left: Displays the legend at the left of the chart.
     * * Bottom: Displays the legend at the bottom of the chart.
     * * Right: Displays the legend at the right of the chart.
     * * Custom: Displays the legend  based on the given x and y values.
     * @default 'Auto'
     */
    position: LegendPosition;
    /**
     * Option to customize the padding between legend items.
     * @default 8
     */
    padding: number;
    /**
     * Legend in chart can be aligned as follows:
     * * Near: Aligns the legend to the left of the chart.
     * * Center: Aligns the legend to the center of the chart.
     * * Far: Aligns the legend to the right of the chart.
     * @default 'Center'
     */
    alignment: Alignment;
    /**
     * Options to customize the legend text.
     */
    textStyle: FontModel;
    /**
     * Shape height of the legend in pixels.
     * @default 10
     */
    shapeHeight: number;
    /**
     * Shape width of the legend in pixels.
     * @default 10
     */
    shapeWidth: number;
    /**
     * Options to customize the border of the legend.
     */
    border: BorderModel;
    /**
     *  Options to customize left, right, top and bottom margins of the chart.
     */
    margin: MarginModel;
    /**
     * Padding between the legend shape and text.
     * @default 5
     */
    shapePadding: number;
    /**
     * The background color of the legend that accepts value in hex and rgba as a valid CSS color string.
     * @default 'transparent'
     */
    background: string;
    /**
     * Opacity of the legend.
     * @default 1
     */
    opacity: number;
    /**
     * If set to true, series' visibility collapses based on the legend visibility.
     * @default true
     */
    toggleVisibility: boolean;
    /**
     * Description for legends.
     * @default null
     */
    description: string;
    /**
     * TabIndex value for the legend.
     * @default 3
     */
    tabIndex: number;
}
/**
 * Legend base class for Chart and Accumulation chart.
 * @private
 */
export  class BaseLegend {
    protected chart: Chart | AccumulationChart;
    protected legend: LegendSettingsModel;
    protected maxItemHeight: number;
    protected isPaging: boolean;
    private clipPathHeight;
    totalPages: number;
    protected isVertical: boolean;
    private rowCount;
    private columnCount;
    private pageButtonSize;
    protected pageXCollections: number[];
    protected maxColumns: number;
    private isTrimmed;
    maxWidth: number;
    protected legendID: string;
    private clipRect;
    private legendTranslateGroup;
    protected currentPage: number;
    private isChartControl;
    protected library: Legend | AccumulationLegend;
    /**  @private */
    position: LegendPosition;
    /**
     * Gets the legend bounds in chart.
     * @private
     */
    legendBounds: svgBase.Rect;
    /** @private */
    legendCollections: LegendOptions[];
    /** @private */
    clearTooltip: number;
    protected pagingClipRect: RectOption;
    protected currentPageNumber: number;
    protected legendRegions: ILegendRegions[];
    protected pagingRegions: svgBase.Rect[];
    protected totalNoOfPages: number;
    /** @private */
    calTotalPage: boolean;
    /**
     * Constructor for the dateTime module.
     * @private
     */
    constructor(chart?: Chart | AccumulationChart);
    /**
     * Calculate the bounds for the legends.
     * @return {void}
     * @private
     */
    calculateLegendBounds(rect: svgBase.Rect, availableSize: svgBase.Size): void;
    /**
     * To find legend position based on available size for chart and accumulation chart
     */
    private getPosition;
    /**
     * To set bounds for chart and accumulation chart
     */
    protected setBounds(computedWidth: number, computedHeight: number, legend: LegendSettingsModel, legendBounds: svgBase.Rect): void;
    /**
     * To find legend location based on position, alignment for chart and accumulation chart
     */
    private getLocation;
    /**
     * To find legend alignment for chart and accumulation chart
     */
    private alignLegend;
    /**
     * Renders the legend.
     * @return {void}
     * @private
     */
    renderLegend(chart: Chart | AccumulationChart, legend: LegendSettingsModel, legendBounds: svgBase.Rect, redraw?: boolean): void;
    /**
     * To find first valid legend text index for chart and accumulation chart
     */
    private findFirstLegendPosition;
    /**
     * To create legend rendering elements for chart and accumulation chart
     */
    private createLegendElements;
    /**
     * To render legend symbols for chart and accumulation chart
     */
    protected renderSymbol(legendOption: LegendOptions, group: Element, i: number): void;
    /**
     * To render legend text for chart and accumulation chart
     */
    protected renderText(chart: Chart | AccumulationChart, legendOption: LegendOptions, group: Element, textOptions: svgBase.TextOption, i: number): void;
    /**
     * To render legend paging elements for chart and accumulation chart
     */
    private renderPagingElements;
    /**
     * To translate legend pages for chart and accumulation chart
     */
    protected translatePage(pagingText: Element, page: number, pageNumber: number): number;
    /**
     * To change legend pages for chart and accumulation chart
     */
    protected changePage(event: Event, pageUp: boolean): void;
    /**
     * To find legend elements id based on chart or accumulation chart
     * @private
     */
    generateId(option: LegendOptions, prefix: string, count: number): string;
    /**
     * To show or hide trimmed text tooltip for legend.
     * @return {void}
     * @private
     */
    move(event: Event): void;
}
/**
 * Class for legend options
 * @private
 */
export  class LegendOptions {
    render: boolean;
    text: string;
    fill: string;
    shape: LegendShape;
    visible: boolean;
    type: ChartSeriesType | AccumulationType;
    textSize: svgBase.Size;
    location: ChartLocation;
    pointIndex?: number;
    seriesIndex?: number;
    markerShape?: ChartShape;
    markerVisibility?: boolean;
    constructor(text: string, fill: string, shape: LegendShape, visible: boolean, type: ChartSeriesType | AccumulationType, markerShape?: ChartShape, markerVisibility?: boolean, pointIndex?: number, seriesIndex?: number);
}
//node_modules/@syncfusion/ej2-charts/src/common/model/base-model.d.ts
/**
 * Interface for a class Connector
 */
export interface ConnectorModel {
    /**
     * specifies the type of the connector line. They are
     * * Smooth
     * * Line
     * @default 'Line'
     */
    type?: ConnectorType;
    /**
     * Color of the connector line.
     * @default null
     */
    color?: string;
    /**
     * Width of the connector line in pixels.
     * @default 1
     */
    width?: number;
    /**
     * Length of the connector line in pixels.
     * @default null
     */
    length?: string;
    /**
     * dashArray of the connector line.
     * @default ''
     */
    dashArray?: string;
}
/**
 * Interface for a class Font
 */
export interface FontModel {
    /**
     * FontStyle for the text.
     * @default 'Normal'
     */
    fontStyle?: string;
    /**
     * Font size for the text.
     * @default '16px'
     */
    size?: string;
    /**
     * FontWeight for the text.
     * @default 'Normal'
     */
    fontWeight?: string;
    /**
     * Color for the text.
     * @default ''
     */
    color?: string;
    /**
     * text alignment
     * @default 'Center'
     */
    textAlignment?: Alignment;
    /**
     * FontFamily for the text.
     */
    fontFamily?: string;
    /**
     * Opacity for the text.
     * @default 1
     */
    opacity?: number;
    /**
     * Specifies the chart title text overflow
     * @default 'Trim'
     */
    textOverflow?: TextOverflow;
}
/**
 * Interface for a class Border
 */
export interface BorderModel {
    /**
     * The color of the border that accepts value in hex and rgba as a valid CSS color string.
     * @default ''
     */
    color?: string;
    /**
     * The width of the border in pixels.
     * @default 1
     */
    width?: number;
}
/**
 * Interface for a class Offset
 */
export interface OffsetModel {
    /**
     * x value of the marker position
     * @default 0
     */
    x?: number;
    /**
     * y value of the marker position
     * @default 0
     */
    y?: number;
}
/**
 * Interface for a class ChartArea
 */
export interface ChartAreaModel {
    /**
     * Options to customize the border of the chart area.
     */
    border?: BorderModel;
    /**
     * The background of the chart area that accepts value in hex and rgba as a valid CSS color string..
     * @default 'transparent'
     */
    background?: string;
    /**
     * The opacity for background.
     * @default 1
     */
    opacity?: number;
}
/**
 * Interface for a class Margin
 */
export interface MarginModel {
    /**
     * Left margin in pixels.
     * @default 10
     */
    left?: number;
    /**
     * Right margin in pixels.
     * @default 10
     */
    right?: number;
    /**
     * Top margin in pixels.
     * @default 10
     */
    top?: number;
    /**
     * Bottom margin in pixels.
     * @default 10
     */
    bottom?: number;
}
/**
 * Interface for a class Animation
 */
export interface AnimationModel {
    /**
     * If set to true, series gets animated on initial loading.
     * @default true
     */
    enable?: boolean;
    /**
     * The duration of animation in milliseconds.
     * @default 1000
     */
    duration?: number;
    /**
     * The option to delay animation of the series.
     * @default 0
     */
    delay?: number;
}
/**
 * Interface for a class Indexes
 */
export interface IndexesModel {
    /**
     * Specifies the series index
     * @default 0
     * @aspType int
     */
    series?: number;
    /**
     * Specifies the point index
     * @default 0
     * @aspType int
     */
    point?: number;
}
/**
 * Interface for a class CornerRadius
 */
export interface CornerRadiusModel {
    /**
     * Specifies the top left corner radius value
     * @default 0
     */
    topLeft?: number;
    /**
     * Specifies the top right corner radius value
     * @default 0
     */
    topRight?: number;
    /**
     * Specifies the bottom left corner radius value
     * @default 0
     */
    bottomLeft?: number;
    /**
     * Specifies the bottom right corner radius value
     * @default 0
     */
    bottomRight?: number;
}
/**
 * Interface for a class Index
 * @private
 */
export interface IndexModel {
}
/**
 * Interface for a class EmptyPointSettings
 */
export interface EmptyPointSettingsModel {
    /**
     * To customize the fill color of empty points.
     * @default null
     */
    fill?: string;
    /**
     * Options to customize the border of empty points.
     * @default "{color: 'transparent', width: 0}"
     */
    border?: BorderModel;
    /**
     * To customize the mode of empty points.
     * @default Gap
     */
    mode?: EmptyPointMode | AccEmptyPointMode;
}
/**
 * Interface for a class DragSettings
 */
export interface DragSettingsModel {
    /**
     * To enable the drag the points
     * @default false
     */
    enable?: boolean;
    /**
     * To set the minimum y of the point
     * @default null
     */
    minY?: number;
    /**
     * To set the maximum y of the point
     * @default null
     */
    maxY?: number;
    /**
     * To set the color of the edited point
     * @default null
     */
    fill?: string;
}
/**
 * Interface for a class TooltipSettings
 */
export interface TooltipSettingsModel {
    /**
     * Enables / Disables the visibility of the tooltip.
     * @default false.
     */
    enable?: boolean;
    /**
     * Enables / Disables the visibility of the marker.
     * @default true.
     */
    enableMarker?: boolean;
    /**
     * If set to true, a single ToolTip will be displayed for every index.
     * @default false.
     */
    shared?: boolean;
    /**
     * The fill color of the tooltip that accepts value in hex and rgba as a valid CSS color string.
     * @default null 
     */
    fill?: string;
    /**
     * Header for tooltip. 
     * @default null
     */
    header?: string;
    /**
     * The fill color of the tooltip that accepts value in hex and rgba as a valid CSS color string. 
     * @default 0.75
     */
    opacity?: number;
    /**
     * Options to customize the ToolTip text.
     */
    textStyle?: FontModel;
    /**
     * Format the ToolTip content.
     * @default null.
     */
    format?: string;
    /**
     * Custom template to format the ToolTip content. Use ${x} and ${y} as the placeholder text to display the corresponding data point.
     * @default null.
     */
    template?: string;
    /**
     * If set to true, ToolTip will animate while moving from one point to another.
     * @default true.
     */
    enableAnimation?: boolean;
    /**
     * Options to customize tooltip borders.
     */
    border?: BorderModel;
}
/**
 * Interface for a class Periods
 */
export interface PeriodsModel {
    /**
     * IntervalType of button
     * @default 'Years'
     */
    intervalType?: RangeIntervalType;
    /**
     * Count value for the button
     * @default 1
     */
    interval?: number;
    /**
     * Text to be displayed on the button
     * @default null
     */
    text?: string;
    /**
     * To select the default period
     * @default false
     */
    selected?: boolean;
}
/**
 * Interface for a class PeriodSelectorSettings
 */
export interface PeriodSelectorSettingsModel {
    /**
     * Height for the period selector
     * @default 43
     */
    height?: number;
    /**
     * vertical position of the period selector
     * @default 'Bottom'
     */
    position?: PeriodSelectorPosition;
    /**
     * Buttons
     */
    periods?: PeriodsModel[];
}
//node_modules/@syncfusion/ej2-charts/src/common/model/base.d.ts
/**
 * Defines the appearance of the connectors
 */
export  class Connector extends base.ChildProperty<Connector> {
    /**
     * specifies the type of the connector line. They are
     * * Smooth
     * * Line
     * @default 'Line'
     */
    type: ConnectorType;
    /**
     * Color of the connector line.
     * @default null
     */
    color: string;
    /**
     * Width of the connector line in pixels.
     * @default 1
     */
    width: number;
    /**
     * Length of the connector line in pixels.
     * @default null
     */
    length: string;
    /**
     * dashArray of the connector line.
     * @default ''
     */
    dashArray: string;
}
/**
 * Configures the fonts in charts.
 */
export  class Font extends base.ChildProperty<Font> {
    /**
     * FontStyle for the text.
     * @default 'Normal'
     */
    fontStyle: string;
    /**
     * Font size for the text.
     * @default '16px'
     */
    size: string;
    /**
     * FontWeight for the text.
     * @default 'Normal'
     */
    fontWeight: string;
    /**
     * Color for the text.
     * @default ''
     */
    color: string;
    /**
     * text alignment
     * @default 'Center'
     */
    textAlignment: Alignment;
    /**
     * FontFamily for the text.
     */
    fontFamily: string;
    /**
     * Opacity for the text.
     * @default 1
     */
    opacity: number;
    /**
     * Specifies the chart title text overflow
     * @default 'Trim'
     */
    textOverflow: TextOverflow;
}
/**
 * Configures the borders in the chart.
 */
export  class Border extends base.ChildProperty<Border> {
    /**
     * The color of the border that accepts value in hex and rgba as a valid CSS color string.
     * @default ''
     */
    color: string;
    /**
     * The width of the border in pixels.
     * @default 1
     */
    width: number;
}
/**
 * Configures the marker position in the chart.
 */
export  class Offset extends base.ChildProperty<Offset> {
    /**
     * x value of the marker position
     * @default 0
     */
    x: number;
    /**
     * y value of the marker position
     * @default 0
     */
    y: number;
}
/**
 * Configures the chart area.
 */
export  class ChartArea extends base.ChildProperty<ChartArea> {
    /**
     * Options to customize the border of the chart area.
     */
    border: BorderModel;
    /**
     * The background of the chart area that accepts value in hex and rgba as a valid CSS color string..
     * @default 'transparent'
     */
    background: string;
    /**
     * The opacity for background.
     * @default 1
     */
    opacity: number;
}
/**
 * Configures the chart margins.
 */
export  class Margin extends base.ChildProperty<Margin> {
    /**
     * Left margin in pixels.
     * @default 10
     */
    left: number;
    /**
     * Right margin in pixels.
     * @default 10
     */
    right: number;
    /**
     * Top margin in pixels.
     * @default 10
     */
    top: number;
    /**
     * Bottom margin in pixels.
     * @default 10
     */
    bottom: number;
}
/**
 * Configures the animation behavior for chart series.
 */
export  class Animation extends base.ChildProperty<Animation> {
    /**
     * If set to true, series gets animated on initial loading.
     * @default true
     */
    enable: boolean;
    /**
     * The duration of animation in milliseconds.
     * @default 1000
     */
    duration: number;
    /**
     * The option to delay animation of the series.
     * @default 0
     */
    delay: number;
}
/**
 * Series and point index
 * @public
 */
export  class Indexes extends base.ChildProperty<Indexes> {
    /**
     * Specifies the series index
     * @default 0
     * @aspType int
     */
    series: number;
    /**
     * Specifies the point index
     * @default 0
     * @aspType int
     */
    point: number;
}
/**
 * Column series rounded corner options
 */
export  class CornerRadius extends base.ChildProperty<CornerRadius> {
    /**
     * Specifies the top left corner radius value
     * @default 0
     */
    topLeft: number;
    /**
     * Specifies the top right corner radius value
     * @default 0
     */
    topRight: number;
    /**
     * Specifies the bottom left corner radius value
     * @default 0
     */
    bottomLeft: number;
    /**
     * Specifies the bottom right corner radius value
     * @default 0
     */
    bottomRight: number;
}
/**
 * @private
 */
export  class Index {
    series: number;
    point: number;
    constructor(seriesIndex: number, pointIndex?: number);
}
/**
 * Configures the Empty Points of series
 */
export  class EmptyPointSettings extends base.ChildProperty<EmptyPointSettings> {
    /**
     * To customize the fill color of empty points.
     * @default null
     */
    fill: string;
    /**
     * Options to customize the border of empty points.
     * @default "{color: 'transparent', width: 0}"
     */
    border: BorderModel;
    /**
     * To customize the mode of empty points.
     * @default Gap
     */
    mode: EmptyPointMode | AccEmptyPointMode;
}
/**
 * Configures the drag settings of series
 */
export  class DragSettings extends base.ChildProperty<DragSettings> {
    /**
     * To enable the drag the points
     * @default false
     */
    enable: boolean;
    /**
     * To set the minimum y of the point
     * @default null
     */
    minY: number;
    /**
     * To set the maximum y of the point
     * @default null
     */
    maxY: number;
    /**
     * To set the color of the edited point
     * @default null
     */
    fill: string;
}
/**
 * Configures the ToolTips in the chart.
 * @public
 */
export  class TooltipSettings extends base.ChildProperty<TooltipSettings> {
    /**
     * Enables / Disables the visibility of the tooltip.
     * @default false.
     */
    enable: boolean;
    /**
     * Enables / Disables the visibility of the marker.
     * @default true.
     */
    enableMarker: boolean;
    /**
     * If set to true, a single ToolTip will be displayed for every index.
     * @default false.
     */
    shared: boolean;
    /**
     * The fill color of the tooltip that accepts value in hex and rgba as a valid CSS color string.
     * @default null
     */
    fill: string;
    /**
     * Header for tooltip.
     * @default null
     */
    header: string;
    /**
     * The fill color of the tooltip that accepts value in hex and rgba as a valid CSS color string.
     * @default 0.75
     */
    opacity: number;
    /**
     * Options to customize the ToolTip text.
     */
    textStyle: FontModel;
    /**
     * Format the ToolTip content.
     * @default null.
     */
    format: string;
    /**
     * Custom template to format the ToolTip content. Use ${x} and ${y} as the placeholder text to display the corresponding data point.
     * @default null.
     */
    template: string;
    /**
     * If set to true, ToolTip will animate while moving from one point to another.
     * @default true.
     */
    enableAnimation: boolean;
    /**
     * Options to customize tooltip borders.
     */
    border: BorderModel;
}
/**
 * button settings in period selector
 */
export  class Periods extends base.ChildProperty<Periods> {
    /**
     * IntervalType of button
     * @default 'Years'
     */
    intervalType: RangeIntervalType;
    /**
     * Count value for the button
     * @default 1
     */
    interval: number;
    /**
     * Text to be displayed on the button
     * @default null
     */
    text: string;
    /**
     * To select the default period
     * @default false
     */
    selected: boolean;
}
/**
 * Period Selector Settings
 */
export  class PeriodSelectorSettings extends base.ChildProperty<PeriodSelectorSettings> {
    /**
     * Height for the period selector
     * @default 43
     */
    height: number;
    /**
     * vertical position of the period selector
     * @default 'Bottom'
     */
    position: PeriodSelectorPosition;
    /**
     * Buttons
     */
    periods: PeriodsModel[];
}
//node_modules/@syncfusion/ej2-charts/src/common/model/constants.d.ts
/**
 * Specifies the chart constant value
 */
/** @private */
export  const loaded: string;
/** @private */
export  const legendClick: string;
/** @private */
export  const load: string;
/** @private */
export  const animationComplete: string;
/** @private */
export  const legendRender: string;
/** @private */
export  const textRender: string;
/** @private */
export  const pointRender: string;
/** @private */
export  const seriesRender: string;
/** @private */
export  const axisLabelRender: string;
/** @private */
export  const axisRangeCalculated: string;
/** @private */
export  const axisMultiLabelRender: string;
/** @private */
export  const tooltipRender: string;
/** @private */
export  const chartMouseMove: string;
/** @private */
export  const chartMouseClick: string;
/** @private */
export  const pointClick: string;
/** @private */
export  const pointMove: string;
/** @private */
export  const chartMouseLeave: string;
/** @private */
export  const chartMouseDown: string;
/** @private */
export  const chartMouseUp: string;
/** @private */
export  const zoomComplete: string;
/** @private */
export  const dragComplete: string;
/** @private */
export  const selectionComplete: string;
/** @private */
export  const resized: string;
/** @private */
export  const beforePrint: string;
/** @private */
export  const annotationRender: string;
/** @private */
export  const scrollStart: string;
/** @private */
export  const scrollEnd: string;
/** @private */
export  const scrollChanged: string;
/** @private */
export  const stockEventRender: string;
/** @private */
export  const multiLevelLabelClick: string;
/** @private */
export  const dragStart: string;
/** @private */
export  const drag: string;
/** @private */
export  const dragEnd: string;
//node_modules/@syncfusion/ej2-charts/src/common/model/data.d.ts
/**
 * data module is used to generate query and dataSource
 */
export  class Data {
    private dataManager;
    private query;
    /**
     * Constructor for data module
     * @private
     */
    constructor(dataSource?: Object | data.DataManager, query?: data.Query);
    /**
     * The function used to initialize dataManager and query
     * @return {void}
     * @private
     */
    initDataManager(dataSource: Object | data.DataManager, query: data.Query): void;
    /**
     * The function used to generate updated data.Query from chart model
     * @return {void}
     * @private
     */
    generateQuery(): data.Query;
    /**
     * The function used to get dataSource by executing given data.Query
     * @param  {data.Query} query - A data.Query that specifies to generate dataSource
     * @return {void}
     * @private
     */
    getData(query: data.Query): Promise<Object>;
}
//node_modules/@syncfusion/ej2-charts/src/common/model/interface.d.ts
export interface ISelectorRenderArgs {
    /** Defines the thumb size of the slider */
    thumbSize: number;
    /** Defines the selector appending element */
    element: HTMLElement;
    /** Defines the selector width */
    width: number;
    /** Defines the selector height */
    height: number;
}
/** @private */
export interface IFontMapping {
    size?: string;
    color?: string;
    fontWeight?: string;
    fontStyle?: string;
    fontFamily?: string;
    opacity?: number;
}
/** @private */
export interface IShapes {
    renderOption?: Object;
    functionName?: string;
}
/** @private */
/**
 * Specifies the Theme style for scrollbar.
 */
export interface IScrollbarThemeStyle {
    backRect: string;
    thumb: string;
    circle: string;
    circleHover: string;
    arrow: string;
    grip: string;
    arrowHover?: string;
    backRectBorder?: string;
}
export interface ILegendRegions {
    rect: svgBase.Rect;
    index: number;
}
/**
 * Period selector component interface
 * @private
 */
export interface IPeriodSelectorControl {
    /**
     * Element for the control
     */
    element: HTMLElement;
    /**
     * Series min value.
     */
    seriesXMin: number;
    /**
     * Series max value.
     */
    seriesXMax: number;
    /**
     * Start value for the axis.
     */
    startValue: number;
    /**
     * End value for the axis.
     */
    endValue: number;
    /**
     * Range slider instance.
     */
    rangeSlider: RangeSlider;
    /**
     * To disable the range selector.
     */
    disableRangeSelector: boolean;
    /**
     * To config period selector settings.
     */
    periods: PeriodsModel[];
    /**
     * Range navigator
     */
    rangeNavigatorControl: RangeNavigator;
}
//node_modules/@syncfusion/ej2-charts/src/common/model/theme.d.ts
/**
 * Specifies Chart Themes
 */
export  namespace Theme {
    /** @private */
    let axisLabelFont: IFontMapping;
    /** @private */
    let axisTitleFont: IFontMapping;
    /** @private */
    let chartTitleFont: IFontMapping;
    /** @private */
    let chartSubTitleFont: IFontMapping;
    /** @private */
    let crosshairLabelFont: IFontMapping;
    /** @private */
    let tooltipLabelFont: IFontMapping;
    /** @private */
    let legendLabelFont: IFontMapping;
    /** @private */
    let stripLineLabelFont: IFontMapping;
    /** @private */
    let stockEventFont: IFontMapping;
}
/** @private */
export  function getSeriesColor(theme: ChartTheme | AccumulationTheme): string[];
/** @private */
export  function getThemeColor(theme: ChartTheme | AccumulationTheme): IThemeStyle;
/** @private */
export  function getScrollbarThemeColor(theme: ChartTheme): IScrollbarThemeStyle;
//node_modules/@syncfusion/ej2-charts/src/common/period-selector/period-selector.d.ts
/**
 * Period selector class
 */
export  class PeriodSelector {
    periodSelectorSize: svgBase.Rect;
    periodSelectorDiv: Element;
    control: IPeriodSelectorControl;
    toolbar: navigations.Toolbar;
    datePicker: calendars.DateRangePicker;
    triggerChange: boolean;
    private nodes;
    calendarId: string;
    selectedIndex: number;
    datePickerTriggered: boolean;
    rootControl: StockChart | RangeNavigator;
    constructor(control: RangeNavigator | StockChart);
    /**
     * To set the control values
     * @param control
     */
    setControlValues(control: RangeNavigator | StockChart): void;
    /**
     *  To initialize the period selector properties
     */
    appendSelector(options: ISelectorRenderArgs, x?: number): void;
    /**
     * renderSelector div
     * @param control
     */
    renderSelectorElement(control?: RangeNavigator, options?: ISelectorRenderArgs, x?: number): void;
    /**
     * renderSelector elements
     */
    renderSelector(): void;
    private updateCustomElement;
    /**
     * To set and deselect the acrive style
     * @param buttons
     */
    private setSelectedStyle;
    /**
     * Button click handling
     */
    private buttonClick;
    /**
     *
     * @param type updatedRange for selector
     * @param end
     * @param interval
     */
    changedRange(type: RangeIntervalType, end: number, interval: number): Date;
    /**
     * Get module name
     */
    protected getModuleName(): string;
    /**
     * To destroy the period selector.
     * @return {void}
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-charts/src/common/scrollbar/scrollbar-elements.d.ts
/**
 * Create scrollbar svg.
 * @return {void}
 */
export  function createScrollSvg(scrollbar: ScrollBar, renderer: svgBase.SvgRenderer): void;
/**
 * Scrollbar elements renderer
 */
export  class ScrollElements {
    /** @private */
    thumbRectX: number;
    /** @private */
    thumbRectWidth: number;
    /** @private */
    leftCircleEle: Element;
    /** @private */
    rightCircleEle: Element;
    /** @private */
    leftArrowEle: Element;
    /** @private */
    rightArrowEle: Element;
    /** @private */
    gripCircle: Element;
    /** @private */
    slider: Element;
    /** @private */
    chartId: string;
    /**
     * Constructor for scroll elements
     * @param scrollObj
     */
    constructor(chart: Chart);
    /**
     * Render scrollbar elements.
     * @return {void}
     * @private
     */
    renderElements(scroll: ScrollBar, renderer: svgBase.SvgRenderer): Element;
    /**
     * Method to render back rectangle of scrollbar
     * @param scroll
     */
    private backRect;
    /**
     * Method to render arrows
     * @param scroll
     */
    private arrows;
    /**
     * Methods to set the arrow width
     * @param thumbRectX
     * @param thumbRectWidth
     * @param height
     */
    setArrowDirection(thumbRectX: number, thumbRectWidth: number, height: number): void;
    /**
     * Method to render thumb
     * @param scroll
     * @param renderer
     * @param parent
     */
    thumb(scroll: ScrollBar, renderer: svgBase.SvgRenderer, parent: Element): void;
    /**
     *  Method to render circles
     * @param scroll
     * @param renderer
     * @param parent
     */
    private renderCircle;
    /**
     * Method to render grip elements
     * @param scroll
     * @param renderer
     * @param parent
     */
    private thumbGrip;
}
//node_modules/@syncfusion/ej2-charts/src/common/scrollbar/scrollbar.d.ts
/**
 * Scrollbar Base
 */
export  class ScrollBar {
    axis: Axis;
    component: Chart;
    zoomFactor: number;
    zoomPosition: number;
    svgObject: Element;
    width: number;
    height: number;
    /** @private */
    elements: Element[];
    /** @private */
    isVertical: boolean;
    /** @private */
    isThumbDrag: boolean;
    /** @private */
    mouseX: number;
    /** @private */
    mouseY: number;
    /** @private */
    startX: number;
    /** @private */
    scrollX: number;
    /** @private */
    scrollY: number;
    /** @private */
    animateDuration: number;
    /** @private */
    browserName: string;
    /** @private */
    isPointer: Boolean;
    /** @private */
    isScrollUI: boolean;
    /** @private */
    scrollbarThemeStyle: IScrollbarThemeStyle;
    /** @private */
    actualRange: number;
    /** @private */
    scrollRange: VisibleRangeModel;
    /** @private */
    isLazyLoad: boolean;
    /** @private */
    previousStart: number;
    /** @private */
    previousEnd: number;
    private scrollElements;
    private isResizeLeft;
    private isResizeRight;
    private previousXY;
    private previousWidth;
    private previousRectX;
    private mouseMoveListener;
    private mouseUpListener;
    private valueType;
    axes: Axis[];
    private startZoomPosition;
    private startZoomFactor;
    private startRange;
    private scrollStarted;
    private isScrollEnd;
    private isCustomHeight;
    /**
     * Constructor for creating scrollbar
     * @param component
     * @param axis
     */
    constructor(component: Chart, axis?: Axis);
    /**
     * To Mouse x and y position
     * @param e
     */
    private getMouseXY;
    /**
     * Method to bind events for scrollbar svg object
     * @param element
     */
    private wireEvents;
    /**
     * Method to remove events for srcollbar svg object
     * @param element
     */
    private unWireEvents;
    /**
     * Handles the mouse down on scrollbar
     * @param e
     */
    scrollMouseDown(e: PointerEvent): void;
    /**
     * To check the matched string
     * @param id
     * @param match
     */
    private isExist;
    /**
     * To check current poisition is within scrollbar region
     * @param currentX
     */
    private isWithIn;
    /**
     * Method to find move length of thumb
     * @param mouseXY
     * @param thumbX
     * @param circleRadius
     */
    private moveLength;
    /**
     * Method to calculate zoom factor and position
     * @param currentX
     * @param currentWidth
     */
    private setZoomFactorPosition;
    /**
     * Handles the mouse move on scrollbar
     * @param e
     */
    scrollMouseMove(e: PointerEvent): void;
    /**
     * Handles the mouse wheel on scrollbar
     * @param e
     */
    scrollMouseWheel(e: WheelEvent): void;
    /**
     * Handles the mouse up on scrollbar
     * @param e
     */
    scrollMouseUp(e: PointerEvent): void;
    calculateMouseWheelRange(scrollThumbX: number, scrollThumbWidth: number): IScrollEventArgs;
    /**
     * Range calculation for lazy loading
     */
    calculateLazyRange(scrollThumbX: number, scrollThumbWidth: number, thumbMove?: string): IScrollEventArgs;
    /**
     * Get start and end values
     */
    private getStartEnd;
    /**
     * To render scroll bar
     * @private
     */
    render(isScrollExist: boolean): Element;
    /**
     * Theming for scrollabr
     */
    private getTheme;
    /**
     * Method to remove existing scrollbar
     */
    removeScrollSvg(): void;
    /**
     * Method to set cursor fpr scrollbar
     * @param target
     */
    private setCursor;
    /**
     * Method to set theme for sollbar
     * @param target
     */
    private setTheme;
    /**
     * To check current axis
     * @param target
     * @param ele
     */
    private isCurrentAxis;
    /**
     * Method to resize thumb
     * @param e
     */
    private resizeThumb;
    /**
     * Method to position the scrollbar thumb
     * @param currentX
     * @param currentWidth
     */
    private positionThumb;
    /**
     * Method to get default values
     */
    private getDefaults;
    /**
     * Lazy load default values
     */
    getLazyDefaults(axis: Axis): void;
    /**
     * Method to get log range
     */
    getLogRange(axis: Axis): ScrollbarSettingsRangeModel;
    /**
     * Method for injecting scrollbar module
     * @param axis
     * @param component
     */
    injectTo(axis: Axis, component: Chart): void;
    /**
     * Method to destroy scrollbar
     */
    destroy(): void;
    /**
     * Method to get scrollbar module name
     */
    getModuleName(): string;
    private getArgs;
}
//node_modules/@syncfusion/ej2-charts/src/common/user-interaction/selection.d.ts
/**
 * Selection Module handles the selection for chart.
 * @private
 */
export  class BaseSelection {
    protected styleId: string;
    protected unselected: string;
    protected control: Chart | AccumulationChart;
    constructor(control: Chart | AccumulationChart);
    /**
     * To create selection styles for series
     */
    protected seriesStyles(): void;
    /**
     * To concat indexes
     */
    protected concatIndexes(userIndexes: IndexesModel[], localIndexes: Indexes[]): Indexes[];
    /**
     * Selected points series visibility checking on legend click
     */
    protected checkVisibility(selectedIndexes: Indexes[]): boolean;
    /**
     * To add svg element style class
     * @private
     */
    addSvgClass(element: Element, className: string): void;
    /**
     * To remove svg element style class
     * @private
     */
    removeSvgClass(element: Element, className: string): void;
    /**
     * To get children from parent element
     */
    protected getChildren(parent: Element): Element[];
}
//node_modules/@syncfusion/ej2-charts/src/common/user-interaction/tooltip.d.ts
/**
 * Tooltip Module used to render the tooltip for series.
 */
export  class BaseTooltip extends ChartData {
    element: HTMLElement;
    elementSize: svgBase.Size;
    textStyle: FontModel;
    isRemove: boolean;
    toolTipInterval: number;
    textElements: Element[];
    inverted: boolean;
    formattedText: string[];
    header: string;
    /** @private */
    valueX: number;
    /** @private */
    valueY: number;
    control: AccumulationChart | Chart;
    text: string[];
    svgTooltip: svgBase.Tooltip;
    headerText: string;
    /**
     * Constructor for tooltip module.
     * @private.
     */
    constructor(chart: Chart | AccumulationChart);
    getElement(id: string): HTMLElement;
    /**
     * Renders the tooltip.
     * @return {void}
     * @private
     */
    getTooltipElement(isTooltip: boolean): HTMLDivElement;
    createElement(): HTMLDivElement;
    pushData(data: PointData | AccPointData, isFirst: boolean, tooltipDiv: HTMLDivElement, isChart: boolean): boolean;
    removeHighlight(chart: Chart | AccumulationChart): void;
    highlightPoint(series: Series | AccumulationSeries, pointIndex: number, highlight: boolean): void;
    highlightPoints(): void;
    createTooltip(chart: Chart | AccumulationChart, isFirst: boolean, location: ChartLocation, clipLocation: ChartLocation, point: Points | AccPoints, shapes: ChartShape[], offset: number, bounds: svgBase.Rect, extraPoints?: PointData[], templatePoint?: Points | AccPoints): void;
    private findPalette;
    private findColor;
    updatePreviousPoint(extraPoints: PointData[]): void;
    fadeOut(data: PointData[], chart: Chart | AccumulationChart): void;
    removeHighlightedMarker(data: PointData[]): void;
    removeText(): void;
    stopAnimation(): void;
    /**
     * Removes the tooltip on mouse leave.
     * @return {void}
     * @private
     */
    removeTooltip(duration: number): void;
}
//node_modules/@syncfusion/ej2-charts/src/common/utils/enum.d.ts
/**
 * Defines Coordinate units of an annotation. They are
 * * Pixel
 * * Point
 */
export  type Units = 
/**  Specifies the pixel value */
'Pixel' | 
/**  Specifies the axis value. */
'Point';
/**
 * Defines the Alignment. They are
 * * near - Align the element to the left.
 * * center - Align the element to the center.
 * * far - Align the element to the right.
 * *
 */
export  type Alignment = 
/** Define the left alignment. */
'Near' | 
/** Define the center alignment. */
'Center' | 
/** Define the right alignment. */
'Far';
/** @private */
export  type SeriesCategories = 
/** Defines the trenline */
'TrendLine' | 
/** Defines the indicator */
'Indicator' | 
/** Defines the normal series */
'Series' | 
/** Defines the Pareto series */
'Pareto';
/**
 * Defines regions of an annotation. They are
 * * Chart
 * * Series
 */
export  type Regions = 
/**  Specifies the chart coordinates */
'Chart' | 
/**  Specifies the series coordinates */
'Series';
/**
 * Defines the Position. They are
 * * top - Align the element to the top.
 * * middle - Align the element to the center.
 * * bottom - Align the element to the bottom.
 * *
 */
export  type Position = 
/** Define the top position. */
'Top' | 
/** Define the middle position. */
'Middle' | 
/** Define the bottom position. */
'Bottom';
/**
 * Defines the export file format.
 * * PNG - export the image file format as png.
 * * JPEG - export the image file format as jpeg.
 */
export  type ExportType = 
/** Used to export a image as png format */
'PNG' | 
/** Used to export a image as jpeg format */
'JPEG' | 
/** Used to export a file as svg format */
'SVG' | 
/** Used to export a file as pdf format */
'PDF' | 
/** Used to print the chart */
'Print';
/**
 * Defines the Text overflow.
 * * None - Shown the chart title with overlap if exceed.
 * * Wrap - Shown the chart title with wrap if exceed.
 * * Trim - Shown the chart title with trim if exceed.
 */
export  type TextOverflow = 
/** Used to show the chart title with overlap to other element */
'None' | 
/** Used to show the chart title with Wrap support */
'Wrap' | 
/** Used to show the chart title with Trim */
'Trim';
/**
 * Defines the interval type of datetime axis. They are
 * * auto - Define the interval of the axis based on data.
 * * quarter - Define the interval of the axis based on data.
 * * years - Define the interval of the axis in years.
 * * months - Define the interval of the axis in months.
 * * weeks - Define the interval of the axis in weeks
 * * days - Define the interval of the axis in days.
 * * hours - Define the interval of the axis in hours.
 * * minutes - Define the interval of the axis in minutes.
 */
export  type RangeIntervalType = 
/** Define the interval of the axis based on data. */
'Auto' | 
/** Define the interval of the axis in years. */
'Years' | 
/** Define the interval of the axis based on quarter */
'Quarter' | 
/** Define the interval of the axis in months. */
'Months' | 
/** Define the intervl of the axis in weeks */
'Weeks' | 
/** Define the interval of the axis in days. */
'Days' | 
/** Define the interval of the axis in hours. */
'Hours' | 
/** Define the interval of the axis in minutes. */
'Minutes' | 
/** Define the interval of the axis in seconds. */
'Seconds';
/**
 * Period selector position
 * *Top
 * *Bottom
 */
export  type PeriodSelectorPosition = 
/** Top position */
'Top' | 
/** Bottom position */
'Bottom';
/**
 * Flag type for stock events
 */
export  type FlagType = 
/** Circle  */
'Circle' | 
/** Square */
'Square' | 
/** Flag */
'Flag' | 
/** Pin type flags */
'Pin' | 
/** Triangle Up */
'Triangle' | 
/** Triangle Down */
'InvertedTriangle' | 
/** Triangle Right */
'TriangleRight' | 
/** Triangle Left */
'TriangleLeft' | 
/** Arrow Up */
'ArrowUp' | 
/** Arrow down */
'ArrowDown' | 
/** Arrow Left */
'ArrowLeft' | 
/** Arrow right */
'ArrowRight' | 
/** Text type */
'Text';
//node_modules/@syncfusion/ej2-charts/src/common/utils/export.d.ts
export  class ExportUtils {
    private control;
    private printWindow;
    /**
     * Constructor for chart and accumulation annotation
     * @param control
     */
    constructor(control: Chart | AccumulationChart | RangeNavigator | StockChart);
    /**
     * To print the accumulation and chart elements
     * @param elements
     */
    print(elements?: string[] | string | Element): void;
    /**
     * To get the html string of the chart and accumulation
     * @param elements
     * @private
     */
    getHTMLContent(elements?: string[] | string | Element): Element;
    /**
     * To export the file as image/svg format
     * @param type
     * @param fileName
     */
    export(type: ExportType, fileName: string, orientation?: pdfExport.PdfPageOrientation, controls?: (Chart | AccumulationChart | RangeNavigator | StockChart)[], width?: number, height?: number, isVertical?: boolean): void;
    /**
     * To trigger the download element
     * @param fileName
     * @param type
     * @param url
     */
    triggerDownload(fileName: string, type: ExportType, url: string, isDownload: boolean): void;
    /**
     * To get the maximum size value
     * @param controls
     * @param name
     */
    private getControlsValue;
    private createCanvas;
    /**
     * To convert svg chart into canvas chart to fix export issue in IE
     * We cant export svg to other formats in IE
     */
    private canvasRender;
    private exportPdf;
    private doexport;
    private exportImage;
}
//node_modules/@syncfusion/ej2-charts/src/common/utils/helper.d.ts
/**
 * Function to sort the dataSource, by default it sort the data in ascending order.
 * @param  {Object} data
 * @param  {string} fields
 * @param  {boolean} isDescending
 * @returns Object
 */
export  function sort(data: Object[], fields: string[], isDescending?: boolean): Object[];
/** @private */
export  function isBreakLabel(label: string): boolean;
/** @private */
export  function rotateTextSize(font: FontModel, text: string, angle: number, chart: Chart): svgBase.Size;
/** @private */
export  function removeElement(id: string | Element): void;
/** @private */
export  function logBase(value: number, base: number): number;
/** @private */
export  function showTooltip(text: string, x: number, y: number, areaWidth: number, id: string, element: Element, isTouch?: boolean): void;
/** @private */
export  function inside(value: number, range: VisibleRangeModel): boolean;
/** @private */
export  function withIn(value: number, range: VisibleRangeModel): boolean;
/** @private */
export  function logWithIn(value: number, axis: Axis): number;
/** @private */
export  function withInRange(previousPoint: Points, currentPoint: Points, nextPoint: Points, series: Series): boolean;
/** @private */
export  function sum(values: number[]): number;
/** @private */
export  function subArraySum(values: Object[], first: number, last: number, index: number[], series: Series): number;
/** @private */
export  function subtractThickness(rect: svgBase.Rect, thickness: Thickness): svgBase.Rect;
/** @private */
export  function subtractRect(rect: svgBase.Rect, thickness: svgBase.Rect): svgBase.Rect;
/** @private */
export  function degreeToLocation(degree: number, radius: number, center: ChartLocation): ChartLocation;
/** @private */
export  function getAngle(center: ChartLocation, point: ChartLocation): number;
/** @private */
export  function subArray(values: number[], index: number): number[];
/** @private */
export  function valueToCoefficient(value: number, axis: Axis): number;
/** @private */
export  function TransformToVisible(x: number, y: number, xAxis: Axis, yAxis: Axis, isInverted?: boolean, series?: Series): ChartLocation;
/**
 * method to find series, point index by element id
 * @private
 */
export  function indexFinder(id: string, isPoint?: boolean): Index;
/** @private */
export  function CoefficientToVector(coefficient: number, startAngle: number): ChartLocation;
/** @private */
export  function valueToPolarCoefficient(value: number, axis: Axis): number;
/** @private */
export  class Mean {
    verticalStandardMean: number;
    horizontalStandardMean: number;
    verticalSquareRoot: number;
    horizontalSquareRoot: number;
    verticalMean: number;
    horizontalMean: number;
    constructor(verticalStandardMean: number, verticalSquareRoot: number, horizontalStandardMean: number, horizontalSquareRoot: number, verticalMean: number, horizontalMean: number);
}
/** @private */
export  class PolarArc {
    startAngle: number;
    endAngle: number;
    innerRadius: number;
    radius: number;
    currentXPosition: number;
    constructor(startAngle?: number, endAngle?: number, innerRadius?: number, radius?: number, currentXPosition?: number);
}
/** @private */
export  function createTooltip(id: string, text: string, top: number, left: number, fontSize: string): void;
/** @private */
export  function createZoomingLabels(chart: Chart, axis: Axis, parent: Element, index: number, isVertical: boolean, rect: svgBase.Rect): Element;
/** @private */
export  function withInBounds(x: number, y: number, bounds: svgBase.Rect, width?: number, height?: number): boolean;
/** @private */
export  function getValueXByPoint(value: number, size: number, axis: Axis): number;
/** @private */
export  function getValueYByPoint(value: number, size: number, axis: Axis): number;
/** @private */
export  function findClipRect(series: Series): void;
/** @private */
export  function firstToLowerCase(str: string): string;
/** @private */
export  function getTransform(xAxis: Axis, yAxis: Axis, invertedAxis: boolean): svgBase.Rect;
/** @private */
export  function getMinPointsDelta(axis: Axis, seriesCollection: Series[]): number;
/** @private */
export  function getAnimationFunction(effect: string): Function;
/**
 * Animation base.Effect Calculation Started Here
 * @param currentTime
 * @param startValue
 * @param endValue
 * @param duration
 * @private
 */
export  function linear(currentTime: number, startValue: number, endValue: number, duration: number): number;
/**
 * Animation base.Effect Calculation End
 * @private
 */
export  function markerAnimate(element: Element, delay: number, duration: number, series: Series | AccumulationSeries, pointIndex: number, point: ChartLocation, isLabel: boolean): void;
/**
 * Animate the rect element
 */
export  function animateRectElement(element: Element, delay: number, duration: number, currentRect: svgBase.Rect, previousRect: svgBase.Rect): void;
/**
 * Animation after legend click a path
 * @param element element to be animated
 * @param direction current direction of the path
 * @param previousDirection previous direction of the path
 */
export  function pathAnimation(element: Element, direction: string, redraw: boolean, previousDirection?: string, animateDuration?: number): void;
/**
 * To append the clip rect element
 * @param redraw
 * @param options
 * @param renderer
 * @param clipPath
 */
export  function appendClipElement(redraw: boolean, options: svgBase.BaseAttibutes, renderer: svgBase.SvgRenderer, clipPath?: string): Element;
/**
 * Triggers the event.
 * @return {void}
 * @private
 */
export  function triggerLabelRender(chart: Chart | RangeNavigator, tempInterval: number, text: string, labelStyle: FontModel, axis: Axis): void;
/**
 * The function used to find whether the range is set.
 * @return {boolean}
 * @private
 */
export  function setRange(axis: Axis): boolean;
/**
 * Calculate desired interval for the axis.
 * @return {void}
 * @private
 */
export  function getActualDesiredIntervalsCount(availableSize: svgBase.Size, axis: Axis): number;
/**
 * Animation for template
 * @private
 */
export  function templateAnimate(element: Element, delay: number, duration: number, name: base.Effect, isRemove?: boolean): void;
/** @private */
export  function drawSymbol(location: ChartLocation, shape: string, size: svgBase.Size, url: string, options: svgBase.PathOption, label: string, renderer?: svgBase.SvgRenderer | svgBase.CanvasRenderer, clipRect?: svgBase.Rect): Element;
/** @private */
export  function calculateShapes(location: ChartLocation, size: svgBase.Size, shape: string, options: svgBase.PathOption, url: string): IShapes;
/** @private */
export  function getRectLocation(startLocation: ChartLocation, endLocation: ChartLocation, outerRect: svgBase.Rect): svgBase.Rect;
/** @private */
export  function minMax(value: number, min: number, max: number): number;
/** @private */
export  function getElement(id: string): Element;
/** @private */
export  function getTemplateFunction(template: string): Function;
/** @private */
export  function createTemplate(childElement: HTMLElement, pointIndex: number, content: string, chart: Chart | AccumulationChart | RangeNavigator, point?: Points | AccPoints, series?: Series | AccumulationSeries): HTMLElement;
/** @private */
export  function getFontStyle(font: FontModel): string;
/** @private */
export  function measureElementRect(element: HTMLElement, redraw?: boolean): ClientRect;
/** @private */
export  function findlElement(elements: NodeList, id: string): Element;
/** @private */
export  function getPoint(x: number, y: number, xAxis: Axis, yAxis: Axis, isInverted?: boolean, series?: Series): ChartLocation;
/** @private */
export  function appendElement(child: Element, parent: Element, redraw?: boolean, animate?: boolean, x?: string, y?: string): void;
/**
 * Method to append child element
 * @param parent
 * @param childElement
 * @param isReplace
 */
export  function appendChildElement(isCanvas: boolean, parent: Element | HTMLElement, childElement: Element | HTMLElement, redraw?: boolean, isAnimate?: boolean, x?: string, y?: string, start?: ChartLocation, direction?: string, forceAnimate?: boolean, isRect?: boolean, previousRect?: svgBase.Rect, animateDuration?: number): void;
/** @private */
export  function getDraggedRectLocation(x1: number, y1: number, x2: number, y2: number, outerRect: svgBase.Rect): svgBase.Rect;
/** @private */
export  function checkBounds(start: number, size: number, min: number, max: number): number;
/** @private */
export  function getLabelText(currentPoint: Points, series: Series, chart: Chart): string[];
/** @private */
export  function stopTimer(timer: number): void;
/** @private */
export  function isCollide(rect: svgBase.Rect, collections: svgBase.Rect[], clipRect: svgBase.Rect): boolean;
/** @private */
export  function isOverlap(currentRect: svgBase.Rect, rect: svgBase.Rect): boolean;
/** @private */
export  function containsRect(currentRect: svgBase.Rect, rect: svgBase.Rect): boolean;
/** @private */
export  function calculateRect(location: ChartLocation, textSize: svgBase.Size, margin: MarginModel): svgBase.Rect;
/** @private */
export  function convertToHexCode(value: ColorValue): string;
/** @private */
export  function componentToHex(value: number): string;
/** @private */
export  function convertHexToColor(hex: string): ColorValue;
/** @private */
export  function colorNameToHex(color: string): string;
/** @private */
export  function getSaturationColor(color: string, factor: number): string;
/** @private */
export  function getMedian(values: number[]): number;
/** @private */
export  function calculateLegendShapes(location: ChartLocation, size: svgBase.Size, shape: string, options: svgBase.PathOption): IShapes;
/** @private */
export  function textTrim(maxWidth: number, text: string, font: FontModel): string;
/**
 * To trim the line break label
 * @param maxWidth
 * @param text
 * @param font
 */
export  function lineBreakLabelTrim(maxWidth: number, text: string, font: FontModel): string[];
/** @private */
export  function stringToNumber(value: string, containerSize: number): number;
/** @private */
export  function redrawElement(redraw: boolean, id: string, options?: svgBase.PathAttributes | svgBase.RectAttributes | svgBase.CircleAttributes, renderer?: svgBase.SvgRenderer | svgBase.CanvasRenderer): Element;
/** @private */
export  function animateRedrawElement(element: Element | HTMLElement, duration: number, start: ChartLocation, end: ChartLocation, x?: string, y?: string): void;
/** @private */
export  function textElement(renderer: svgBase.SvgRenderer | svgBase.CanvasRenderer, option: svgBase.TextOption, font: FontModel, color: string, parent: HTMLElement | Element, isMinus?: boolean, redraw?: boolean, isAnimate?: boolean, forceAnimate?: boolean, animateDuration?: number, seriesClipRect?: svgBase.Rect): Element;
/**
 * Method to calculate the width and height of the chart
 */
export  function calculateSize(chart: Chart | AccumulationChart | RangeNavigator | StockChart): void;
export  function createSvg(chart: Chart | AccumulationChart | RangeNavigator): void;
/**
 * To calculate chart title and height
 * @param title
 * @param style
 * @param width
 */
export  function getTitle(title: string, style: FontModel, width: number): string[];
/**
 * Method to calculate x position of title
 */
export  function titlePositionX(rect: svgBase.Rect, titleStyle: FontModel): number;
/**
 * Method to find new text and element size based on textOverflow
 */
export  function textWrap(currentLabel: string, maximumWidth: number, font: FontModel): string[];
/**
 * Method to reset the blazor templates
 */
export  function blazorTemplatesReset(control: Chart | AccumulationChart): void;
/** @private */
export  class CustomizeOption {
    id: string;
    constructor(id?: string);
}
/** @private */
export  class StackValues {
    startValues?: number[];
    endValues?: number[];
    constructor(startValue?: number[], endValue?: number[]);
}
/** @private */
export  class RectOption extends svgBase.PathOption {
    x: number;
    y: number;
    height: number;
    width: number;
    rx: number;
    ry: number;
    transform: string;
    constructor(id: string, fill: string, border: BorderModel, opacity: number, rect: svgBase.Rect, rx?: number, ry?: number, transform?: string, dashArray?: string);
}
/** @private */
export  class CircleOption extends svgBase.PathOption {
    cy: number;
    cx: number;
    r: number;
    constructor(id: string, fill: string, border: BorderModel, opacity: number, cx: number, cy: number, r: number);
}
/** @private */
export  class PolygonOption {
    id: string;
    points: string;
    fill: string;
    constructor(id: string, points: string, fill: string);
}
/** @private */
export  class ChartLocation {
    x: number;
    y: number;
    constructor(x: number, y: number);
}
/** @private */
export  class Thickness {
    left: number;
    right: number;
    top: number;
    bottom: number;
    constructor(left: number, right: number, top: number, bottom: number);
}
/** @private */
export  class ColorValue {
    r: number;
    g: number;
    b: number;
    constructor(r?: number, g?: number, b?: number);
}
/** @private */
export  class PointData {
    point: Points;
    series: Series;
    lierIndex: number;
    constructor(point: Points, series: Series, index?: number);
}
/** @private */
export  class AccPointData {
    point: AccPoints;
    series: AccumulationSeries;
    constructor(point: AccPoints, series: AccumulationSeries, index?: number);
}
/** @private */
export  class ControlPoints {
    controlPoint1: ChartLocation;
    controlPoint2: ChartLocation;
    constructor(controlPoint1: ChartLocation, controlPoint2: ChartLocation);
}
/** @private */
export interface IHistogramValues {
    sDValue?: number;
    mean?: number;
    binWidth?: number;
    yValues?: number[];
}
//node_modules/@syncfusion/ej2-charts/src/components.d.ts
/**
 * Export Chart, Accumulation, Smithchart, Sparkline and Range Navigator
 */
//node_modules/@syncfusion/ej2-charts/src/index.d.ts
/**
 * Chart components exported.
 */
//node_modules/@syncfusion/ej2-charts/src/range-navigator/index.d.ts
/**
 * Range Navigator component export methods
 */
//node_modules/@syncfusion/ej2-charts/src/range-navigator/model/range-base-model.d.ts
/**
 * Interface for a class RangeNavigatorSeries
 */
export interface RangeNavigatorSeriesModel {
    /**
     * It defines the data source for a series.
     * @default null
     */
    dataSource?: Object | data.DataManager;
    /**
     * It defines the xName for the series
     * @default null
     */
    xName?: string;
    /**
     * It defines the yName for the series
     * @default  null
     */
    yName?: string;
    /**
     * It defines the query for the data source
     * @default null
     */
    query?: data.Query;
    /**
     * It defines the series type of the range navigator
     * @default 'Line'
     */
    type?: RangeNavigatorType;
    /**
     * Options to customizing animation for the series.
     */
    animation?: AnimationModel;
    /**
     * Options for customizing the color and width of the series border.
     */
    border?: BorderModel;
    /**
     * The fill color for the series that accepts value in hex and rgba as a valid CSS color string.
     * It also represents the color of the signal lines in technical indicators.
     * For technical indicators, the default value is 'blue' and for series, it has null.
     * @default null
     */
    fill?: string;
    /**
     * The stroke width for the series that is applicable only for `Line` type series.
     * It also represents the stroke width of the signal lines in technical indicators.
     * @default 1
     */
    width?: number;
    /**
     * The opacity for the background.
     * @default 1
     */
    opacity?: number;
    /**
     * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.
     * @default '0'
     */
    dashArray?: string;
}
/**
 * Interface for a class ThumbSettings
 */
export interface ThumbSettingsModel {
    /**
     * width of thumb
     * @default null
     * @aspDefaultValueIgnore
     */
    width?: number;
    /**
     * height of thumb
     * @default null
     * @aspDefaultValueIgnore
     */
    height?: number;
    /**
     * border for the thumb
     */
    border?: BorderModel;
    /**
     * fill color for the thumb
     * @default null
     */
    fill?: string;
    /**
     * type of thumb
     * @default `Circle`
     */
    type?: ThumbType;
}
/**
 * Interface for a class StyleSettings
 */
export interface StyleSettingsModel {
    /**
     * thumb settings
     */
    thumb?: ThumbSettingsModel;
    /**
     * Selected region color
     * @default null
     */
    selectedRegionColor?: string;
    /**
     * Un Selected region color
     * @default null
     */
    unselectedRegionColor?: string;
}
/**
 * Interface for a class RangeTooltipSettings
 */
export interface RangeTooltipSettingsModel {
    /**
     * Enables / Disables the visibility of the tooltip.
     * @default false.
     */
    enable?: boolean;
    /**
     * The fill color of the tooltip that accepts value in hex and rgba as a valid CSS color string. 
     * @default 0.85
     */
    opacity?: number;
    /**
     * The fill color of the tooltip that accepts value in hex and rgba as a valid CSS color string. 
     * @default null
     */
    fill?: string;
    /**
     * Format the ToolTip content.
     * @default null.
     */
    format?: string;
    /**
     * Options to customize the ToolTip text.
     */
    textStyle?: FontModel;
    /**
     * Custom template to format the ToolTip content. Use ${value} as the placeholder text to display the corresponding data point.
     * @default null.
     */
    template?: string;
    /**
     * Options to customize tooltip borders.
     */
    border?: BorderModel;
    /**
     * It defines display mode for tooltip
     * @default 'OnDemand'
     */
    displayMode?: TooltipDisplayMode;
}
//node_modules/@syncfusion/ej2-charts/src/range-navigator/model/range-base.d.ts
/**
 * Series class for the range navigator
 */
export  class RangeNavigatorSeries extends base.ChildProperty<RangeNavigatorSeries> {
    /**
     * It defines the data source for a series.
     * @default null
     */
    dataSource: Object | data.DataManager;
    /**
     * It defines the xName for the series
     * @default null
     */
    xName: string;
    /**
     * It defines the yName for the series
     * @default  null
     */
    yName: string;
    /**
     * It defines the query for the data source
     * @default null
     */
    query: data.Query;
    /**
     * It defines the series type of the range navigator
     * @default 'Line'
     */
    type: RangeNavigatorType;
    /**
     * Options to customizing animation for the series.
     */
    animation: AnimationModel;
    /**
     * Options for customizing the color and width of the series border.
     */
    border: BorderModel;
    /**
     * The fill color for the series that accepts value in hex and rgba as a valid CSS color string.
     * It also represents the color of the signal lines in technical indicators.
     * For technical indicators, the default value is 'blue' and for series, it has null.
     * @default null
     */
    fill: string;
    /**
     * The stroke width for the series that is applicable only for `Line` type series.
     * It also represents the stroke width of the signal lines in technical indicators.
     * @default 1
     */
    width: number;
    /**
     * The opacity for the background.
     * @default 1
     */
    opacity: number;
    /**
     * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.
     * @default '0'
     */
    dashArray: string;
    /** @private */
    seriesElement: Element;
    /** @private */
    clipRectElement: Element;
    /** @private */
    clipRect: svgBase.Rect;
    /** @private */
    xAxis: Axis;
    /** @private */
    yAxis: Axis;
    /** @private */
    points: DataPoint[];
    /** @private */
    interior: string;
    /** @private */
    index: number;
    /** @private */
    chart: RangeNavigator;
}
/**
 * Thumb settings
 */
export  class ThumbSettings extends base.ChildProperty<ThumbSettings> {
    /**
     * width of thumb
     * @default null
     * @aspDefaultValueIgnore
     */
    width: number;
    /**
     * height of thumb
     * @default null
     * @aspDefaultValueIgnore
     */
    height: number;
    /**
     * border for the thumb
     */
    border: BorderModel;
    /**
     * fill color for the thumb
     * @default null
     */
    fill: string;
    /**
     * type of thumb
     * @default `Circle`
     */
    type: ThumbType;
}
/**
 * Style settings
 */
export  class StyleSettings extends base.ChildProperty<StyleSettings> {
    /**
     * thumb settings
     */
    thumb: ThumbSettingsModel;
    /**
     * Selected region color
     * @default null
     */
    selectedRegionColor: string;
    /**
     * Un Selected region color
     * @default null
     */
    unselectedRegionColor: string;
}
export  class RangeTooltipSettings extends base.ChildProperty<RangeTooltipSettings> {
    /**
     * Enables / Disables the visibility of the tooltip.
     * @default false.
     */
    enable: boolean;
    /**
     * The fill color of the tooltip that accepts value in hex and rgba as a valid CSS color string.
     * @default 0.85
     */
    opacity: number;
    /**
     * The fill color of the tooltip that accepts value in hex and rgba as a valid CSS color string.
     * @default null
     */
    fill: string;
    /**
     * Format the ToolTip content.
     * @default null.
     */
    format: string;
    /**
     * Options to customize the ToolTip text.
     */
    textStyle: FontModel;
    /**
     * Custom template to format the ToolTip content. Use ${value} as the placeholder text to display the corresponding data point.
     * @default null.
     */
    template: string;
    /**
     * Options to customize tooltip borders.
     */
    border: BorderModel;
    /**
     * It defines display mode for tooltip
     * @default 'OnDemand'
     */
    displayMode: TooltipDisplayMode;
}
//node_modules/@syncfusion/ej2-charts/src/range-navigator/model/range-navigator-interface.d.ts
/**
 * Interface for range navigator
 */
/**
 * interface for load event
 */
export interface ILoadEventArgs {
    /** name of the event */
    name: string;
    /** rangeNavigator */
    rangeNavigator: RangeNavigator;
}
/**
 * interface for loaded event
 */
export interface IRangeLoadedEventArgs {
    /** name of the event */
    name: string;
    /** rangeNavigator */
    rangeNavigator: RangeNavigator;
}
export interface IRangeTooltipRenderEventArgs extends IRangeEventArgs {
    /** Defines tooltip text collections */
    text?: string[];
    /** Defines tooltip text style */
    textStyle?: FontModel;
}
/**
 * Interface for label render event
 */
export interface ILabelRenderEventsArgs {
    /** name of the event */
    name: string;
    /** labelStyle */
    labelStyle: FontModel;
    /** region */
    region: svgBase.Rect;
    /** text  */
    text: string;
    /** cancel for the event */
    cancel: boolean;
    /** value */
    value: number;
}
/**
 * Interface for Theme Style
 */
export interface IRangeStyle {
    gridLineColor: string;
    axisLineColor: string;
    labelFontColor: string;
    unselectedRectColor: string;
    thumpLineColor: string;
    thumbBackground: string;
    thumbHoverColor: string;
    gripColor: string;
    selectedRegionColor: string;
    background: string;
    tooltipBackground: string;
    tooltipFontColor: string;
    thumbWidth: number;
    thumbHeight: number;
}
/**
 * Interface for range events
 */
export interface IRangeEventArgs {
    /** Defines the name of the event */
    name: string;
    /** Defined the whether event has to trigger */
    cancel: boolean;
}
/**
 * Interface for changed events
 */
export interface IChangedEventArgs extends IRangeEventArgs {
    /** Defines the start value */
    start: number | Date;
    /** Defines the end value */
    end: number | Date;
    /** Defines the selected data */
    selectedData: DataPoint[];
    /** Defined the zoomPosition of the range navigator */
    zoomPosition: number;
    /** Defined the zoomFactor of the range navigator */
    zoomFactor: number;
}
export interface IResizeRangeNavigatorEventArgs {
    /** Defines the name of the Event */
    name: string;
    /** Defines the previous size of the accumulation chart */
    previousSize: svgBase.Size;
    /** Defines the current size of the accumulation chart */
    currentSize: svgBase.Size;
    /** Defines the range navigator instance */
    rangeNavigator: RangeNavigator;
}
//node_modules/@syncfusion/ej2-charts/src/range-navigator/range-navigator-model.d.ts
/**
 * Interface for a class RangeNavigator
 */
export interface RangeNavigatorModel extends base.ComponentModel{
    /**
     * The width of the range navigator as a string accepts input as both like '100px' or '100%'.
     * If specified as '100%, range navigator renders to the full width of its parent element.
     * @default null
     * @aspDefaultValueIgnore
     */
    width?: string;
    /**
     * The height of the chart as a string accepts input both as '100px' or '100%'.
     * If specified as '100%, range navigator renders to the full height of its parent element.
     * @default null
     * @aspDefaultValueIgnore
     */
    height?: string;
    /**
     * It defines the data source for a range navigator.
     * @default null
     */
    dataSource?: Object | data.DataManager;
    /**
     * It defines the xName for the range navigator.
     * @default null
     */
    xName?: string;
    /**
     * It defines the yName for the range navigator.
     * @default null
     */
    yName?: string;
    /**
     * It defines the query for the data source.
     * @default null
     */
    query?: data.Query;
    /**
     * It defines the configuration of series in the range navigator
     */
    series?: RangeNavigatorSeriesModel[];
    /**
     * Options for customizing the tooltip of the chart.
     */
    tooltip?: RangeTooltipSettingsModel;
    /**
     * Minimum value for the axis
     * @default null
     * @aspDefaultValueIgnore
     */
    minimum?: number | Date;
    /**
     * Maximum value for the axis
     * @default null
     * @aspDefaultValueIgnore
     */
    maximum?: number | Date;
    /**
     * interval value for the axis
     * @default null
     * @aspDefaultValueIgnore
     */
    interval?: number;
    /**
     * IntervalType for the dateTime axis
     * @default 'Auto'
     */
    intervalType?: RangeIntervalType;
    /**
     * Specifies, when the axis labels intersect with each other.They are,
     * * None: Shows all the labels.
     * * Hide: Hides the label when it intersects.
     * @default Hide
     */
    labelIntersectAction?: RangeLabelIntersectAction;
    /**
     * base value for log axis
     * @default 10
     */
    logBase?: number;
    /**
     * ValueType for the axis
     * @default 'Double'
     */
    valueType?: RangeValueType;
    /**
     * Label positions for the axis
     * @default 'Outside'
     */
    labelPosition?: AxisPosition;
    /**
     * Duration of the animation
     * @default 500
     */
    animationDuration?: number;
    /**
     * Enable grouping for the labels
     * @default false
     */
    enableGrouping?: boolean;
    /**
     * Enable deferred update for the range navigator
     * @default false
     */
    enableDeferredUpdate?: boolean;
    /**
     * To render the period selector with out range navigator.
     * @default false
     */
    disableRangeSelector?: boolean;
    /**
     * Enable snapping for range navigator sliders
     * @default false
     */
    allowSnapping?: boolean;
    /**
     * Specifies whether a grouping separator should be used for a number.
     * @default false
     */
    useGroupingSeparator?: boolean;
    /**
     * GroupBy property for the axis
     * @default `Auto`
     */
    groupBy?: RangeIntervalType;
    /**
     * Tick Position for the axis
     * @default 'Outside'
     */
    tickPosition?: AxisPosition;
    /**
     * Label style for the labels
     */
    labelStyle?: FontModel;
    /**
     * MajorGridLines
     */
    majorGridLines?: MajorGridLinesModel;
    /**
     * MajorTickLines
     */
    majorTickLines?: MajorTickLinesModel;
    /**
     * Navigator style settings
     */
    navigatorStyleSettings?: StyleSettingsModel;
    /**
     * Period selector settings
     */
    periodSelectorSettings?: PeriodSelectorSettingsModel;
    /**
     * Options for customizing the color and width of the chart border.
     */
    navigatorBorder?: BorderModel;
    /**
     * Specifies the theme for the range navigator.
     * @default 'Material'
     */
    theme?: ChartTheme;
    /**
     * Selected range for range navigator.
     * @default []
     */
    value?: number[] | Date[];
    /**
     * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc.
     * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.
     * @default ''
     */
    labelFormat?: string;
    /**
     * Specifies the skeleton format in which the dateTime format will process.
     * @default ''
     */
    skeleton?: string;
    /**
     * It specifies the type of format to be used in dateTime format process.
     * @default 'DateTime'
     */
    skeletonType?: SkeletonType;
    /**
     * It specifies the label alignment for secondary axis labels
     * @default 'Middle'
     */
    secondaryLabelAlignment?: LabelAlignment;
    /**
     * Margin for the range navigator
     * @default
     */
    margin?: MarginModel;
    /**
     * Triggers before the range navigator rendering
     * @event
     * @deprecated
     */
    load?: base.EmitType<IRangeLoadedEventArgs>;
    /**
     * Triggers after the range navigator rendering
     * @event
     * @blazorProperty 'Loaded'
     */
    loaded?: base.EmitType<IRangeLoadedEventArgs>;
    /**
     * Triggers after the range navigator resized
     * @event
     * @blazorProperty 'Resized'
     */
    resized?: base.EmitType<IResizeRangeNavigatorEventArgs>;
    /**
     * Triggers before the label rendering
     * @event
     * @deprecated
     */
    labelRender?: base.EmitType<ILabelRenderEventsArgs>;
    /**
     * Triggers after change the slider.
     * @event
     * @blazorProperty 'Changed'
     */
    changed?: base.EmitType<IChangedEventArgs>;
    /**
     * Triggers before the tooltip for series is rendered.
     * @event
     * @deprecated
     */
    tooltipRender?: base.EmitType<IRangeTooltipRenderEventArgs>;
    /**
     * Triggers before the range navigator selector rendering
     * @event
     * @deprecated
     */
    selectorRender?: base.EmitType<IRangeSelectorRenderEventArgs>;
    /**
     * Triggers before the prints gets started.
     * @event
     * @blazorProperty 'OnPrint'
     */
    beforePrint?: base.EmitType<IPrintEventArgs>;
}
//node_modules/@syncfusion/ej2-charts/src/range-navigator/range-navigator.d.ts
/**
 * Range Navigator
 */
export  class RangeNavigator extends base.Component<HTMLElement> {
    /**
     * `lineSeriesModule` is used to add line series to the chart.
     */
    lineSeriesModule: LineSeries;
    /**
     * `areaSeriesModule` is used to add area series in the chart.
     */
    areaSeriesModule: AreaSeries;
    /**
     * `stepLineSeriesModule` is used to add stepLine series in the chart.
     */
    stepLineSeriesModule: StepLineSeries;
    /**
     * `datetimeModule` is used to manipulate and add dateTime axis to the chart.
     */
    dateTimeModule: DateTime;
    /**
     * `doubleModule` is used to manipulate and add double axis to the chart.
     */
    doubleModule: Double;
    /**
     * `logarithmicModule` is used to manipulate and add log axis to the chart.
     */
    logarithmicModule: Logarithmic;
    /**
     * `tooltipModule` is used to manipulate and add tooltip to the series.
     */
    rangeTooltipModule: RangeTooltip;
    /**
     * `periodSelectorModule` is used to add period selector un range navigator
     */
    periodSelectorModule: PeriodSelector;
    /**
     * The width of the range navigator as a string accepts input as both like '100px' or '100%'.
     * If specified as '100%, range navigator renders to the full width of its parent element.
     * @default null
     * @aspDefaultValueIgnore
     */
    width: string;
    /**
     * The height of the chart as a string accepts input both as '100px' or '100%'.
     * If specified as '100%, range navigator renders to the full height of its parent element.
     * @default null
     * @aspDefaultValueIgnore
     */
    height: string;
    /**
     * It defines the data source for a range navigator.
     * @default null
     */
    dataSource: Object | data.DataManager;
    /**
     * It defines the xName for the range navigator.
     * @default null
     */
    xName: string;
    /**
     * It defines the yName for the range navigator.
     * @default null
     */
    yName: string;
    /**
     * It defines the query for the data source.
     * @default null
     */
    query: data.Query;
    /**
     * It defines the configuration of series in the range navigator
     */
    series: RangeNavigatorSeriesModel[];
    /**
     * Options for customizing the tooltip of the chart.
     */
    tooltip: RangeTooltipSettingsModel;
    /**
     * Minimum value for the axis
     * @default null
     * @aspDefaultValueIgnore
     */
    minimum: number | Date;
    /**
     * Maximum value for the axis
     * @default null
     * @aspDefaultValueIgnore
     */
    maximum: number | Date;
    /**
     * interval value for the axis
     * @default null
     * @aspDefaultValueIgnore
     */
    interval: number;
    /**
     * IntervalType for the dateTime axis
     * @default 'Auto'
     */
    intervalType: RangeIntervalType;
    /**
     * Specifies, when the axis labels intersect with each other.They are,
     * * None: Shows all the labels.
     * * Hide: Hides the label when it intersects.
     * @default Hide
     */
    labelIntersectAction: RangeLabelIntersectAction;
    /**
     * base value for log axis
     * @default 10
     */
    logBase: number;
    /**
     * ValueType for the axis
     * @default 'Double'
     */
    valueType: RangeValueType;
    /**
     * Label positions for the axis
     * @default 'Outside'
     */
    labelPosition: AxisPosition;
    /**
     * Duration of the animation
     * @default 500
     */
    animationDuration: number;
    /**
     * Enable grouping for the labels
     * @default false
     */
    enableGrouping: boolean;
    /**
     * Enable deferred update for the range navigator
     * @default false
     */
    enableDeferredUpdate: boolean;
    /**
     * To render the period selector with out range navigator.
     * @default false
     */
    disableRangeSelector: boolean;
    /**
     * Enable snapping for range navigator sliders
     * @default false
     */
    allowSnapping: boolean;
    /**
     * Specifies whether a grouping separator should be used for a number.
     * @default false
     */
    useGroupingSeparator: boolean;
    /**
     * GroupBy property for the axis
     * @default `Auto`
     */
    groupBy: RangeIntervalType;
    /**
     * Tick Position for the axis
     * @default 'Outside'
     */
    tickPosition: AxisPosition;
    /**
     * Label style for the labels
     */
    labelStyle: FontModel;
    /**
     * MajorGridLines
     */
    majorGridLines: MajorGridLinesModel;
    /**
     * MajorTickLines
     */
    majorTickLines: MajorTickLinesModel;
    /**
     * Navigator style settings
     */
    navigatorStyleSettings: StyleSettingsModel;
    /**
     * Period selector settings
     */
    periodSelectorSettings: PeriodSelectorSettingsModel;
    /**
     * Options for customizing the color and width of the chart border.
     */
    navigatorBorder: BorderModel;
    /**
     * Specifies the theme for the range navigator.
     * @default 'Material'
     */
    theme: ChartTheme;
    /**
     * Selected range for range navigator.
     * @default []
     */
    value: number[] | Date[];
    /**
     * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc.
     * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.
     * @default ''
     */
    labelFormat: string;
    /**
     * Specifies the skeleton format in which the dateTime format will process.
     * @default ''
     */
    skeleton: string;
    /**
     * It specifies the type of format to be used in dateTime format process.
     * @default 'DateTime'
     */
    skeletonType: SkeletonType;
    /**
     * It specifies the label alignment for secondary axis labels
     * @default 'Middle'
     */
    secondaryLabelAlignment: LabelAlignment;
    /**
     * Margin for the range navigator
     * @default
     */
    margin: MarginModel;
    /** @private */
    themeStyle: IRangeStyle;
    /**
     * Triggers before the range navigator rendering
     * @event
     * @deprecated
     */
    load: base.EmitType<IRangeLoadedEventArgs>;
    /**
     * Triggers after the range navigator rendering
     * @event
     * @blazorProperty 'Loaded'
     */
    loaded: base.EmitType<IRangeLoadedEventArgs>;
    /**
     * Triggers after the range navigator resized
     * @event
     * @blazorProperty 'Resized'
     */
    resized: base.EmitType<IResizeRangeNavigatorEventArgs>;
    /**
     * Triggers before the label rendering
     * @event
     * @deprecated
     */
    labelRender: base.EmitType<ILabelRenderEventsArgs>;
    /**
     * Triggers after change the slider.
     * @event
     * @blazorProperty 'Changed'
     */
    changed: base.EmitType<IChangedEventArgs>;
    /**
     * Triggers before the tooltip for series is rendered.
     * @event
     * @deprecated
     */
    tooltipRender: base.EmitType<IRangeTooltipRenderEventArgs>;
    /**
     * Triggers before the range navigator selector rendering
     * @event
     * @deprecated
     */
    selectorRender: base.EmitType<IRangeSelectorRenderEventArgs>;
    /**
     * Triggers before the prints gets started.
     * @event
     * @blazorProperty 'OnPrint'
     */
    beforePrint: base.EmitType<IPrintEventArgs>;
    /** @private */
    renderer: svgBase.SvgRenderer;
    /** @private */
    svgObject: HTMLElement;
    /** @private */
    intl: base.Internationalization;
    /** @private */
    bounds: svgBase.Rect;
    /** @private */
    availableSize: svgBase.Size;
    /** @private */
    startValue: number;
    /** @private */
    endValue: number;
    /** @private */
    mouseX: number;
    /** @private */
    mouseDownX: number;
    /** @private */
    rangeSlider: RangeSlider;
    /** @private */
    chartSeries: RangeSeries;
    /** @private */
    rangeAxis: RangeNavigatorAxis;
    /** @private */
    private resizeTo;
    /** @private */
    dataModule: Data;
    /** @private */
    labels: ILabelRenderEventsArgs[];
    /** @private */
    animateSeries: boolean;
    /** @private */
    format: Function;
    private chartid;
    /** @private */
    stockChart: StockChart;
    /**
     * Constructor for creating the widget
     * @hidden
     */
    constructor(options?: RangeNavigatorModel, element?: string | HTMLElement);
    /**
     * Starting point of the control initialization
     */
    preRender(): void;
    /**
     * To initialize the private variables
     */
    private initPrivateVariables;
    /**
     * Method to set culture for chart
     */
    private setCulture;
    /**
     * to initialize the slider
     */
    private setSliderValue;
    /**
     * To render the range navigator
     */
    render(): void;
    /**
     * Theming for rangeNavigator
     */
    private setTheme;
    /**
     * Method to create SVG for Range Navigator
     */
    private createRangeSvg;
    /**
     * Bounds calculation for widget performed.
     */
    private calculateBounds;
    /**
     * Creating Chart for range navigator
     */
    renderChart(): void;
    /**
     * To render period selector value
     */
    private renderPeriodSelector;
    /**
     * Creating secondary range navigator
     */
    createSecondaryElement(): void;
    /**
     * Slider Calculation ane rendering performed here
     */
    private renderSlider;
    /**
     * To Remove the SVG.
     * @return {boolean}
     * @private
     */
    removeSvg(): void;
    /** Wire, UnWire and Event releated calculation Started here */
    /**
     * Method to un-bind events for range navigator
     */
    private unWireEvents;
    /**
     * Method to bind events for range navigator
     */
    private wireEvents;
    /**
     * Handles the widget resize.
     * @return {boolean}
     * @private
     */
    rangeResize(e: Event): boolean;
    /**
     * Handles the mouse move.
     * @return {boolean}
     * @private
     */
    mouseMove(e: PointerEvent): boolean;
    /**
     * Handles the mouse leave.
     * @return {boolean}
     * @private
     */
    mouseLeave(e: PointerEvent): boolean;
    /**
     * Handles the mouse click on range navigator.
     * @return {boolean}
     * @private
     */
    rangeOnMouseClick(e: PointerEvent | TouchEvent): boolean;
    /**
     * Handles the print method for range navigator control.
     */
    print(id?: string[] | string | Element): void;
    /**
     * Handles the export method for range navigator control.
     * @param type
     * @param fileName
     */
    export(type: ExportType, fileName: string, orientation?: pdfExport.PdfPageOrientation, controls?: (Chart | AccumulationChart | RangeNavigator)[], width?: number, height?: number, isVertical?: boolean): void;
    /**
     * Creating a background element to the svg object
     */
    private renderChartBackground;
    /**
     * Handles the mouse down on range navigator.
     * @return {boolean}
     * @private
     */
    rangeOnMouseDown(e: PointerEvent): boolean;
    /**
     * Handles the mouse up.
     * @return {boolean}
     * @private
     */
    mouseEnd(e: PointerEvent): boolean;
    /**
     * To find mouse x, y for aligned range navigator element svg position
     */
    private setMouseX;
    /** Wire, UnWire and Event releated calculation End here */
    /**
     * Get the properties to be maintained in the persisted state.
     * @private
     */
    getPersistData(): string;
    /**
     * OnProperty change method calling here
     * @param newProp
     * @param oldProp
     */
    onPropertyChanged(newProp: RangeNavigatorModel, oldProp: RangeNavigatorModel): void;
    /**
     * To provide the array of modules needed for control rendering
     * @return {base.ModuleDeclaration[]}
     * @private
     */
    requiredModules(): base.ModuleDeclaration[];
    /**
     * To get the module name of the widget
     */
    getModuleName(): string;
    /**
     * To destroy the widget
     * @method destroy
     * @return {void}.
     * @member of rangeNavigator
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-charts/src/range-navigator/renderer/chart-render.d.ts
/**
 * To render Chart series
 */
export  class RangeSeries extends NiceInterval {
    private dataSource;
    private xName;
    private yName;
    private query;
    xMin: number;
    xMax: number;
    private yMin;
    private yMax;
    private yAxis;
    xAxis: Axis;
    private seriesLength;
    private chartGroup;
    constructor(range: RangeNavigator);
    /**
     * To render light weight and data manager process
     * @param control
     */
    renderChart(control: RangeNavigator): void;
    private processDataSource;
    /**
     * data manager process calculated here
     * @param e
     */
    private dataManagerSuccess;
    /**
     * Process JSON data from data source
     * @param control
     * @param len
     */
    private processJsonData;
    private processXAxis;
    /**
     * Process yAxis for range navigator
     * @param control
     */
    private processYAxis;
    /**
     * Process Light weight control
     * @param control
     * @private
     */
    renderSeries(control: RangeNavigator): void;
    /**
     * Append series elements in element
     */
    appendSeriesElements(control: RangeNavigator): void;
    private createSeriesElement;
    private calculateGroupingBounds;
    private drawSeriesBorder;
}
//node_modules/@syncfusion/ej2-charts/src/range-navigator/renderer/range-axis.d.ts
/**
 * class for axis
 */
export  class RangeNavigatorAxis extends DateTime {
    constructor(range: RangeNavigator);
    actualIntervalType: RangeIntervalType;
    rangeNavigator: RangeNavigator;
    firstLevelLabels: VisibleLabels[];
    secondLevelLabels: VisibleLabels[];
    lowerValues: number[];
    gridLines: Element;
    /**
     * To render grid lines of axis
     */
    renderGridLines(): void;
    /**
     * To render of axis labels
     */
    renderAxisLabels(): void;
    /**
     * To find secondary level label type
     * @param type
     */
    private getSecondaryLabelType;
    /**
     * To find labels for date time axis
     * @param axis
     */
    private findAxisLabels;
    /**
     * To find date time formats for Quarter and week interval type
     * @param text
     * @param axis
     * @param index
     */
    private dateFormats;
    /**
     * To find the y co-ordinate for axis labels
     * @param control - rangeNavigator
     * @param isSecondary sets true if the axis is secondary axis
     */
    private findLabelY;
    /**
     * It places the axis labels and returns border for secondary axis labels
     * @param axis axis for the lables placed
     * @param pointY y co-ordinate for axis labels
     * @param id id for the axis elements
     * @param control range navigator
     * @param labelElement parent element in which axis labels appended
     */
    private placeAxisLabels;
    /**
     * To check label is intersected with successive label or not
     */
    private isIntersect;
    /**
     * To find suitable label format for Quarter and week Interval types
     * @param axis
     * @param control
     */
    private findSuitableFormat;
    /**
     * Alignment position for secondary level labels in date time axis
     * @param axis
     * @param index
     */
    private findAlignment;
}
//node_modules/@syncfusion/ej2-charts/src/range-navigator/renderer/slider.d.ts
/**
 * Class for slider
 */
export  class RangeSlider {
    private leftUnSelectedElement;
    private rightUnSelectedElement;
    private selectedElement;
    private leftSlider;
    private rightSlider;
    private control;
    /** @private */
    isDrag: boolean;
    private elementId;
    currentSlider: string;
    startX: number;
    endX: number;
    private sliderWidth;
    currentStart: number;
    currentEnd: number;
    private previousMoveX;
    private thumpPadding;
    private thumbColor;
    points: DataPoint[];
    leftRect: svgBase.Rect;
    rightRect: svgBase.Rect;
    midRect: svgBase.Rect;
    private labelIndex;
    private thumbVisible;
    private thumpY;
    sliderY: number;
    /** @private */
    isIOS: Boolean;
    constructor(range: RangeNavigator);
    /**
     * Render Slider elements for range navigator
     * @param range
     */
    render(range: RangeNavigator): void;
    /**
     * Thumb creation performed
     * @param render
     * @param bounds
     * @param parent
     * @param id
     */
    createThump(render: svgBase.SvgRenderer, bounds: svgBase.Rect, parent: Element, id: string, sliderGroup?: Element): void;
    /**
     * Set slider value for range navigator
     * @param start
     * @param end
     */
    setSlider(start: number, end: number, trigger: boolean, showTooltip: boolean): void;
    /**
     * Trigger changed event
     * @param range
     */
    private triggerEvent;
    /**
     * @hidden
     */
    private addEventListener;
    /**
     * @hidden
     */
    private removeEventListener;
    /**
     * Move move handler perfomed here
     * @hidden
     * @param e
     */
    private mouseMoveHandler;
    /**
     * To get the range value
     * @param x
     */
    private getRangeValue;
    /**
     * Moused down handler for slider perform here
     * @param e
     */
    private mouseDownHandler;
    /**
     * To get the current slider element
     * @param id
     */
    private getCurrentSlider;
    /**
     * Mouse up handler performed here
     * @param e
     */
    private mouseUpHandler;
    /**
     * Allow Snapping perfomed here
     * @param control
     * @param start
     * @param end
     */
    private setAllowSnapping;
    /**
     * Animation Calculation for slider navigation
     * @param start
     * @param end
     */
    performAnimation(start: number, end: number, control: RangeNavigator, animationDuration?: number): void;
    /**
     * Mouse Cancel Handler
     */
    private mouseCancelHandler;
    /**
     * Destroy Method Calling here
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-charts/src/range-navigator/user-interaction/tooltip.d.ts
/**
 * `Tooltip` module is used to render the tooltip for chart series.
 */
export  class RangeTooltip {
    leftTooltip: svgBase.Tooltip;
    rightTooltip: svgBase.Tooltip;
    private elementId;
    toolTipInterval: number;
    private control;
    /**
     * Constructor for tooltip module.
     * @private.
     */
    constructor(range: RangeNavigator);
    /**
     * Left tooltip method called here
     * @param rangeSlider
     */
    renderLeftTooltip(rangeSlider: RangeSlider): void;
    /**
     * get the content size
     * @param value
     */
    private getContentSize;
    /**
     * Right tooltip method called here
     * @param rangeSlider
     */
    renderRightTooltip(rangeSlider: RangeSlider): void;
    /**
     * Tooltip element creation
     * @param id
     */
    private createElement;
    /**
     * Tooltip render called here
     * @param bounds
     * @param parent
     * @param pointX
     * @param value
     */
    private renderTooltip;
    /**
     * Tooltip content processed here
     * @param value
     */
    private getTooltipContent;
    /**
     * Fadeout animation performed here
     */
    private fadeOutTooltip;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the tooltip.
     * @return {void}
     * @private
     */
    destroy(chart: RangeNavigator): void;
}
//node_modules/@syncfusion/ej2-charts/src/range-navigator/utils/enum.d.ts
/**
 * It defines type of series in the range navigator.
 * * line
 * * column
 * * area
 * @private
 */
export  type RangeNavigatorType = 
/** Line type */
'Line' | 
/** Area type */
'Area' | 
/** StepLine type */
'StepLine';
/**
 * It defines type of thump in the range navigator.
 * * circle
 * * rectangle
 * @private
 */
export  type ThumbType = 
/** Circle type */
'Circle' | 
/** Rectangle type */
'Rectangle';
/**
 * It defines display mode for the range navigator tooltip.
 * * always
 * * OnDemand
 * @private
 */
export  type TooltipDisplayMode = 
/** Tooltip will be shown always */
'Always' | 
/** Tooltip will be shown only in mouse move */
'OnDemand';
/**
 * It defines the value Type for the axis used
 * * double
 * * category
 * * dateTime
 * * logarithmic
 * @private
 */
export  type RangeValueType = 
/** Double axis */
'Double' | 
/** Datetime axis */
'DateTime' | 
/** Logarithmic axis */
'Logarithmic';
/**
 * Label alignment of the axis
 * *Near
 * *Middle
 * *Far
 * @private
 */
export  type LabelAlignment = 
/** Near alignment */
'Near' | 
/** Middle alignment */
'Middle' | 
/** Far Alignment */
'Far';
/**
 * Defines the intersect action. They are
 * * none - Shows all the labels.
 * * hide - Hide the label when it intersect.
 * *
 */
export  type RangeLabelIntersectAction = 
/** Shows all the labels. */
'None' | 
/** Hide the label when it intersect. */
'Hide';
//node_modules/@syncfusion/ej2-charts/src/range-navigator/utils/helper.d.ts
/**
 * Methods for calculating coefficient.
 */
/** @private */
export  function rangeValueToCoefficient(value: number, range: VisibleRangeModel, inversed: boolean): number;
/** @private */
export  function getXLocation(x: number, range: VisibleRangeModel, size: number, inversed: boolean): number;
/** @private */
export  function getRangeValueXByPoint(value: number, size: number, range: VisibleRangeModel, inversed: boolean): number;
/** @private */
export  function getExactData(points: DataPoint[], start: number, end: number): DataPoint[];
/** @private */
export  function getNearestValue(values: number[], point: number): number;
/**
 * Data point
 * @public
 */
export  class DataPoint {
    /** point x */
    x: Object;
    /** point y */
    y: Object;
    /** point x value */
    xValue?: number;
    /** point y value */
    yValue?: number;
    /** point visibility */
    visible?: boolean;
    constructor(x: Object, y: Object, xValue?: number, yValue?: number, visible?: boolean);
}
//node_modules/@syncfusion/ej2-charts/src/range-navigator/utils/theme.d.ts
/**
 *
 */
export  namespace RangeNavigatorTheme {
    /** @private */
    let axisLabelFont$: IFontMapping;
    /** @private */
    let tooltipLabelFont$: IFontMapping;
}
/** @private */
export  function getRangeThemeColor(theme: ChartTheme, range: RangeNavigator): IRangeStyle;
//node_modules/@syncfusion/ej2-charts/src/smithchart/axis/axis-model.d.ts
/**
 * Interface for a class SmithchartMajorGridLines
 */
export interface SmithchartMajorGridLinesModel {
    /**
    * width of the major grid lines
    * @default 1
    */
    width?: number;
    /**
     * The dash array of the major grid lines.
     * @default ''
     */
    dashArray?: string;
    /**
     * visibility of  major grid lines.
     * @default true
     */
    visible?: boolean;
    /**
     * option for customizing the majorGridLine color
     * @default null
     */
    color?: string;
    /**
     * opacity of  major grid lines.
     * @default 1
     */
    opacity?: number;
}
/**
 * Interface for a class SmithchartMinorGridLines
 */
export interface SmithchartMinorGridLinesModel {
    /**
     * width of the minor grid lines
     * @default 1
     */
    width?: number;
    /**
     * The dash array of the minor grid lines.
     * @default ''
     */
    dashArray?: string;
    /**
     * visibility of  minor grid lines.
     * @default false
     */
    visible?: boolean;
    /**
     * option for customizing the minorGridLine color
     * @default null
     */
    color?: string;
    /**
     * count of  minor grid lines.
     * @default 8
     */
    count?: number;
}
/**
 * Interface for a class SmithchartAxisLine
 */
export interface SmithchartAxisLineModel {
    /**
     * visibility of  axis line.
     * @default true
     */
    visible?: boolean;
    /**
    * width of the axis lines
    * @default 1
    */
    width?: number;
    /**
     * option for customizing the axisLine color
     * @default null
     */
    color?: string;
    /**
     * The dash array of the axis line.
     * @default ''
     */
    dashArray?: string;
}
/**
 * Interface for a class SmithchartAxis
 */
export interface SmithchartAxisModel {
    /**
     * visibility of  axis.
     * @default true
     */
    visible?: boolean;
    /**
     * position of  axis line.
     * @default Outside
     */
    labelPosition?: AxisLabelPosition;
    /**
     * axis labels will be hide when overlap with each other.
     * @default Hide
     */
    labelIntersectAction?: SmithchartLabelIntersectAction;
    /**
     * Options for customizing major grid lines.
     */
    majorGridLines?: SmithchartMajorGridLinesModel;
    /**
     * Options for customizing minor grid lines.
     */
    minorGridLines?: SmithchartMinorGridLinesModel;
    /**
     * Options for customizing axis lines.
     */
    axisLine?: SmithchartAxisLineModel;
    /**
     * Options for customizing font.
     */
    labelStyle?: SmithchartFontModel;
}
//node_modules/@syncfusion/ej2-charts/src/smithchart/axis/axis.d.ts
/**
 * Configures the major Grid lines in the `axis`.
 */
export  class SmithchartMajorGridLines extends base.ChildProperty<SmithchartMajorGridLines> {
    /**
     * width of the major grid lines
     * @default 1
     */
    width: number;
    /**
     * The dash array of the major grid lines.
     * @default ''
     */
    dashArray: string;
    /**
     * visibility of  major grid lines.
     * @default true
     */
    visible: boolean;
    /**
     * option for customizing the majorGridLine color
     * @default null
     */
    color: string;
    /**
     * opacity of  major grid lines.
     * @default 1
     */
    opacity: number;
}
/**
 * Configures the major grid lines in the `axis`.
 */
export  class SmithchartMinorGridLines extends base.ChildProperty<SmithchartMinorGridLines> {
    /**
     * width of the minor grid lines
     * @default 1
     */
    width: number;
    /**
     * The dash array of the minor grid lines.
     * @default ''
     */
    dashArray: string;
    /**
     * visibility of  minor grid lines.
     * @default false
     */
    visible: boolean;
    /**
     * option for customizing the minorGridLine color
     * @default null
     */
    color: string;
    /**
     * count of  minor grid lines.
     * @default 8
     */
    count: number;
}
/**
 * Configures the axis lines in the `axis`.
 */
export  class SmithchartAxisLine extends base.ChildProperty<SmithchartAxisLine> {
    /**
     * visibility of  axis line.
     * @default true
     */
    visible: boolean;
    /**
     * width of the axis lines
     * @default 1
     */
    width: number;
    /**
     * option for customizing the axisLine color
     * @default null
     */
    color: string;
    /**
     * The dash array of the axis line.
     * @default ''
     */
    dashArray: string;
}
export  class SmithchartAxis extends base.ChildProperty<SmithchartAxis> {
    /**
     * visibility of  axis.
     * @default true
     */
    visible: boolean;
    /**
     * position of  axis line.
     * @default Outside
     */
    labelPosition: AxisLabelPosition;
    /**
     * axis labels will be hide when overlap with each other.
     * @default Hide
     */
    labelIntersectAction: SmithchartLabelIntersectAction;
    /**
     * Options for customizing major grid lines.
     */
    majorGridLines: SmithchartMajorGridLinesModel;
    /**
     * Options for customizing minor grid lines.
     */
    minorGridLines: SmithchartMinorGridLinesModel;
    /**
     * Options for customizing axis lines.
     */
    axisLine: SmithchartAxisLineModel;
    /**
     * Options for customizing font.
     */
    labelStyle: SmithchartFontModel;
}
//node_modules/@syncfusion/ej2-charts/src/smithchart/axis/axisrender.d.ts
/**
 *
 */
export  class AxisRender {
    areaRadius: number;
    circleLeftX: number;
    circleTopY: number;
    circleCenterX: number;
    circleCenterY: number;
    radialLabels: number[];
    radialLabelCollections: LabelCollection[];
    horizontalLabelCollections: HorizontalLabelCollection[];
    majorHGridArcPoints: GridArcPoints[];
    minorHGridArcPoints: GridArcPoints[];
    majorRGridArcPoints: GridArcPoints[];
    minorGridArcPoints: GridArcPoints[];
    labelCollections: RadialLabelCollections[];
    direction: Direction;
    renderArea(smithchart: Smithchart, bounds: SmithchartRect): void;
    private updateHAxis;
    private updateRAxis;
    private measureHorizontalAxis;
    private measureRadialAxis;
    private calculateChartArea;
    private calculateCircleMargin;
    private maximumLabelLength;
    private calculateAxisLabels;
    private isOverlap;
    private calculateXAxisRange;
    private calculateRAxisRange;
    private measureHMajorGridLines;
    private measureRMajorGridLines;
    private circleXYRadianValue;
    private calculateMajorArcStartEndPoints;
    private calculateHMajorArcStartEndPoints;
    private calculateMinorArcStartEndPoints;
    intersectingCirclePoints(x1: number, y1: number, r1: number, x2: number, y2: number, r2: number, renderType: RenderType): Point;
    private updateHMajorGridLines;
    private updateRMajorGridLines;
    private updateHAxisLine;
    private updateRAxisLine;
    private drawHAxisLabels;
    private drawRAxisLabels;
    private calculateRegion;
    private updateHMinorGridLines;
    private updateRMinorGridLines;
    private calculateGridLinesPath;
    private measureHMinorGridLines;
    private measureRMinorGridLines;
    private minorGridLineArcIntersectCircle;
    private circlePointPosition;
    private setLabelsInsidePosition;
    private setLabelsOutsidePosition;
    private arcRadius;
}
//node_modules/@syncfusion/ej2-charts/src/smithchart/index.d.ts
/**
 *
 */
//node_modules/@syncfusion/ej2-charts/src/smithchart/legend/legend-model.d.ts
/**
 * Interface for a class LegendTitle
 */
export interface LegendTitleModel {
    /**
 * visibility for legend title.
 * @default true
 */
    visible?: boolean;
    /**
 * text for legend title.
 * @default ''
 */
    text?: string;
    /**
 * description for legend title.
 * @default ''
 */
    description?: string;
    /**
 * alignment for legend title.
 * @default Center
 */
    textAlignment?: SmithchartAlignment;
    /**
 *  options for customizing font
 */
    textStyle?: SmithchartFont;
}
/**
 * Interface for a class LegendLocation
 */
export interface LegendLocationModel {
    /**
 * x location for legend.
 * @default 0
 */
    x?: number;
    /**
 * y location for legend.
 * @default 0
 */
    y?: number;
}
/**
 * Interface for a class LegendItemStyleBorder
 */
export interface LegendItemStyleBorderModel {
    /**
 * border width for legend item.
 * @default 1
 */
    width?: number;
    /**
 * border color for legend item.
 * @default null
 */
    color?: string;
}
/**
 * Interface for a class LegendItemStyle
 */
export interface LegendItemStyleModel {
    /**
 * specify the width for legend item.
 * @default 10
 */
    width?: number;
    /**
 * specify the height for legend item.
 * @default 10
 */
    height?: number;
    /**
 *  options for customizing legend item style border
 */
    border?: LegendItemStyleBorderModel;
}
/**
 * Interface for a class LegendBorder
 */
export interface LegendBorderModel {
    /**
     * border width for legend.
     * @default 1
     */
    width?: number;
    /**
 * border color for legend.
 * @default null
 */
    color?: string;
}
/**
 * Interface for a class SmithchartLegendSettings
 */
export interface SmithchartLegendSettingsModel {
    /**
 * visibility for legend.
 * @default false
 */
    visible?: boolean;
    /**
   * position for legend.
   * @default 'bottom'
   */
    position?: string;
    /**
   * alignment for legend.
   * @default Center
   */
    alignment?: SmithchartAlignment;
    /**
   * width for legend.
   * @default null
   */
    width?: number;
    /**
 * height for legend.
 * @default null
 */
    height?: number;
    /**
   * shape for legend.
   * @default 'circle'
   */
    shape?: string;
    /**
   * rowCount for legend.
   * @default null
   */
    rowCount?: number;
    /**
   * columnCount for legend.
   * @default null
   */
    columnCount?: number;
    /**
 * spacing between legend item.
 * @default 8
 */
    itemPadding?: number;
    /**
 * Padding between the legend shape and text.
 * @default 5
 */
    shapePadding?: number;
    /**
 * description for legend
 * @default ''
 */
    description?: string;
    /**
 * If set to true, series' visibility collapses based on the legend visibility.
 * @default true
 */
    toggleVisibility?: boolean;
    /**
    *  options for customizing legend title
    */
    title?: LegendTitleModel;
    /**
      *  options for customizing legend location
      */
    location?: LegendLocationModel;
    /**
      *  options for customizing legend item style
      */
    itemStyle?: LegendItemStyleModel;
    /**
      *  options for customizing legend border
      */
    border?: LegendBorderModel;
    /**
    *  options for customizing font
    */
    textStyle?: SmithchartFont;
}
//node_modules/@syncfusion/ej2-charts/src/smithchart/legend/legend.d.ts
export  class LegendTitle extends base.ChildProperty<LegendTitle> {
    /**
     * visibility for legend title.
     * @default true
     */
    visible: boolean;
    /**
     * text for legend title.
     * @default ''
     */
    text: string;
    /**
     * description for legend title.
     * @default ''
     */
    description: string;
    /**
     * alignment for legend title.
     * @default Center
     */
    textAlignment: SmithchartAlignment;
    /**
     *  options for customizing font
     */
    textStyle: SmithchartFont;
}
export  class LegendLocation extends base.ChildProperty<LegendLocation> {
    /**
     * x location for legend.
     * @default 0
     */
    x: number;
    /**
     * y location for legend.
     * @default 0
     */
    y: number;
}
export  class LegendItemStyleBorder extends base.ChildProperty<LegendItemStyleBorder> {
    /**
     * border width for legend item.
     * @default 1
     */
    width: number;
    /**
     * border color for legend item.
     * @default null
     */
    color: string;
}
export  class LegendItemStyle extends base.ChildProperty<LegendItemStyle> {
    /**
     * specify the width for legend item.
     * @default 10
     */
    width: number;
    /**
     * specify the height for legend item.
     * @default 10
     */
    height: number;
    /**
     *  options for customizing legend item style border
     */
    border: LegendItemStyleBorderModel;
}
export  class LegendBorder extends base.ChildProperty<LegendBorder> {
    /**
     * border width for legend.
     * @default 1
     */
    width: number;
    /**
     * border color for legend.
     * @default null
     */
    color: string;
}
export  class SmithchartLegendSettings extends base.ChildProperty<SmithchartLegendSettings> {
    /**
     * visibility for legend.
     * @default false
     */
    visible: boolean;
    /**
     * position for legend.
     * @default 'bottom'
     */
    position: string;
    /**
     * alignment for legend.
     * @default Center
     */
    alignment: SmithchartAlignment;
    /**
     * width for legend.
     * @default null
     */
    width: number;
    /**
     * height for legend.
     * @default null
     */
    height: number;
    /**
     * shape for legend.
     * @default 'circle'
     */
    shape: string;
    /**
     * rowCount for legend.
     * @default null
     */
    rowCount: number;
    /**
     * columnCount for legend.
     * @default null
     */
    columnCount: number;
    /**
     * spacing between legend item.
     * @default 8
     */
    itemPadding: number;
    /**
     * Padding between the legend shape and text.
     * @default 5
     */
    shapePadding: number;
    /**
     * description for legend
     * @default ''
     */
    description: string;
    /**
     * If set to true, series' visibility collapses based on the legend visibility.
     * @default true
     */
    toggleVisibility: boolean;
    /**
     *  options for customizing legend title
     */
    title: LegendTitleModel;
    /**
     *  options for customizing legend location
     */
    location: LegendLocationModel;
    /**
     *  options for customizing legend item style
     */
    itemStyle: LegendItemStyleModel;
    /**
     *  options for customizing legend border
     */
    border: LegendBorderModel;
    /**
     *  options for customizing font
     */
    textStyle: SmithchartFont;
}
//node_modules/@syncfusion/ej2-charts/src/smithchart/legend/legendrender.d.ts
/**
 *
 */
export  class SmithchartLegend {
    legendActualBounds: SmithchartRect;
    legendSeries: LegendSeries[];
    legendGroup: Element;
    /**
     * legend rendering
     */
    legendItemGroup: Element;
    renderLegend(smithchart: Smithchart): SmithchartRect;
    private calculateLegendBounds;
    private _getLegendSize;
    private _drawLegend;
    private drawLegendBorder;
    private drawLegendTitle;
    private drawLegendItem;
    private drawLegendShape;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the legend.
     * @return {void}
     * @private
     */
    destroy(smithchart: Smithchart): void;
}
//node_modules/@syncfusion/ej2-charts/src/smithchart/model/constant.d.ts
/**
 * Specifies smithchart animationComplete event name.
 * @private
 */
export  const animationComplete$: string;
/**
 * Specifies smithchart legendRender event name.
 * @private
 */
export  const legendRender$: string;
/**
 * Specifies smithchart titleRender event name.
 * @private
 */
export  const titleRender: string;
/**
 * Specifies smithchart subtitleRender event name.
 * @private
 */
export  const subtitleRender: string;
/**
 * Specifies smithchart textRender event name.
 * @private
 */
export  const textRender$: string;
/**
 * Specifies smithchart seriesRender event name.
 * @private
 */
export  const seriesRender$: string;
/**
 * Specifies smithchart load event name.
 * @private
 */
export  const load$: string;
/**
 * Specifies smithchart loaded event name.
 * @private
 */
export  const loaded$: string;
/**
 * Specifies smithchart axisLabelRender event name.
 * @private
 */
export  const axisLabelRender$: string;
//node_modules/@syncfusion/ej2-charts/src/smithchart/model/interface.d.ts
/**
 * Specifies Smithchart Events
 * @private
 */
export interface ISmithchartEventArgs {
    /** Defines the name of the event */
    name: string;
    /** Defines the event cancel status */
    cancel: boolean;
}
export interface ISmithchartPrintEventArgs extends ISmithchartEventArgs {
    htmlContent: Element;
}
/**
 * Specifies the Load Event arguments.
 */
export interface ISmithchartLoadEventArgs extends ISmithchartEventArgs {
    /** Defines the current Smithchart instance */
    smithchart: Smithchart;
}
/**
 * Specifies the Loaded Event arguments.
 */
export interface ISmithchartLoadedEventArgs extends ISmithchartEventArgs {
    /** Defines the current Smithchart instance */
    smithchart: Smithchart;
}
export interface ISmithchartAnimationCompleteEventArgs extends ISmithchartEventArgs {
    /**
     * smithchart instance event argument
     */
    smithchart?: Smithchart;
}
export interface ISmithchartLegendRenderEventArgs extends ISmithchartEventArgs {
    /** Defines the current legend text */
    text: string;
    /** Defines the current legend fill color */
    fill: string;
    /** Defines the current legend shape */
    shape: string;
}
/**
 * Specifies the Title Render Event arguments.
 */
export interface ITitleRenderEventArgs extends ISmithchartEventArgs {
    /** Defines the current title text */
    text: string;
    /** Defines the current title text x location */
    x: number;
    /** Defines the current title text y location */
    y: number;
}
/**
 * Specifies the SubTitle Render Event arguments.
 */
export interface ISubTitleRenderEventArgs extends ISmithchartEventArgs {
    /** Defines the current subtitle text */
    text: string;
    /** Defines the current subtitle text x location */
    x: number;
    /** Defines the current subtitle text y location */
    y: number;
}
/**
 * Specifies the Text Render Event arguments.
 */
export interface ISmithchartTextRenderEventArgs extends ISmithchartEventArgs {
    /** Defines the current datalabel text */
    text: string;
    /** Defines the current datalabel text x location */
    x: number;
    /** Defines the current datalabel text y location */
    y: number;
    /** Defines the current datalabel seriesIndex */
    seriesIndex: number;
    /** Defines the current datalabel pointIndex */
    pointIndex: number;
}
/**
 * Specifies the Axis Label Render Event arguments.
 */
export interface ISmithchartAxisLabelRenderEventArgs extends ISmithchartEventArgs {
    /** Defines the current axis label text */
    text: string;
    /** Defines the current axis label x location */
    x: number;
    /** Defines the current axis label y location */
    y: number;
}
/**
 * Specifies the Series Render Event arguments.
 */
export interface ISmithchartSeriesRenderEventArgs extends ISmithchartEventArgs {
    /** Defines name of the event */
    text: string;
    /** Defines the current series fill */
    fill: string;
}
/**
 * Specifies the Legend Render Event arguments.
 */
export interface ISmithchartLegendRenderEventArgs extends ISmithchartEventArgs {
    /** Defines the current legend text */
    text: string;
    /** Defines the current legend fill color */
    fill: string;
    /** Defines the current legend shape */
    shape: string;
}
/** @private */
export interface ISmithchartFontMapping {
    size?: string;
    color?: string;
    fontWeight?: string;
    fontStyle?: string;
    fontFamily?: string;
}
export interface ISmithchartThemeStyle {
    axisLabel: string;
    axisLine: string;
    majorGridLine: string;
    minorGridLine: string;
    chartTitle: string;
    legendLabel: string;
    background: string;
    areaBorder: string;
    tooltipFill: string;
    dataLabel: string;
    tooltipBoldLabel: string;
    tooltipLightLabel: string;
    tooltipHeaderLine: string;
    fontFamily?: string;
    fontSize?: string;
    labelFontFamily?: string;
    tooltipFillOpacity?: number;
    tooltipTextOpacity?: number;
}
//node_modules/@syncfusion/ej2-charts/src/smithchart/model/theme.d.ts
/**
 *
 */
export  namespace Theme {
    /** @private */
    let axisLabelFont$: ISmithchartFontMapping;
    /** @private */
    let smithchartTitleFont: ISmithchartFontMapping;
    /** @private */
    let smithchartSubtitleFont: ISmithchartFontMapping;
    /** @private */
    let dataLabelFont: ISmithchartFontMapping;
    /** @private */
    let legendLabelFont$: ISmithchartFontMapping;
}
/** @private */
export  function getSeriesColor(theme: SmithchartTheme): string[];
/** @private */
export  function getThemeColor(theme: SmithchartTheme): ISmithchartThemeStyle;
//node_modules/@syncfusion/ej2-charts/src/smithchart/series/datalabel.d.ts
export  class DataLabel1 {
    textOptions: DataLabelTextOptions[];
    labelOptions: LabelOption[];
    private margin;
    private connectorFlag;
    private prevLabel;
    private allPoints;
    drawDataLabel(smithchart: Smithchart, seriesindex: number, groupElement: Element, pointsRegion: PointRegion[], bounds: SmithchartRect): void;
    calculateSmartLabels(points: object, seriesIndex: number): void;
    private compareDataLabels;
    private isCollide;
    private resetValues;
    drawConnectorLines(smithchart: Smithchart, seriesIndex: number, index: number, currentPoint: DataLabelTextOptions, groupElement: Element): void;
    private drawDatalabelSymbol;
}
//node_modules/@syncfusion/ej2-charts/src/smithchart/series/marker.d.ts
/**
 *
 */
export  class Marker1 {
    drawMarker(smithchart: Smithchart, seriesindex: number, groupElement: Element, pointsRegion: PointRegion[]): void;
    private drawSymbol;
}
//node_modules/@syncfusion/ej2-charts/src/smithchart/series/series-model.d.ts
/**
 * Interface for a class SeriesTooltipBorder
 */
export interface SeriesTooltipBorderModel {
    /**
 * border width  for tooltip.
 * @default 1
 */
    width?: number;
    /**
 * border color for tooltip
 * @default null
 */
    color?: string;
}
/**
 * Interface for a class SeriesTooltip
 */
export interface SeriesTooltipModel {
    /**
 * visibility of tooltip.
 * @default false
 */
    visible?: boolean;
    /**
 * color for tooltip .
 * @default null
 */
    fill?: string;
    /**
 * opacity for tooltip.
 * @default 0.95
 */
    opacity?: number;
    /**
  * template for tooltip
  * @default ''
  */
    template?: string;
    /**
     *  options for customizing tooltip border
     */
    border?: SeriesTooltipBorderModel;
}
/**
 * Interface for a class SeriesMarkerBorder
 */
export interface SeriesMarkerBorderModel {
    /**
 * border width for marker border.
 * @default 3
 */
    width?: number;
    /**
 * border color for marker border.
 * @default 'white'
 */
    color?: string;
}
/**
 * Interface for a class SeriesMarkerDataLabelBorder
 */
export interface SeriesMarkerDataLabelBorderModel {
    /**
 * border width for data label border.
 * @default 0.1
 */
    width?: number;
    /**
 * border color for data label color.
 * @default 'white'
 */
    color?: string;
}
/**
 * Interface for a class SeriesMarkerDataLabelConnectorLine
 */
export interface SeriesMarkerDataLabelConnectorLineModel {
    /**
 * border width for data label connector line.
 * @default 1
 */
    width?: number;
    /**
 * border color for data label connector line.
 * @default null
 */
    color?: string;
}
/**
 * Interface for a class SeriesMarkerDataLabel
 */
export interface SeriesMarkerDataLabelModel {
    /**
 * visibility for data label.
 * @default false
 */
    visible?: boolean;
    /**
 * showing template for data label template
 * @default ''
 */
    template?: string;
    /**
 * color for data label.
 * @default null
 */
    fill?: string;
    /**
 * opacity for data label.
 * @default 1
 */
    opacity?: number;
    /**
 *  options for customizing data label border
 */
    border?: SeriesMarkerDataLabelBorderModel;
    /**
 *  options for customizing data label connector line
 */
    connectorLine?: SeriesMarkerDataLabelConnectorLineModel;
    /**
 *  options for customizing font
 */
    textStyle?: SmithchartFontModel;
}
/**
 * Interface for a class SeriesMarker
 */
export interface SeriesMarkerModel {
    /**
 * visibility for marker.
 * @default false
 */
    visible?: boolean;
    /**
 * shape for marker.
 * @default 'circle'
 */
    shape?: string;
    /**
 * width for marker.
 * @default 6
 */
    width?: number;
    /**
 * height for marker.
 * @default 6
 */
    height?: number;
    /**
 * Url for the image that is to be displayed as marker
 * @default ''
 */
    imageUrl?: string;
    /**
 * color for marker.
 * @default ''
 */
    fill?: string;
    /**
 * opacity for marker.
 * @default 1
 */
    opacity?: number;
    /**
     *  options for customizing marker border
     */
    border?: SeriesMarkerBorderModel;
    /**
 *  options for customizing marker data label 
 */
    dataLabel?: SeriesMarkerDataLabelModel;
}
/**
 * Interface for a class SmithchartSeries
 */
export interface SmithchartSeriesModel {
    /**
 * visibility for series.
 * @default 'visible'
 */
    visibility?: string;
    /**
 * points for series.
 * @default []
 */
    points?: { resistance: number,  reactance: number}[];
    /**
 * resistance name for dataSource
 * @default ''
 */
    resistance?: string;
    /**
 * reactance name for dataSource
 * @default ''
 */
    reactance?: string;
    /**
 *  Specifies the dataSource
 * @default null
 * @isdatamanager false
 */
    dataSource?: Object;
    /**
 * The name of the series visible in legend.
 * @default ''
 */
    name?: string;
    /**
 * color for series.
 * @default null
 */
    fill?: string;
    /**
 * enable or disable the animation of series.
 * @default false
 */
    enableAnimation?: boolean;
    /**
 * perform animation of series based on animation duration.
 * @default '2000ms'
 */
    animationDuration?: string;
    /**
 * avoid the overlap of dataLabels.
 * @default false
 */
    enableSmartLabels?: boolean;
    /**
 * width for series.
 * @default 1
 */
    width?: number;
    /**
 * opacity for series.
 * @default 1
 */
    opacity?: number;
    /**
 *  options for customizing marker
 */
    marker?: SeriesMarkerModel;
    /**
 *  options for customizing tooltip
 */
    tooltip?: SeriesTooltipModel;
}
//node_modules/@syncfusion/ej2-charts/src/smithchart/series/series.d.ts
export  class SeriesTooltipBorder extends base.ChildProperty<SeriesTooltipBorder> {
    /**
     * border width  for tooltip.
     * @default 1
     */
    width: number;
    /**
     * border color for tooltip
     * @default null
     */
    color: string;
}
export  class SeriesTooltip extends base.ChildProperty<SeriesTooltip> {
    /**
     * visibility of tooltip.
     * @default false
     */
    visible: boolean;
    /**
     * color for tooltip .
     * @default null
     */
    fill: string;
    /**
     * opacity for tooltip.
     * @default 0.95
     */
    opacity: number;
    /**
     * template for tooltip
     * @default ''
     */
    template: string;
    /**
     *  options for customizing tooltip border
     */
    border: SeriesTooltipBorderModel;
}
export  class SeriesMarkerBorder extends base.ChildProperty<SeriesMarkerBorder> {
    /**
     * border width for marker border.
     * @default 3
     */
    width: number;
    /**
     * border color for marker border.
     * @default 'white'
     */
    color: string;
}
export  class SeriesMarkerDataLabelBorder extends base.ChildProperty<SeriesMarkerDataLabelBorder> {
    /**
     * border width for data label border.
     * @default 0.1
     */
    width: number;
    /**
     * border color for data label color.
     * @default 'white'
     */
    color: string;
}
export  class SeriesMarkerDataLabelConnectorLine extends base.ChildProperty<SeriesMarkerDataLabelConnectorLine> {
    /**
     * border width for data label connector line.
     * @default 1
     */
    width: number;
    /**
     * border color for data label connector line.
     * @default null
     */
    color: string;
}
export  class SeriesMarkerDataLabel extends base.ChildProperty<SeriesMarkerDataLabel> {
    /**
     * visibility for data label.
     * @default false
     */
    visible: boolean;
    /**
     * showing template for data label template
     * @default ''
     */
    template: string;
    /**
     * color for data label.
     * @default null
     */
    fill: string;
    /**
     * opacity for data label.
     * @default 1
     */
    opacity: number;
    /**
     *  options for customizing data label border
     */
    border: SeriesMarkerDataLabelBorderModel;
    /**
     *  options for customizing data label connector line
     */
    connectorLine: SeriesMarkerDataLabelConnectorLineModel;
    /**
     *  options for customizing font
     */
    textStyle: SmithchartFontModel;
}
export  class SeriesMarker extends base.ChildProperty<SeriesMarker> {
    /**
     * visibility for marker.
     * @default false
     */
    visible: boolean;
    /**
     * shape for marker.
     * @default 'circle'
     */
    shape: string;
    /**
     * width for marker.
     * @default 6
     */
    width: number;
    /**
     * height for marker.
     * @default 6
     */
    height: number;
    /**
     * Url for the image that is to be displayed as marker
     * @default ''
     */
    imageUrl: string;
    /**
     * color for marker.
     * @default ''
     */
    fill: string;
    /**
     * opacity for marker.
     * @default 1
     */
    opacity: number;
    /**
     *  options for customizing marker border
     */
    border: SeriesMarkerBorderModel;
    /**
     *  options for customizing marker data label
     */
    dataLabel: SeriesMarkerDataLabelModel;
}
export  class SmithchartSeries extends base.ChildProperty<SmithchartSeries> {
    /**
     * visibility for series.
     * @default 'visible'
     */
    visibility: string;
    /**
     * points for series.
     * @default []
     */
    points: {
        resistance: number;
        reactance: number;
    }[];
    /**
     * resistance name for dataSource
     * @default ''
     */
    resistance: string;
    /**
     * reactance name for dataSource
     * @default ''
     */
    reactance: string;
    /**
     *  Specifies the dataSource
     * @default null
     * @isdatamanager false
     */
    dataSource: Object;
    /**
     * The name of the series visible in legend.
     * @default ''
     */
    name: string;
    /**
     * color for series.
     * @default null
     */
    fill: string;
    /**
     * enable or disable the animation of series.
     * @default false
     */
    enableAnimation: boolean;
    /**
     * perform animation of series based on animation duration.
     * @default '2000ms'
     */
    animationDuration: string;
    /**
     * avoid the overlap of dataLabels.
     * @default false
     */
    enableSmartLabels: boolean;
    /**
     * width for series.
     * @default 1
     */
    width: number;
    /**
     * opacity for series.
     * @default 1
     */
    opacity: number;
    /**
     *  options for customizing marker
     */
    marker: SeriesMarkerModel;
    /**
     *  options for customizing tooltip
     */
    tooltip: SeriesTooltipModel;
}
//node_modules/@syncfusion/ej2-charts/src/smithchart/series/seriesrender.d.ts
/**
 *
 */
export  class SeriesRender {
    xValues: number[];
    yValues: number[];
    pointsRegion: PointRegion[][];
    lineSegments: LineSegment[];
    location: Point[][];
    clipRectElement: Element;
    private dataLabel;
    private processData;
    draw(smithchart: Smithchart, axisRender: AxisRender, bounds: SmithchartRect): void;
    private drawSeries;
    private animateDataLabelTemplate;
    private performAnimation;
    getLocation(seriesindex: number, pointIndex: number): Point;
}
//node_modules/@syncfusion/ej2-charts/src/smithchart/series/tooltip.d.ts
/**
 *
 */
/**
 * To render tooltip
 */
export  class TooltipRender {
    private mouseX;
    private mouseY;
    private locationX;
    private locationY;
    /** To define the tooltip element */
    tooltipElement: svgBase.Tooltip;
    smithchartMouseMove(smithchart: Smithchart, e: PointerEvent): svgBase.Tooltip;
    private setMouseXY;
    private createTooltip;
    private closestPointXY;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the legend.
     * @return {void}
     * @private
     */
    destroy(smithchart: Smithchart): void;
}
//node_modules/@syncfusion/ej2-charts/src/smithchart/smithchart-model.d.ts
/**
 * Interface for a class Smithchart
 */
export interface SmithchartModel extends base.ComponentModel{
    /**
     * render type of smithchart.
     * @default Impedance
     */
    renderType?: RenderType;
    /**
     * width for smithchart.
     * @default ''
     */
    width?: string;
    /**
     * height for smithchart.
     * @default ''
     */
    height?: string;
    /**
     * theme for smithchart.
     * @default Material
     */
    theme?: SmithchartTheme;
    /**
     *  options for customizing margin
     */
    margin?: SmithchartMarginModel;
    /**
     *  options for customizing margin
     */
    font?: SmithchartFontModel;
    /**
     *  options for customizing border
     */
    border?: SmithchartBorderModel;
    /**
     *  options for customizing title
     */
    title?: TitleModel;
    /**
     *  options for customizing series
     */
    series?: SmithchartSeriesModel[];
    /**
     *  options for customizing legend
     */
    legendSettings?: SmithchartLegendSettingsModel;
    /**
     * Options to configure the horizontal axis.
     */
    horizontalAxis?: SmithchartAxisModel;
    /**
     * Options to configure the vertical axis.
     */
    radialAxis?: SmithchartAxisModel;
    /**
     * The background color of the smithchart.
     */
    background?: string;
    /**
     *  Spacing between elements
     * @default 10
     */
    elementSpacing?: number;
    /**
     *  Spacing between elements
     * @default 1
     */
    radius?: number;
    /**
     * Triggers before the prints gets started.
     * @event
     * @blazorProperty 'OnPrint'
     */
    beforePrint?: base.EmitType<ISmithchartPrintEventArgs>;
    /**
     * Triggers after the animation completed.
     * @event
     * @blazorProperty 'AnimationCompleted'
     */
    animationComplete?: base.EmitType<ISmithchartAnimationCompleteEventArgs>;
    /**
     * Triggers before smithchart rendered.
     * @event
     * @blazorProperty 'OnLoad'
     */
    load?: base.EmitType<ISmithchartLoadEventArgs>;
    /**
     * Triggers after smithchart rendered.
     * @event
     * @blazorProperty 'Loaded'
     */
    loaded?: base.EmitType<ISmithchartLoadedEventArgs>;
    /**
     * Triggers before the legend is rendered.
     * @event
     * @blazorProperty 'LegendRendering'
     */
    legendRender?: base.EmitType<ISmithchartLegendRenderEventArgs>;
    /**
     * Triggers before the title is rendered.
     * @event
     * @blazorProperty 'TitleRendering'
     */
    titleRender?: base.EmitType<ITitleRenderEventArgs>;
    /**
     * Triggers before the sub-title is rendered.
     * @event
     * @blazorProperty 'SubtitleRendering'
     */
    subtitleRender?: base.EmitType<ISubTitleRenderEventArgs>;
    /**
     * Triggers before the datalabel text is rendered.
     * @event
     * @blazorProperty 'TextRendering'
     */
    textRender?: base.EmitType<ISmithchartTextRenderEventArgs>;
    /**
     * Triggers before the axis label is rendered
     * @event
     * @blazorProperty 'AxisLabelRendering'
     */
    axisLabelRender?: base.EmitType<ISmithchartAxisLabelRenderEventArgs>;
    /**
     * Triggers before the series is rendered.
     * @event
     */
    seriesRender?: base.EmitType<ISmithchartSeriesRenderEventArgs>;
}
//node_modules/@syncfusion/ej2-charts/src/smithchart/smithchart.d.ts
/**
 * Represents the Smithchart control.
 * ```html
 * <div id="smithchart"/>
 * <script>
 *   var chartObj = new Smithchart({ isResponsive : true });
 *   chartObj.appendTo("#smithchart");
 * </script>
 * ```
 */
export  class Smithchart extends base.Component<HTMLElement> implements base.INotifyPropertyChanged {
    /**
     * legend bounds
     */
    legendBounds: SmithchartRect;
    /**
     * area bounds
     */
    bounds: SmithchartRect;
    /**
     * `smithchartLegendModule` is used to add legend to the smithchart.
     */
    smithchartLegendModule: SmithchartLegend;
    /**
     * `tooltipRenderModule` is used to add tooltip to the smithchart.
     */
    tooltipRenderModule: TooltipRender;
    /**
     * render type of smithchart.
     * @default Impedance
     */
    renderType: RenderType;
    /**
     * width for smithchart.
     * @default ''
     */
    width: string;
    /**
     * height for smithchart.
     * @default ''
     */
    height: string;
    /**
     * theme for smithchart.
     * @default Material
     */
    theme: SmithchartTheme;
    /** @private */
    seriesrender: SeriesRender;
    /** @private */
    themeStyle: ISmithchartThemeStyle;
    /** @private */
    availableSize: SmithchartSize;
    /**
     *  options for customizing margin
     */
    margin: SmithchartMarginModel;
    /**
     *  options for customizing margin
     */
    font: SmithchartFontModel;
    /**
     *  options for customizing border
     */
    border: SmithchartBorderModel;
    /**
     *  options for customizing title
     */
    title: TitleModel;
    /**
     *  options for customizing series
     */
    series: SmithchartSeriesModel[];
    /**
     *  options for customizing legend
     */
    legendSettings: SmithchartLegendSettingsModel;
    /**
     * Options to configure the horizontal axis.
     */
    horizontalAxis: SmithchartAxisModel;
    /**
     * Options to configure the vertical axis.
     */
    radialAxis: SmithchartAxisModel;
    /**
     * svg renderer object.
     * @private
     */
    renderer: svgBase.SvgRenderer;
    /** @private */
    svgObject: Element;
    /** @private */
    animateSeries: boolean;
    /** @private */
    seriesColors: string[];
    chartArea: SmithchartRect;
    /**
     * Resize the smithchart
     */
    private resizeTo;
    private isTouch;
    private fadeoutTo;
    /**
     * The background color of the smithchart.
     */
    background: string;
    /**
     *  Spacing between elements
     * @default 10
     */
    elementSpacing: number;
    /**
     *  Spacing between elements
     * @default 1
     */
    radius: number;
    /**
     * Triggers before the prints gets started.
     * @event
     * @blazorProperty 'OnPrint'
     */
    beforePrint: base.EmitType<ISmithchartPrintEventArgs>;
    /**
     * Triggers after the animation completed.
     * @event
     * @blazorProperty 'AnimationCompleted'
     */
    animationComplete: base.EmitType<ISmithchartAnimationCompleteEventArgs>;
    /**
     * Triggers before smithchart rendered.
     * @event
     * @blazorProperty 'OnLoad'
     */
    load: base.EmitType<ISmithchartLoadEventArgs>;
    /**
     * Triggers after smithchart rendered.
     * @event
     * @blazorProperty 'Loaded'
     */
    loaded: base.EmitType<ISmithchartLoadedEventArgs>;
    /**
     * Triggers before the legend is rendered.
     * @event
     * @blazorProperty 'LegendRendering'
     */
    legendRender: base.EmitType<ISmithchartLegendRenderEventArgs>;
    /**
     * Triggers before the title is rendered.
     * @event
     * @blazorProperty 'TitleRendering'
     */
    titleRender: base.EmitType<ITitleRenderEventArgs>;
    /**
     * Triggers before the sub-title is rendered.
     * @event
     * @blazorProperty 'SubtitleRendering'
     */
    subtitleRender: base.EmitType<ISubTitleRenderEventArgs>;
    /**
     * Triggers before the datalabel text is rendered.
     * @event
     * @blazorProperty 'TextRendering'
     */
    textRender: base.EmitType<ISmithchartTextRenderEventArgs>;
    /**
     * Triggers before the axis label is rendered
     * @event
     * @blazorProperty 'AxisLabelRendering'
     */
    axisLabelRender: base.EmitType<ISmithchartAxisLabelRenderEventArgs>;
    /**
     * Triggers before the series is rendered.
     * @event
     */
    seriesRender: base.EmitType<ISmithchartSeriesRenderEventArgs>;
    /** @private */
    isBlazor: boolean;
    /**
     * Get component name
     */
    getModuleName(): string;
    /**
     * Get the properties to be maintained in the persisted state.
     * @private
     */
    getPersistData(): string;
    /**
     * Method to create SVG element.
     */
    private createChartSvg;
    private renderTitle;
    private renderSubtitle;
    /**
     * @private
     * Render the smithchart border
     */
    private renderBorder;
    /**
     * Called internally if any of the property value changed.
     * @private
     */
    onPropertyChanged(newProp: SmithchartModel, oldProp: SmithchartModel): void;
    /**
     * Constructor for creating the Smithchart widget
     */
    constructor(options?: SmithchartModel, element?: string | HTMLElement);
    /**
     * Initialize the event handler.
     */
    protected preRender(): void;
    private initPrivateVariable;
    /**
     * To Initialize the control rendering.
     */
    private setTheme;
    protected render(): void;
    private createSecondaryElement;
    /**
     * To destroy the widget
     * @method destroy
     * @return {void}.
     * @member of smithChart
     */
    destroy(): void;
    /**
     * To bind event handlers for smithchart.
     */
    private wireEVents;
    mouseMove(e: PointerEvent): void;
    mouseEnd(e: PointerEvent): void;
    /**
     * To handle the click event for the smithchart.
     */
    smithchartOnClick(e: PointerEvent): void;
    /**
     * To unbind event handlers from smithchart.
     */
    private unWireEVents;
    print(id?: string[] | string | Element): void;
    /**
     * Handles the export method for chart control.
     * @param type
     * @param fileName
     */
    export(type: SmithchartExportType, fileName: string, orientation?: pdfExport.PdfPageOrientation): void;
    /**
     * To handle the window resize event on smithchart.
     */
    smithchartOnResize(e: Event): boolean;
    /**
     * To provide the array of modules needed for smithchart rendering
     * @return {base.ModuleDeclaration[]}
     * @private
     */
    requiredModules(): base.ModuleDeclaration[];
    /**
     * To Remove the SVG.
     * @return {boolean}
     * @private
     */
    removeSvg(): void;
}
//node_modules/@syncfusion/ej2-charts/src/smithchart/title/title-model.d.ts
/**
 * Interface for a class Subtitle
 */
export interface SubtitleModel {
    /**
 * visibility for sub title.
 * @default true
 */
    visible?: boolean;
    /**
 * text for sub title.
 * @default ''
 */
    text?: string;
    /**
 * description for sub title.
 * @default ''
 */
    description?: string;
    /**
 * text alignment for sub title.
 * @default Far
 */
    textAlignment?: SmithchartAlignment;
    /**
  * trim the sub title.
  * @default true
  */
    enableTrim?: boolean;
    /**
 * maximum width of the sub title.
 * @aspDefaultValueIgnore
 * @default null
 */
    maximumWidth?: number;
    /**
 * options for customizing sub title font
 */
    textStyle?: SmithchartFontModel;
}
/**
 * Interface for a class Title
 */
export interface TitleModel {
    /**
 * visibility for title.
 * @default true
 */
    visible?: boolean;
    /**
 * text for title.
 * @default ''
 */
    text?: string;
    /**
 * description for title.
 * @default ''
 */
    description?: string;
    /**
 * text alignment for title.
 * @default Center
 */
    textAlignment?: SmithchartAlignment;
    /**
 * trim the title.
 * @default true
 */
    enableTrim?: boolean;
    /**
 * maximum width of the sub title
 * @aspDefaultValueIgnore
 * @default null
 */
    maximumWidth?: number;
    /**
 * options for customizing sub title
 */
    subtitle?: SubtitleModel;
    /**
 * options for customizing title font
 */
    font?: SmithchartFontModel;
    /**
 * options for customizing title text
 */
    textStyle?: SmithchartFontModel;
}
//node_modules/@syncfusion/ej2-charts/src/smithchart/title/title.d.ts
export  class Subtitle extends base.ChildProperty<Subtitle> {
    /**
     * visibility for sub title.
     * @default true
     */
    visible: boolean;
    /**
     * text for sub title.
     * @default ''
     */
    text: string;
    /**
     * description for sub title.
     * @default ''
     */
    description: string;
    /**
     * text alignment for sub title.
     * @default Far
     */
    textAlignment: SmithchartAlignment;
    /**
     * trim the sub title.
     * @default true
     */
    enableTrim: boolean;
    /**
     * maximum width of the sub title.
     * @aspDefaultValueIgnore
     * @default null
     */
    maximumWidth: number;
    /**
     * options for customizing sub title font
     */
    textStyle: SmithchartFontModel;
}
export  class Title extends base.ChildProperty<Title> {
    /**
     * visibility for title.
     * @default true
     */
    visible: boolean;
    /**
     * text for title.
     * @default ''
     */
    text: string;
    /**
     * description for title.
     * @default ''
     */
    description: string;
    /**
     * text alignment for title.
     * @default Center
     */
    textAlignment: SmithchartAlignment;
    /**
     * trim the title.
     * @default true
     */
    enableTrim: boolean;
    /**
     * maximum width of the sub title
     * @aspDefaultValueIgnore
     * @default null
     */
    maximumWidth: number;
    /**
     * options for customizing sub title
     */
    subtitle: SubtitleModel;
    /**
     * options for customizing title font
     */
    font: SmithchartFontModel;
    /**
     * options for customizing title text
     */
    textStyle: SmithchartFontModel;
}
//node_modules/@syncfusion/ej2-charts/src/smithchart/utils/area.d.ts
/**
 *
 */
export  class AreaBounds {
    yOffset: number;
    calculateAreaBounds(smithchart: Smithchart, title: TitleModel, bounds: SmithchartRect): SmithchartRect;
    private getLegendSpace;
}
//node_modules/@syncfusion/ej2-charts/src/smithchart/utils/enum.d.ts
/**
 * Defines Theme of the smithchart. They are
 * * Material - Render a smithchart with Material theme.
 * * Fabric - Render a smithchart with Fabric theme
 */
export  type SmithchartTheme = 
/**  Render a smithchart with Material theme. */
'Material' | 
/**  Render a smithchart with Fabric theme. */
'Fabric' | 
/**  Render a smithchart with Bootstrap theme. */
'Bootstrap' | 
/**  Render a smithchart with Highcontrast Light theme. */
'HighContrastLight' | 
/**  Render a smithchart with Material Dark theme. */
'MaterialDark' | 
/**  Render a smithchart with Fabric Dark theme. */
'FabricDark' | 
/**  Render a smithchart with Highcontrast Dark theme. */
'HighContrast' | 
/**  Render a smithchart with Bootstrap Dark theme. */
'BootstrapDark' | 
/** Render a smithchart with Bootstrap4 theme. */
'Bootstrap4';
/**
 * Defines render type of smithchart. They are
 * * Impedance - Render a smithchart with Impedance type.
 * * Admittance - Render a smithchart with Admittance type.
 */
export  type RenderType = 
/**  Render a smithchart with Impedance type. */
'Impedance' | 
/**  Render a smithchart with Admittance type. */
'Admittance';
export  type AxisLabelPosition = 
/**  Render a axis label with label position as outside. */
'Outside' | 
/**  Render a axis label with label position as outside. */
'Inside';
export  type SmithchartLabelIntersectAction = 
/**  Hide the overlapped axis label. */
'Hide' | 
/**  Render the overlapped axis label */
'None';
/**
 * Defines the Alignment. They are
 * * near - Align the element to the left.
 * * center - Align the element to the center.
 * * far - Align the element to the right.
 * *
 */
export  type SmithchartAlignment = 
/** Define the left alignment. */
'Near' | 
/** Define the center alignment. */
'Center' | 
/** Define the right alignment. */
'Far';
export  type SmithchartExportType = 
/** Used to export a image as png format */
'PNG' | 
/** Used to export a image as jpeg format */
'JPEG' | 
/** Used to export a file as svg format */
'SVG' | 
/** Used to export a file as pdf format */
'PDF';
/**
 * Specifies TreeMap beforePrint event name.
 * @private
 */
export  const smithchartBeforePrint: string;
//node_modules/@syncfusion/ej2-charts/src/smithchart/utils/export.d.ts
/**
 * Annotation Module handles the Annotation for Maps
 */
export  class ExportUtils1 {
    private control;
    private smithchartPrint;
    /**
     * Constructor for Maps
     * @param control
     */
    constructor(control: Smithchart);
    /**
     * To print the Maps
     * @param elements
     */
    print(elements?: string[] | string | Element): void;
    /**
     * To get the html string of the Maps
     * @param svgElements
     * @private
     */
    getHTMLContent(svgElements?: string[] | string | Element): Element;
    /**
     * To export the file as image/svg format
     * @param type
     * @param fileName
     */
    export(exportType: SmithchartExportType, fileName: string, orientation?: pdfExport.PdfPageOrientation): void;
    /**
     * To trigger the download element
     * @param fileName
     * @param type
     * @param url
     */
    triggerDownload(fileName: string, exportType: SmithchartExportType, url: string, isDownload: boolean): void;
}
//node_modules/@syncfusion/ej2-charts/src/smithchart/utils/helper.d.ts
export  function createSvg(smithchart: Smithchart): void;
export  function getElement(id: string): Element;
/**
 * @private
 * Trim the title text
 */
export  function textTrim(maxwidth: number, text: string, font: SmithchartFontModel): string;
/**
 * Function     to compile the template function for maps.
 * @returns Function
 * @private
 */
export  function getTemplateFunction(templateString: string): Function;
export  function convertElementFromLabel(element: Element, labelId: string, data: object, index: number, smithchart: Smithchart): HTMLElement;
export  function _getEpsilonValue(): number;
/**
 * Method to calculate the width and height of the smithchart
 */
export  function calculateSize(smithchart: Smithchart): void;
/**
 * Animation for template
 * @private
 */
export  function templateAnimate(smithchart: Smithchart, element: Element, delay: number, duration: number, name: base.Effect): void;
/** @private */
export  function stringToNumber(value: string, containerSize: number): number;
/**
 * Internal use of path options
 * @private
 */
export  class PathOption {
    id: string;
    opacity: number;
    fill: string;
    stroke: string;
    ['stroke-width']: number;
    ['stroke-dasharray']: string;
    d: string;
    constructor(id: string, fill: string, width: number, color: string, opacity?: number, dashArray?: string, d?: string);
}
/**
 * Internal use of rectangle options
 * @private
 */
export  class RectOption1 extends PathOption {
    x: number;
    y: number;
    height: number;
    width: number;
    transform: string;
    constructor(id: string, fill: string, border: SmithchartBorderModel, opacity: number, rect: SmithchartRect);
}
/**
 * Internal use of circle options
 * @private
 */
export  class CircleOption1 extends PathOption {
    cy: number;
    cx: number;
    r: number;
    ['stroke-dasharray']: string;
    constructor(id: string, fill: string, border: SmithchartBorderModel, opacity: number, cx: number, cy: number, r: number, dashArray: string);
}
export  function measureText(text: string, font: SmithchartFontModel): SmithchartSize;
/**
 * Internal use of text options
 * @private
 */
export  class TextOption {
    id: string;
    anchor: string;
    text: string;
    x: number;
    y: number;
    constructor(id?: string, x?: number, y?: number, anchor?: string, text?: string);
}
/**
 * To remove element by id
 */
export  function removeElement(id: string): void;
/**
 * Animation base.Effect Calculation Started Here
 * @param currentTime
 * @param startValue
 * @param endValue
 * @param duration
 * @private
 */
export  function linear(currentTime: number, startValue: number, endValue: number, duration: number): number;
export  function reverselinear(currentTime: number, startValue: number, endValue: number, duration: number): number;
/** @private */
export  function getAnimationFunction(effect: string): Function;
/**
 * Internal rendering of text
 * @private
 */
export  function renderTextElement(options: TextOption, font: SmithchartFontModel, color: string, parent: HTMLElement | Element): Element;
//node_modules/@syncfusion/ej2-charts/src/smithchart/utils/utils-model.d.ts
/**
 * Interface for a class SmithchartFont
 */
export interface SmithchartFontModel {
    /**
     * font family for text.
     */
    fontFamily?: string;
    /**
     * font style for text.
     * @default 'Normal'
     */
    fontStyle?: string;
    /**
     * font weight for text.
     * @default 'Regular'
     */
    fontWeight?: string;
    /**
     * Color for the text.
     * @default ''
     */
    color?: string;
    /**
     * font size for text.
     * @default '12px'
     */
    size?: string;
    /**
     * font opacity for text.
     * @default 1
     */
    opacity?: number;
}
/**
 * Interface for a class SmithchartMargin
 */
export interface SmithchartMarginModel {
    /**
     * top margin of chartArea.
     * @default 10
     */
    top?: number;
    /**
     * bottom margin of chartArea.
     * @default 10
     */
    bottom?: number;
    /**
     * right margin of chartArea.
     * @default 10
     */
    right?: number;
    /**
     * left margin of chartArea.
     * @default 10
     */
    left?: number;
}
/**
 * Interface for a class SmithchartBorder
 */
export interface SmithchartBorderModel {
    /**
     * width for smithchart border.
     * @default 0
     */
    width?: number;
    /**
     * opacity for smithchart border.
     * @default 1
     */
    opacity?: number;
    /**
     * color for smithchart border .
     * @default 'transparent'
     */
    color?: string;
}
/**
 * Interface for a class SmithchartRect
 */
export interface SmithchartRectModel {
}
/**
 * Interface for a class LabelCollection
 */
export interface LabelCollectionModel {
}
/**
 * Interface for a class LegendSeries
 */
export interface LegendSeriesModel {
}
/**
 * Interface for a class LabelRegion
 */
export interface LabelRegionModel {
}
/**
 * Interface for a class HorizontalLabelCollection
 */
export interface HorizontalLabelCollectionModel extends LabelCollectionModel{
}
/**
 * Interface for a class RadialLabelCollections
 */
export interface RadialLabelCollectionsModel extends HorizontalLabelCollectionModel{
}
/**
 * Interface for a class LineSegment
 */
export interface LineSegmentModel {
}
/**
 * Interface for a class PointRegion
 */
export interface PointRegionModel {
}
/**
 * Interface for a class Point
 */
export interface PointModel {
}
/**
 * Interface for a class ClosestPoint
 */
export interface ClosestPointModel {
}
/**
 * Interface for a class MarkerOptions
 */
export interface MarkerOptionsModel {
}
/**
 * Interface for a class SmithchartLabelPosition
 */
export interface SmithchartLabelPositionModel {
}
/**
 * Interface for a class Direction
 */
export interface DirectionModel {
}
/**
 * Interface for a class DataLabelTextOptions
 */
export interface DataLabelTextOptionsModel {
}
/**
 * Interface for a class LabelOption
 */
export interface LabelOptionModel {
}
/**
 * Interface for a class SmithchartSize
 * @private
 */
export interface SmithchartSizeModel {
}
/**
 * Interface for a class GridArcPoints
 * @private
 */
export interface GridArcPointsModel {
}
//node_modules/@syncfusion/ej2-charts/src/smithchart/utils/utils.d.ts
export  class SmithchartFont extends base.ChildProperty<SmithchartFont> {
    /**
     * font family for text.
     */
    fontFamily: string;
    /**
     * font style for text.
     * @default 'Normal'
     */
    fontStyle: string;
    /**
     * font weight for text.
     * @default 'Regular'
     */
    fontWeight: string;
    /**
     * Color for the text.
     * @default ''
     */
    color: string;
    /**
     * font size for text.
     * @default '12px'
     */
    size: string;
    /**
     * font opacity for text.
     * @default 1
     */
    opacity: number;
}
export  class SmithchartMargin extends base.ChildProperty<SmithchartMargin> {
    /**
     * top margin of chartArea.
     * @default 10
     */
    top: number;
    /**
     * bottom margin of chartArea.
     * @default 10
     */
    bottom: number;
    /**
     * right margin of chartArea.
     * @default 10
     */
    right: number;
    /**
     * left margin of chartArea.
     * @default 10
     */
    left: number;
}
export  class SmithchartBorder extends base.ChildProperty<SmithchartBorder> {
    /**
     * width for smithchart border.
     * @default 0
     */
    width: number;
    /**
     * opacity for smithchart border.
     * @default 1
     */
    opacity: number;
    /**
     * color for smithchart border .
     * @default 'transparent'
     */
    color: string;
}
/**
 * Internal use of type rect
 */
export  class SmithchartRect {
    /** x value for rect */
    x: number;
    y: number;
    width: number;
    height: number;
    constructor(x: number, y: number, width: number, height: number);
}
export  class LabelCollection {
    centerX: number;
    centerY: number;
    radius: number;
    value: number;
}
export  class LegendSeries {
    text: string;
    seriesIndex: number;
    shape: string;
    fill: string;
    bounds: SmithchartSize;
}
export  class LabelRegion {
    bounds: SmithchartRect;
    labelText: string;
}
export  class HorizontalLabelCollection extends LabelCollection {
    region: LabelRegion;
}
export  class RadialLabelCollections extends HorizontalLabelCollection {
    angle: number;
}
export  class LineSegment {
    x1: number;
    x2: number;
    y1: number;
    y2: number;
}
export  class PointRegion {
    point: Point;
    x: number;
    y: number;
}
/**
 * Smithchart internal class for point
 */
export  class Point {
    x: number;
    y: number;
}
export  class ClosestPoint {
    location: Point;
    index: number;
}
export  class MarkerOptions {
    id: string;
    fill: string;
    opacity: number;
    borderColor: string;
    borderWidth: number;
    constructor(id?: string, fill?: string, borderColor?: string, borderWidth?: number, opacity?: number);
}
export  class SmithchartLabelPosition {
    textX: number;
    textY: number;
    x: number;
    y: number;
}
export  class Direction {
    counterclockwise: number;
    clockwise: number;
}
export  class DataLabelTextOptions {
    id: string;
    x: number;
    y: number;
    text: string;
    fill: string;
    font: SmithchartFontModel;
    xPosition: number;
    yPosition: number;
    width: number;
    height: number;
    location: Point;
    labelOptions: SmithchartLabelPosition;
    visible: boolean;
    connectorFlag: boolean;
}
export  class LabelOption {
    textOptions: DataLabelTextOptions[];
}
/** @private */
export  class SmithchartSize {
    height: number;
    width: number;
    constructor(width: number, height: number);
}
export  class GridArcPoints {
    startPoint: Point;
    endPoint: Point;
    rotationAngle: number;
    sweepDirection: number;
    isLargeArc: boolean;
    size: SmithchartSize;
}
//node_modules/@syncfusion/ej2-charts/src/sparkline/index.d.ts
/**
 * Exporting all modules from Sparkline Component
 */
//node_modules/@syncfusion/ej2-charts/src/sparkline/model/base-model.d.ts
/**
 * Interface for a class SparklineBorder
 */
export interface SparklineBorderModel {
    /**
     * The color of the border that accepts value in hex and rgba as a valid CSS color string.
     */
    color?: string;
    /**
     * The width of the border in pixels.
     */
    width?: number;
}
/**
 * Interface for a class SparklineFont
 */
export interface SparklineFontModel {
    /**
     * Font size for the text.
     */
    size?: string;
    /**
     * Color for the text.
     */
    color?: string;
    /**
     * FontFamily for the text.
     */
    fontFamily?: string;
    /**
     * FontWeight for the text.
     */
    fontWeight?: string;
    /**
     * FontStyle for the text.
     */
    fontStyle?: string;
    /**
     * Opacity for the text.
     * @default 1
     */
    opacity?: number;
}
/**
 * Interface for a class TrackLineSettings
 */
export interface TrackLineSettingsModel {
    /**
     * Toggle the tracker line visibility.
     * @default false
     */
    visible?: boolean;
    /**
     * To config the tracker line color.
     */
    color?: string;
    /**
     * To config the tracker line width.
     * @default 1
     */
    width?: number;
}
/**
 * Interface for a class SparklineTooltipSettings
 */
export interface SparklineTooltipSettingsModel {
    /**
     * Toggle the tooltip visibility.
     * @default false
     */
    visible?: boolean;
    /**
     * To customize the tooltip fill color.
     */
    fill?: string;
    /**
     * To customize the tooltip template.
     */
    template?: string;
    /**
     * To customize the tooltip format.
     */
    format?: string;
    /**
     * To configure tooltip border color and width.
     */
    border?: SparklineBorderModel;
    /**
     * To configure tooltip text styles.
     */
    // tslint:disable-next-line
    textStyle?: SparklineFontModel;
    /**
     * To configure the tracker line options.
     */
    trackLineSettings?: TrackLineSettingsModel;
}
/**
 * Interface for a class ContainerArea
 */
export interface ContainerAreaModel {
    /**
     * To configure Sparkline background color.
     * @default 'transparent'
     */
    background?: string;
    /**
     * To configure Sparkline border color and width.
     */
    border?: SparklineBorderModel;
}
/**
 * Interface for a class LineSettings
 */
export interface LineSettingsModel {
    /**
     * To toggle the axis line visibility.
     * @default `false`
     */
    visible?: boolean;
    /**
     * To configure the sparkline axis line color.
     */
    color?: string;
    /**
     * To configure the sparkline axis line dashArray.
     * @default ''
     */
    dashArray?: string;
    /**
     * To configure the sparkline axis line width.
     * @default 1.
     */
    width?: number;
    /**
     * To configure the sparkline axis line opacity.
     * @default 1.
     */
    opacity?: number;
}
/**
 * Interface for a class RangeBandSettings
 */
export interface RangeBandSettingsModel {
    /**
     * To configure sparkline start range
     * @aspDefaultValueIgnore 
     */
    startRange?: number;
    /**
     * To configure sparkline end range
     * @aspDefaultValueIgnore 
     */
    endRange?: number;
    /**
     * To configure sparkline rangeband color
     */
    color?: string;
    /**
     * To configure sparkline rangeband opacity
     * @default 1
     */
    opacity?: number;
}
/**
 * Interface for a class AxisSettings
 */
export interface AxisSettingsModel {
    /**
     * To configure Sparkline x axis min value.
     * @aspDefaultValueIgnore
     * @blazorDefaultValue null
     */
    minX?: number;
    /**
     * To configure Sparkline x axis max value.
     * @aspDefaultValueIgnore
     * @blazorDefaultValue null
     */
    maxX?: number;
    /**
     * To configure Sparkline y axis min value.
     * @aspDefaultValueIgnore
     * @blazorDefaultValue null
     */
    minY?: number;
    /**
     * To configure Sparkline y axis max value.
     * @aspDefaultValueIgnore
     * @blazorDefaultValue null
     */
    maxY?: number;
    /**
     * To configure Sparkline horizontal axis line position.
     * @default 0
     * @blazorDefaultValue 0
     */
    value?: number;
    /**
     * To configure Sparkline axis line settings.
     */
    lineSettings?: LineSettingsModel;
}
/**
 * Interface for a class Padding
 */
export interface PaddingModel {
    /**
     * To configure Sparkline left padding.
     * @default 5
     */
    left?: number;
    /**
     * To configure Sparkline right padding.
     * @default 5
     */
    right?: number;
    /**
     * To configure Sparkline bottom padding.
     * @default 5
     */
    bottom?: number;
    /**
     * To configure Sparkline top padding.
     * @default 5
     */
    top?: number;
}
/**
 * Interface for a class SparklineMarkerSettings
 */
export interface SparklineMarkerSettingsModel {
    /**
     * To toggle the marker visibility.
     * @default `[]`.
     */
    visible?: VisibleType[];
    /**
     * To configure the marker opacity.
     * @default 1
     */
    opacity?: number;
    /**
     * To configure the marker size.
     * @default 5
     */
    size?: number;
    /**
     * To configure the marker fill color.
     * @default '#00bdae'
     */
    fill?: string;
    /**
     * To configure Sparkline marker border color and width.
     */
    border?: SparklineBorderModel;
}
/**
 * Interface for a class LabelOffset
 */
export interface LabelOffsetModel {
    /**
     * To move the datalabel horizontally.
     */
    x?: number;
    /**
     * To move the datalabel vertically.
     */
    y?: number;
}
/**
 * Interface for a class SparklineDataLabelSettings
 */
export interface SparklineDataLabelSettingsModel {
    /**
     * To toggle the dataLabel visibility.
     * @default `[]`.
     */
    visible?: VisibleType[];
    /**
     * To configure the dataLabel opacity.
     * @default 1
     */
    opacity?: number;
    /**
     * To configure the dataLabel fill color.
     * @default 'transparent'
     */
    fill?: string;
    /**
     * To configure the dataLabel format the value.
     * @default ''
     */
    format?: string;
    /**
     * To configure Sparkline dataLabel border color and width.
     */
    border?: SparklineBorderModel;
    /**
     * To configure Sparkline dataLabel text styles.
     */
    // tslint:disable-next-line
    textStyle?: SparklineFontModel;
    /**
     * To configure Sparkline dataLabel offset.
     */
    offset?: LabelOffsetModel;
    /**
     * To change the edge dataLabel placement.
     * @default 'None'.
     */
    edgeLabelMode?: EdgeLabelMode;
}
//node_modules/@syncfusion/ej2-charts/src/sparkline/model/base.d.ts
/**
 * Sparkline base API Class declarations.
 */
/**
 * Configures the borders in the Sparkline.
 */
export  class SparklineBorder extends base.ChildProperty<SparklineBorder> {
    /**
     * The color of the border that accepts value in hex and rgba as a valid CSS color string.
     */
    color: string;
    /**
     * The width of the border in pixels.
     */
    width: number;
}
/**
 * Configures the fonts in sparklines.
 */
export  class SparklineFont extends base.ChildProperty<SparklineFont> {
    /**
     * Font size for the text.
     */
    size: string;
    /**
     * Color for the text.
     */
    color: string;
    /**
     * FontFamily for the text.
     */
    fontFamily: string;
    /**
     * FontWeight for the text.
     */
    fontWeight: string;
    /**
     * FontStyle for the text.
     */
    fontStyle: string;
    /**
     * Opacity for the text.
     * @default 1
     */
    opacity: number;
}
/**
 * To configure the tracker line settings.
 */
export  class TrackLineSettings extends base.ChildProperty<TrackLineSettings> {
    /**
     * Toggle the tracker line visibility.
     * @default false
     */
    visible: boolean;
    /**
     * To config the tracker line color.
     */
    color: string;
    /**
     * To config the tracker line width.
     * @default 1
     */
    width: number;
}
/**
 * To configure the tooltip settings for sparkline.
 */
export  class SparklineTooltipSettings extends base.ChildProperty<SparklineTooltipSettings> {
    /**
     * Toggle the tooltip visibility.
     * @default false
     */
    visible: boolean;
    /**
     * To customize the tooltip fill color.
     */
    fill: string;
    /**
     * To customize the tooltip template.
     */
    template: string;
    /**
     * To customize the tooltip format.
     */
    format: string;
    /**
     * To configure tooltip border color and width.
     */
    border: SparklineBorderModel;
    /**
     * To configure tooltip text styles.
     */
    textStyle: SparklineFontModel;
    /**
     * To configure the tracker line options.
     */
    trackLineSettings: TrackLineSettingsModel;
}
/**
 * To configure the sparkline container area customization
 */
export  class ContainerArea extends base.ChildProperty<ContainerArea> {
    /**
     * To configure Sparkline background color.
     * @default 'transparent'
     */
    background: string;
    /**
     * To configure Sparkline border color and width.
     */
    border: SparklineBorderModel;
}
/**
 * To configure axis line settings
 */
export  class LineSettings extends base.ChildProperty<LineSettings> {
    /**
     * To toggle the axis line visibility.
     * @default `false`
     */
    visible: boolean;
    /**
     * To configure the sparkline axis line color.
     */
    color: string;
    /**
     * To configure the sparkline axis line dashArray.
     * @default ''
     */
    dashArray: string;
    /**
     * To configure the sparkline axis line width.
     * @default 1.
     */
    width: number;
    /**
     * To configure the sparkline axis line opacity.
     * @default 1.
     */
    opacity: number;
}
/**
 * To configure the sparkline rangeband
 */
export  class RangeBandSettings extends base.ChildProperty<RangeBandSettings> {
    /**
     * To configure sparkline start range
     * @aspDefaultValueIgnore
     */
    startRange: number;
    /**
     * To configure sparkline end range
     * @aspDefaultValueIgnore
     */
    endRange: number;
    /**
     * To configure sparkline rangeband color
     */
    color: string;
    /**
     * To configure sparkline rangeband opacity
     * @default 1
     */
    opacity: number;
}
/**
 * To configure the sparkline axis
 */
export  class AxisSettings extends base.ChildProperty<AxisSettings> {
    /**
     * To configure Sparkline x axis min value.
     * @aspDefaultValueIgnore
     * @blazorDefaultValue null
     */
    minX: number;
    /**
     * To configure Sparkline x axis max value.
     * @aspDefaultValueIgnore
     * @blazorDefaultValue null
     */
    maxX: number;
    /**
     * To configure Sparkline y axis min value.
     * @aspDefaultValueIgnore
     * @blazorDefaultValue null
     */
    minY: number;
    /**
     * To configure Sparkline y axis max value.
     * @aspDefaultValueIgnore
     * @blazorDefaultValue null
     */
    maxY: number;
    /**
     * To configure Sparkline horizontal axis line position.
     * @default 0
     * @blazorDefaultValue 0
     */
    value: number;
    /**
     * To configure Sparkline axis line settings.
     */
    lineSettings: LineSettingsModel;
}
/**
 * To configure the sparkline padding.
 */
export  class Padding extends base.ChildProperty<Padding> {
    /**
     * To configure Sparkline left padding.
     * @default 5
     */
    left: number;
    /**
     * To configure Sparkline right padding.
     * @default 5
     */
    right: number;
    /**
     * To configure Sparkline bottom padding.
     * @default 5
     */
    bottom: number;
    /**
     * To configure Sparkline top padding.
     * @default 5
     */
    top: number;
}
/**
 * To configure the sparkline marker options.
 */
export  class SparklineMarkerSettings extends base.ChildProperty<SparklineMarkerSettings> {
    /**
     * To toggle the marker visibility.
     * @default `[]`.
     */
    visible: VisibleType[];
    /**
     * To configure the marker opacity.
     * @default 1
     */
    opacity: number;
    /**
     * To configure the marker size.
     * @default 5
     */
    size: number;
    /**
     * To configure the marker fill color.
     * @default '#00bdae'
     */
    fill: string;
    /**
     * To configure Sparkline marker border color and width.
     */
    border: SparklineBorderModel;
}
/**
 * To configure the datalabel offset
 */
export  class LabelOffset extends base.ChildProperty<LabelOffset> {
    /**
     * To move the datalabel horizontally.
     */
    x: number;
    /**
     * To move the datalabel vertically.
     */
    y: number;
}
/**
 * To configure the sparkline dataLabel options.
 */
export  class SparklineDataLabelSettings extends base.ChildProperty<SparklineDataLabelSettings> {
    /**
     * To toggle the dataLabel visibility.
     * @default `[]`.
     */
    visible: VisibleType[];
    /**
     * To configure the dataLabel opacity.
     * @default 1
     */
    opacity: number;
    /**
     * To configure the dataLabel fill color.
     * @default 'transparent'
     */
    fill: string;
    /**
     * To configure the dataLabel format the value.
     * @default ''
     */
    format: string;
    /**
     * To configure Sparkline dataLabel border color and width.
     */
    border: SparklineBorderModel;
    /**
     * To configure Sparkline dataLabel text styles.
     */
    textStyle: SparklineFontModel;
    /**
     * To configure Sparkline dataLabel offset.
     */
    offset: LabelOffsetModel;
    /**
     * To change the edge dataLabel placement.
     * @default 'None'.
     */
    edgeLabelMode: EdgeLabelMode;
}
//node_modules/@syncfusion/ej2-charts/src/sparkline/model/enum.d.ts
/**
 * Sparkline Enum
 */
/**
 * Specifies the sparkline types.
 * `Line`, `Column`, `WinLoss`, `Pie` and `Area`.
 */
export  type SparklineType = 
/** Define the Sparkline Line type series. */
'Line' | 
/** Define the Sparkline Column type series. */
'Column' | 
/** Define the Sparkline WinLoss type series. */
'WinLoss' | 
/** Define the Sparkline Pie type series. */
'Pie' | 
/** Define the Sparkline Area type series. */
'Area';
/**
 * Specifies the sparkline data value types.
 * `Numeric`, `Category` and `DateTime`.
 */
export  type SparklineValueType = 
/** Define the Sparkline Numeric value type series. */
'Numeric' | 
/** Define the Sparkline Category value type series. */
'Category' | 
/** Define the Sparkline DateTime value type series. */
'DateTime';
/**
 * Specifies the sparkline marker | datalabel visible types.
 * `All`,  `High`,  `Low`,  `Start`,  `End`,  `Negative` and `None`.
 */
export  type VisibleType = 
/** Define the Sparkline marker | datalabel  Visbile All type */
'All' | 
/** Define the Sparkline marker | datalabel Visbile High type */
'High' | 
/** Define the Sparkline marker | datalabel Visbile Low type */
'Low' | 
/** Define the Sparkline marker | datalabel Visbile Start type */
'Start' | 
/** Define the Sparkline marker | datalabel Visbile End type */
'End' | 
/** Define the Sparkline marker | datalabel Visbile Negative type */
'Negative';
/**
 * Defines Theme of the sparkline. They are
 * * Material - Render a sparkline with Material theme.
 * * Fabric - Render a sparkline with Fabric theme
 * * Bootstrap - Render a sparkline with Bootstrap theme
 * * HighContrast - Render a sparkline with HighContrast theme
 * * Dark - Render a sparkline with Dark theme
 */
export  type SparklineTheme = 
/**  Render a sparkline with Material theme. */
'Material' | 
/**  Render a sparkline with Fabric theme. */
'Fabric' | 
/**  Render a sparkline with Bootstrap theme. */
'Bootstrap' | 
/**  Render a sparkline with HighContrast Light theme. */
'HighContrastLight' | 
/**  Render a sparkline with Material Dark theme. */
'MaterialDark' | 
/**  Render a sparkline with Fabric Dark theme. */
'FabricDark' | 
/**  Render a sparkline with Highcontrast Dark theme. */
'HighContrast' | 
/**  Render a sparkline with Bootstrap Dark theme. */
'BootstrapDark' | 
/** Render a sparkline with Bootstrap4 theme. */
'Bootstrap4';
/**
 * Defines edge data label placement for datalabel, if exceeds the sparkline area horizontally.
 * * None - Edge data label shown as clipped text.
 * * Shift - Edge data label moved inside the sparkline area.
 * * Hide - Edge data label will hide, if exceeds the sparkline area.
 */
export  type EdgeLabelMode = 
/** Edge data label shown as clipped text */
'None' | 
/** Edge data label moved inside the sparkline area */
'Shift' | 
/** Edge data label will hide, if exceeds the sparkline area */
'Hide';
//node_modules/@syncfusion/ej2-charts/src/sparkline/model/interface.d.ts
/**
 * Sparkline interface file.
 */
/**
 * Specifies sparkline Events
 * @private
 */
export interface ISparklineEventArgs {
    /** Defines the name of the event */
    name: string;
    /** Defines the event cancel status */
    cancel: boolean;
}
/**
 * Specifies the interface for themes.
 */
export interface IThemes {
    /** Defines the color of the axis line */
    axisLineColor: string;
    /** Defines the color of the range band */
    rangeBandColor: string;
    /** Defines the font color of the data labels */
    dataLabelColor: string;
    /** Defines the background color of the tooltip */
    tooltipFill: string;
    /** Defines the font color of the tooltip */
    tooltipFontColor: string;
    /** Defines the background color of the sparkline */
    background: string;
    /** Defines the color of the tracker line */
    trackerLineColor: string;
    /** Defines the font style of the text */
    fontFamily?: string;
    /** Defines the tooltip fill color opacity */
    tooltipFillOpacity?: number;
    /** Defines the tooltip text opacity */
    tooltipTextOpacity?: number;
    /** Defines the label font style */
    labelFontFamily?: string;
}
/**
 * Specifies the Loaded Event arguments.
 */
export interface ISparklineLoadedEventArgs extends ISparklineEventArgs {
    /** Defines the current sparkline instance */
    sparkline: Sparkline;
}
/**
 * Specifies the Load Event arguments.
 * @deprecated
 */
export interface ISparklineLoadEventArgs extends ISparklineEventArgs {
    /** Defines the current sparkline instance */
    sparkline: Sparkline;
}
/**
 * Specifies the axis rendering Event arguments.
 * @deprecated
 */
export interface IAxisRenderingEventArgs extends ISparklineEventArgs {
    /** Defines the current sparkline instance */
    sparkline: Sparkline;
    /** Defines the sparkline axis min x */
    minX: number;
    /** Defines the sparkline axis max x */
    maxX: number;
    /** Defines the sparkline axis min y */
    minY: number;
    /** Defines the sparkline axis max y */
    maxY: number;
    /** Defines the sparkline axis value */
    value: number;
    /** Defines the sparkline axis line color */
    lineColor: string;
    /** Defines the sparkline axis line width */
    lineWidth: number;
}
/**
 * Specifies the sparkline series rendering Event arguments.
 */
export interface ISeriesRenderingEventArgs extends ISparklineEventArgs {
    /** Defines the current sparkline instance */
    sparkline: Sparkline;
    /** Defines the sparkline series fill color */
    fill: string;
    /** Defines the sparkline series line width for applicable line and area. */
    lineWidth: number;
    /** Defines the current sparkline series border */
    border: SparklineBorderModel;
}
/**
 * Specifies the sparkline point related Event arguments.
 */
export interface ISparklinePointEventArgs extends ISparklineEventArgs {
    /** Defines the current sparkline instance */
    sparkline?: Sparkline;
    /** Defines the current sparkline point index */
    pointIndex: number;
    /** Defines the current sparkline point fill color */
    fill: string;
    /** Defines the current sparkline point border */
    border: SparklineBorderModel;
}
/**
 * Specifies the sparkline mouse related Event arguments.
 */
export interface ISparklineMouseEventArgs extends ISparklineEventArgs {
    /** Defines the current sparkline instance */
    sparkline?: Sparkline;
    /** Defines the current sparkline mouse event */
    event: PointerEvent | MouseEvent;
}
/**
 * Specifies the sparkline mouse point region Event arguments.
 */
export interface IPointRegionEventArgs extends ISparklineEventArgs {
    /** Defines the current sparkline instance */
    sparkline?: Sparkline;
    /** Defines the sparkline point index region event  */
    pointIndex: number;
    /** Defines the current sparkline mouse event */
    event: PointerEvent | MouseEvent;
}
/**
 * Specifies the sparkline datalabel rendering Event arguments.
 * @deprecated
 */
export interface IDataLabelRenderingEventArgs extends ISparklineEventArgs {
    /** Defines the current sparkline instance */
    sparkline: Sparkline;
    /** Defines the current sparkline label text */
    text: string;
    /** Defines the current sparkline label text location x */
    x: number;
    /** Defines the current sparkline label text location y */
    y: number;
    /** Defines the current sparkline label text color */
    color: string;
    /** Defines the current sparkline label rect fill color */
    fill: string;
    /** Defines the current sparkline label rect border */
    border: SparklineBorderModel;
    /** Defines the current sparkline label point index */
    pointIndex: number;
}
/**
 * Specifies the sparkline marker rendering Event arguments.
 * @deprecated
 */
export interface IMarkerRenderingEventArgs extends ISparklineEventArgs {
    /** Defines the current sparkline instance */
    sparkline: Sparkline;
    /** Defines the current sparkline marker location x */
    x: number;
    /** Defines the current sparkline marker location y */
    y: number;
    /** Defines the sparkline marker radius */
    size: number;
    /** Defines the current sparkline marker fill color */
    fill: string;
    /** Defines the current sparkline marker border */
    border: SparklineBorderModel;
    /** Defines the current sparkline label point index */
    pointIndex: number;
}
/**
 * Sparkline Resize event arguments.
 */
export interface ISparklineResizeEventArgs {
    /** Defines the name of the Event */
    name: string;
    /** Defines the previous size of the sparkline */
    previousSize: Size;
    /** Defines the current size of the sparkline */
    currentSize: Size;
    /** Defines the sparkline instance */
    sparkline: Sparkline;
}
/**
 * Sparkline tooltip event args.
 * @deprecated
 */
export interface ITooltipRenderingEventArgs extends ISparklineEventArgs {
    /** Defines tooltip text */
    text?: string[];
    /** Defines tooltip text style */
    textStyle?: SparklineFontModel;
}
//node_modules/@syncfusion/ej2-charts/src/sparkline/rendering/sparkline-renderer.d.ts
/**
 * Sparkline rendering calculation file
 */
export  class SparklineRenderer {
    /**
     * To process sparkline instance internally.
     */
    private sparkline;
    private min;
    private maxLength;
    private unitX;
    private unitY;
    private axisColor;
    private axisWidth;
    private axisValue;
    private pointRegions;
    private clipId;
    /**
     * To get visible points options internally.
     * @private
     */
    visiblePoints: SparkValues[];
    private axisHeight;
    /**
     * To process highpoint index color for tooltip customization
     * @private
     */
    highPointIndex: number;
    /**
     * To process low point index color for tooltip customization
     * @private
     */
    lowPointIndex: number;
    /**
     * To process start point index color for tooltip customization
     * @private
     */
    startPointIndex: number;
    /**
     * To process end point index color for tooltip customization
     * @private
     */
    endPointIndex: number;
    /**
     * To process negative point index color for tooltip customization
     * @private
     */
    negativePointIndexes: number[];
    /**
     * Sparkline data calculations
     * @param sparkline
     */
    constructor(sparkline: Sparkline);
    /**
     * To process the sparkline data
     */
    processData(): void;
    processDataManager(): void;
    /**
     * To process sparkline category data.
     */
    private processCategory;
    /**
     * To process sparkline DateTime data.
     */
    private processDateTime;
    /**
     * To render sparkline series.
     * @private
     */
    renderSeries(): void;
    /**
     * To render a range band
     */
    private rangeBand;
    /**
     * To render line series
     */
    private renderLine;
    /**
     * To render pie series
     */
    private renderPie;
    /**
     * To get special point color and option for Pie series.
     */
    private getPieSpecialPoint;
    /**
     * To render area series
     */
    private renderArea;
    /**
     * To render column series
     */
    private renderColumn;
    /**
     * To render WinLoss series
     */
    private renderWinLoss;
    private renderMarker;
    /**
     * To get special point color and option.
     */
    private getSpecialPoint;
    /**
     * To render data label for sparkline.
     */
    private renderLabel;
    private arrangeLabelPosition;
    /**
     * To get special point color and option.
     */
    private getLabelVisible;
    /**
     * To format text
     */
    private formatter;
    /**
     * To calculate min max for x and y axis
     */
    private axisCalculation;
    /**
     * To find x axis interval.
     */
    private getInterval;
    /**
     * To calculate axis ranges internally.
     */
    private findRanges;
    /**
     * To render the sparkline axis
     */
    private drawAxis;
    /**
     * To trigger point render event
     */
    private triggerPointRender;
}
//node_modules/@syncfusion/ej2-charts/src/sparkline/rendering/sparkline-tooltip.d.ts
/**
 * Sparkline Tooltip Module
 */
export  class SparklineTooltip {
    /**
     * Sparkline instance in tooltip.
     */
    private sparkline;
    /**
     * Sparkline current point index.
     */
    private pointIndex;
    /**
     * Sparkline tooltip timer.
     */
    private clearTooltip;
    constructor(sparkline: Sparkline);
    /**
     * @hidden
     */
    private addEventListener;
    private mouseLeaveHandler;
    private mouseUpHandler;
    private fadeOut;
    /**
     * To remove tooltip and tracker elements.
     * @private
     */
    removeTooltipElements(): void;
    private mouseMoveHandler;
    private processTooltip;
    /**
     * To render tracker line
     */
    private renderTrackerLine;
    /**
     * To render line series
     */
    private renderTooltip;
    /**
     * To get tooltip format.
     */
    private getFormat;
    private formatValue;
    /**
     * To remove tracker line.
     */
    private removeTracker;
    /**
     * To remove tooltip element.
     */
    private removeTooltip;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the tooltip.
     */
    destroy(sparkline: Sparkline): void;
}
//node_modules/@syncfusion/ej2-charts/src/sparkline/sparkline-model.d.ts
/**
 * Interface for a class Sparkline
 */
export interface SparklineModel extends base.ComponentModel{
    /**
     * To configure Sparkline width.
     */
    width?: string;
    /**
     * To configure Sparkline height.
     */
    height?: string;
    /**
     * To configure Sparkline points border color and width.
     */
    border?: SparklineBorderModel;
    /**
     * To configure Sparkline series type.
     * @default 'Line'
     */
    type?: SparklineType;
    /**
     * To configure sparkline data source.
     * @isGenericType true
     * @default null
     */
    dataSource?: Object[] | data.DataManager;
    /**
     * Specifies the query for filter the data.
     * @default null
     */
    query?: data.Query;
    /**
     * To configure sparkline series value type.
     * @default 'Numeric'
     */
    valueType?: SparklineValueType;
    /**
     * To configure sparkline series xName.
     * @default null
     */
    xName?: string;
    /**
     * To configure sparkline series yName.
     * @default null
     */
    yName?: string;
    /**
     * To configure sparkline series fill.
     * @default '#00bdae'
     */
    fill?: string;
    /**
     * To configure sparkline series highest y value point color.
     * @default ''
     */
    highPointColor?: string;
    /**
     * To configure sparkline series lowest y value point color.
     * @default ''
     */
    lowPointColor?: string;
    /**
     * To configure sparkline series first x value point color.
     * @default ''
     */
    startPointColor?: string;
    /**
     * To configure sparkline series last x value point color.
     * @default ''
     */
    endPointColor?: string;
    /**
     * To configure sparkline series negative y value point color.
     * @default ''
     */
    negativePointColor?: string;
    /**
     * To configure sparkline winloss series tie y value point color.
     * @default ''
     */
    tiePointColor?: string;
    /**
     * To configure sparkline series color palette. It applicable to column and pie type series.
     * @default []
     */
    palette?: string[];
    /**
     * To configure sparkline line series width.
     * @default '1'
     */
    lineWidth?: number;
    /**
     * To configure sparkline line series opacity.
     * @default '1'
     */
    opacity?: number;
    /**
     * To apply internationalization for sparkline.
     * @default null
     */
    format?: string;
    /**
     * To enable the separator
     * @default false
     */
    useGroupingSeparator?: boolean;
    /**
     * To configure Sparkline tooltip settings.
     */
    tooltipSettings?: SparklineTooltipSettingsModel;
    /**
     * To configure Sparkline container area customization.
     */
    containerArea?: ContainerAreaModel;
    /**
     * To configure Sparkline axis line customization.
     */
    rangeBandSettings?: RangeBandSettingsModel[];
    /**
     * To configure Sparkline container area customization.
     */
    axisSettings?: AxisSettingsModel;
    /**
     * To configure Sparkline marker configuration.
     */
    markerSettings?: SparklineMarkerSettingsModel;
    /**
     * To configure Sparkline dataLabel configuration.
     */
    dataLabelSettings?: SparklineDataLabelSettingsModel;
    /**
     * To configure Sparkline container area customization.
     */
    padding?: PaddingModel;
    /**
     * To configure sparkline theme.
     * @default 'Material'
     */
    theme?: SparklineTheme;
    /**
     * Triggers after sparkline rendered.
     * @event
     * @blazorProperty 'Loaded'
     */
    loaded?: base.EmitType<ISparklineLoadedEventArgs>;
    /**
     * Triggers before sparkline render.
     * @event
     * @blazorProperty 'OnLoad'
     */
    load?: base.EmitType<ISparklineLoadEventArgs>;
    /**
     * Triggers before sparkline tooltip render.
     * @event
     * @deprecated
     * @blazorProperty 'OnTooltipInitialize'
     */
    tooltipInitialize?: base.EmitType<ITooltipRenderingEventArgs>;
    /**
     * Triggers before sparkline series render.
     * @event
     * @blazorProperty 'SeriesRendering'
     */
    seriesRendering?: base.EmitType<ISeriesRenderingEventArgs>;
    /**
     * Triggers before sparkline axis render.
     * @event
     * @deprecated
     * @blazorProperty 'AxisRendering'
     */
    axisRendering?: base.EmitType<IAxisRenderingEventArgs>;
    /**
     * Triggers before sparkline points render.
     * @event
     * @deprecated
     * @blazorProperty 'PointRendering'
     */
    pointRendering?: base.EmitType<ISparklinePointEventArgs>;
    /**
     * Triggers while mouse move on the sparkline point region.
     * @event
     * @blazorProperty 'OnPointRegionMouseMove'
     */
    pointRegionMouseMove?: base.EmitType<IPointRegionEventArgs>;
    /**
     * Triggers while mouse click on the sparkline point region.
     * @event
     * @blazorProperty 'OnPointRegionMouseClick'
     */
    pointRegionMouseClick?: base.EmitType<IPointRegionEventArgs>;
    /**
     * Triggers while mouse move on the sparkline container.
     * @event
     * @blazorProperty 'OnSparklineMouseMove'
     */
    sparklineMouseMove?: base.EmitType<ISparklineMouseEventArgs>;
    /**
     * Triggers while mouse click on the sparkline container.
     * @event
     * @blazorProperty 'OnSparklineMouseClick'
     */
    sparklineMouseClick?: base.EmitType<ISparklineMouseEventArgs>;
    /**
     * Triggers before the sparkline datalabel render.
     * @event
     * @deprecated
     * @blazorProperty 'DataLabelRendering'
     */
    dataLabelRendering?: base.EmitType<IDataLabelRenderingEventArgs>;
    /**
     * Triggers before the sparkline marker render.
     * @event
     * @deprecated
     * @blazorProperty 'MarkerRendering'
     */
    markerRendering?: base.EmitType<IMarkerRenderingEventArgs>;
    /**
     * Triggers on resizing the sparkline.
     * @event
     * @blazorProperty 'Resizing'
     */
    resize?: base.EmitType<ISparklineResizeEventArgs>;
}
//node_modules/@syncfusion/ej2-charts/src/sparkline/sparkline.d.ts
/**
 * Represents the Sparkline control.
 * ```html
 * <div id="sparkline"/>
 * <script>
 *   var sparkline = new Sparkline();
 *   sparkline.appendTo("#sparkline");
 * </script>
 * ```
 */
export  class Sparkline extends base.Component<HTMLElement> implements base.INotifyPropertyChanged {
    sparklineTooltipModule: SparklineTooltip;
    /**
     * To configure Sparkline width.
     */
    width: string;
    /**
     * To configure Sparkline height.
     */
    height: string;
    /**
     * To configure Sparkline points border color and width.
     */
    border: SparklineBorderModel;
    /**
     * To configure Sparkline series type.
     * @default 'Line'
     */
    type: SparklineType;
    /**
     * To configure sparkline data source.
     * @isGenericType true
     * @default null
     */
    dataSource: Object[] | data.DataManager;
    /**
     * Specifies the query for filter the data.
     * @default null
     */
    query: data.Query;
    /**
     * To configure sparkline series value type.
     * @default 'Numeric'
     */
    valueType: SparklineValueType;
    /**
     * To configure sparkline series xName.
     * @default null
     */
    xName: string;
    /**
     * To configure sparkline series yName.
     * @default null
     */
    yName: string;
    /**
     * To configure sparkline series fill.
     * @default '#00bdae'
     */
    fill: string;
    /**
     * To configure sparkline series highest y value point color.
     * @default ''
     */
    highPointColor: string;
    /**
     * To configure sparkline series lowest y value point color.
     * @default ''
     */
    lowPointColor: string;
    /**
     * To configure sparkline series first x value point color.
     * @default ''
     */
    startPointColor: string;
    /**
     * To configure sparkline series last x value point color.
     * @default ''
     */
    endPointColor: string;
    /**
     * To configure sparkline series negative y value point color.
     * @default ''
     */
    negativePointColor: string;
    /**
     * To configure sparkline winloss series tie y value point color.
     * @default ''
     */
    tiePointColor: string;
    /**
     * To configure sparkline series color palette. It applicable to column and pie type series.
     * @default []
     */
    palette: string[];
    /**
     * To configure sparkline line series width.
     * @default '1'
     */
    lineWidth: number;
    /**
     * To configure sparkline line series opacity.
     * @default '1'
     */
    opacity: number;
    /**
     * To apply internationalization for sparkline.
     * @default null
     */
    format: string;
    /**
     * To enable the separator
     * @default false
     */
    useGroupingSeparator: boolean;
    /**
     * To configure Sparkline tooltip settings.
     */
    tooltipSettings: SparklineTooltipSettingsModel;
    /**
     * To configure Sparkline container area customization.
     */
    containerArea: ContainerAreaModel;
    /**
     * To configure Sparkline axis line customization.
     */
    rangeBandSettings: RangeBandSettingsModel[];
    /**
     * To configure Sparkline container area customization.
     */
    axisSettings: AxisSettingsModel;
    /**
     * To configure Sparkline marker configuration.
     */
    markerSettings: SparklineMarkerSettingsModel;
    /**
     * To configure Sparkline dataLabel configuration.
     */
    dataLabelSettings: SparklineDataLabelSettingsModel;
    /**
     * To configure Sparkline container area customization.
     */
    padding: PaddingModel;
    /**
     * To configure sparkline theme.
     * @default 'Material'
     */
    theme: SparklineTheme;
    /**
     * Triggers after sparkline rendered.
     * @event
     * @blazorProperty 'Loaded'
     */
    loaded: base.EmitType<ISparklineLoadedEventArgs>;
    /**
     * Triggers before sparkline render.
     * @event
     * @blazorProperty 'OnLoad'
     */
    load: base.EmitType<ISparklineLoadEventArgs>;
    /**
     * Triggers before sparkline tooltip render.
     * @event
     * @deprecated
     * @blazorProperty 'OnTooltipInitialize'
     */
    tooltipInitialize: base.EmitType<ITooltipRenderingEventArgs>;
    /**
     * Triggers before sparkline series render.
     * @event
     * @blazorProperty 'SeriesRendering'
     */
    seriesRendering: base.EmitType<ISeriesRenderingEventArgs>;
    /**
     * Triggers before sparkline axis render.
     * @event
     * @deprecated
     * @blazorProperty 'AxisRendering'
     */
    axisRendering: base.EmitType<IAxisRenderingEventArgs>;
    /**
     * Triggers before sparkline points render.
     * @event
     * @deprecated
     * @blazorProperty 'PointRendering'
     */
    pointRendering: base.EmitType<ISparklinePointEventArgs>;
    /**
     * Triggers while mouse move on the sparkline point region.
     * @event
     * @blazorProperty 'OnPointRegionMouseMove'
     */
    pointRegionMouseMove: base.EmitType<IPointRegionEventArgs>;
    /**
     * Triggers while mouse click on the sparkline point region.
     * @event
     * @blazorProperty 'OnPointRegionMouseClick'
     */
    pointRegionMouseClick: base.EmitType<IPointRegionEventArgs>;
    /**
     * Triggers while mouse move on the sparkline container.
     * @event
     * @blazorProperty 'OnSparklineMouseMove'
     */
    sparklineMouseMove: base.EmitType<ISparklineMouseEventArgs>;
    /**
     * Triggers while mouse click on the sparkline container.
     * @event
     * @blazorProperty 'OnSparklineMouseClick'
     */
    sparklineMouseClick: base.EmitType<ISparklineMouseEventArgs>;
    /**
     * Triggers before the sparkline datalabel render.
     * @event
     * @deprecated
     * @blazorProperty 'DataLabelRendering'
     */
    dataLabelRendering: base.EmitType<IDataLabelRenderingEventArgs>;
    /**
     * Triggers before the sparkline marker render.
     * @event
     * @deprecated
     * @blazorProperty 'MarkerRendering'
     */
    markerRendering: base.EmitType<IMarkerRenderingEventArgs>;
    /**
     * Triggers on resizing the sparkline.
     * @event
     * @blazorProperty 'Resizing'
     */
    resize: base.EmitType<ISparklineResizeEventArgs>;
    /**
     * svg renderer object.
     * @private
     */
    renderer: svgBase.SvgRenderer;
    /**
     * sparkline renderer object.
     * @private
     */
    sparklineRenderer: SparklineRenderer;
    /**
     * sparkline svg element's object
     * @private
     */
    svgObject: Element;
    /** @private */
    isDevice: Boolean;
    /** @private */
    isTouch: Boolean;
    /** @private */
    mouseX: number;
    /** @private */
    mouseY: number;
    /**
     * resize event timer
     * @private
     */
    resizeTo: number;
    /**
     * Sparkline available height, width
     * @private
     */
    availableSize: Size;
    /**
     * Sparkline theme support
     *  @private
     */
    sparkTheme: IThemes;
    /**
     * localization object
     * @private
     */
    localeObject: base.L10n;
    /**
     * To process sparkline data internally.
     * @private
     */
    sparklineData: Object[] | data.DataManager;
    /**
     * It contains default values of localization values
     */
    private defaultLocalConstants;
    /**
     * Internal use of internationalization instance.
     * @private
     */
    intl: base.Internationalization;
    /** @private */
    isBlazor: boolean;
    /**
     * Constructor for creating the Sparkline widget
     */
    constructor(options?: SparklineModel, element?: string | HTMLElement);
    /**
     * Initializing pre-required values for sparkline.
     */
    protected preRender(): void;
    /**
     * Sparkline Elements rendering starting.
     */
    protected render(): void;
    /**
     * @private
     */
    processSparklineData(): void;
    /**
     * To render sparkline elements
     */
    renderSparkline(): void;
    /**
     * Create secondary element for the tooltip
     */
    private createDiv;
    /**
     * To set the left and top position for data label template for sparkline
     */
    private setSecondaryElementPosition;
    /**
     * @private
     * Render the sparkline border
     */
    private renderBorder;
    /**
     * To create svg element for sparkline
     */
    private createSVG;
    /**
     * To Remove the Sparkline SVG object
     */
    private removeSvg;
    /**
     * Method to set culture for sparkline
     */
    private setCulture;
    /**
     * To provide the array of modules needed for sparkline rendering
     * @return {base.ModuleDeclaration[]}
     * @private
     */
    requiredModules(): base.ModuleDeclaration[];
    /**
     * Method to unbind events for sparkline chart
     */
    private unWireEvents;
    /**
     * Method to bind events for the sparkline
     */
    private wireEvents;
    /**
     * Sparkline resize event.
     * @private
     */
    sparklineResize(e: Event): boolean;
    /**
     * Handles the mouse move on sparkline.
     * @return {boolean}
     * @private
     */
    sparklineMove(e: PointerEvent): boolean;
    /**
     * Handles the mouse click on sparkline.
     * @return {boolean}
     * @private
     */
    sparklineClick(e: PointerEvent): boolean;
    /**
     * To check mouse event target is point region or not.
     */
    private isPointRegion;
    /**
     * Handles the mouse end.
     * @return {boolean}
     * @private
     */
    sparklineMouseEnd(e: PointerEvent): boolean;
    /**
     * Handles the mouse leave on sparkline.
     * @return {boolean}
     * @private
     */
    sparklineMouseLeave(e: PointerEvent): boolean;
    /**
     * Method to set mouse x, y from events
     */
    private setSparklineMouseXY;
    /**
     * To change rendering while property value modified.
     * @private
     */
    onPropertyChanged(newProp: SparklineModel, oldProp: SparklineModel): void;
    /**
     * To render sparkline series and appending.
     */
    private refreshSparkline;
    /**
     * Get component name
     */
    getModuleName(): string;
    /**
     * Destroy the component
     */
    destroy(): void;
    /**
     * Get the properties to be maintained in the persisted state.
     * @private
     */
    getPersistData(): string;
}
//node_modules/@syncfusion/ej2-charts/src/sparkline/utils/helper.d.ts
/**
 * Sparkline control helper file
 */
/**
 * sparkline internal use of `Size` type
 */
export  class Size {
    /**
     * height of the size
     */
    height: number;
    width: number;
    constructor(width: number, height: number);
}
/**
 * To find the default colors based on theme.
 * @private
 */
export  function getThemeColor(theme: SparklineTheme): IThemes;
/**
 * To find number from string
 * @private
 */
export  function stringToNumber(value: string, containerSize: number): number;
/**
 * Method to calculate the width and height of the sparkline
 */
export  function calculateSize(sparkline: Sparkline): void;
/**
 * Method to create svg for sparkline.
 */
export  function createSvg(sparkline: Sparkline): void;
/**
 * Internal use of type rect
 * @private
 */
export  class Rect {
    x: number;
    y: number;
    height: number;
    width: number;
    constructor(x: number, y: number, width: number, height: number);
}
/**
 * Internal use of path options
 * @private
 */
export  class PathOption1 {
    opacity: number;
    id: string;
    stroke: string;
    fill: string;
    ['stroke-dasharray']: string;
    ['stroke-width']: number;
    d: string;
    constructor(id: string, fill: string, width: number, color: string, opacity?: number, dashArray?: string, d?: string);
}
/**
 * Sparkline internal rendering options
 * @private
 */
export interface SparkValues {
    x?: number;
    y?: number;
    height?: number;
    width?: number;
    percent?: number;
    degree?: number;
    location?: {
        x: number;
        y: number;
    };
    markerPosition?: number;
    xVal?: number;
    yVal?: number;
}
/**
 * Internal use of rectangle options
 * @private
 */
export  class RectOption11 extends PathOption {
    rect: Rect;
    topLeft: number;
    topRight: number;
    bottomLeft: number;
    bottomRight: number;
    constructor(id: string, fill: string, border: SparklineBorderModel, opacity: number, rect: Rect, tl?: number, tr?: number, bl?: number, br?: number);
}
/**
 * Internal use of circle options
 * @private
 */
export  class CircleOption11 extends PathOption {
    cy: number;
    cx: number;
    r: number;
    ['stroke-dasharray']: string;
    constructor(id: string, fill: string, border: SparklineBorderModel, opacity: number, cx: number, cy: number, r: number, dashArray: string);
}
/**
 * Internal use of append shape element
 * @private
 */
export  function appendShape(shape: Element, element: Element): Element;
/**
 * Internal rendering of Circle
 * @private
 */
export  function drawCircle(sparkline: Sparkline, options: CircleOption, element?: Element): Element;
/**
 * To get rounded rect path direction
 */
export  function calculateRoundedRectPath(r: Rect, topLeft: number, topRight: number, bottomLeft: number, bottomRight: number): string;
/**
 * Internal rendering of Rectangle
 * @private
 */
export  function drawRectangle(sparkline: Sparkline, options: RectOption, element?: Element): Element;
/**
 * Internal rendering of Path
 * @private
 */
export  function drawPath(sparkline: Sparkline, options: PathOption, element?: Element): Element;
/**
 * Function to measure the height and width of the text.
 * @param  {string} text
 * @param  {SparklineFontModel} font
 * @param  {string} id
 * @returns no
 * @private
 */
export  function measureText(text: string, font: SparklineFontModel): Size;
/**
 * Internal use of text options
 * @private
 */
export  class TextOption1 {
    id: string;
    anchor: string;
    text: string;
    transform: string;
    x: number;
    y: number;
    baseLine: string;
    constructor(id?: string, x?: number, y?: number, anchor?: string, text?: string, baseLine?: string, transform?: string);
}
/**
 * Internal rendering of text
 * @private
 */
export  function renderTextElement(options: TextOption, font: SparklineFontModel, color: string, parent: HTMLElement | Element): Element;
/**
 * To remove element by id
 */
export  function removeElement(id: string): void;
/**
 * To find the element by id
 */
export  function getIdElement(id: string): Element;
/**
 * To find point within the bounds.
 */
export  function withInBounds(x: number, y: number, bounds: Rect): boolean;
//node_modules/@syncfusion/ej2-charts/src/stock-chart/index.d.ts
/**
 * Financial chart exports
 */
//node_modules/@syncfusion/ej2-charts/src/stock-chart/model/base-model.d.ts
/**
 * Interface for a class StockChartFont
 */
export interface StockChartFontModel {
    /**
     * Color for the text.
     * @default ''
     */
    color?: string;
    /**
     * Font size for the text.
     * @default '16px'
     */
    size?: string;
    /**
     * FontFamily for the text.
     */
    fontFamily?: string;
    /**
     * FontStyle for the text.
     * @default 'Normal'
     */
    fontStyle?: string;
    /**
     * FontWeight for the text.
     * @default 'Normal'
     */
    fontWeight?: string;
    /**
     * Opacity for the text.
     * @default 1
     */
    opacity?: number;
    /**
     * Specifies the chart title text overflow
     * @default 'Trim'
     */
    textOverflow?: TextOverflow;
    /**
     * text alignment
     * @default 'Center'
     */
    textAlignment?: Alignment;
}
/**
 * Interface for a class StockChartBorder
 */
export interface StockChartBorderModel {
    /**
     * The color of the border that accepts value in hex and rgba as a valid CSS color string.
     * @default ''
     */
    color?: string;
    /**
     * The width of the border in pixels.
     * @default 1
     */
    width?: number;
}
/**
 * Interface for a class StockChartArea
 */
export interface StockChartAreaModel {
    /**
     * Options to customize the border of the chart area.
     */
    border?: StockChartBorderModel;
    /**
     * The background of the chart area that accepts value in hex and rgba as a valid CSS color string..
     * @default 'transparent'
     */
    background?: string;
    /**
     * The opacity for background.
     * @default 1
     */
    opacity?: number;
}
/**
 * Interface for a class StockMargin
 */
export interface StockMarginModel {
    /**
     * Left margin in pixels.
     * @default 10
     */
    left?: number;
    /**
     * Right margin in pixels.
     * @default 10
     */
    right?: number;
    /**
     * Top margin in pixels.
     * @default 10
     */
    top?: number;
    /**
     * Bottom margin in pixels.
     * @default 10
     */
    bottom?: number;
}
/**
 * Interface for a class StockChartStripLineSettings
 */
export interface StockChartStripLineSettingsModel {
    /**
     *  If set true, strip line get render from axis origin.
     *  @default false
     */
    startFromAxis?: boolean;
    /**
     * If set true, strip line for axis renders.
     * @default true
     */
    visible?: boolean;
    /**
     * Start value of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    start?: number | Date;
    /**
     * Color of the strip line.
     * @default '#808080'
     */
    color?: string;
    /**
     * End value of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    end?: number | Date;
    /**
     * Size of the strip line, when it starts from the origin.
     * @default null
     * @aspDefaultValueIgnore
     */
    size?: number;
    /**
     * Size type of the strip line
     * @default Auto
     */
    sizeType?: SizeType;
    /**
     * Dash Array of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    dashArray?: string;
    /**
     * isRepeat value of the strip line.
     * @default false
     * @aspDefaultValueIgnore
     */
    isRepeat?: boolean;
    /**
     * repeatEvery value of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    repeatEvery?: number | Date;
    /**
     * isSegmented value of the strip line
     * @default false
     * @aspDefaultValueIgnore
     */
    isSegmented?: boolean;
    /**
     * repeatUntil value of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    repeatUntil?: number | Date;
    /**
     * segmentStart value of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    segmentStart?: number | Date;
    /**
     * segmentAxisName of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    segmentAxisName?: string;
    /**
     * segmentEnd value of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    segmentEnd?: number | Date;
    /**
     * Strip line Opacity
     * @default 1
     */
    opacity?: number;
    /**
     * Strip line text.
     * @default ''
     */
    text?: string;
    /**
     * Border of the strip line.
     */
    border?: StockChartBorderModel;
    /**
     * The angle to which the strip line text gets rotated.
     * @default null
     * @aspDefaultValueIgnore
     */
    rotation?: number;
    /**
     * Specifies the order of the strip line. They are,
     * * Behind: Places the strip line behind the series elements.
     * * Over: Places the strip line over the series elements.
     * @default 'Behind'
     */
    zIndex?: ZIndex;
    /**
     * Defines the position of the strip line text horizontally. They are,
     * * Start: Places the strip line text at the start.
     * * Middle: Places the strip line text in the middle.
     * * End: Places the strip line text at the end.
     * @default 'Middle'
     */
    horizontalAlignment?: Anchor;
    /**
     * Defines the position of the strip line text vertically. They are,
     * * Start: Places the strip line text at the start.
     * * Middle: Places the strip line text in the middle.
     * * End: Places the strip line text at the end.
     * @default 'Middle'
     */
    verticalAlignment?: Anchor;
    /**
     * Options to customize the strip line text.
     */
    textStyle?: StockChartFontModel;
    /**
     * The option to delay animation of the series.
     * @default 0
     */
    delay?: number;
    /**
     * If set to true, series gets animated on initial loading.
     * @default false
     */
    enable?: boolean;
    /**
     * The duration of animation in milliseconds.
     * @default 1000
     */
    duration?: number;
}
/**
 * Interface for a class StockEmptyPointSettings
 */
export interface StockEmptyPointSettingsModel {
    /**
     * To customize the fill color of empty points.
     * @default null
     */
    fill?: string;
    /**
     * To customize the mode of empty points.
     * @default Gap
     */
    mode?: EmptyPointMode;
    /**
     * Options to customize the border of empty points.
     * @default "{color: 'transparent', width: 0}"
     */
    border?: StockChartBorderModel;
}
/**
 * Interface for a class StockChartConnector
 */
export interface StockChartConnectorModel {
    /**
     * specifies the type of the connector line. They are
     * * Smooth
     * * Line
     * @default 'Line'
     */
    type?: ConnectorType;
    /**
     * Length of the connector line in pixels.
     * @default null
     */
    length?: string;
    /**
     * Color of the connector line.
     * @default null
     */
    color?: string;
    /**
     * dashArray of the connector line.
     * @default ''
     */
    dashArray?: string;
    /**
     * Width of the connector line in pixels.
     * @default 1
     */
    width?: number;
}
/**
 * Interface for a class StockSeries
 */
export interface StockSeriesModel {
    /**
     * The DataSource field that contains the x value.
     * It is applicable for series and technical indicators
     * @default ''
     */
    xName?: string;
    /**
     * The DataSource field that contains the y value.
     * @default ''
     */
    yName?: string;
    /**
     * The DataSource field that contains the open value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    open?: string;
    /**
     * The DataSource field that contains the close value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    close?: string;
    /**
     * The DataSource field that contains the high value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    high?: string;
    /**
     * The DataSource field that contains the low value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    low?: string;
    /**
     * Defines the data source field that contains the volume value in candle charts
     * It is applicable for financial series and technical indicators
     * @default ''
     */
    volume?: string;
    /**
     * The DataSource field that contains the color value of point
     * It is applicable for series
     * @default ''
     */
    pointColorMapping?: string;
    /**
     * Options to customizing animation for the series.
     */
    animation?: AnimationModel;
    /**
     * The name of the horizontal axis associated with the series. It requires `axes` of the chart.
     * It is applicable for series and technical indicators
     * @default null
     */
    xAxisName?: string;
    /**
     * The name of the vertical axis associated with the series. It requires `axes` of the chart.
     * It is applicable for series and technical indicators
     * @default null
     */
    yAxisName?: string;
    /**
     * The fill color for the series that accepts value in hex and rgba as a valid CSS color string.
     * It also represents the color of the signal lines in technical indicators.
     * For technical indicators, the default value is 'blue' and for series, it has null.
     * @default null
     */
    fill?: string;
    /**
     * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.
     * @default '0'
     */
    dashArray?: string;
    /**
     * The stroke width for the series that is applicable only for `Line` type series.
     * It also represents the stroke width of the signal lines in technical indicators.
     * @default 1
     */
    width?: number;
    /**
     * The name of the series visible in legend.
     * @default ''
     */
    name?: string;
    /**
     * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of data.DataManager.
     * @default ''
     */
    dataSource?: Object | data.DataManager;
    /**
     * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.data.DataManager`.
     * @default null
     */
    query?: data.Query;
    /**
     * This property is used in financial charts to visualize the price movements in stock.
     * It defines the color of the candle/point, when the opening price is higher than the closing price.
     * @default '#e74c3d'
     */
    bullFillColor?: string;
    /**
     * This property is used in stock charts to visualize the price movements in stock.
     * It defines the color of the candle/point, when the opening price is less than the closing price.
     * @default '#2ecd71'
     */
    bearFillColor?: string;
    /**
     * This property is applicable for candle series.
     * It enables/disables to visually compare the current values with the previous values in stock.
     * @default false
     */
    enableSolidCandles?: boolean;
    /**
     * Specifies the visibility of series.
     * @default true
     */
    visible?: boolean;
    /**
     * Options to customizing the border of the series. This is applicable only for `Column` and `Bar` type series.
     */
    border?: StockChartBorderModel;
    /**
     * The opacity of the series.
     * @default 1
     */
    opacity?: number;
    /**
     * The type of the series are
     * * Line
     * * Column
     * * Area
     * * Spline
     * * Hilo
     * * HiloOpenClose
     * * Candle
     * @default 'Candle'
     */
    type?: ChartSeriesType;
    /**
     * Options for displaying and customizing markers for individual points in a series.
     */
    marker?: MarkerSettingsModel;
    /**
     * Defines the collection of trendlines that are used to predict the trend
     */
    trendlines?: TrendlineModel[];
    /**
     * If set true, the Tooltip for series will be visible.
     * @default true
     */
    enableTooltip?: boolean;
    /**
     * The provided value will be considered as a Tooltip name 
     * @default ''
     */
    tooltipMappingName?: string;
    /**
     * Custom style for the selected series or points.
     * @default null
     */
    selectionStyle?: string;
    /**
     * It defines tension of cardinal spline types
     * @default 0.5
     */
    cardinalSplineTension?: number;
    /**
     * To render the column series points with particular rounded corner.
     */
    cornerRadius?: CornerRadiusModel;
    /**
     * options to customize the empty points in series
     */
    emptyPointSettings?: EmptyPointSettingsModel;
    /**
     * To render the column series points with particular column width. If the series type is histogram the
     * default value is 1 otherwise 0.7.
     * @default null
     * @aspDefaultValueIgnore
     */
    columnWidth?: number;
    /**
     * To render the column series points with particular column spacing. It takes value from 0 - 1.
     * @default 0
     */
    columnSpacing?: number;
}
/**
 * Interface for a class StockChartIndicator
 */
export interface StockChartIndicatorModel {
    /**
     * Defines the type of the technical indicator
     * @default 'Sma'
     */
    type?: TechnicalIndicators;
    /**
     * Defines the period, the price changes over which will be considered to predict the trend
     * @default 14
     */
    period?: number;
    /**
     * Defines the period, the price changes over which will define the %D value in stochastic indicators
     * @default 3
     */
    dPeriod?: number;
    /**
     * Defines the look back period, the price changes over which will define the %K value in stochastic indicators
     * @default 14
     */
    kPeriod?: number;
    /**
     * Defines the over-bought(threshold) values. It is applicable for RSI and stochastic indicators
     * @default 80
     */
    overBought?: number;
    /**
     * Defines the over-sold(threshold) values. It is applicable for RSI and stochastic indicators
     * @default 20
     */
    overSold?: number;
    /**
     * Defines the field to compare the current value with previous values
     * @default 'Close'
     */
    field?: FinancialDataFields;
    /**
     * Sets the standard deviation values that helps to define the upper and lower bollinger bands
     * @default 2
     */
    standardDeviation?: number;
    /**
     * Sets the slow period to define the Macd line
     * @default 12
     */
    slowPeriod?: number;
    /**
     * Enables/Disables the over-bought and over-sold regions
     * @default true
     */
    showZones?: boolean;
    /**
     * Sets the fast period to define the Macd line
     * @default 26
     */
    fastPeriod?: number;
    /**
     * Defines the appearance of the the MacdLine of Macd indicator
     * @default { color: '#ff9933', width: 2 }
     */
    macdLine?: StockChartConnectorModel;
    /**
     * Defines the type of the Macd indicator.
     * @default 'Both'
     */
    macdType?: MacdType;
    /**
     * Defines the color of the negative bars in Macd indicators
     * @default '#e74c3d'
     */
    macdNegativeColor?: string;
    /**
     * Defines the color of the positive bars in Macd indicators
     * @default '#2ecd71'
     */
    macdPositiveColor?: string;
    /**
     * Options for customizing the BollingerBand in the indicator.
     * @default 'rgba(211,211,211,0.25)'
     */
    bandColor?: string;
    /**
     * Defines the appearance of the upper line in technical indicators
     */
    upperLine?: StockChartConnectorModel;
    /**
     * Defines the name of the series, the data of which has to be depicted as indicator
     * @default ''
     */
    seriesName?: string;
    /**
     * Defines the appearance of period line in technical indicators
     */
    periodLine?: StockChartConnectorModel;
    /**
     * Defines the appearance of lower line in technical indicators
     */
    lowerLine?: ConnectorModel;
    /**
     * The DataSource field that contains the high value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    high?: string;
    /**
     * The DataSource field that contains the open value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    open?: string;
    /**
     * The DataSource field that contains the low value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    low?: string;
    /**
     * The DataSource field that contains the x value.
     * It is applicable for series and technical indicators
     * @default ''
     */
    xName?: string;
    /**
     * The DataSource field that contains the close value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    close?: string;
    /**
     * The DataSource field that contains the color value of point
     * It is applicable for series
     * @default ''
     */
    pointColorMapping?: string;
    /**
     * Defines the data source field that contains the volume value in candle charts
     * It is applicable for financial series and technical indicators
     * @default ''
     */
    volume?: string;
    /**
     * The name of the horizontal axis associated with the series. It requires `axes` of the chart.
     * It is applicable for series and technical indicators
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let chart$: Chart = new Chart({
     * ...
     *     columns: [{ width: '50%' },
     *               { width: '50%' }],
     *     axes: [{
     *                name: 'xAxis 1',
     *                columnIndex: 1,
     *            }],
     *     series: [{
     *                dataSource: data,
     *                xName: 'x', yName: 'y',
     *                xAxisName: 'xAxis 1',
     *     }],
     * });
     * chart.appendTo('#Chart');
     * ```
     * @default null
     */
    xAxisName?: string;
    /**
     * The name of the vertical axis associated with the series. It requires `axes` of the chart.
     * It is applicable for series and technical indicators
     * ```html
     * <div id='Chart'></div>
     * ```
     * @default null
     */
    yAxisName?: string;
    /**
     * Options to customizing animation for the series.
     */
    animation?: AnimationModel;
    /**
     * The fill color for the series that accepts value in hex and rgba as a valid CSS color string.
     * It also represents the color of the signal lines in technical indicators.
     * For technical indicators, the default value is 'blue' and for series, it has null.
     * @default null
     */
    fill?: string;
    /**
     * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.
     * @default '0'
     */
    dashArray?: string;
    /**
     * The stroke width for the series that is applicable only for `Line` type series.
     * It also represents the stroke width of the signal lines in technical indicators.
     * @default 1
     */
    width?: number;
    /**
     * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.data.DataManager`.
     * @default null
     */
    query?: data.Query;
    /**
     * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of data.DataManager.
     * ```html
     * <div id='Chart'></div>
     * ```
     * @default ''
     */
    dataSource?: Object | data.DataManager;
}
/**
 * Interface for a class StockChartAxis
 */
export interface StockChartAxisModel {
    /**
     * Options to customize the crosshair ToolTip.
     */
    crosshairTooltip?: CrosshairTooltipModel;
    /**
     * Options to customize the axis label.
     */
    labelStyle?: StockChartFontModel;
    /**
     * Specifies the title of an axis.
     * @default ''
     */
    title?: string;
    /**
     * Options for customizing the axis title.
     */
    titleStyle?: StockChartFontModel;
    /**
     * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc.
     * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.
     * @default ''
     */
    labelFormat?: string;
    /**
     * It specifies the type of format to be used in dateTime format process.
     * @default 'DateTime'
     */
    skeletonType?: SkeletonType;
    /**
     * Specifies the skeleton format in which the dateTime format will process.
     * @default ''
     */
    skeleton?: string;
    /**
     * Left and right padding for the plot area in pixels.
     * @default 0
     */
    plotOffset?: number;
    /**
     * The base value for logarithmic axis. It requires `valueType` to be `Logarithmic`.
     * @default 10
     */
    logBase?: number;
    /**
     * Specifies the index of the row where the axis is associated, when the chart area is divided into multiple plot areas by using `rows`.
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let chart$: Chart = new Chart({
     * ...
     *     rows: [{ height: '50%' },
     *            { height: '50%' }],
     *     axes: [{
     *                name: 'yAxis 1',
     *                rowIndex: 1,
     *      }],
     * ...
     * });
     * chart.appendTo('#Chart');
     * ```
     * @default 0
     */
    rowIndex?: number;
    /**
     * Specifies the number of `columns` or `rows` an axis has to span horizontally or vertically.
     * @default 1
     */
    span?: number;
    /**
     * The maximum number of label count per 100 pixels with respect to the axis length.
     * @default 3
     */
    maximumLabels?: number;
    /**
     * With this property, you can request axis to calculate intervals approximately equal to your specified interval.
     * @default null
     * @aspDefaultValueIgnore
     */
    desiredIntervals?: number;
    /**
     * The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.
     * @default 1
     */
    zoomFactor?: number;
    /**
     * Position of the zoomed axis. Value ranges from 0 to 1.
     * @default 0
     */
    zoomPosition?: number;
    /**
     * If set to true, the axis will render at the opposite side of its default position.
     * @default false
     */
    opposedPosition?: boolean;
    /**
     * If set to true, axis interval will be calculated automatically with respect to the zoomed range.
     * @default true
     */
    enableAutoIntervalOnZooming?: boolean;
    /**
     * Specifies the type of data the axis is handling.
     * * Double:  Renders a numeric axis.
     * * DateTime: Renders a dateTime axis.
     * * Category: Renders a category axis.
     * * Logarithmic: Renders a log axis.
     * @default 'Double'
     * @blazorType Syncfusion.EJ2.Blazor.Charts.ValueType
     * @isEnumeration true
     */
    valueType?: ValueType;
    /**
     * Specifies the padding for the axis range in terms of interval.They are,
     * * none: Padding cannot be applied to the axis.
     * * normal: Padding is applied to the axis based on the range calculation.
     * * additional: Interval of the axis is added as padding to the minimum and maximum values of the range.
     * * round: Axis range is rounded to the nearest possible value divided by the interval.
     * @default 'Auto'
     */
    rangePadding?: ChartRangePadding;
    /**
     * Specifies the position of labels at the edge of the axis.They are,
     * * None: No action will be performed.
     * * Hide: Edge label will be hidden.
     * * Shift: Shifts the edge labels.
     * @default 'None'
     */
    edgeLabelPlacement?: EdgeLabelPlacement;
    /**
     * Specifies the placement of a label for category axis. They are,
     * * betweenTicks: Renders the label between the ticks.
     * * onTicks: Renders the label on the ticks.
     * @default 'BetweenTicks'
     */
    labelPlacement?: LabelPlacement;
    /**
     * Specifies the types like `Years`, `Months`, `Days`, `Hours`, `Minutes`, `Seconds` in date time axis.They are,
     * * Auto: Defines the interval of the axis based on data.
     * * Years: Defines the interval of the axis in years.
     * * Months: Defines the interval of the axis in months.
     * * Days: Defines the interval of the axis in days.
     * * Hours: Defines the interval of the axis in hours.
     * * Minutes: Defines the interval of the axis in minutes.
     * @default 'Auto'
     */
    intervalType?: IntervalType;
    /**
     * Specifies the placement of a ticks to the axis line. They are,
     * * inside: Renders the ticks inside to the axis line.
     * * outside: Renders the ticks outside to the axis line.
     * @default 'Outside'
     */
    tickPosition?: AxisPosition;
    /**
     * Unique identifier of an axis.
     * To associate an axis with the series, set this name to the xAxisName/yAxisName properties of the series.
     * @default ''
     */
    name?: string;
    /**
     * Specifies the placement of a labels to the axis line. They are,
     * * inside: Renders the labels inside to the axis line.
     * * outside: Renders the labels outside to the axis line.
     * @default 'Outside'
     */
    labelPosition?: AxisPosition;
    /**
     * If set to true, axis label will be visible.
     * @default true
     */
    visible?: boolean;
    /**
     * The angle to which the axis label gets rotated.
     * @default 0
     */
    labelRotation?: number;
    /**
     * Specifies the number of minor ticks per interval.
     * @default 0
     */
    minorTicksPerInterval?: number;
    /**
     * Specifies the value at which the axis line has to be intersect with the vertical axis or vice versa.
     * @default null
     */
    crossesAt?: Object;
    /**
     * Specifies axis name with which the axis line has to be crossed
     * @default null
     */
    crossesInAxis?: string;
    /**
     * Specifies whether axis elements like axis labels, axis title, etc has to be crossed with axis line
     * @default true
     */
    placeNextToAxisLine?: boolean;
    /**
     * Specifies the minimum range of an axis.
     * @default null
     */
    minimum?: Object;
    /**
     * Specifies the interval for an axis.
     * @default null
     * @aspDefaultValueIgnore
     */
    interval?: number;
    /**
     * Specifies the maximum range of an axis.
     * @default null
     */
    maximum?: Object;
    /**
     * Specifies the maximum width of an axis label.
     * @default 34.
     */
    maximumLabelWidth?: number;
    /**
     * Options for customizing major tick lines.
     */
    majorTickLines?: MajorTickLinesModel;
    /**
     * Specifies the Trim property for an axis.
     * @default false
     */
    enableTrim?: boolean;
    /**
     * Options for customizing minor tick lines.
     */
    minorTickLines?: MinorTickLinesModel;
    /**
     * Options for customizing minor grid lines.
     */
    minorGridLines?: MinorGridLinesModel;
    /**
     * Options for customizing major grid lines.
     */
    majorGridLines?: MajorGridLinesModel;
    /**
     * Options for customizing axis lines.
     */
    lineStyle?: AxisLineModel;
    /**
     * It specifies whether the axis to be rendered in inversed manner or not.
     * @default false
     */
    isInversed?: boolean;
    /**
     * Specifies the actions like `Hide`, `Rotate45`, and `Rotate90` when the axis labels intersect with each other.They are,
     * * None: Shows all the labels.
     * * Hide: Hides the label when it intersects.
     * * Rotate45: Rotates the label to 45 degree when it intersects.
     * * Rotate90: Rotates the label to 90 degree when it intersects.
     * @default Hide
     */
    labelIntersectAction?: LabelIntersectAction;
    /**
     * The polar radar radius position.
     * @default 100
     */
    coefficient?: number;
    /**
     * The start angle for the series.
     * @default 0
     */
    startAngle?: number;
    /**
     * TabIndex value for the axis.
     * @default 2
     */
    tabIndex?: number;
    /**
     * Specifies the stripLine collection for the axis
     */
    stripLines?: StockChartStripLineSettingsModel[];
    /**
     * Description for axis and its element.
     * @default null
     */
    description?: string;
}
/**
 * Interface for a class StockChartRow
 */
export interface StockChartRowModel {
    /**
     * The height of the row as a string accept input both as '100px' and '100%'.
     * If specified as '100%, row renders to the full height of its chart.
     * @default '100%'
     */
    height?: string;
    /**
     * Options to customize the border of the rows.
     */
    border?: StockChartBorderModel;
}
/**
 * Interface for a class StockChartTrendline
 */
export interface StockChartTrendlineModel {
    /**
     * Defines the period, the price changes over which will be considered to predict moving average trend line
     * @default 2
     */
    period?: number;
    /**
     * Defines the name of trendline
     * @default ''
     */
    name?: string;
    /**
     * Defines the type of the trendline
     * @default 'Linear'
     */
    type?: TrendlineTypes;
    /**
     * Defines the polynomial order of the polynomial trendline
     * @default 2
     */
    polynomialOrder?: number;
    /**
     * Defines the period, by which the trend has to forward forecast
     * @default 0
     */
    forwardForecast?: number;
    /**
     * Defines the period, by which the trend has to backward forecast
     * @default 0
     */
    backwardForecast?: number;
    /**
     * Options to customize the animation for trendlines
     */
    animation?: AnimationModel;
    /**
     * Enables/disables tooltip for trendlines
     * @default true
     */
    enableTooltip?: boolean;
    /**
     * Options to customize the marker for trendlines
     */
    marker?: MarkerSettingsModel;
    /**
     * Defines the intercept of the trendline
     * @default null
     * @aspDefaultValueIgnore
     */
    intercept?: number;
    /**
     * Defines the fill color of trendline
     * @default ''
     */
    fill?: string;
    /**
     * Sets the legend shape of the trendline
     * @default 'SeriesType'
     */
    legendShape?: LegendShape;
    /**
     * Defines the width of the trendline
     * @default 1
     */
    width?: number;
}
/**
 * Interface for a class StockChartAnnotationSettings
 */
export interface StockChartAnnotationSettingsModel {
    /**
     * if set coordinateUnit as `Pixel` Y specifies the axis value
     * else is specifies pixel or percentage of coordinate
     * @default '0'
     */
    y?: string | number;
    /**
     * if set coordinateUnit as `Pixel` X specifies the axis value
     * else is specifies pixel or percentage of coordinate
     * @default '0'
     */
    x?: string | Date | number;
    /**
     * Content of the annotation, which accepts the id of the custom element.
     * @default null
     */
    content?: string;
    /**
     * Specifies the regions of the annotation. They are
     * * Chart - Annotation renders based on chart coordinates.
     * * Series - Annotation renders based on series coordinates.
     * @default 'Chart'
     */
    region?: Regions;
    /**
     * Specifies the alignment of the annotation. They are
     * * Near - Align the annotation element as left side.
     * * Far - Align the annotation element as right side.
     * * Center - Align the annotation element as mid point.
     * @default 'Center'
     */
    horizontalAlignment?: Alignment;
    /**
     * Specifies the coordinate units of the annotation. They are
     * * Pixel - Annotation renders based on x and y pixel value.
     * * Point - Annotation renders based on x and y axis value.
     * @default 'Pixel'
     */
    coordinateUnits?: Units;
    /**
     * Specifies the position of the annotation. They are
     * * Top - Align the annotation element as top side.
     * * Bottom - Align the annotation element as bottom side.
     * * Middle - Align the annotation element as mid point.
     * @default 'Middle'
     */
    verticalAlignment?: Position;
    /**
     * The name of vertical axis associated with the annotation.
     * It requires `axes` of chart.
     * @default null
     */
    yAxisName?: string;
    /**
     * Information about annotation for assistive technology.
     * @default null
     */
    description?: string;
    /**
     * The name of horizontal axis associated with the annotation.
     * It requires `axes` of chart.
     * @default null
     */
    xAxisName?: string;
}
/**
 * Interface for a class StockChartIndexes
 */
export interface StockChartIndexesModel {
    /**
     * Specifies index of point
     * @default 0
     * @aspType int
     */
    point?: number;
    /**
     * Specifies index of series
     * @default 0
     * @aspType int
     */
    series?: number;
}
/**
 * Interface for a class StockEventsSettings
 */
export interface StockEventsSettingsModel {
    /**
     * Specifies type of stock events
     * * Circle 
     * * Square
     * * Flag
     * * Text
     * * Sign
     * * Triangle
     * * InvertedTriangle
     * * ArrowUp
     * * ArrowDown
     * * ArrowLeft
     * * ArrowRight
     * @default 'Circle'
     */
    type?: FlagType;
    /**
     * Specifies the text for the stock chart text.
     */
    text?: string;
    /**
     * Specifies the description for the chart which renders in tooltip for stock event.
     */
    description?: string;
    /**
     * Date value of stock event in which stock event shows.
     */
    date?: Date;
    /**
     * Options to customize the border of the stock events.
     */
    border?: StockChartBorderModel;
    /**
     * The background of the stock event that accepts value in hex and rgba as a valid CSS color string.
     * @default 'transparent'
     */
    background?: string;
    /**
     * Enables the stock events to be render on series. If it disabled, stock event rendered on primaryXAxis.
     * @default true
     */
    showOnSeries?: boolean;
    /**
     * Corresponding values in which stock event placed.
     * * Close
     * * Open
     * * High
     * * Close
     * @default 'close'
     */
    placeAt?: string;
    /**
     * Options to customize the styles for stock events text.
     */
    textStyle?: StockChartFontModel;
}
//node_modules/@syncfusion/ej2-charts/src/stock-chart/model/base.d.ts
export  class StockChartFont extends base.ChildProperty<StockChartFont> {
    /**
     * Color for the text.
     * @default ''
     */
    color: string;
    /**
     * Font size for the text.
     * @default '16px'
     */
    size: string;
    /**
     * FontFamily for the text.
     */
    fontFamily: string;
    /**
     * FontStyle for the text.
     * @default 'Normal'
     */
    fontStyle: string;
    /**
     * FontWeight for the text.
     * @default 'Normal'
     */
    fontWeight: string;
    /**
     * Opacity for the text.
     * @default 1
     */
    opacity: number;
    /**
     * Specifies the chart title text overflow
     * @default 'Trim'
     */
    textOverflow: TextOverflow;
    /**
     * text alignment
     * @default 'Center'
     */
    textAlignment: Alignment;
}
/**
 * Border
 */
export  class StockChartBorder extends base.ChildProperty<StockChartBorder> {
    /**
     * The color of the border that accepts value in hex and rgba as a valid CSS color string.
     * @default ''
     */
    color: string;
    /**
     * The width of the border in pixels.
     * @default 1
     */
    width: number;
}
/**
 * Configures the chart area.
 */
export  class StockChartArea extends base.ChildProperty<StockChartArea> {
    /**
     * Options to customize the border of the chart area.
     */
    border: StockChartBorderModel;
    /**
     * The background of the chart area that accepts value in hex and rgba as a valid CSS color string..
     * @default 'transparent'
     */
    background: string;
    /**
     * The opacity for background.
     * @default 1
     */
    opacity: number;
}
/**
 * Configures the chart margins.
 */
export  class StockMargin extends base.ChildProperty<StockMargin> {
    /**
     * Left margin in pixels.
     * @default 10
     */
    left: number;
    /**
     * Right margin in pixels.
     * @default 10
     */
    right: number;
    /**
     * Top margin in pixels.
     * @default 10
     */
    top: number;
    /**
     * Bottom margin in pixels.
     * @default 10
     */
    bottom: number;
}
/**
 * StockChart strip line settings
 */
export  class StockChartStripLineSettings extends base.ChildProperty<StockChartStripLineSettings> {
    /**
     *  If set true, strip line get render from axis origin.
     *  @default false
     */
    startFromAxis: boolean;
    /**
     * If set true, strip line for axis renders.
     * @default true
     */
    visible: boolean;
    /**
     * Start value of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    start: number | Date;
    /**
     * Color of the strip line.
     * @default '#808080'
     */
    color: string;
    /**
     * End value of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    end: number | Date;
    /**
     * Size of the strip line, when it starts from the origin.
     * @default null
     * @aspDefaultValueIgnore
     */
    size: number;
    /**
     * Size type of the strip line
     * @default Auto
     */
    sizeType: SizeType;
    /**
     * Dash Array of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    dashArray: string;
    /**
     * isRepeat value of the strip line.
     * @default false
     * @aspDefaultValueIgnore
     */
    isRepeat: boolean;
    /**
     * repeatEvery value of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    repeatEvery: number | Date;
    /**
     * isSegmented value of the strip line
     * @default false
     * @aspDefaultValueIgnore
     */
    isSegmented: boolean;
    /**
     * repeatUntil value of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    repeatUntil: number | Date;
    /**
     * segmentStart value of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    segmentStart: number | Date;
    /**
     * segmentAxisName of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    segmentAxisName: string;
    /**
     * segmentEnd value of the strip line.
     * @default null
     * @aspDefaultValueIgnore
     */
    segmentEnd: number | Date;
    /**
     * Strip line Opacity
     * @default 1
     */
    opacity: number;
    /**
     * Strip line text.
     * @default ''
     */
    text: string;
    /**
     * Border of the strip line.
     */
    border: StockChartBorderModel;
    /**
     * The angle to which the strip line text gets rotated.
     * @default null
     * @aspDefaultValueIgnore
     */
    rotation: number;
    /**
     * Specifies the order of the strip line. They are,
     * * Behind: Places the strip line behind the series elements.
     * * Over: Places the strip line over the series elements.
     * @default 'Behind'
     */
    zIndex: ZIndex;
    /**
     * Defines the position of the strip line text horizontally. They are,
     * * Start: Places the strip line text at the start.
     * * Middle: Places the strip line text in the middle.
     * * End: Places the strip line text at the end.
     * @default 'Middle'
     */
    horizontalAlignment: Anchor;
    /**
     * Defines the position of the strip line text vertically. They are,
     * * Start: Places the strip line text at the start.
     * * Middle: Places the strip line text in the middle.
     * * End: Places the strip line text at the end.
     * @default 'Middle'
     */
    verticalAlignment: Anchor;
    /**
     * Options to customize the strip line text.
     */
    textStyle: StockChartFontModel;
}
export  class StockEmptyPointSettings extends base.ChildProperty<StockEmptyPointSettings> {
    /**
     * To customize the fill color of empty points.
     * @default null
     */
    fill: string;
    /**
     * To customize the mode of empty points.
     * @default Gap
     */
    mode: EmptyPointMode;
    /**
     * Options to customize the border of empty points.
     * @default "{color: 'transparent', width: 0}"
     */
    border: StockChartBorderModel;
}
export  class StockChartConnector extends base.ChildProperty<StockChartConnector> {
    /**
     * specifies the type of the connector line. They are
     * * Smooth
     * * Line
     * @default 'Line'
     */
    type: ConnectorType;
    /**
     * Length of the connector line in pixels.
     * @default null
     */
    length: string;
    /**
     * Color of the connector line.
     * @default null
     */
    color: string;
    /**
     * dashArray of the connector line.
     * @default ''
     */
    dashArray: string;
    /**
     * Width of the connector line in pixels.
     * @default 1
     */
    width: number;
}
/**
 * Configures the Annotation for chart.
 */
export  class StockSeries extends base.ChildProperty<StockSeries> {
    /**
     * The DataSource field that contains the x value.
     * It is applicable for series and technical indicators
     * @default ''
     */
    xName: string;
    /**
     * The DataSource field that contains the y value.
     * @default ''
     */
    yName: string;
    /**
     * The DataSource field that contains the open value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    open: string;
    /**
     * The DataSource field that contains the close value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    close: string;
    /**
     * The DataSource field that contains the high value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    high: string;
    /**
     * The DataSource field that contains the low value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    low: string;
    /**
     * Defines the data source field that contains the volume value in candle charts
     * It is applicable for financial series and technical indicators
     * @default ''
     */
    volume: string;
    /**
     * The DataSource field that contains the color value of point
     * It is applicable for series
     * @default ''
     */
    pointColorMapping: string;
    /**
     * Options to customizing animation for the series.
     */
    animation: AnimationModel;
    /**
     * The name of the horizontal axis associated with the series. It requires `axes` of the chart.
     * It is applicable for series and technical indicators
     * @default null
     */
    xAxisName: string;
    /**
     * The name of the vertical axis associated with the series. It requires `axes` of the chart.
     * It is applicable for series and technical indicators
     * @default null
     */
    yAxisName: string;
    /**
     * The fill color for the series that accepts value in hex and rgba as a valid CSS color string.
     * It also represents the color of the signal lines in technical indicators.
     * For technical indicators, the default value is 'blue' and for series, it has null.
     * @default null
     */
    fill: string;
    /**
     * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.
     * @default '0'
     */
    dashArray: string;
    /**
     * The stroke width for the series that is applicable only for `Line` type series.
     * It also represents the stroke width of the signal lines in technical indicators.
     * @default 1
     */
    width: number;
    /**
     * The name of the series visible in legend.
     * @default ''
     */
    name: string;
    /**
     * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of data.DataManager.
     * @default ''
     */
    dataSource: Object | data.DataManager;
    /**
     * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.data.DataManager`.
     * @default null
     */
    query: data.Query;
    /**
     * This property is used in financial charts to visualize the price movements in stock.
     * It defines the color of the candle/point, when the opening price is higher than the closing price.
     * @default '#e74c3d'
     */
    bullFillColor: string;
    /**
     * This property is used in stock charts to visualize the price movements in stock.
     * It defines the color of the candle/point, when the opening price is less than the closing price.
     * @default '#2ecd71'
     */
    bearFillColor: string;
    /**
     * This property is applicable for candle series.
     * It enables/disables to visually compare the current values with the previous values in stock.
     * @default false
     */
    enableSolidCandles: boolean;
    /**
     * Specifies the visibility of series.
     * @default true
     */
    visible: boolean;
    /**
     * Options to customizing the border of the series. This is applicable only for `Column` and `Bar` type series.
     */
    border: StockChartBorderModel;
    /**
     * The opacity of the series.
     * @default 1
     */
    opacity: number;
    /**
     * The type of the series are
     * * Line
     * * Column
     * * Area
     * * Spline
     * * Hilo
     * * HiloOpenClose
     * * Candle
     * @default 'Candle'
     */
    type: ChartSeriesType;
    /**
     * Options for displaying and customizing markers for individual points in a series.
     */
    marker: MarkerSettingsModel;
    /**
     * Defines the collection of trendlines that are used to predict the trend
     */
    trendlines: TrendlineModel[];
    /**
     * If set true, the Tooltip for series will be visible.
     * @default true
     */
    enableTooltip: boolean;
    /**
     * The provided value will be considered as a Tooltip name
     * @default ''
     */
    tooltipMappingName: string;
    /**
     * Custom style for the selected series or points.
     * @default null
     */
    selectionStyle: string;
    /**
     * It defines tension of cardinal spline types
     * @default 0.5
     */
    cardinalSplineTension: number;
    /**
     * To render the column series points with particular rounded corner.
     */
    cornerRadius: CornerRadiusModel;
    /**
     * options to customize the empty points in series
     */
    emptyPointSettings: EmptyPointSettingsModel;
    /**
     * To render the column series points with particular column width. If the series type is histogram the
     * default value is 1 otherwise 0.7.
     * @default null
     * @aspDefaultValueIgnore
     */
    columnWidth: number;
    /**
     * To render the column series points with particular column spacing. It takes value from 0 - 1.
     * @default 0
     */
    columnSpacing: number;
    /** @private */
    localData: Object;
}
export interface IStockChartEventArgs {
    /** name of the event */
    name: string;
    /** stock chart */
    stockChart: StockChart;
}
/**
 * Interface for changed events
 */
export interface IRangeChangeEventArgs {
    /** name of the event */
    name: string;
    /** Defines the start value */
    start: number | Date;
    /** Defines the end value */
    end: number | Date;
    /** Defines the data source */
    data: Object[];
    /** Defines the selected data */
    selectedData: Object[];
    /** Defined the zoomPosition of the Stock chart */
    zoomPosition: number;
    /** Defined the zoomFactor of the stock chart */
    zoomFactor: number;
}
/** Stock event render event */
export interface IStockEventRenderArgs {
    /** stockChart */
    stockChart: StockChart;
    /** Event text  */
    text: string;
    /** Event shape */
    type: FlagType;
    /** Defines the name of the event */
    name: string;
    /** Defines the event cancel status */
    cancel: boolean;
    /** Defines the stock series */
    series: StockSeriesModel;
}
export  class StockChartIndicator extends base.ChildProperty<StockChartIndicator> {
    /**
     * Defines the type of the technical indicator
     * @default 'Sma'
     */
    type: TechnicalIndicators;
    /**
     * Defines the period, the price changes over which will be considered to predict the trend
     * @default 14
     */
    period: number;
    /**
     * Defines the period, the price changes over which will define the %D value in stochastic indicators
     * @default 3
     */
    dPeriod: number;
    /**
     * Defines the look back period, the price changes over which will define the %K value in stochastic indicators
     * @default 14
     */
    kPeriod: number;
    /**
     * Defines the over-bought(threshold) values. It is applicable for RSI and stochastic indicators
     * @default 80
     */
    overBought: number;
    /**
     * Defines the over-sold(threshold) values. It is applicable for RSI and stochastic indicators
     * @default 20
     */
    overSold: number;
    /**
     * Defines the field to compare the current value with previous values
     * @default 'Close'
     */
    field: FinancialDataFields;
    /**
     * Sets the standard deviation values that helps to define the upper and lower bollinger bands
     * @default 2
     */
    standardDeviation: number;
    /**
     * Sets the slow period to define the Macd line
     * @default 12
     */
    slowPeriod: number;
    /**
     * Enables/Disables the over-bought and over-sold regions
     * @default true
     */
    showZones: boolean;
    /**
     * Sets the fast period to define the Macd line
     * @default 26
     */
    fastPeriod: number;
    /**
     * Defines the appearance of the the MacdLine of Macd indicator
     * @default { color: '#ff9933', width: 2 }
     */
    macdLine: StockChartConnectorModel;
    /**
     * Defines the type of the Macd indicator.
     * @default 'Both'
     */
    macdType: MacdType;
    /**
     * Defines the color of the negative bars in Macd indicators
     * @default '#e74c3d'
     */
    macdNegativeColor: string;
    /**
     * Defines the color of the positive bars in Macd indicators
     * @default '#2ecd71'
     */
    macdPositiveColor: string;
    /**
     * Options for customizing the BollingerBand in the indicator.
     * @default 'rgba(211,211,211,0.25)'
     */
    bandColor: string;
    /**
     * Defines the appearance of the upper line in technical indicators
     */
    upperLine: StockChartConnectorModel;
    /**
     * Defines the name of the series, the data of which has to be depicted as indicator
     * @default ''
     */
    seriesName: string;
    /**
     * Defines the appearance of period line in technical indicators
     */
    periodLine: StockChartConnectorModel;
    /**
     * Defines the appearance of lower line in technical indicators
     */
    lowerLine: ConnectorModel;
    /**
     * The DataSource field that contains the high value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    high: string;
    /**
     * The DataSource field that contains the open value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    open: string;
    /**
     * The DataSource field that contains the low value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    low: string;
    /**
     * The DataSource field that contains the x value.
     * It is applicable for series and technical indicators
     * @default ''
     */
    xName: string;
    /**
     * The DataSource field that contains the close value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    close: string;
    /**
     * The DataSource field that contains the color value of point
     * It is applicable for series
     * @default ''
     */
    pointColorMapping: string;
    /**
     * Defines the data source field that contains the volume value in candle charts
     * It is applicable for financial series and technical indicators
     * @default ''
     */
    volume: string;
    /**
     * The name of the horizontal axis associated with the series. It requires `axes` of the chart.
     * It is applicable for series and technical indicators
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let chart$: Chart = new Chart({
     * ...
     *     columns: [{ width: '50%' },
     *               { width: '50%' }],
     *     axes: [{
     *                name: 'xAxis 1',
     *                columnIndex: 1,
     *            }],
     *     series: [{
     *                dataSource: data,
     *                xName: 'x', yName: 'y',
     *                xAxisName: 'xAxis 1',
     *     }],
     * });
     * chart.appendTo('#Chart');
     * ```
     * @default null
     */
    xAxisName: string;
    /**
     * The name of the vertical axis associated with the series. It requires `axes` of the chart.
     * It is applicable for series and technical indicators
     * ```html
     * <div id='Chart'></div>
     * ```
     * @default null
     */
    yAxisName: string;
    /**
     * Options to customizing animation for the series.
     */
    animation: AnimationModel;
    /**
     * The fill color for the series that accepts value in hex and rgba as a valid CSS color string.
     * It also represents the color of the signal lines in technical indicators.
     * For technical indicators, the default value is 'blue' and for series, it has null.
     * @default null
     */
    fill: string;
    /**
     * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.
     * @default '0'
     */
    dashArray: string;
    /**
     * The stroke width for the series that is applicable only for `Line` type series.
     * It also represents the stroke width of the signal lines in technical indicators.
     * @default 1
     */
    width: number;
    /**
     * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.data.DataManager`.
     * @default null
     */
    query: data.Query;
    /**
     * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of data.DataManager.
     * ```html
     * <div id='Chart'></div>
     * ```
     * @default ''
     */
    dataSource: Object | data.DataManager;
}
export  class StockChartAxis extends base.ChildProperty<StockChartAxis> {
    /**
     * Options to customize the crosshair ToolTip.
     */
    crosshairTooltip: CrosshairTooltipModel;
    /**
     * Options to customize the axis label.
     */
    labelStyle: StockChartFontModel;
    /**
     * Specifies the title of an axis.
     * @default ''
     */
    title: string;
    /**
     * Options for customizing the axis title.
     */
    titleStyle: StockChartFontModel;
    /**
     * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc.
     * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.
     * @default ''
     */
    labelFormat: string;
    /**
     * It specifies the type of format to be used in dateTime format process.
     * @default 'DateTime'
     */
    skeletonType: SkeletonType;
    /**
     * Specifies the skeleton format in which the dateTime format will process.
     * @default ''
     */
    skeleton: string;
    /**
     * Left and right padding for the plot area in pixels.
     * @default 0
     */
    plotOffset: number;
    /**
     * The base value for logarithmic axis. It requires `valueType` to be `Logarithmic`.
     * @default 10
     */
    logBase: number;
    /**
     * Specifies the index of the row where the axis is associated, when the chart area is divided into multiple plot areas by using `rows`.
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let chart$: Chart = new Chart({
     * ...
     *     rows: [{ height: '50%' },
     *            { height: '50%' }],
     *     axes: [{
     *                name: 'yAxis 1',
     *                rowIndex: 1,
     *      }],
     * ...
     * });
     * chart.appendTo('#Chart');
     * ```
     * @default 0
     */
    rowIndex: number;
    /**
     * Specifies the number of `columns` or `rows` an axis has to span horizontally or vertically.
     * @default 1
     */
    span: number;
    /**
     * The maximum number of label count per 100 pixels with respect to the axis length.
     * @default 3
     */
    maximumLabels: number;
    /**
     * With this property, you can request axis to calculate intervals approximately equal to your specified interval.
     * @default null
     * @aspDefaultValueIgnore
     */
    desiredIntervals: number;
    /**
     * The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.
     * @default 1
     */
    zoomFactor: number;
    /**
     * Position of the zoomed axis. Value ranges from 0 to 1.
     * @default 0
     */
    zoomPosition: number;
    /**
     * If set to true, the axis will render at the opposite side of its default position.
     * @default false
     */
    opposedPosition: boolean;
    /**
     * If set to true, axis interval will be calculated automatically with respect to the zoomed range.
     * @default true
     */
    enableAutoIntervalOnZooming: boolean;
    /**
     * Specifies the type of data the axis is handling.
     * * Double:  Renders a numeric axis.
     * * DateTime: Renders a dateTime axis.
     * * Category: Renders a category axis.
     * * Logarithmic: Renders a log axis.
     * @default 'Double'
     * @blazorType Syncfusion.EJ2.Blazor.Charts.ValueType
     * @isEnumeration true
     */
    valueType: ValueType;
    /**
     * Specifies the padding for the axis range in terms of interval.They are,
     * * none: Padding cannot be applied to the axis.
     * * normal: Padding is applied to the axis based on the range calculation.
     * * additional: Interval of the axis is added as padding to the minimum and maximum values of the range.
     * * round: Axis range is rounded to the nearest possible value divided by the interval.
     * @default 'Auto'
     */
    rangePadding: ChartRangePadding;
    /**
     * Specifies the position of labels at the edge of the axis.They are,
     * * None: No action will be performed.
     * * Hide: Edge label will be hidden.
     * * Shift: Shifts the edge labels.
     * @default 'None'
     */
    edgeLabelPlacement: EdgeLabelPlacement;
    /**
     * Specifies the placement of a label for category axis. They are,
     * * betweenTicks: Renders the label between the ticks.
     * * onTicks: Renders the label on the ticks.
     * @default 'BetweenTicks'
     */
    labelPlacement: LabelPlacement;
    /**
     * Specifies the types like `Years`, `Months`, `Days`, `Hours`, `Minutes`, `Seconds` in date time axis.They are,
     * * Auto: Defines the interval of the axis based on data.
     * * Years: Defines the interval of the axis in years.
     * * Months: Defines the interval of the axis in months.
     * * Days: Defines the interval of the axis in days.
     * * Hours: Defines the interval of the axis in hours.
     * * Minutes: Defines the interval of the axis in minutes.
     * @default 'Auto'
     */
    intervalType: IntervalType;
    /**
     * Specifies the placement of a ticks to the axis line. They are,
     * * inside: Renders the ticks inside to the axis line.
     * * outside: Renders the ticks outside to the axis line.
     * @default 'Outside'
     */
    tickPosition: AxisPosition;
    /**
     * Unique identifier of an axis.
     * To associate an axis with the series, set this name to the xAxisName/yAxisName properties of the series.
     * @default ''
     */
    name: string;
    /**
     * Specifies the placement of a labels to the axis line. They are,
     * * inside: Renders the labels inside to the axis line.
     * * outside: Renders the labels outside to the axis line.
     * @default 'Outside'
     */
    labelPosition: AxisPosition;
    /**
     * If set to true, axis label will be visible.
     * @default true
     */
    visible: boolean;
    /**
     * The angle to which the axis label gets rotated.
     * @default 0
     */
    labelRotation: number;
    /**
     * Specifies the number of minor ticks per interval.
     * @default 0
     */
    minorTicksPerInterval: number;
    /**
     * Specifies the value at which the axis line has to be intersect with the vertical axis or vice versa.
     * @default null
     */
    crossesAt: Object;
    /**
     * Specifies axis name with which the axis line has to be crossed
     * @default null
     */
    crossesInAxis: string;
    /**
     * Specifies whether axis elements like axis labels, axis title, etc has to be crossed with axis line
     * @default true
     */
    placeNextToAxisLine: boolean;
    /**
     * Specifies the minimum range of an axis.
     * @default null
     */
    minimum: Object;
    /**
     * Specifies the interval for an axis.
     * @default null
     * @aspDefaultValueIgnore
     */
    interval: number;
    /**
     * Specifies the maximum range of an axis.
     * @default null
     */
    maximum: Object;
    /**
     * Specifies the maximum width of an axis label.
     * @default 34.
     */
    maximumLabelWidth: number;
    /**
     * Options for customizing major tick lines.
     */
    majorTickLines: MajorTickLinesModel;
    /**
     * Specifies the Trim property for an axis.
     * @default false
     */
    enableTrim: boolean;
    /**
     * Options for customizing minor tick lines.
     */
    minorTickLines: MinorTickLinesModel;
    /**
     * Options for customizing minor grid lines.
     */
    minorGridLines: MinorGridLinesModel;
    /**
     * Options for customizing major grid lines.
     */
    majorGridLines: MajorGridLinesModel;
    /**
     * Options for customizing axis lines.
     */
    lineStyle: AxisLineModel;
    /**
     * It specifies whether the axis to be rendered in inversed manner or not.
     * @default false
     */
    isInversed: boolean;
    /**
     * Specifies the actions like `Hide`, `Rotate45`, and `Rotate90` when the axis labels intersect with each other.They are,
     * * None: Shows all the labels.
     * * Hide: Hides the label when it intersects.
     * * Rotate45: Rotates the label to 45 degree when it intersects.
     * * Rotate90: Rotates the label to 90 degree when it intersects.
     * @default Hide
     */
    labelIntersectAction: LabelIntersectAction;
    /**
     * The polar radar radius position.
     * @default 100
     */
    coefficient: number;
    /**
     * The start angle for the series.
     * @default 0
     */
    startAngle: number;
    /**
     * TabIndex value for the axis.
     * @default 2
     */
    tabIndex: number;
    /**
     * Specifies the stripLine collection for the axis
     */
    stripLines: StockChartStripLineSettingsModel[];
    /**
     * Description for axis and its element.
     * @default null
     */
    description: string;
}
/**
 * StockChart row
 */
export  class StockChartRow extends base.ChildProperty<StockChartRow> {
    /**
     * The height of the row as a string accept input both as '100px' and '100%'.
     * If specified as '100%, row renders to the full height of its chart.
     * @default '100%'
     */
    height: string;
    /**
     * Options to customize the border of the rows.
     */
    border: StockChartBorderModel;
}
export  class StockChartTrendline extends base.ChildProperty<StockChartTrendline> {
    /**
     * Defines the period, the price changes over which will be considered to predict moving average trend line
     * @default 2
     */
    period: number;
    /**
     * Defines the name of trendline
     * @default ''
     */
    name: string;
    /**
     * Defines the type of the trendline
     * @default 'Linear'
     */
    type: TrendlineTypes;
    /**
     * Defines the polynomial order of the polynomial trendline
     * @default 2
     */
    polynomialOrder: number;
    /**
     * Defines the period, by which the trend has to forward forecast
     * @default 0
     */
    forwardForecast: number;
    /**
     * Defines the period, by which the trend has to backward forecast
     * @default 0
     */
    backwardForecast: number;
    /**
     * Options to customize the animation for trendlines
     */
    animation: AnimationModel;
    /**
     * Enables/disables tooltip for trendlines
     * @default true
     */
    enableTooltip: boolean;
    /**
     * Options to customize the marker for trendlines
     */
    marker: MarkerSettingsModel;
    /**
     * Defines the intercept of the trendline
     * @default null
     * @aspDefaultValueIgnore
     */
    intercept: number;
    /**
     * Defines the fill color of trendline
     * @default ''
     */
    fill: string;
    /**
     * Sets the legend shape of the trendline
     * @default 'SeriesType'
     */
    legendShape: LegendShape;
    /**
     * Defines the width of the trendline
     * @default 1
     */
    width: number;
}
export  class StockChartAnnotationSettings extends base.ChildProperty<StockChartAnnotationSettings> {
    /**
     * if set coordinateUnit as `Pixel` Y specifies the axis value
     * else is specifies pixel or percentage of coordinate
     * @default '0'
     */
    y: string | number;
    /**
     * if set coordinateUnit as `Pixel` X specifies the axis value
     * else is specifies pixel or percentage of coordinate
     * @default '0'
     */
    x: string | Date | number;
    /**
     * Content of the annotation, which accepts the id of the custom element.
     * @default null
     */
    content: string;
    /**
     * Specifies the regions of the annotation. They are
     * * Chart - Annotation renders based on chart coordinates.
     * * Series - Annotation renders based on series coordinates.
     * @default 'Chart'
     */
    region: Regions;
    /**
     * Specifies the alignment of the annotation. They are
     * * Near - Align the annotation element as left side.
     * * Far - Align the annotation element as right side.
     * * Center - Align the annotation element as mid point.
     * @default 'Center'
     */
    horizontalAlignment: Alignment;
    /**
     * Specifies the coordinate units of the annotation. They are
     * * Pixel - Annotation renders based on x and y pixel value.
     * * Point - Annotation renders based on x and y axis value.
     * @default 'Pixel'
     */
    coordinateUnits: Units;
    /**
     * Specifies the position of the annotation. They are
     * * Top - Align the annotation element as top side.
     * * Bottom - Align the annotation element as bottom side.
     * * Middle - Align the annotation element as mid point.
     * @default 'Middle'
     */
    verticalAlignment: Position;
    /**
     * The name of vertical axis associated with the annotation.
     * It requires `axes` of chart.
     * @default null
     */
    yAxisName: string;
    /**
     * Information about annotation for assistive technology.
     * @default null
     */
    description: string;
    /**
     * The name of horizontal axis associated with the annotation.
     * It requires `axes` of chart.
     * @default null
     */
    xAxisName: string;
}
export  class StockChartIndexes extends base.ChildProperty<StockChartIndexes> {
    /**
     * Specifies index of point
     * @default 0
     * @aspType int
     */
    point: number;
    /**
     * Specifies index of series
     * @default 0
     * @aspType int
     */
    series: number;
}
/**
 * Configures the Stock events for stock chart.
 */
export  class StockEventsSettings extends base.ChildProperty<StockEventsSettings> {
    /**
     * Specifies type of stock events
     * * Circle
     * * Square
     * * Flag
     * * Text
     * * Sign
     * * Triangle
     * * InvertedTriangle
     * * ArrowUp
     * * ArrowDown
     * * ArrowLeft
     * * ArrowRight
     * @default 'Circle'
     */
    type: FlagType;
    /**
     * Specifies the text for the stock chart text.
     */
    text: string;
    /**
     * Specifies the description for the chart which renders in tooltip for stock event.
     */
    description: string;
    /**
     * Date value of stock event in which stock event shows.
     */
    date: Date;
    /**
     * Options to customize the border of the stock events.
     */
    border: StockChartBorderModel;
    /**
     * The background of the stock event that accepts value in hex and rgba as a valid CSS color string.
     * @default 'transparent'
     */
    background: string;
    /**
     * Enables the stock events to be render on series. If it disabled, stock event rendered on primaryXAxis.
     * @default true
     */
    showOnSeries: boolean;
    /**
     * Corresponding values in which stock event placed.
     * * Close
     * * Open
     * * High
     * * Close
     * @default 'close'
     */
    placeAt: string;
    /**
     * Options to customize the styles for stock events text.
     */
    textStyle: StockChartFontModel;
}
//node_modules/@syncfusion/ej2-charts/src/stock-chart/renderer/cartesian-chart.d.ts
/** @private */
export  class CartesianChart {
    private stockChart;
    cartesianChartSize: svgBase.Size;
    constructor(chart: StockChart);
    initializeChart(chartArgsData?: object[]): void;
    private findMargin;
    private findSeriesCollection;
    calculateChartSize(): svgBase.Size;
    private calculateUpdatedRange;
    /**
     * Cartesian chart refreshes based on start and end value
     * @param stockChart
     * @param start
     * @param end
     */
    cartesianChartRefresh(stockChart: StockChart, start: number, end: number, data?: Object[]): void;
    private copyObject;
}
//node_modules/@syncfusion/ej2-charts/src/stock-chart/renderer/range-selector.d.ts
/** @private */
export  class RangeSelector {
    private stockChart;
    constructor(stockChart: StockChart);
    initializeRangeNavigator(): void;
    private findMargin;
    private findSeriesCollection;
    private calculateChartSize;
    /**
     * Performs slider change
     * @param start
     * @param end
     */
    sliderChange(start: number, end: number): void;
}
//node_modules/@syncfusion/ej2-charts/src/stock-chart/renderer/stock-events.d.ts
/**
 * Used for stock event calculations.
 */
/**
 * @private
 */
export  class StockEvents extends BaseTooltip {
    constructor(stockChart: StockChart);
    private stockChart;
    private chartId;
    /** @private */
    stockEventTooltip: svgBase.Tooltip;
    /** @private */
    symbolLocations: ChartLocation[][];
    private pointIndex;
    private seriesIndex;
    /**
     * @private
     * To render stock events in chart
     */
    renderStockEvents(): Element;
    private findClosePoint;
    private createStockElements;
    renderStockEventTooltip(targetId: string): void;
    /**
     * Remove the stock event tooltip
     * @param duration
     */
    removeStockEventTooltip(duration: number): void;
    private findArrowpaths;
    private applyHighLights;
    private removeHighLights;
    private setOpacity;
    /**
     * @param value
     * To convert the c# or javascript date formats into js format
     * refer chart control's dateTime processing.
     */
    private dateParse;
}
//node_modules/@syncfusion/ej2-charts/src/stock-chart/renderer/toolbar-selector.d.ts
/**
 * Period selector for range navigator
 */
/** @private */
export  class ToolBarSelector {
    private stockChart;
    private indicatorDropDown;
    private trendlineDropDown;
    private selectedSeries;
    private selectedIndicator;
    private selectedTrendLine;
    constructor(chart: StockChart);
    initializePeriodSelector(): void;
    /**
     * This method returns itemModel for dropdown button
     * @param type
     */
    private getDropDownItems;
    /**
     * This method changes the type of series while selectind series in dropdown button
     */
    private addedSeries;
    initializeSeriesSelector(): void;
    private trendline;
    private indicators;
    private secondayIndicators;
    resetButton(): void;
    initializeTrendlineSelector(): void;
    initializeIndicatorSelector(): void;
    private getIndicator;
    createIndicatorAxes(type: TechnicalIndicators, args: splitbuttons.MenuEventArgs): void;
    tickMark(args: splitbuttons.MenuEventArgs): string;
    printButton(): void;
    exportButton(): void;
    calculateAutoPeriods(): PeriodsModel[];
    private findRange;
    /**
     * Text elements added to while export the chart
     * It details about the seriesTypes, indicatorTypes and Trendlines selected in chart.
     */
    private addExportSettings;
    /** @private */
    private textElementSpan;
}
//node_modules/@syncfusion/ej2-charts/src/stock-chart/stock-chart-model.d.ts
/**
 * Interface for a class StockChart
 */
export interface StockChartModel extends base.ComponentModel{
    /**
     * The width of the stockChart as a string accepts input as both like '100px' or '100%'.
     * If specified as '100%, stockChart renders to the full width of its parent element.
     * @default null
     */
    width?: string;
    /**
     * The height of the stockChart as a string accepts input both as '100px' or '100%'.
     * If specified as '100%, stockChart renders to the full height of its parent element.
     * @default null
     */
    height?: string;
    /**
     * Specifies the DataSource for the stockChart. It can be an array of JSON objects or an instance of data.DataManager.
     * ```html
     * <div id='financial'></div>
     * ```
     * ```typescript
     * let dataManager$: data.DataManager = new data.DataManager({
     *         url: 'http://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/'
     * });
     * let query$: Query = new Query().take(50).where('Estimate', 'greaterThan', 0, false);
     * let financial: stockChart = new stockChart({
     * ...
     *  dataSource:dataManager,
     *   series: [{
     *        xName: 'Id',
     *        yName: 'Estimate',
     *        query: query
     *    }],
     * ...
     * });
     * financial.appendTo('#financial');
     * ```
     * @default ''
     */
    dataSource?: Object | data.DataManager;
    /**
     *  Options to customize left, right, top and bottom margins of the stockChart.
     */
    margin?: StockMarginModel;
    /**
     * Options for customizing the color and width of the stockChart border.
     */
    border?: StockChartBorderModel;
    /**
     * The background color of the stockChart that accepts value in hex and rgba as a valid CSS color string.
     * @default null
     */
    background?: string;
    /**
     * Specifies the theme for the stockChart.
     * @default 'Material'
     */
    theme?: ChartTheme;
    /**
     * Options to configure the horizontal axis.
     */
    primaryXAxis?: StockChartAxisModel;
    /**
     * Options for configuring the border and background of the stockChart area.
     */
    chartArea?: StockChartAreaModel;
    /**
     * Options to configure the vertical axis.
     */
    primaryYAxis?: StockChartAxisModel;
    /**
     * Options to split stockChart into multiple plotting areas horizontally.
     * Each object in the collection represents a plotting area in the stockChart.
     */
    rows?: StockChartRowModel[];
    /**
     * Secondary axis collection for the stockChart.
     */
    axes?: StockChartAxisModel[];
    /**
     * The configuration for series in the stockChart.
     */
    series?: StockSeriesModel[];
    /**
     * The configuration for stock events in the stockChart.
     */
    stockEvents?: StockEventsSettingsModel[];
    /**
     * It specifies whether the stockChart should be render in transposed manner or not.
     * @default false
     */
    isTransposed?: boolean;
    /**
     * Title of the chart
     * @default ''
     */
    title?: string;
    /**
     * Options for customizing the title of the Chart.
     */
    // tslint:disable-next-line:max-line-length
    titleStyle?: StockChartFontModel;
    /**
     * Defines the collection of technical indicators, that are used in financial markets
     */
    indicators?: StockChartIndicatorModel[];
    /**
     * Options for customizing the tooltip of the chart.
     */
    tooltip?: TooltipSettingsModel;
    /**
     * Options for customizing the crosshair of the chart.
     */
    crosshair?: CrosshairSettingsModel;
    /**
     * Options to enable the zooming feature in the chart.
     */
    zoomSettings?: ZoomSettingsModel;
    /**
     * It specifies whether the periodSelector to be rendered in financial chart
     * @default true
     */
    enablePeriodSelector?: boolean;
    /**
     * Custom Range
     * @default true
     */
    enableCustomRange?: boolean;
    /**
     * If set true, enables the animation in chart.
     * @default false
     */
    isSelect?: boolean;
    /**
     * It specifies whether the range navigator to be rendered in financial chart
     * @default true
     */
    enableSelector?: boolean;
    /**
     * To configure period selector options.
     */
    periods?: PeriodsModel[];
    /**
     * The configuration for annotation in chart.
     */
    annotations?: StockChartAnnotationSettingsModel[];
    /**
     * Triggers before render the selector
     * @event
     * @deprecated
     */
    selectorRender?: base.EmitType<IRangeSelectorRenderEventArgs>;
    /**
     * Triggers on hovering the stock chart.
     * @event
     * @blazorProperty 'OnStockChartMouseMove'
     */
    stockChartMouseMove?: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers when cursor leaves the chart.
     * @event
     * @blazorProperty 'OnStockChartMouseLeave'
     */
    stockChartMouseLeave?: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on mouse down.
     * @event
     * @blazorProperty 'OnStockChartMouseDown'
     */
    stockChartMouseDown?: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on mouse up.
     * @event
     * @blazorProperty 'OnStockChartMouseUp'
     */
    stockChartMouseUp?: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on clicking the stock chart.
     * @event
     * @blazorProperty 'OnStockChartMouseClick'
     */
    stockChartMouseClick?: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on point click.
     * @event
     * @blazorProperty 'OnPointClick'
     */
    pointClick?: base.EmitType<IPointEventArgs>;
    /**
     * Triggers on point move.
     * @event
     * @blazorProperty 'PointMoved'
     */
    pointMove?: base.EmitType<IPointEventArgs>;
    /**
     * Specifies whether series or data point has to be selected. They are,
     * * none: Disables the selection.
     * * series: selects a series.
     * * point: selects a point.
     * * cluster: selects a cluster of point
     * * dragXY: selects points by dragging with respect to both horizontal and vertical axes
     * * dragX: selects points by dragging with respect to horizontal axis.
     * * dragY: selects points by dragging with respect to vertical axis.
     * @default None
     */
    selectionMode?: SelectionMode;
    /**
     * If set true, enables the multi selection in chart. It requires `selectionMode` to be `Point` | `Series` | or `Cluster`.
     * @default false
     */
    isMultiSelect?: boolean;
    /**
     * Triggers before the range navigator rendering
     * @event
     * @deprecated
     */
    load?: base.EmitType<IStockChartEventArgs>;
    /**
     * Triggers after the range navigator rendering
     * @event
     * @blazorProperty 'Loaded'
     */
    loaded?: base.EmitType<IStockChartEventArgs>;
    /**
     * Triggers if the range is changed
     * @event
     * @blazorProperty 'RangeChange'
     */
    rangeChange?: base.EmitType<IRangeChangeEventArgs>;
    /**
     * Triggers before each axis label is rendered.
     * @event
     * @deprecated
     */
    axisLabelRender?: base.EmitType<IAxisLabelRenderEventArgs>;
    /**
     * Triggers before the tooltip for series is rendered.
     * @event
     * @deprecated
     */
    tooltipRender?: base.EmitType<ITooltipRenderEventArgs>;
    /**
     * Triggers before the series is rendered.
     * @event
     * @deprecated
     */
    seriesRender?: base.EmitType<ISeriesRenderEventArgs>;
    /**
     * Triggers before the series is rendered.
     * @event
     * @deprecated
     */
    stockEventRender?: base.EmitType<IStockEventRenderArgs>;
    /**
     * Specifies the point indexes to be selected while loading a chart.
     * It requires `selectionMode` to be `Point` | `Series` | or `Cluster`.
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let chart$: Chart = new Chart({
     * ...
     *   selectionMode: 'Point',
     *   selectedDataIndexes: [ { series: 0, point: 1},
     *                          { series: 2, point: 3} ],
     * ...
     * });
     * chart.appendTo('#Chart');
     * ```
     * @default []
     */
    selectedDataIndexes?: StockChartIndexesModel[];
    /**
     * It specifies the types of series in financial chart.
     */
    seriesType?: ChartSeriesType[];
    /**
     * It specifies the types of indicators in financial chart.
     */
    indicatorType?: TechnicalIndicators[];
    /**
     * It specifies the types of Export types in financial chart.
     */
    exportType?: ExportType[];
    /**
     * It specifies the types of trendline types in financial chart.
     */
    trendlineType?: TrendlineTypes[];
}
//node_modules/@syncfusion/ej2-charts/src/stock-chart/stock-chart.d.ts
/**
 * Stock Chart
 */
export  class StockChart extends base.Component<HTMLElement> implements base.INotifyPropertyChanged {
    /**
     * The width of the stockChart as a string accepts input as both like '100px' or '100%'.
     * If specified as '100%, stockChart renders to the full width of its parent element.
     * @default null
     */
    width: string;
    /**
     * The height of the stockChart as a string accepts input both as '100px' or '100%'.
     * If specified as '100%, stockChart renders to the full height of its parent element.
     * @default null
     */
    height: string;
    /**
     * Specifies the DataSource for the stockChart. It can be an array of JSON objects or an instance of data.DataManager.
     * ```html
     * <div id='financial'></div>
     * ```
     * ```typescript
     * let dataManager$: data.DataManager = new data.DataManager({
     *         url: 'http://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/'
     * });
     * let query$: Query = new Query().take(50).where('Estimate', 'greaterThan', 0, false);
     * let financial$: stockChart = new stockChart({
     * ...
     *  dataSource:dataManager,
     *   series: [{
     *        xName: 'Id',
     *        yName: 'Estimate',
     *        query: query
     *    }],
     * ...
     * });
     * financial.appendTo('#financial');
     * ```
     * @default ''
     */
    dataSource: Object | data.DataManager;
    /**
     *  Options to customize left, right, top and bottom margins of the stockChart.
     */
    margin: StockMarginModel;
    /**
     * Options for customizing the color and width of the stockChart border.
     */
    border: StockChartBorderModel;
    /**
     * The background color of the stockChart that accepts value in hex and rgba as a valid CSS color string.
     * @default null
     */
    background: string;
    /**
     * Specifies the theme for the stockChart.
     * @default 'Material'
     */
    theme: ChartTheme;
    /**
     * Options to configure the horizontal axis.
     */
    primaryXAxis: StockChartAxisModel;
    /**
     * Options for configuring the border and background of the stockChart area.
     */
    chartArea: StockChartAreaModel;
    /**
     * Options to configure the vertical axis.
     */
    primaryYAxis: StockChartAxisModel;
    /**
     * Options to split stockChart into multiple plotting areas horizontally.
     * Each object in the collection represents a plotting area in the stockChart.
     */
    rows: StockChartRowModel[];
    /**
     * Secondary axis collection for the stockChart.
     */
    axes: StockChartAxisModel[];
    /**
     * The configuration for series in the stockChart.
     */
    series: StockSeriesModel[];
    /**
     * The configuration for stock events in the stockChart.
     */
    stockEvents: StockEventsSettingsModel[];
    /**
     * It specifies whether the stockChart should be render in transposed manner or not.
     * @default false
     */
    isTransposed: boolean;
    /**
     * Title of the chart
     * @default ''
     */
    title: string;
    /**
     * Options for customizing the title of the Chart.
     */
    titleStyle: StockChartFontModel;
    /**
     * Defines the collection of technical indicators, that are used in financial markets
     */
    indicators: StockChartIndicatorModel[];
    /**
     * Options for customizing the tooltip of the chart.
     */
    tooltip: TooltipSettingsModel;
    /**
     * Options for customizing the crosshair of the chart.
     */
    crosshair: CrosshairSettingsModel;
    /**
     * Options to enable the zooming feature in the chart.
     */
    zoomSettings: ZoomSettingsModel;
    /**
     * It specifies whether the periodSelector to be rendered in financial chart
     * @default true
     */
    enablePeriodSelector: boolean;
    /**
     * Custom Range
     * @default true
     */
    enableCustomRange: boolean;
    /**
     * If set true, enables the animation in chart.
     * @default false
     */
    isSelect: boolean;
    /**
     * It specifies whether the range navigator to be rendered in financial chart
     * @default true
     */
    enableSelector: boolean;
    /**
     * To configure period selector options.
     */
    periods: PeriodsModel[];
    /**
     * The configuration for annotation in chart.
     */
    annotations: StockChartAnnotationSettingsModel[];
    /**
     * Triggers before render the selector
     * @event
     * @deprecated
     */
    selectorRender: base.EmitType<IRangeSelectorRenderEventArgs>;
    /**
     * Triggers on hovering the stock chart.
     * @event
     * @blazorProperty 'OnStockChartMouseMove'
     */
    stockChartMouseMove: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers when cursor leaves the chart.
     * @event
     * @blazorProperty 'OnStockChartMouseLeave'
     */
    stockChartMouseLeave: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on mouse down.
     * @event
     * @blazorProperty 'OnStockChartMouseDown'
     */
    stockChartMouseDown: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on mouse up.
     * @event
     * @blazorProperty 'OnStockChartMouseUp'
     */
    stockChartMouseUp: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on clicking the stock chart.
     * @event
     * @blazorProperty 'OnStockChartMouseClick'
     */
    stockChartMouseClick: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on point click.
     * @event
     * @blazorProperty 'OnPointClick'
     */
    pointClick: base.EmitType<IPointEventArgs>;
    /**
     * Triggers on point move.
     * @event
     * @blazorProperty 'PointMoved'
     */
    pointMove: base.EmitType<IPointEventArgs>;
    /**
     * Specifies whether series or data point has to be selected. They are,
     * * none: Disables the selection.
     * * series: selects a series.
     * * point: selects a point.
     * * cluster: selects a cluster of point
     * * dragXY: selects points by dragging with respect to both horizontal and vertical axes
     * * dragX: selects points by dragging with respect to horizontal axis.
     * * dragY: selects points by dragging with respect to vertical axis.
     * @default None
     */
    selectionMode: SelectionMode;
    /**
     * If set true, enables the multi selection in chart. It requires `selectionMode` to be `Point` | `Series` | or `Cluster`.
     * @default false
     */
    isMultiSelect: boolean;
    /**
     * Triggers before the range navigator rendering
     * @event
     * @deprecated
     */
    load: base.EmitType<IStockChartEventArgs>;
    /**
     * Triggers after the range navigator rendering
     * @event
     * @blazorProperty 'Loaded'
     */
    loaded: base.EmitType<IStockChartEventArgs>;
    /**
     * Triggers if the range is changed
     * @event
     * @blazorProperty 'RangeChange'
     */
    rangeChange: base.EmitType<IRangeChangeEventArgs>;
    /**
     * Triggers before each axis label is rendered.
     * @event
     * @deprecated
     */
    axisLabelRender: base.EmitType<IAxisLabelRenderEventArgs>;
    /**
     * Triggers before the tooltip for series is rendered.
     * @event
     * @deprecated
     */
    tooltipRender: base.EmitType<ITooltipRenderEventArgs>;
    /**
     * Triggers before the series is rendered.
     * @event
     * @deprecated
     */
    seriesRender: base.EmitType<ISeriesRenderEventArgs>;
    /**
     * Triggers before the series is rendered.
     * @event
     * @deprecated
     */
    stockEventRender: base.EmitType<IStockEventRenderArgs>;
    /**
     * Specifies the point indexes to be selected while loading a chart.
     * It requires `selectionMode` to be `Point` | `Series` | or `Cluster`.
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let chart$: Chart = new Chart({
     * ...
     *   selectionMode: 'Point',
     *   selectedDataIndexes: [ { series: 0, point: 1},
     *                          { series: 2, point: 3} ],
     * ...
     * });
     * chart.appendTo('#Chart');
     * ```
     * @default []
     */
    selectedDataIndexes: StockChartIndexesModel[];
    /**
     * It specifies the types of series in financial chart.
     */
    seriesType: ChartSeriesType[];
    /**
     * It specifies the types of indicators in financial chart.
     */
    indicatorType: TechnicalIndicators[];
    /**
     * It specifies the types of Export types in financial chart.
     */
    exportType: ExportType[];
    /**
     * It specifies the types of trendline types in financial chart.
     */
    trendlineType: TrendlineTypes[];
    /** @private */
    startValue: number;
    /** @private */
    isSingleAxis: boolean;
    /** @private */
    endValue: number;
    /** @private */
    seriesXMax: number;
    /** @private */
    seriesXMin: number;
    /** @private  */
    currentEnd: number;
    /** Overall SVG */
    mainObject: Element;
    /** @private */
    selectorObject: Element;
    /** @private */
    chartObject: Element;
    /** @private */
    svgObject: Element;
    /** @private */
    isTouch: boolean;
    /** @private */
    renderer: svgBase.SvgRenderer;
    /** @private */
    animateSeries: boolean;
    /** @private */
    availableSize: svgBase.Size;
    /** @private */
    titleSize: svgBase.Size;
    /** @private */
    chartSize: svgBase.Size;
    /** @private */
    intl: base.Internationalization;
    /** @private */
    isDoubleTap: boolean;
    /** @private */
    private threshold;
    /** @private */
    isChartDrag: boolean;
    resizeTo: number;
    /** @private */
    disableTrackTooltip: boolean;
    /** @private */
    startMove: boolean;
    /** @private */
    yAxisElements: Element;
    /** @private */
    themeStyle: IThemeStyle;
    /** @private */
    scrollElement: Element;
    private chartid;
    tempSeriesType: ChartSeriesType[];
    /** @private */
    chart: Chart;
    /** @private */
    rangeNavigator: RangeNavigator;
    /** @private */
    periodSelector: PeriodSelector;
    /** @private */
    cartesianChart: CartesianChart;
    /** @private */
    rangeSelector: RangeSelector;
    /** @private */
    toolbarSelector: ToolBarSelector;
    /** @private */
    stockEvent: StockEvents;
    /** private */
    zoomChange: boolean;
    /** @private */
    mouseDownX: number;
    /** @private */
    mouseDownY: number;
    /** @private */
    previousMouseMoveX: number;
    /** @private */
    previousMouseMoveY: number;
    /** @private */
    mouseDownXPoint: number;
    /** @private */
    mouseUpXPoint: number;
    /** @private */
    allowPan: boolean;
    /** @private  */
    onPanning: boolean;
    /** @private  */
    referenceXAxis: Axis;
    /** @private */
    mouseX: number;
    /** @private */
    mouseY: number;
    /** @private */
    indicatorElements: Element;
    /** @private */
    trendlinetriggered: boolean;
    /** @private */
    periodSelectorHeight: number;
    /** @private */
    toolbarHeight: number;
    /** @private */
    stockChartTheme: IThemeStyle;
    /** @private */
    initialRender: boolean;
    /** @private */
    rangeFound: boolean;
    /** @private */
    tempPeriods: PeriodsModel[];
    /**
     * Constructor for creating the widget
     * @hidden
     */
    constructor(options?: StockChartModel, element?: string | HTMLElement);
    /**
     * Called internally if any of the property value changed.
     * @private
     */
    onPropertyChanged(newProp: StockChartModel, oldProp: StockChartModel): void;
    /**
     * To change the range for chart
     */
    rangeChanged(updatedStart: number, updatedEnd: number): void;
    /**
     * Pre render for financial Chart
     */
    protected preRender(): void;
    /**
     * Method to bind events for chart
     */
    private unWireEvents;
    private wireEvents;
    private initPrivateVariable;
    /**
     * Method to set culture for chart
     */
    private setCulture;
    private storeDataSource;
    /**
     * To Initialize the control rendering.
     */
    protected render(): void;
    /**
     * data.DataManager Success
     */
    stockChartDataManagerSuccess(): void;
    /**
     * To set styles to resolve mvc width issue.
     * @param element
     */
    private setStyle;
    private drawSVG;
    private createSecondaryElements;
    findCurrentData(totalData: Object, xName: string): Object;
    /**
     * Render period selector
     */
    renderPeriodSelector(): void;
    private chartRender;
    /**
     * To render range Selector
     */
    private renderRangeSelector;
    /**
     * Get component name
     */
    getModuleName(): string;
    /**
     * Get the properties to be maintained in the persisted state.
     * @private
     */
    getPersistData(): string;
    /**
     * To Remove the SVG.
     * @return {boolean}
     * @private
     */
    removeSvg(): void;
    /**
     * Module Injection for components
     */
    chartModuleInjection(): void;
    /**
     * find range for financal chart
     */
    private findRange;
    /**
     * Handles the chart resize.
     * @return {boolean}
     * @private
     */
    stockChartResize(e: Event): boolean;
    /**
     * Handles the mouse down on chart.
     * @return {boolean}
     * @private
     */
    stockChartOnMouseDown(e: PointerEvent): boolean;
    /**
     * Handles the mouse up.
     * @return {boolean}
     * @private
     */
    stockChartMouseEnd(e: PointerEvent): boolean;
    /**
     * Handles the mouse up.
     * @return {boolean}
     * @private
     */
    stockChartOnMouseUp(e: PointerEvent | TouchEvent): boolean;
    /**
     * To find mouse x, y for aligned chart element svg position
     */
    private setMouseXY;
    /**
     * Handles the mouse move.
     * @return {boolean}
     * @private
     */
    stockChartOnMouseMove(e: PointerEvent): boolean;
    /**
     * Handles the mouse move on chart.
     * @return {boolean}
     * @private
     */
    chartOnMouseMove(e: PointerEvent | TouchEvent): boolean;
    /**
     * Handles the mouse click on chart.
     * @return {boolean}
     * @private
     */
    stockChartOnMouseClick(e: PointerEvent | TouchEvent): boolean;
    private stockChartRightClick;
    /**
     * Handles the mouse leave.
     * @return {boolean}
     * @private
     */
    stockChartOnMouseLeave(e: PointerEvent): boolean;
    /**
     * Handles the mouse leave on chart.
     * @return {boolean}
     * @private
     */
    stockChartOnMouseLeaveEvent(e: PointerEvent | TouchEvent): boolean;
    /**
     * Destroy method
     */
    destroy(): void;
    private renderBorder;
    /**
     * Render title for chart
     */
    private renderTitle;
    private findTitleColor;
    /**
     * @private
     */
    calculateStockEvents(): void;
}
 }
export namespace circulargauge { 

//node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/annotations/annotations.d.ts
/**
 * Annotation Module handles the Annotation of the axis.
 */
export  class Annotations {
    private gauge;
    private elementId;
    /**
     * Constructor for Annotation module.
     * @private.
     */
    constructor(gauge: CircularGauge);
    /**
     * Method to render the annotation for circular gauge.
     */
    renderAnnotation(axis: Axis, index: number): void;
    /**
     * Method to create annotation template for circular gauge.
     */
    createTemplate(element: HTMLElement, annotationIndex: number, axisIndex: number): void;
    /**
     * Method to update the annotation location for circular gauge.
     */
    private updateLocation;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the annotation.
     * @return {void}
     * @private
     */
    destroy(gauge: CircularGauge): void;
}
//node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/axes/axis-model.d.ts
/**
 * Interface for a class Line
 */
export interface LineModel {
    /**
     * The width of the line in pixels.
     * @default 2
     */
    width?: number;
    /**
     * The dash array of the axis line.
     * @default ''
     */
    dashArray?: string;
    /**
     * The color of the axis line, which accepts value in hex, rgba as a valid CSS color string.
     */
    color?: string;
}
/**
 * Interface for a class Label
 */
export interface LabelModel {
    /**
     * The font of the axis labels
     */
    font?: FontModel;
    /**
     * To format the axis label, which accepts any global string format like 'C', 'n1', 'P' etc.
     * Also accepts placeholder like '{value}°C' in which value represent the axis label e.g. 20°C.
     * @default ''
     */
    format?: string;
    /**
     * Specifies the position of the labels. They are,
     * * inside -  Places the labels inside the axis.
     * * outside - Places the labels outside of the axis.
     * @default Inside
     */
    position?: Position;
    /**
     * Specifies the label of an axis, which must get hide when an axis makes a complete circle. They are
     * * first -  Hides the 1st label on intersect.
     * * last - Hides the last label on intersect.
     * * none - Places both the labels.
     * @default None
     */
    hiddenLabel?: HiddenLabel;
    /**
     * if set true, the labels will get rotated along the axis.
     * @default false
     */
    autoAngle?: boolean;
    /**
     * If set true, labels takes the range color.
     * @default false
     */
    useRangeColor?: boolean;
    /**
     * Distance of the labels from axis in pixel.
     * @default 0
     */
    offset?: number;
}
/**
 * Interface for a class Range
 */
export interface RangeModel {
    /**
     * Specifies the minimum value of the range.
     * @aspDefaultValueIgnore
     * @default 0
     */
    start?: number;
    /**
     * Specifies the maximum value of the range.
     * @aspDefaultValueIgnore
     * @default 0
     */
    end?: number;
    /**
     * The radius of the range in pixels or in percentage.
     * @default null
     */
    radius?: string;
    /**
     * Specifies the start width of the ranges
     * @default '10'
     */
    startWidth?: number | string;
    /**
     * Specifies the end width of the ranges
     * @default '10'
     */
    endWidth?: number | string;
    /**
     * Specifies the color of the ranges
     * @aspDefaultValueIgnore
     * @default null
     */
    color?: string;
    /**
     * Specifies the rounded corner radius for ranges.
     * @default 0
     */
    roundedCornerRadius?: number;
    /**
     * Specifies the opacity for ranges.
     * @default 1
     */
    opacity?: number;
    /**
     * Specifies the text for legend.
     * @default ''
     */
    legendText?: string;
}
/**
 * Interface for a class Tick
 */
export interface TickModel {
    /**
     * The width of the ticks in pixels.
     * @aspDefaultValueIgnore
     * @default 2
     */
    width?: number;
    /**
     * The height of the line in pixels.
     * @aspDefaultValueIgnore
     * @default null
     */
    height?: number;
    /**
     * Specifies the interval of the tick line.
     * @aspDefaultValueIgnore
     * @default null
     */
    interval?: number;
    /**
     * Distance of the ticks from axis in pixel.
     * @default 0
     */
    offset?: number;
    /**
     * The color of the tick line, which accepts value in hex, rgba as a valid CSS color string.
     * @aspDefaultValueIgnore
     * @default null
     */
    color?: string;
    /**
     * Specifies the position of the ticks. They are
     * * inside -  Places the ticks inside the axis.
     * * outside - Places the ticks outside of the axis.
     * @default Inside
     */
    position?: Position;
    /**
     * If set true, major ticks takes the range color.
     * @default false
     */
    useRangeColor?: boolean;
}
/**
 * Interface for a class Cap
 */
export interface CapModel {
    /**
     * The color of the cap.
     * @default null
     */
    color?: string;
    /**
     * Options for customizing the border of the cap.
     */
    border?: BorderModel;
    /**
     * Radius of the cap in pixels.
     * @default 8
     */
    radius?: number;
}
/**
 * Interface for a class NeedleTail
 */
export interface NeedleTailModel {
    /**
     * The color of the back needle.
     * @aspDefaultValueIgnore
     * @default null
     */
    color?: string;
    /**
     * Options for customizing the border of the back needle.
     */
    border?: BorderModel;
    /**
     * The radius of the back needle in pixels or in percentage.
     * @default '0%'
     */
    length?: string;
}
/**
 * Interface for a class Animation
 */
export interface AnimationModel {
    /**
     * If set true, pointers get animate on initial loading.
     * @default true
     */
    enable?: boolean;
    /**
     * Duration of animation in milliseconds.
     * @default 1000
     */
    duration?: number;
}
/**
 * Interface for a class Annotation
 */
export interface AnnotationModel {
    /**
     * Content of the annotation, which accepts the id of the custom element.
     * @default null
     */
    content?: string;
    /**
     * Angle for annotation with respect to axis.
     * @default 90
     */
    angle?: number;
    /**
     * Radius for annotation with respect to axis.
     * @default '50%'
     */
    radius?: string;
    /**
     * Order of an annotation in an axis.
     * @default '-1'
     */
    zIndex?: string;
    /**
     * Rotates the annotation along the axis.
     * @default false
     */
    autoAngle?: boolean;
    /**
     * Options for customizing the annotation text.
     */
    textStyle?: FontModel;
    /**
     * Information about annotation for assistive technology.
     * @default null
     */
    description?: string;
}
/**
 * Interface for a class Pointer
 */
export interface PointerModel {
    /**
     * Specifies the value of the pointer.
     * @aspDefaultValueIgnore
     * @default null
     */
    value?: number;
    /**
     * Specifies the type of pointer for an axis.
     * * needle -  Renders a needle.
     * * marker - Renders a marker.
     * * rangeBar - Renders a rangeBar.
     * @default Needle
     */
    type?: PointerType;
    /**
     * Specifies the rounded corner radius for pointer.
     * @default 0
     */
    roundedCornerRadius?: number;
    /**
     * The URL for the Image that is to be displayed as pointer.
     * It requires marker shape value to be Image.
     * @default null
     */
    imageUrl?: string;
    /**
     * Length of the pointer in pixels or in percentage.
     * @default null
     */
    radius?: string;
    /**
     * Width of the pointer in pixels.
     * @default 20
     */
    pointerWidth?: number;
    /**
     * Options for customizing the cap
     */
    cap?: CapModel;
    /**
     * Options for customizing the back needle.
     */
    needleTail?: NeedleTailModel;
    /**
     * The color of the pointer.
     */
    color?: string;
    /**
     * Options for customizing the border of the needle.
     */
    border?: BorderModel;
    /**
     * Configures the animation of pointers.
     */
    animation?: AnimationModel;
    /**
     * Specifies the shape of the marker. They are
     * * circle - Renders a circle.
     * * rectangle - Renders a rectangle.
     * * triangle - Renders a triangle.
     * * diamond - Renders a diamond.
     * * invertedTriangle - Renders a invertedTriangle.
     * * image - Renders a image.
     * @default Circle
     */
    markerShape?: GaugeShape;
    /**
     * The height of the marker in pixels.
     * @default 5
     */
    markerHeight?: number;
    /**
     * Information about pointer for assistive technology.
     * @default null
     */
    description?: string;
    /**
     * The width of the marker in pixels.
     * @default 5
     */
    markerWidth?: number;
}
/**
 * Interface for a class Axis
 */
export interface AxisModel {
    /**
     * Specifies the minimum value of an axis.
     * @aspDefaultValueIgnore
     * @default null
     */
    minimum?: number;
    /**
     * Specifies the maximum value of an axis.
     * @aspDefaultValueIgnore
     * @default null
     */
    maximum?: number;
    /**
     * Specifies the last label to be shown
     * @default false
     */
    showLastLabel?: boolean;
    /**
     * Specifies to hide the intersecting axis labels
     * @default false
     */
    hideIntersectingLabel?: boolean;
    /**
     * Specifies the rounding Off value in the label
     * @default null
     */
    roundingPlaces?: number;
    /**
     * Radius of an axis in pixels or in percentage.
     * @default null
     */
    radius?: string;
    /**
     * Options for customizing the axis lines.
     */
    lineStyle?: LineModel;
    /**
     * Options for customizing the ranges of an axis
     */
    ranges?: RangeModel[];
    /**
     * Options for customizing the pointers of an axis
     */
    pointers?: PointerModel[];
    /**
     * ‘Annotation’ module is used to handle annotation action for an axis.
     */
    annotations?: AnnotationModel[];
    /**
     * Options for customizing the major tick lines.
     * @default { width: 2, height: 10 }
     */
    majorTicks?: TickModel;
    /**
     * Options for customizing the minor tick lines.
     * @default { width: 2, height: 5 }
     */
    minorTicks?: TickModel;
    /**
     * The start angle of an axis
     * @default 200
     */
    startAngle?: number;
    /**
     * The end angle of an axis
     * @default 160
     */
    endAngle?: number;
    /**
     * Specifies the direction of an axis. They are
     * * clockWise -  Renders the axis in clock wise direction.
     * * antiClockWise - Renders the axis in anti-clock wise direction.
     * @default ClockWise
     */
    direction?: GaugeDirection;
    /**
     * The background color of the axis, which accepts value in hex, rgba as a valid CSS color string.
     * @default null
     */
    background?: string;
    /**
     * Specifies the range gap property by pixel value.
     * @default null
     */
    rangeGap?: number;
    /**
     * Specifies the start and end range gap.
     * @default false
     */
    startAndEndRangeGap?: boolean;
    /**
     * Options to customize the axis label.
     */
    labelStyle?: LabelModel;
}
//node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/axes/axis-panel.d.ts
export  class AxisLayoutPanel {
    private gauge;
    private farSizes;
    private axisRenderer;
    pointerRenderer: PointerRenderer;
    constructor(gauge: CircularGauge);
    /**
     * Measure the calculate the axis size and radius.
     * @return {void}
     * @private
     */
    measureAxis(rect: Rect): void;
    /**
     * Measure to calculate the axis radius of the circular gauge.
     * @return {void}
     * @private
     */
    private calculateAxesRadius;
    /**
     * Measure to calculate the axis size.
     * @return {void}
     * @private
     */
    private measureAxisSize;
    /**
     * Calculate the axis values of the circular gauge.
     * @return {void}
     * @private
     */
    private calculateAxisValues;
    /**
     * Calculate the visible range of an axis.
     * @return {void}
     * @private
     */
    private calculateVisibleRange;
    /**
     * Calculate the numeric intervals of an axis range.
     * @return {void}
     * @private
     */
    private calculateNumericInterval;
    /**
     * Calculate the nice interval of an axis range.
     * @return {void}
     * @private
     */
    private calculateNiceInterval;
    /**
     * Calculate the visible labels of an axis.
     * @return {void}
     * @private
     */
    private calculateVisibleLabels;
    /**
     * To get axis label event arguments for Blazor
     * @return {IAxisLabelRenderEventArgs}
     * @private
     */
    private getBlazorAxisLabelEventArgs;
    /**
     * Measure the axes available size.
     * @return {void}
     * @private
     */
    private computeSize;
    /**
     * To render the Axis element of the circular gauge.
     * @return {void}
     * @private
     */
    renderAxes(animate?: boolean): void;
    /**
     * Calculate maximum label width for the axis.
     * @return {void}
     */
    private getMaxLabelWidth;
}
//node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/axes/axis-renderer.d.ts
/**
 * Specifies the Axis rendering for circular gauge
 */
export  class AxisRenderer {
    private majorValues;
    private gauge;
    /**
     * Constructor for axis renderer.
     * @private.
     */
    constructor(gauge: CircularGauge);
    /**
     * Method to render the axis element of the circular gauge.
     * @return {void}
     * @private
     */
    drawAxisOuterLine(axis: Axis, index: number, element: Element, gauge: CircularGauge): void;
    /**
     * Method to render the axis line of the circular gauge.
     * @return {void}
     * @private
     */
    drawAxisLine(axis: Axis, index: number, element: Element, gauge: CircularGauge): void;
    /**
     * Method to render the axis labels of the circular gauge.
     * @return {void}
     * @private
     */
    drawAxisLabels(axis: Axis, index: number, element: Element, gauge: CircularGauge): void;
    /**
     * Method to find the anchor of the axis label.
     * @private
     */
    private findAnchor;
    /**
     * Methode to check whether the labels are intersecting or not.
     * @private
     */
    private FindAxisLabelCollision;
    /**
     * Methode to get anchor position of label as start.
     * @private
     */
    private getAxisLabelStartPosition;
    /**
     * Methode to offset label height and width based on angle.
     * @private
     */
    private offsetAxisLabelsize;
    /**
     * Method to render the axis minor tick lines of the circular gauge.
     * @return {void}
     * @private
     */
    drawMinorTickLines(axis: Axis, index: number, element: Element, gauge: CircularGauge): void;
    /**
     * Method to render the axis major tick lines of the circular gauge.
     * @return {void}
     * @private
     */
    drawMajorTickLines(axis: Axis, index: number, element: Element, gauge: CircularGauge): void;
    /**
     * Method to calcualte the tick elements for the circular gauge.
     * @return {void}
     * @private
     */
    calculateTicks(value: number, options: Tick, axis: Axis): string;
    /**
     * Method to render the axis range of the circular gauge.
     * @return {void}
     * @private
     */
    drawAxisRange(axis: Axis, index: number, element: Element, gauge: CircularGauge): void;
    /**
     * Method to calculate the radius of the axis range.
     * @return {void}
     */
    private calculateRangeRadius;
    /**
     * Method to get the range color of the circular gauge.
     * @return {void}
     * @private
     */
    setRangeColor(axis: Axis): void;
}
//node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/axes/axis.d.ts
/**
 * Configures the axis line.
 */
export  class Line extends base.ChildProperty<Line> {
    /**
     * The width of the line in pixels.
     * @default 2
     */
    width: number;
    /**
     * The dash array of the axis line.
     * @default ''
     */
    dashArray: string;
    /**
     * The color of the axis line, which accepts value in hex, rgba as a valid CSS color string.
     */
    color: string;
}
/**
 * Configures the axis label.
 */
export  class Label extends base.ChildProperty<Label> {
    /**
     * The font of the axis labels
     */
    font: FontModel;
    /**
     * To format the axis label, which accepts any global string format like 'C', 'n1', 'P' etc.
     * Also accepts placeholder like '{value}°C' in which value represent the axis label e.g. 20°C.
     * @default ''
     */
    format: string;
    /**
     * Specifies the position of the labels. They are,
     * * inside -  Places the labels inside the axis.
     * * outside - Places the labels outside of the axis.
     * @default Inside
     */
    position: Position;
    /**
     * Specifies the label of an axis, which must get hide when an axis makes a complete circle. They are
     * * first -  Hides the 1st label on intersect.
     * * last - Hides the last label on intersect.
     * * none - Places both the labels.
     * @default None
     */
    hiddenLabel: HiddenLabel;
    /**
     * if set true, the labels will get rotated along the axis.
     * @default false
     */
    autoAngle: boolean;
    /**
     * If set true, labels takes the range color.
     * @default false
     */
    useRangeColor: boolean;
    /**
     * Distance of the labels from axis in pixel.
     * @default 0
     */
    offset: number;
}
/**
 * Configures the ranges of an axis.
 */
export  class Range extends base.ChildProperty<Range> {
    /**
     * Specifies the minimum value of the range.
     * @aspDefaultValueIgnore
     * @default 0
     */
    start: number;
    /**
     * Specifies the maximum value of the range.
     * @aspDefaultValueIgnore
     * @default 0
     */
    end: number;
    /**
     * The radius of the range in pixels or in percentage.
     * @default null
     */
    radius: string;
    /**
     * Specifies the start width of the ranges
     * @default '10'
     */
    startWidth: number | string;
    /**
     * Specifies the end width of the ranges
     * @default '10'
     */
    endWidth: number | string;
    /**
     * Specifies the color of the ranges
     * @aspDefaultValueIgnore
     * @default null
     */
    color: string;
    /**
     * Specifies the rounded corner radius for ranges.
     * @default 0
     */
    roundedCornerRadius: number;
    /**
     * Specifies the opacity for ranges.
     * @default 1
     */
    opacity: number;
    /**
     * Specifies the text for legend.
     * @default ''
     */
    legendText: string;
    /** @private */
    currentRadius: number;
    /** @private */
    rangeColor: string;
}
/**
 * Configures the major and minor tick lines of an axis.
 */
export  class Tick extends base.ChildProperty<Tick> {
    /**
     * The width of the ticks in pixels.
     * @aspDefaultValueIgnore
     * @default 2
     */
    width: number;
    /**
     * The height of the line in pixels.
     * @aspDefaultValueIgnore
     * @default null
     */
    height: number;
    /**
     * Specifies the interval of the tick line.
     * @aspDefaultValueIgnore
     * @default null
     */
    interval: number;
    /**
     * Distance of the ticks from axis in pixel.
     * @default 0
     */
    offset: number;
    /**
     * The color of the tick line, which accepts value in hex, rgba as a valid CSS color string.
     * @aspDefaultValueIgnore
     * @default null
     */
    color: string;
    /**
     * Specifies the position of the ticks. They are
     * * inside -  Places the ticks inside the axis.
     * * outside - Places the ticks outside of the axis.
     * @default Inside
     */
    position: Position;
    /**
     * If set true, major ticks takes the range color.
     * @default false
     */
    useRangeColor: boolean;
}
/**
 * Configures the needle cap in pointer.
 */
export  class Cap extends base.ChildProperty<Cap> {
    /**
     * The color of the cap.
     * @default null
     */
    color: string;
    /**
     * Options for customizing the border of the cap.
     */
    border: BorderModel;
    /**
     * Radius of the cap in pixels.
     * @default 8
     */
    radius: number;
}
/**
 * Configures the back needle in pointers.
 */
export  class NeedleTail extends base.ChildProperty<NeedleTail> {
    /**
     * The color of the back needle.
     * @aspDefaultValueIgnore
     * @default null
     */
    color: string;
    /**
     * Options for customizing the border of the back needle.
     */
    border: BorderModel;
    /**
     * The radius of the back needle in pixels or in percentage.
     * @default '0%'
     */
    length: string;
}
/**
 * Configures the animation of pointers.
 */
export  class Animation extends base.ChildProperty<Animation> {
    /**
     * If set true, pointers get animate on initial loading.
     * @default true
     */
    enable: boolean;
    /**
     * Duration of animation in milliseconds.
     * @default 1000
     */
    duration: number;
}
/**
 * ‘Annotation’ module is used to handle annotation action for an axis.
 */
export  class Annotation extends base.ChildProperty<Annotation> {
    /**
     * Content of the annotation, which accepts the id of the custom element.
     * @default null
     */
    content: string;
    /**
     * Angle for annotation with respect to axis.
     * @default 90
     */
    angle: number;
    /**
     * Radius for annotation with respect to axis.
     * @default '50%'
     */
    radius: string;
    /**
     * Order of an annotation in an axis.
     * @default '-1'
     */
    zIndex: string;
    /**
     * Rotates the annotation along the axis.
     * @default false
     */
    autoAngle: boolean;
    /**
     * Options for customizing the annotation text.
     */
    textStyle: FontModel;
    /**
     * Information about annotation for assistive technology.
     * @default null
     */
    description: string;
}
/**
 * Configures the pointers of an axis.
 */
export  class Pointer extends base.ChildProperty<Pointer> {
    /**
     * Specifies the value of the pointer.
     * @aspDefaultValueIgnore
     * @default null
     */
    value: number;
    /**
     * Specifies the type of pointer for an axis.
     * * needle -  Renders a needle.
     * * marker - Renders a marker.
     * * rangeBar - Renders a rangeBar.
     * @default Needle
     */
    type: PointerType;
    /**
     * Specifies the rounded corner radius for pointer.
     * @default 0
     */
    roundedCornerRadius: number;
    /**
     * The URL for the Image that is to be displayed as pointer.
     * It requires marker shape value to be Image.
     * @default null
     */
    imageUrl: string;
    /**
     * Length of the pointer in pixels or in percentage.
     * @default null
     */
    radius: string;
    /**
     * Width of the pointer in pixels.
     * @default 20
     */
    pointerWidth: number;
    /**
     * Options for customizing the cap
     */
    cap: CapModel;
    /**
     * Options for customizing the back needle.
     */
    needleTail: NeedleTailModel;
    /**
     * The color of the pointer.
     */
    color: string;
    /**
     * Options for customizing the border of the needle.
     */
    border: BorderModel;
    /**
     * Configures the animation of pointers.
     */
    animation: AnimationModel;
    /**
     * Specifies the shape of the marker. They are
     * * circle - Renders a circle.
     * * rectangle - Renders a rectangle.
     * * triangle - Renders a triangle.
     * * diamond - Renders a diamond.
     * * invertedTriangle - Renders a invertedTriangle.
     * * image - Renders a image.
     * @default Circle
     */
    markerShape: GaugeShape;
    /**
     * The height of the marker in pixels.
     * @default 5
     */
    markerHeight: number;
    /**
     * Information about pointer for assistive technology.
     * @default null
     */
    description: string;
    /**
     * The width of the marker in pixels.
     * @default 5
     */
    markerWidth: number;
    /** @private */
    currentValue: number;
    /** @private */
    pathElement: Element[];
    /** @private */
    currentRadius: number;
}
/**
 * Configures an axis in a gauge.
 */
export  class Axis extends base.ChildProperty<Axis> {
    /**
     * Specifies the minimum value of an axis.
     * @aspDefaultValueIgnore
     * @default null
     */
    minimum: number;
    /**
     * Specifies the maximum value of an axis.
     * @aspDefaultValueIgnore
     * @default null
     */
    maximum: number;
    /**
     * Specifies the last label to be shown
     * @default false
     */
    showLastLabel: boolean;
    /**
     * Specifies to hide the intersecting axis labels
     * @default false
     */
    hideIntersectingLabel: boolean;
    /**
     * Specifies the rounding Off value in the label
     * @default null
     */
    roundingPlaces: number;
    /**
     * Radius of an axis in pixels or in percentage.
     * @default null
     */
    radius: string;
    /**
     * Options for customizing the axis lines.
     */
    lineStyle: LineModel;
    /**
     * Options for customizing the ranges of an axis
     */
    ranges: RangeModel[];
    /**
     * Options for customizing the pointers of an axis
     */
    pointers: PointerModel[];
    /**
     * ‘Annotation’ module is used to handle annotation action for an axis.
     */
    annotations: AnnotationModel[];
    /**
     * Options for customizing the major tick lines.
     * @default { width: 2, height: 10 }
     */
    majorTicks: TickModel;
    /**
     * Options for customizing the minor tick lines.
     * @default { width: 2, height: 5 }
     */
    minorTicks: TickModel;
    /**
     * The start angle of an axis
     * @default 200
     */
    startAngle: number;
    /**
     * The end angle of an axis
     * @default 160
     */
    endAngle: number;
    /**
     * Specifies the direction of an axis. They are
     * * clockWise -  Renders the axis in clock wise direction.
     * * antiClockWise - Renders the axis in anti-clock wise direction.
     * @default ClockWise
     */
    direction: GaugeDirection;
    /**
     * The background color of the axis, which accepts value in hex, rgba as a valid CSS color string.
     * @default null
     */
    background: string;
    /**
     * Specifies the range gap property by pixel value.
     * @default null
     */
    rangeGap: number;
    /**
     * Specifies the start and end range gap.
     * @default false
     */
    startAndEndRangeGap: boolean;
    /**
     * Options to customize the axis label.
     */
    labelStyle: LabelModel;
    /** @private */
    currentRadius: number;
    /** @private */
    visibleRange: VisibleRangeModel;
    /** @private */
    visibleLabels: VisibleLabels[];
    /** @private */
    maxLabelSize: Size;
    /** @private */
    rect: Rect;
    /** @private */
    nearSize: number;
    /** @private */
    farSize: number;
}
/** @private */
export interface VisibleRangeModel {
    min?: number;
    max?: number;
    interval?: number;
}
//node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/axes/pointer-renderer.d.ts
/**
 * Specifies the Axis rendering for circular gauge
 */
export  class PointerRenderer {
    private gauge;
    /**
     * Constructor for pointer renderer.
     * @private.
     */
    constructor(gauge: CircularGauge);
    /**
     * Method to render the axis pointers of the circular gauge.
     * @return {void}
     * @private
     */
    drawPointers(axis: Axis, axisIndex: number, element: Element, gauge: CircularGauge, animate?: boolean): void;
    /**
     * Measure the pointer length of the circular gauge.
     * @return {void}
     */
    private calculatePointerRadius;
    /**
     * Method to render the needle pointer of the ciruclar gauge.
     * @return {void}
     */
    private drawNeedlePointer;
    /**
     * Method to set the pointer value of the circular gauge.
     * @return {void}
     * @private
     */
    setPointerValue(axis: Axis, pointer: Pointer, value: number): void;
    /**
     * Method to render the marker pointer of the ciruclar gauge.
     * @return {void}
     */
    private drawMarkerPointer;
    /**
     * Method to render the range bar pointer of the ciruclar gauge.
     * @return {void}
     */
    private drawRangeBarPointer;
    /**
     * Method to perform the animation of the pointer in circular gauge.
     * @return {void}
     */
    private doPointerAnimation;
    /**
     * Perform the needle and marker pointer animation for circular gauge.
     * @return {void}
     * @private
     */
    performNeedleAnimation(element: HTMLElement, start: number, end: number, axis: Axis, pointer: Pointer, radius?: number, innerRadius?: number): void;
    /**
     * Perform the range bar pointer animation for circular gauge.
     * @return {void}
     * @private
     */
    performRangeBarAnimation(element: HTMLElement, start: number, end: number, axis: Axis, pointer: Pointer, radius: number, innerRadius?: number): void;
}
//node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/circular-gauge-model.d.ts
/**
 * Interface for a class CircularGauge
 */
export interface CircularGaugeModel extends base.ComponentModel{
    /**
     * The width of the circular gauge as a string in order to provide input as both like '100px' or '100%'.
     * If specified as '100%, gauge will render to the full width of its parent element.
     * @default null
     */
    width?: string;
    /**
     * The height of the circular gauge as a string in order to provide input as both like '100px' or '100%'.
     * If specified as '100%, gauge will render to the full height of its parent element.
     * @default null
     */
    height?: string;
    /**
     * Options for customizing the color and width of the gauge border.
     */
    border?: BorderModel;
    /**
     * The background color of the gauge, which accepts value in hex, rgba as a valid CSS color string.
     * @default null
     */
    background?: string;
    /**
     * Title for gauge
     * @default ''
     */
    title?: string;
    /**
     * Options for customizing the title of Gauge.
     */
    titleStyle?: FontModel;
    /**
     *  Options to customize the left, right, top and bottom margins of the gauge.
     */
    margin?: MarginModel;
    /**
     * Options for customizing the axes of gauge
     */
    axes?: AxisModel[];
    /**
     * Options for customizing the tooltip of gauge.
     */
    tooltip?: TooltipSettingsModel;
    /**
     * If set true, pointers can able to drag on interaction.
     * @default false
     */
    enablePointerDrag?: boolean;
    /**
     * X coordinate of the circular gauge center point, which takes values either in pixels or in percentage.
     * @default null
     */
    centerX?: string;
    /**
     * Y coordinate of the circular gauge center point, which takes values either in pixels or in percentage.
     * @default null
     */
    centerY?: string;
    /**
     * To place the half or quarter circle in center position, if values not specified for centerX and centerY.
     * @default false
     */
    moveToCenter?: boolean;
    /**
     * Specifies the theme for circular gauge.
     * * Material - Gauge render with material theme.
     * * Fabric - Gauge render with fabric theme.
     * @default Material
     */
    theme?: GaugeTheme;
    /**
     * Specifies whether a grouping separator should be used for a number.
     * @default false
     */
    useGroupingSeparator?: boolean;
    /**
     * Information about gauge for assistive technology.
     * @default null
     */
    description?: string;
    /**
     * TabIndex value for the gauge.
     * @default 1
     */
    tabIndex?: number;
    /**
     * Options for customizing the legend of the chart.
     */
    legendSettings?: LegendSettingsModel;
    /**
     * Triggers after gauge loaded.
     * @event
     * @blazorProperty 'Loaded'
     */
    loaded?: base.EmitType<ILoadedEventArgs>;
    /**
     * Triggers before gauge load.
     * @event
     * @blazorProperty 'OnLoad'
     */
    load?: base.EmitType<ILoadedEventArgs>;
    /**
     * Triggers after animation gets completed for pointers.
     * @event
     * @blazorProperty 'AnimationCompleted'
     */
    animationComplete?: base.EmitType<IAnimationCompleteEventArgs>;
    /**
     * Triggers before each axis label gets rendered.
     * @event
     * @deprecated
     * @blazorProperty 'AxisLabelRendering'
     */
    axisLabelRender?: base.EmitType<IAxisLabelRenderEventArgs>;
    /**
     * Triggers before the radius gets rendered
     * @event
     * @blazorProperty 'OnRadiusCalculate'
     */
    radiusCalculate?: base.EmitType<IRadiusCalculateEventArgs>;
    /**
     * Triggers before each annotation gets rendered.
     * @event
     * @blazorProperty 'AnnotationRendering'
     */
    annotationRender?: base.EmitType<IAnnotationRenderEventArgs>;
    /**
     * Triggers before each legend gets rendered.
     * @event
     * @deprecated
     * @blazorProperty 'legendRender'
     */
    legendRender?: base.EmitType<ILegendRenderEventArgs>;
    /**
     * Triggers before the tooltip for pointer gets rendered.
     * @event
     * @blazorProperty 'TooltipRendering'
     */
    tooltipRender?: base.EmitType<ITooltipRenderEventArgs>;
    /**
     * Triggers before the pointer is dragged.
     * @event
     * @blazorProperty 'OnDragStart'
     */
    dragStart?: base.EmitType<IPointerDragEventArgs>;
    /**
     * Triggers while dragging the pointers.
     * @event
     * @blazorProperty 'OnDragMove'
     */
    dragMove?: base.EmitType<IPointerDragEventArgs>;
    /**
     * Triggers after the pointer is dragged.
     * @event
     * @blazorProperty 'OnDragEnd'
     */
    dragEnd?: base.EmitType<IPointerDragEventArgs>;
    /**
     * Triggers on hovering the circular gauge.
     * @event
     * @blazorProperty 'OnGaugeMouseMove'
     */
    gaugeMouseMove?: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers while cursor leaves the circular gauge.
     * @event
     * @blazorProperty 'OnGaugeMouseLeave'
     */
    gaugeMouseLeave?: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on mouse down.
     * @event
     * @blazorProperty 'OnGaugeMouseDown'
     */
    gaugeMouseDown?: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on mouse up.
     * @event
     * @blazorProperty 'OnGaugeMouseUp'
     */
    gaugeMouseUp?: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers after window resize.
     * @event
     * @blazorProperty 'Resizing'
     */
    resized?: base.EmitType<IResizeEventArgs>;
}
//node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/circular-gauge.d.ts
/**
 * Circular Gauge
 */
/**
 * Represents the Circular gauge control.
 * ```html
 * <div id="gauge"/>
 * <script>
 *   var gaugeObj = new CircularGauge();
 *   gaugeObj.appendTo("#gauge");
 * </script>
 * ```
 */
export  class CircularGauge extends base.Component<HTMLElement> implements base.INotifyPropertyChanged {
    /**
     * annotationModule is used to add annotation in gauge.
     */
    annotationsModule: Annotations;
    /**
     * `tooltipModule` is used to show the tooltip to the circular gauge..
     */
    tooltipModule: GaugeTooltip;
    /**
     * `legendModule` is used to manipulate and add legend to the chart.
     */
    legendModule: Legend;
    /**
     * The width of the circular gauge as a string in order to provide input as both like '100px' or '100%'.
     * If specified as '100%, gauge will render to the full width of its parent element.
     * @default null
     */
    width: string;
    /**
     * The height of the circular gauge as a string in order to provide input as both like '100px' or '100%'.
     * If specified as '100%, gauge will render to the full height of its parent element.
     * @default null
     */
    height: string;
    /**
     * Options for customizing the color and width of the gauge border.
     */
    border: BorderModel;
    /**
     *
     */
    /**
     * The background color of the gauge, which accepts value in hex, rgba as a valid CSS color string.
     * @default null
     */
    background: string;
    /**
     * Title for gauge
     * @default ''
     */
    title: string;
    /**
     * Options for customizing the title of Gauge.
     */
    titleStyle: FontModel;
    /**
     *  Options to customize the left, right, top and bottom margins of the gauge.
     */
    margin: MarginModel;
    /**
     * Options for customizing the axes of gauge
     */
    axes: AxisModel[];
    /**
     * Options for customizing the tooltip of gauge.
     */
    tooltip: TooltipSettingsModel;
    /**
     * If set true, pointers can able to drag on interaction.
     * @default false
     */
    enablePointerDrag: boolean;
    /**
     * X coordinate of the circular gauge center point, which takes values either in pixels or in percentage.
     * @default null
     */
    centerX: string;
    /**
     * Y coordinate of the circular gauge center point, which takes values either in pixels or in percentage.
     * @default null
     */
    centerY: string;
    /**
     * To place the half or quarter circle in center position, if values not specified for centerX and centerY.
     * @default false
     */
    moveToCenter: boolean;
    /**
     * Specifies the theme for circular gauge.
     * * Material - Gauge render with material theme.
     * * Fabric - Gauge render with fabric theme.
     * @default Material
     */
    theme: GaugeTheme;
    /**
     * Specifies whether a grouping separator should be used for a number.
     * @default false
     */
    useGroupingSeparator: boolean;
    /**
     * Information about gauge for assistive technology.
     * @default null
     */
    description: string;
    /**
     * TabIndex value for the gauge.
     * @default 1
     */
    tabIndex: number;
    /**
     * Options for customizing the legend of the chart.
     */
    legendSettings: LegendSettingsModel;
    /**
     * Triggers after gauge loaded.
     * @event
     * @blazorProperty 'Loaded'
     */
    loaded: base.EmitType<ILoadedEventArgs>;
    /**
     * Triggers before gauge load.
     * @event
     * @blazorProperty 'OnLoad'
     */
    load: base.EmitType<ILoadedEventArgs>;
    /**
     * Triggers after animation gets completed for pointers.
     * @event
     * @blazorProperty 'AnimationCompleted'
     */
    animationComplete: base.EmitType<IAnimationCompleteEventArgs>;
    /**
     * Triggers before each axis label gets rendered.
     * @event
     * @deprecated
     * @blazorProperty 'AxisLabelRendering'
     */
    axisLabelRender: base.EmitType<IAxisLabelRenderEventArgs>;
    /**
     * Triggers before the radius gets rendered
     * @event
     * @blazorProperty 'OnRadiusCalculate'
     */
    radiusCalculate: base.EmitType<IRadiusCalculateEventArgs>;
    /**
     * Triggers before each annotation gets rendered.
     * @event
     * @blazorProperty 'AnnotationRendering'
     */
    annotationRender: base.EmitType<IAnnotationRenderEventArgs>;
    /**
     * Triggers before each legend gets rendered.
     * @event
     * @deprecated
     * @blazorProperty 'legendRender'
     */
    legendRender: base.EmitType<ILegendRenderEventArgs>;
    /**
     * Triggers before the tooltip for pointer gets rendered.
     * @event
     * @blazorProperty 'TooltipRendering'
     */
    tooltipRender: base.EmitType<ITooltipRenderEventArgs>;
    /**
     * Triggers before the pointer is dragged.
     * @event
     * @blazorProperty 'OnDragStart'
     */
    dragStart: base.EmitType<IPointerDragEventArgs>;
    /**
     * Triggers while dragging the pointers.
     * @event
     * @blazorProperty 'OnDragMove'
     */
    dragMove: base.EmitType<IPointerDragEventArgs>;
    /**
     * Triggers after the pointer is dragged.
     * @event
     * @blazorProperty 'OnDragEnd'
     */
    dragEnd: base.EmitType<IPointerDragEventArgs>;
    /**
     * Triggers on hovering the circular gauge.
     * @event
     * @blazorProperty 'OnGaugeMouseMove'
     */
    gaugeMouseMove: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers while cursor leaves the circular gauge.
     * @event
     * @blazorProperty 'OnGaugeMouseLeave'
     */
    gaugeMouseLeave: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on mouse down.
     * @event
     * @blazorProperty 'OnGaugeMouseDown'
     */
    gaugeMouseDown: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers on mouse up.
     * @event
     * @blazorProperty 'OnGaugeMouseUp'
     */
    gaugeMouseUp: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers after window resize.
     * @event
     * @blazorProperty 'Resizing'
     */
    resized: base.EmitType<IResizeEventArgs>;
    /** @private */
    renderer: svgBase.SvgRenderer;
    /** @private */
    svgObject: Element;
    /** @private */
    availableSize: Size;
    /** @private */
    intl: base.Internationalization;
    /** @private */
    private resizeTo;
    /** @private */
    midPoint: GaugeLocation;
    /** @private */
    activePointer: Pointer;
    /** @private */
    activeAxis: Axis;
    /** @private */
    gaugeRect: Rect;
    /** @private */
    animatePointer: boolean;
    /** @private */
    /**
     * Render axis panel for gauge.
     * @hidden
     */
    gaugeAxisLayoutPanel: AxisLayoutPanel;
    /**
     * @private
     */
    themeStyle: IThemeStyle;
    /** @private */
    isBlazor: boolean;
    /** @private */
    isDrag: boolean;
    /** @private */
    isTouch: boolean;
    /** @private Mouse position x */
    mouseX: number;
    /** @private Mouse position y */
    mouseY: number;
    /**
     * Constructor for creating the widget
     * @hidden
     */
    constructor(options?: CircularGaugeModel, element?: string | HTMLElement);
    /**
     *  To create svg object, renderer and binding events for the container.
     */
    protected preRender(): void;
    /**
     * To render the circular gauge elements
     */
    protected render(): void;
    private setTheme;
    /**
     * Method to unbind events for circular gauge
     */
    private unWireEvents;
    /**
     * Method to bind events for circular gauge
     */
    private wireEvents;
    /**
     * Handles the mouse click on accumulation chart.
     * @return {boolean}
     * @private
     */
    gaugeOnMouseClick(e: PointerEvent): boolean;
    /**
     * Handles the mouse move.
     * @return {boolean}
     * @private
     */
    mouseMove(e: PointerEvent): boolean;
    /**
     * Handles the mouse leave.
     * @return {boolean}
     * @private
     */
    mouseLeave(e: PointerEvent): boolean;
    /**
     * Handles the mouse right click.
     * @return {boolean}
     * @private
     */
    gaugeRightClick(event: MouseEvent | PointerEvent): boolean;
    /**
     * Handles the pointer draf while mouse move on gauge.
     * @private
     */
    pointerDrag(location: GaugeLocation): void;
    /**
     * Handles the mouse down on gauge.
     * @return {boolean}
     * @private
     */
    gaugeOnMouseDown(e: PointerEvent): boolean;
    /**
     * Handles the mouse end.
     * @return {boolean}
     * @private
     */
    mouseEnd(e: PointerEvent): boolean;
    /**
     * Handles the mouse event arguments.
     * @return {IMouseEventArgs}
     * @private
     */
    private getMouseArgs;
    /**
     * Handles the gauge resize.
     * @return {boolean}
     * @private
     */
    gaugeResize(e: Event): boolean;
    /**
     * Applying styles for circular gauge elements
     */
    private setGaugeStyle;
    /**
     * Method to set culture for gauge
     */
    private setCulture;
    /**
     * Methods to create svg element for circular gauge.
     */
    private createSvg;
    /**
     * To Remove the SVG from circular gauge.
     * @return {boolean}
     * @private
     */
    removeSvg(): void;
    /**
     * To initialize the circular gauge private variable.
     * @private
     */
    private initPrivateVariable;
    /**
     * To calculate the size of the circular gauge element.
     */
    private calculateSvgSize;
    /**
     * Method to calculate the availble size for circular gauge.
     */
    private calculateBounds;
    /**
     * To render elements for circular gauge
     */
    private renderElements;
    /**
     * Method to render legend for accumulation chart
     */
    private renderLegend;
    /**
     * Method to render the title for circular gauge.
     */
    private renderTitle;
    /**
     * Method to render the border for circular gauge.
     */
    private renderBorder;
    /**
     * Method to set the pointer value dynamically for circular gauge.
     */
    setPointerValue(axisIndex: number, pointerIndex: number, value: number): void;
    /**
     * Method to set the annotation content dynamically for circular gauge.
     */
    setAnnotationValue(axisIndex: number, annotationIndex: number, content: string): void;
    /**
     * Method to set mouse x, y from events
     */
    private setMouseXY;
    /**
     * Method to set the range values dynamically for circular gauge.
     */
    setRangeValue(axisIndex: number, rangeIndex: number, start: number, end: number): void;
    /**
     * To destroy the widget
     * @method destroy
     * @return {void}
     * @member of Circular-Gauge
     */
    destroy(): void;
    /**
     * To provide the array of modules needed for control rendering
     * @return {base.ModuleDeclaration[]}
     * @private
     */
    requiredModules(): base.ModuleDeclaration[];
    /**
     * Get the properties to be maintained in the persisted state.
     * @private
     */
    getPersistData(): string;
    /**
     * Called internally if any of the property value changed.
     * @private
     */
    onPropertyChanged(newProp: CircularGaugeModel, oldProp: CircularGaugeModel): void;
    /**
     * Get component name for circular gauge
     * @private
     */
    getModuleName(): string;
}
//node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/index.d.ts
/**
 * Circular Gauge component exported items
 */
//node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/legend/legend-model.d.ts
/**
 * Interface for a class Location
 */
export interface LocationModel {
    /**
     * X coordinate of the legend in pixels.
     * @default 0
     */
    x?: number;
    /**
     * Y coordinate of the legend in pixels.
     * @default 0
     */
    y?: number;
}
/**
 * Interface for a class LegendSettings
 */
export interface LegendSettingsModel {
    /**
     * If set to true, legend will be visible.
     * @default false
     */
    visible?: boolean;
    /**
     * If set to true, series' visibility collapses based on the legend visibility.
     * @default true
     */
    toggleVisibility?: boolean;
    /**
     * Legend in chart can be aligned as follows:
     * * Near: Aligns the legend to the left of the chart.
     * * Center: Aligns the legend to the center of the chart.
     * * Far: Aligns the legend to the right of the chart.
     * @default 'Center'
     */
    alignment?: Alignment;
    /**
     * Options to customize the border of the legend.
     */
    border?: BorderModel;
    /**
     * Options to customize the border of the legend.
     */
    shapeBorder?: BorderModel;
    /**
     * Option to customize the padding between legend items.
     * @default 8
     */
    padding?: number;
    /**
     * Opacity of the legend.
     * @default 1
     */
    opacity?: number;
    /**
     * Position of the legend in the circular gauge are,
     * * Auto: Displays the legend based on the avail space of the circular this.gauge.
     * * Top: Displays the legend at the top of the circular this.gauge.
     * * Left: Displays the legend at the left of the circular this.gauge.
     * * Bottom: Displays the legend at the bottom of the circular this.gauge.
     * * Right: Displays the legend at the right of the circular this.gauge.
     * @default 'Auto'
     */
    position?: LegendPosition;
    /**
     * Customize the legend shape of the maps.
     * @default Circle
     */
    shape?: GaugeShape;
    /**
     * The height of the legend in pixels.
     * @default null
     */
    height?: string;
    /**
     * The width of the legend in pixels.
     * @default null
     */
    width?: string;
    /**
     * Options to customize the legend text.
     */
    textStyle?: FontModel;
    /**
     * Height of the shape
     * @default 10
     */
    shapeHeight?: number;
    /**
     * Width of the shape
     * @default 10
     */
    shapeWidth?: number;
    /**
     * Padding for the shape
     * @default 5
     */
    shapePadding?: number;
    /**
     * Specifies the location of the legend, relative to the chart.
     * If x is 20, legend moves by 20 pixels to the right of the chart. It requires the `position` to be `Custom`.
     * ```html
     * <div id='Gauge'></div>
     * ```
     * ```typescript
     * let gauge: CircularGauge = new CircularGauge({
     * ...
     *   legendSettings: {
     *     visible: true,
     *     position: 'Custom',
     *     location: { x: 100, y: 150 },
     *   },
     * ...
     * });
     * this.gauge.appendTo('#Gauge');
     * ```
     */
    location?: LocationModel;
    /**
     * Options to customize the legend background
     * @default 'transparent'
     */
    background?: string;
    /**
     * Options to customize the legend margin
     */
    margin?: MarginModel;
}
/**
 * Interface for a class Legend
 */
export interface LegendModel {
}
/**
 * Interface for a class Index
 * @private
 */
export interface IndexModel {
}
/**
 * Interface for a class LegendOptions
 * @private
 */
export interface LegendOptionsModel {
}
//node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/legend/legend.d.ts
/**
 * Configures the location for the legend.
 */
export  class Location extends base.ChildProperty<Location> {
    /**
     * X coordinate of the legend in pixels.
     * @default 0
     */
    x: number;
    /**
     * Y coordinate of the legend in pixels.
     * @default 0
     */
    y: number;
}
/**
 * Configures the legends in charts.
 */
export  class LegendSettings extends base.ChildProperty<LegendSettings> {
    /**
     * If set to true, legend will be visible.
     * @default false
     */
    visible: boolean;
    /**
     * If set to true, series' visibility collapses based on the legend visibility.
     * @default true
     */
    toggleVisibility: boolean;
    /**
     * Legend in chart can be aligned as follows:
     * * Near: Aligns the legend to the left of the chart.
     * * Center: Aligns the legend to the center of the chart.
     * * Far: Aligns the legend to the right of the chart.
     * @default 'Center'
     */
    alignment: Alignment;
    /**
     * Options to customize the border of the legend.
     */
    border: BorderModel;
    /**
     * Options to customize the border of the legend.
     */
    shapeBorder: BorderModel;
    /**
     * Option to customize the padding between legend items.
     * @default 8
     */
    padding: number;
    /**
     * Opacity of the legend.
     * @default 1
     */
    opacity: number;
    /**
     * Position of the legend in the circular gauge are,
     * * Auto: Displays the legend based on the avail space of the circular this.gauge.
     * * Top: Displays the legend at the top of the circular this.gauge.
     * * Left: Displays the legend at the left of the circular this.gauge.
     * * Bottom: Displays the legend at the bottom of the circular this.gauge.
     * * Right: Displays the legend at the right of the circular this.gauge.
     * @default 'Auto'
     */
    position: LegendPosition;
    /**
     * Customize the legend shape of the maps.
     * @default Circle
     */
    shape: GaugeShape;
    /**
     * The height of the legend in pixels.
     * @default null
     */
    height: string;
    /**
     * The width of the legend in pixels.
     * @default null
     */
    width: string;
    /**
     * Options to customize the legend text.
     */
    textStyle: FontModel;
    /**
     * Height of the shape
     * @default 10
     */
    shapeHeight: number;
    /**
     * Width of the shape
     * @default 10
     */
    shapeWidth: number;
    /**
     * Padding for the shape
     * @default 5
     */
    shapePadding: number;
    /**
     * Specifies the location of the legend, relative to the chart.
     * If x is 20, legend moves by 20 pixels to the right of the chart. It requires the `position` to be `Custom`.
     * ```html
     * <div id='Gauge'></div>
     * ```
     * ```typescript
     * let gauge$: CircularGauge = new CircularGauge({
     * ...
     *   legendSettings: {
     *     visible: true,
     *     position: 'Custom',
     *     location: { x: 100, y: 150 },
     *   },
     * ...
     * });
     * this.gauge.appendTo('#Gauge');
     * ```
     */
    location: LocationModel;
    /**
     * Options to customize the legend background
     * @default 'transparent'
     */
    background: string;
    /**
     * Options to customize the legend margin
     */
    margin: MarginModel;
}
export  class Legend {
    legendCollection: LegendOptions[];
    legendRenderingCollections: Object[];
    protected legendRegions: ILegendRegions[];
    titleRect: Rect;
    private totalRowCount;
    private maxColumnWidth;
    protected maxItemHeight: number;
    protected isPaging: boolean;
    protected isVertical: boolean;
    private rowCount;
    private pageButtonSize;
    protected pageXCollections: number[];
    protected maxColumns: number;
    maxWidth: number;
    private clipRect;
    private legendTranslateGroup;
    protected currentPage: number;
    private gauge;
    private totalPages;
    private legend;
    private legendID;
    protected pagingRegions: Rect[];
    private clipPathHeight;
    private toggledIndexes;
    /**
     * Gets the legend bounds in chart.
     * @private
     */
    legendBounds: Rect;
    /**  @private */
    position: LegendPosition;
    constructor(gauge: CircularGauge);
    /**
     * Binding events for legend module.
     */
    private addEventListener;
    /**
     * UnBinding events for legend module.
     */
    private removeEventListener;
    /**
     * Get the legend options.
     * @return {void}
     * @private
     */
    getLegendOptions(axes: Axis[]): void;
    calculateLegendBounds(rect: Rect, availableSize: Size): void;
    /**
     * To find legend alignment for chart and accumulation chart
     */
    private alignLegend;
    /**
     * To find legend location based on position, alignment for chart and accumulation chart
     */
    private getLocation;
    /**
     * Renders the legend.
     * @return {void}
     * @private
     */
    renderLegend(legend: LegendSettingsModel, legendBounds: Rect, redraw?: boolean): void;
    /**
     * To render legend paging elements for chart and accumulation chart
     */
    private renderPagingElements;
    /**
     * To translate legend pages for chart and accumulation chart
     */
    protected translatePage(pagingText: Element, page: number, pageNumber: number): number;
    /**
     * To render legend text for chart and accumulation chart
     */
    protected renderText(legendOption: LegendOptions, group: Element, textOptions: TextOption, axisIndex: number, rangeIndex: number): void;
    /**
     * To render legend symbols for chart and accumulation chart
     */
    protected renderSymbol(legendOption: LegendOptions, group: Element, axisIndex: number, rangeIndex: number): void;
    /**
     * To find legend rendering locations from legend options.
     * @private
     */
    getRenderPoint(legendOption: LegendOptions, start: GaugeLocation, textPadding: number, prevLegend: LegendOptions, rect: Rect, count: number, firstLegend: number): void;
    /**
     * To show or hide the legend on clicking the legend.
     * @return {void}
     */
    click(event: Event): void;
    /**
     * Set toggled legend styles.
     */
    private setStyles;
    /**
     * To get legend by index
     */
    private legendByIndex;
    /**
     * To change legend pages for chart and accumulation chart
     */
    protected changePage(event: Event, pageUp: boolean): void;
    /**
     * To find available width from legend x position.
     */
    private getAvailWidth;
    /**
     * To create legend rendering elements for chart and accumulation chart
     */
    private createLegendElements;
    /**
     * Method to append child element
     */
    private appendChildElement;
    /**
     * To find first valid legend text index for chart and accumulation chart
     */
    private findFirstLegendPosition;
    /**
     * To find legend bounds for accumulation chart.
     * @private
     */
    getLegendBounds(availableSize: Size, legendBounds: Rect, legend: LegendSettingsModel): void;
    /** @private */
    private subtractThickness;
    /**
     * To set bounds for chart and accumulation chart
     */
    protected setBounds(computedWidth: number, computedHeight: number, legend: LegendSettingsModel, legendBounds: Rect): void;
    /**
     * To find maximum column size for legend
     */
    private getMaxColumn;
    /**
     * To show or hide trimmed text tooltip for legend.
     * @return {void}
     * @private
     */
    move(event: Event): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the legend.
     * @return {void}
     * @private
     */
    destroy(circulargauge: CircularGauge): void;
}
/**
 * @private
 */
export  class Index {
    axisIndex: number;
    rangeIndex: number;
    isToggled: boolean;
    constructor(axisIndex: number, rangeIndex?: number, isToggled?: boolean);
}
/**
 * Class for legend options
 * @private
 */
export  class LegendOptions {
    render: boolean;
    text: string;
    originalText: string;
    fill: string;
    shape: GaugeShape;
    visible: boolean;
    textSize: Size;
    location: GaugeLocation;
    border: Border;
    shapeBorder: Border;
    shapeWidth: number;
    shapeHeight: number;
    rangeIndex?: number;
    axisIndex?: number;
    constructor(text: string, originalText: string, fill: string, shape: GaugeShape, visible: boolean, border: Border, shapeBorder: Border, shapeWidth: number, shapeHeight: number, rangeIndex?: number, axisIndex?: number);
}
//node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/model/base-model.d.ts
/**
 * Interface for a class Border
 */
export interface BorderModel {
    /**
     * The color of the border, which accepts value in hex, rgba as a valid CSS color string.
     */
    color?: string;
    /**
     * The width of the border in pixels.
     * @default 1
     */
    width?: number;
}
/**
 * Interface for a class Font
 */
export interface FontModel {
    /**
     * Font size for text.
     * @default '16px'
     */
    size?: string;
    /**
     * Color for text.
     */
    color?: string;
    /**
     * FontFamily for text.
     * @default 'segoe UI'
     */
    fontFamily?: string;
    /**
     * FontWeight for text.
     * @default 'Normal'
     */
    fontWeight?: string;
    /**
     * FontStyle for text.
     * @default 'Normal'
     */
    fontStyle?: string;
    /**
     * Opacity for text.
     * @default 1
     */
    opacity?: number;
}
/**
 * Interface for a class RangeTooltip
 */
export interface RangeTooltipModel {
    /**
     * The fill color of the range tooltip, which accepts value in hex, rgba as a valid CSS color string.
     * @default null
     */
    fill?: string;
    /**
     * Options to customize the tooltip text of range.
     */
    textStyle?: FontModel;
    /**
     * Format of the range tooltip content.
     * @default null
     */
    format?: string;
    /**
     * Custom template to format the  tooltip content. Use ${x} and ${y} as a placeholder text to display the corresponding data point.
     * @default null
     */
    template?: string;
    /**
     * If set true, range tooltip will animate, while moving from one point to another.
     * @default true
     */
    enableAnimation?: boolean;
    /**
     * Options to customize the border for range tooltip.
     */
    border?: BorderModel;
    /**
     * Options to show the range tooltip position on pointer.
     * @default false
     */
    showAtMousePosition?: boolean;
}
/**
 * Interface for a class AnnotationTooltip
 */
export interface AnnotationTooltipModel {
    /**
     * The fill color of the annotation tooltip, which accepts value in hex, rgba as a valid CSS color string.
     * @default null
     */
    fill?: string;
    /**
     * Options to customize the tooltip text of annotation.
     */
    textStyle?: FontModel;
    /**
     * Format of the annotation tooltip content.
     * @default null
     */
    format?: string;
    /**
     * Custom template to format the  tooltip content. Use ${x} and ${y} as a placeholder text to display the corresponding data point.
     * @default null
     */
    template?: string;
    /**
     * If set true, range and annotation tooltip will animate, while moving from one point to another.
     * @default true
     */
    enableAnimation?: boolean;
    /**
     * Options to customize the border for annotation tooltip.
     */
    border?: BorderModel;
}
/**
 * Interface for a class Margin
 */
export interface MarginModel {
    /**
     * Left margin in pixels.
     * @default 10
     */
    left?: number;
    /**
     * Right margin in pixels.
     * @default 10
     */
    right?: number;
    /**
     * Top margin in pixels.
     * @default 10
     */
    top?: number;
    /**
     * Bottom margin in pixels.
     * @default 10
     */
    bottom?: number;
}
/**
 * Interface for a class TooltipSettings
 */
export interface TooltipSettingsModel {
    /**
     * Enable / Disable the visibility of tooltip.
     * @default false
     */
    enable?: boolean;
    /**
     * The fill color of the tooltip, which accepts value in hex, rgba as a valid CSS color string.
     * @default null
     */
    fill?: string;
    /**
     * Options to customize the tooltip text.
     */
    textStyle?: FontModel;
    /**
     * Options to customize the range tooltip property.
     */
    rangeSettings?: RangeTooltipModel;
    /**
     * Options to customize the annotation tooltip property.
     */
    annotationSettings?: AnnotationTooltipModel;
    /**
     * Format of the tooltip content.
     * @default null
     */
    format?: string;
    /**
     * Custom template to format the tooltip content. Use ${x} and ${y} as a placeholder text to display the corresponding data point.
     * @default null
     */
    template?: string;
    /**
     * If set true, tooltip will animate, while moving from one point to another.
     * @default true
     */
    enableAnimation?: boolean;
    /**
     * Options to customize the border for tooltip.
     */
    border?: BorderModel;
    /**
     * Options to show the tooltip position on pointer
     * @default false
     */
    showAtMousePosition?: boolean;
    /**
     * Option to select the tooltip from Range, Annotation, Pointer
     * @default Pointer
     */
    type?: string[];
}
//node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/model/base.d.ts
/**
 * Configures the borders in circular gauge.
 */
export  class Border extends base.ChildProperty<Border> {
    /**
     * The color of the border, which accepts value in hex, rgba as a valid CSS color string.
     */
    color: string;
    /**
     * The width of the border in pixels.
     * @default 1
     */
    width: number;
}
/**
 * Configures the fonts in circular gauge.
 */
export  class Font extends base.ChildProperty<Font> {
    /**
     * Font size for text.
     * @default '16px'
     */
    size: string;
    /**
     * Color for text.
     */
    color: string;
    /**
     * FontFamily for text.
     * @default 'segoe UI'
     */
    fontFamily: string;
    /**
     * FontWeight for text.
     * @default 'Normal'
     */
    fontWeight: string;
    /**
     * FontStyle for text.
     * @default 'Normal'
     */
    fontStyle: string;
    /**
     * Opacity for text.
     * @default 1
     */
    opacity: number;
}
/**
 * To set tooltip properties for range tooltip.
 */
export  class RangeTooltip extends base.ChildProperty<RangeTooltip> {
    /**
     * The fill color of the range tooltip, which accepts value in hex, rgba as a valid CSS color string.
     * @default null
     */
    fill: string;
    /**
     * Options to customize the tooltip text of range.
     */
    textStyle: FontModel;
    /**
     * Format of the range tooltip content.
     * @default null
     */
    format: string;
    /**
     * Custom template to format the  tooltip content. Use ${x} and ${y} as a placeholder text to display the corresponding data point.
     * @default null
     */
    template: string;
    /**
     * If set true, range tooltip will animate, while moving from one point to another.
     * @default true
     */
    enableAnimation: boolean;
    /**
     * Options to customize the border for range tooltip.
     */
    border: BorderModel;
    /**
     * Options to show the range tooltip position on pointer.
     * @default false
     */
    showAtMousePosition: boolean;
}
/**
 * To set tooltip properties for annotation tooltip.
 */
export  class AnnotationTooltip extends base.ChildProperty<AnnotationTooltip> {
    /**
     * The fill color of the annotation tooltip, which accepts value in hex, rgba as a valid CSS color string.
     * @default null
     */
    fill: string;
    /**
     * Options to customize the tooltip text of annotation.
     */
    textStyle: FontModel;
    /**
     * Format of the annotation tooltip content.
     * @default null
     */
    format: string;
    /**
     * Custom template to format the  tooltip content. Use ${x} and ${y} as a placeholder text to display the corresponding data point.
     * @default null
     */
    template: string;
    /**
     * If set true, range and annotation tooltip will animate, while moving from one point to another.
     * @default true
     */
    enableAnimation: boolean;
    /**
     * Options to customize the border for annotation tooltip.
     */
    border: BorderModel;
}
/**
 * Configures the margin of circular gauge.
 */
export  class Margin extends base.ChildProperty<Margin> {
    /**
     * Left margin in pixels.
     * @default 10
     */
    left: number;
    /**
     * Right margin in pixels.
     * @default 10
     */
    right: number;
    /**
     * Top margin in pixels.
     * @default 10
     */
    top: number;
    /**
     * Bottom margin in pixels.
     * @default 10
     */
    bottom: number;
}
/**
 * Configures the tooltip in circular gauge.
 */
export  class TooltipSettings extends base.ChildProperty<TooltipSettings> {
    /**
     * Enable / Disable the visibility of tooltip.
     * @default false
     */
    enable: boolean;
    /**
     * The fill color of the tooltip, which accepts value in hex, rgba as a valid CSS color string.
     * @default null
     */
    fill: string;
    /**
     * Options to customize the tooltip text.
     */
    textStyle: FontModel;
    /**
     * Options to customize the range tooltip property.
     */
    rangeSettings: RangeTooltipModel;
    /**
     * Options to customize the annotation tooltip property.
     */
    annotationSettings: AnnotationTooltipModel;
    /**
     * Format of the tooltip content.
     * @default null
     */
    format: string;
    /**
     * Custom template to format the tooltip content. Use ${x} and ${y} as a placeholder text to display the corresponding data point.
     * @default null
     */
    template: string;
    /**
     * If set true, tooltip will animate, while moving from one point to another.
     * @default true
     */
    enableAnimation: boolean;
    /**
     * Options to customize the border for tooltip.
     */
    border: BorderModel;
    /**
     * Options to show the tooltip position on pointer
     * @default false
     */
    showAtMousePosition: boolean;
    /**
     * Option to select the tooltip from Range, Annotation, Pointer
     * @default Pointer
     */
    type: string[];
}
//node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/model/constants.d.ts
/**
 * Specifies the gauge constant value
 */
/** @private */
export  const loaded: string;
/** @private */
export  const load: string;
/** @private */
export  const animationComplete: string;
/** @private */
export  const axisLabelRender: string;
/** @private */
export  const radiusCalculate: string;
/** @private */
export  const tooltipRender: string;
/** @private */
export  const annotationRender: string;
/** @private */
export  const gaugeMouseMove: string;
/** @private */
export  const gaugeMouseLeave: string;
/** @private */
export  const gaugeMouseDown: string;
/** @private */
export  const gaugeMouseUp: string;
/** @private */
export  const dragStart: string;
/** @private */
export  const dragMove: string;
/** @private */
export  const dragEnd: string;
/** @private */
export  const resized: string;
//node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/model/interface.d.ts
/**
 * interface doc
 */
/**
 * Specifies Circular-Gauge Events
 */
export interface ICircularGaugeEventArgs {
    /**
     * name of the event
     */
    name: string;
    /**
     * to cancel the event
     */
    cancel: boolean;
}
/**
 * Specifies Loaded event arguments for circular gauge.
 */
export interface ILoadedEventArgs extends ICircularGaugeEventArgs {
    /**
     * gauge event argument
     */
    gauge: CircularGauge;
}
/**
 * Specifies AnimationComplete event arguments for circular gauge.
 */
export interface IAnimationCompleteEventArgs extends ICircularGaugeEventArgs {
    /**
     * axis event argument
     */
    axis: Axis;
    /**
     * pointer event argument
     */
    pointer: Pointer;
}
/**
 * Specifies AxisLabelRender event arguments for circular gauge.
 * @deprecated
 */
export interface IAxisLabelRenderEventArgs extends ICircularGaugeEventArgs {
    /**
     * axis event argument
     */
    axis?: Axis;
    /**
     * text event argument
     */
    text: string;
    /**
     * value event argument
     */
    value: number;
}
/**
 * Specifies radiusRender event arguments for circular gauge
 */
export interface IRadiusCalculateEventArgs extends ICircularGaugeEventArgs {
    /**
     * Instance of Circular gauge component
     */
    gauge?: CircularGauge;
    /**
     * current radius event argument
     */
    currentRadius: number;
    /**
     * axis event argument
     */
    axis?: Axis;
    /**
     * midpoint event argument
     */
    midPoint: GaugeLocation;
}
/**
 * Specifies TooltipRender event arguments for circular gauge.
 */
export interface ITooltipRenderEventArgs extends ICircularGaugeEventArgs {
    /**
     * Instance of linear gauge component.
     */
    gauge?: CircularGauge;
    /**
     * Tooltip event
     */
    event: PointerEvent;
    /**
     * Render the tooltip content
     */
    content?: string;
    /**
     * Tooltip configuration
     */
    tooltip?: TooltipSettings;
    /**
     * Render the tooltip location
     */
    location?: GaugeLocation;
    /**
     * event argument axis
     */
    axis?: Axis;
    /**
     * event argument pointer
     */
    pointer?: Pointer;
    /**
     * event argument annotation
     */
    annotation?: Annotation;
    /**
     * event argument range
     */
    range?: Range;
    /**
     * event tooltip argument as append to body
     */
    appendInBodyTag: Boolean;
}
/**
 * Specifies AnnotationRender event arguments for circular gauge.
 */
export interface IAnnotationRenderEventArgs extends ICircularGaugeEventArgs {
    /**
     * content event argument
     */
    content?: string;
    /**
     * textStyle event argument
     */
    textStyle?: FontModel;
    /**
     * axis event argument
     */
    axis?: Axis;
    /**
     * annotation event argument
     */
    annotation: Annotation;
}
/**
 * Specifies DragStart, DragMove and DragEnd events arguments for circular gauge.
 */
export interface IPointerDragEventArgs {
    /**
     * name event argument
     */
    name: string;
    /**
     * axis event argument
     */
    axis?: Axis;
    /**
     * pointer event argument
     */
    pointer?: Pointer;
    /**
     * currentValue event argument
     */
    currentValue: number;
    /**
     * previousValue event argument
     */
    previousValue?: number;
    /**
     * index of the current pointer argument
     */
    pointerIndex: number;
    /**
     * index of the current pointer`s axis argument
     */
    axisIndex: number;
}
/**
 * Specifies Resize event arguments for circular gauge.
 */
export interface IResizeEventArgs {
    /**
     * name event argument
     */
    name: string;
    /**
     * previousSize event argument
     */
    previousSize: Size;
    /**
     * currentSize event argument
     */
    currentSize: Size;
    /**
     * gauge event argument
     */
    gauge?: CircularGauge;
}
/**
 * Specifies Mouse events arguments for circular gauge.
 */
export interface IMouseEventArgs extends ICircularGaugeEventArgs {
    /**
     * target event argument
     */
    target: Element;
    /**
     * x event argument
     */
    x: number;
    /**
     * y event argument
     */
    y: number;
}
/**
 * Specifies visible point
 */
export interface IVisiblePointer {
    /**
     * axisIndex event argument
     */
    axisIndex?: number;
    /**
     * pointerIndex event argument
     */
    pointerIndex?: number;
}
/**
 * Specifies font mapping
 */
export interface IFontMapping {
    /**
     * size event argument
     */
    size?: string;
    /**
     * color event argument
     */
    color?: string;
    /**
     * fontWeight event argument
     */
    fontWeight?: string;
    /**
     * fontStyle event argument
     */
    fontStyle?: string;
    /**
     * fontFamily event argument
     */
    fontFamily?: string;
}
export interface IThemeStyle {
    backgroundColor: string;
    titleFontColor: string;
    tooltipFillColor: string;
    tooltipFontColor: string;
    lineColor: string;
    labelColor: string;
    majorTickColor: string;
    minorTickColor: string;
    pointerColor: string;
    needleColor: string;
    needleTailColor: string;
    capColor: string;
    fontFamily?: string;
    fontSize?: string;
    labelFontFamily?: string;
    tooltipFillOpacity?: number;
    tooltipTextOpacity?: number;
}
export interface ILegendRenderEventArgs extends ICircularGaugeEventArgs {
    /** Defines the current legend shape */
    shape: GaugeShape;
    /** Defines the current legend fill color */
    fill: string;
    /** Defines the current legend text */
    text: string;
}
export interface ILegendRegions {
    rect: Rect;
    index: number;
}
//node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/model/theme.d.ts
/**
 * Specifies gauge Themes
 */
export  namespace Theme {
    /** @private */
    let axisLabelFont: IFontMapping;
    let legendLabelFont: IFontMapping;
}
/** @private */
export  function getRangePalette(theme: string): string[];
/** @private */
export  function getThemeStyle(theme: GaugeTheme): IThemeStyle;
//node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/user-interaction/tooltip.d.ts
/**
 * Tooltip Module handles the tooltip of the circular gauge
 */
export  class GaugeTooltip {
    private gauge;
    private tooltipEle;
    private currentAxis;
    private tooltip;
    private currentPointer;
    private currentRange;
    private currentAnnotation;
    private borderStyle;
    private textStyle;
    private svgTooltip;
    private tooltipId;
    private gaugeId;
    private tooltipPosition;
    private arrowInverted;
    private tooltipRect;
    private clearTimeout;
    private pointerEle;
    private annotationTargetElement;
    /**
     * Constructor for Tooltip module.
     * @private.
     */
    constructor(gauge: CircularGauge);
    /**
     * Method to render the tooltip for circular gauge.
     */
    renderTooltip(e: PointerEvent): void;
    /**
     * Method to create tooltip svg element.
     */
    private svgTooltipCreate;
    /**
     * Method to create or modify tolltip element.
     */
    private tooltipElement;
    /**
     * Method to get parent annotation element.
     */
    private checkParentAnnotationId;
    /**
     * Method to apply label rounding places.
     */
    private roundedValue;
    /**
     * Method to find the position of the tooltip anchor for circular gauge.
     */
    private findPosition;
    removeTooltip(): void;
    mouseUpHandler(e: PointerEvent): void;
    /**
     * To bind events for tooltip module
     */
    addEventListener(): void;
    /**
     * To unbind events for tooltip module
     */
    removeEventListener(): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the tooltip.
     * @return {void}
     * @private
     */
    destroy(gauge: CircularGauge): void;
}
//node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/utils/enum.d.ts
/**
 * Defines position of the axis ticks / labels. They are
 * * inside
 * * outside
 * @private
 */
export  type Position = 
/**  Inside position of the tick line / axis label. */
'Inside' | 
/**  Outside position of the tick line / axis label. */
'Outside';
/**
 * Defines Pointer type of the axis. They are
 * * needle
 * * marker
 * * rangeBar
 * @private
 */
export  type PointerType = 
/**  Specifies the pointer type as needle. */
'Needle' | 
/**  Specifies the pointer type as marker. */
'Marker' | 
/**  Specifies the pointer type as range bar. */
'RangeBar';
/**
 * Defines Direction of the gauge. They are
 * * ClockWise
 * * AntiClockWise
 * @private
 */
export  type GaugeDirection = 
/** Renders the axis in clock wise direction. */
'ClockWise' | 
/** Renders the axis in anti-clock wise direction. */
'AntiClockWise';
/**
 * Defines Theme of the gauge. They are
 * * Material
 * * Fabric
 * @private
 */
export  type GaugeTheme = 
/**  Render a gauge with Material theme. */
'Material' | 
/**  Render a gauge with Bootstrap theme. */
'Bootstrap' | 
/**  Render a gauge with Highcontrast light theme. */
'HighContrastLight' | 
/**  Render a gauge with Fabric theme. */
'Fabric' | 
/**  Render a chart with Material Dark theme. */
'MaterialDark' | 
/**  Render a chart with Fabric Dark theme. */
'FabricDark' | 
/**  Render a chart with Highcontrast Dark theme. */
'HighContrast' | 
/**  Render a chart with Bootstrap Dark theme. */
'BootstrapDark' | 
/** Render a chart with Bootstrap 4 theme. */
'Bootstrap4';
/**
 * Defines Hidden label of the axis. They are
 * * First
 * * Last
 * @private
 */
export  type HiddenLabel = 
/**  Hides the 1st label on intersect. */
'First' | 
/**  Hides the last label on intersect. */
'Last' | 
/**  Places both the labels. */
'None';
/**
 * Defines the shape of marker. They are
 * * circle - Renders a circle.
 * * rectangle - Renders a rectangle.
 * * triangle - Renders a triangle.
 * * diamond - Renders a diamond.
 * * cross - Renders a cross.
 * * horizontalLine - Renders a horizontalLine.
 * * verticalLine - Renders a verticalLine.
 * * pentagon- Renders a pentagon.
 * * invertedTriangle - Renders a invertedTriangle.
 * * image - Renders a image.
 */
export  type GaugeShape = 
/** Render a circle. */
'Circle' | 
/** Render a Rectangle. */
'Rectangle' | 
/** Render a Triangle. */
'Triangle' | 
/** Render a Diamond. */
'Diamond' | 
/** Render a InvertedTriangle. */
'InvertedTriangle' | 
/** Render a Image. */
'Image';
export  type LegendPosition = 
/** Places the legend on the top of circular gauge. */
'Top' | 
/** Places the legend on the left of circular gauge. */
'Left' | 
/** Places the legend on the bottom of circular gauge. */
'Bottom' | 
/** Places the legend on the right of circular gauge. */
'Right' | 
/** Places the legend on the custom x and y location */
'Custom' | 
/** Places the legend based on the available space */
'Auto';
export  type Alignment = 
/** Places the legend on the near of the circular gauge */
'Near' | 
/** Places the legend on the center of the circular gauge */
'Center' | 
/** Places the legend on the far on the circular gauge */
'Far';
//node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/utils/helper.d.ts
/**
 * Function to measure the height and width of the text.
 * @param  {string} text
 * @param  {FontModel} font
 * @param  {string} id
 * @returns Size
 * @private
 */
export  function measureText(text: string, font: FontModel): Size;
/**
 * Function to find number from string
 * * @returns number
 * @private
 */
export  function toPixel(value: string, maxDimension: number): number;
/**
 * Function to get the style from FontModel.
 * @returns string
 * @private
 */
export  function getFontStyle(font: FontModel): string;
/**
 * Function to set style to the element.
 * @private
 */
export  function setStyles(element: HTMLElement, fill: string, border: BorderModel): void;
/**
 * Function to measure the element rect.
 * @returns ClientRect
 * @private
 */
export  function measureElementRect(element: HTMLElement): ClientRect;
/**
 * Function to convert the number from string.
 * @returns number
 * @private
 */
export  function stringToNumber(value: string, containerSize: number): number;
/**
 * Function to create the text element.
 * @returns Element
 * @private
 */
export  function textElement(options: TextOption, font: FontModel, color: string, parent: HTMLElement | Element, styles?: string): Element;
/**
 * Function to append the path to the element.
 * @returns Element
 * @private
 */
export  function appendPath(options: PathOption, element: Element, gauge: CircularGauge, functionName?: string): Element;
/**
 * Function to calculate the sum of array values.
 * @returns number
 * @private
 */
export  function calculateSum(from: number, to: number, values: number[]): number;
/**
 * Function to calculate the value for linear animation effect
 * @param currentTime
 * @param startValue
 * @param endValue
 * @param duration
 * @private
 */
export  function linear(currentTime: number, startValue: number, endValue: number, duration: number): number;
/**
 * Function to get the angle from value for circular gauge.
 * @returns number
 * @private
 */
export  function getAngleFromValue(value: number, maximumValue: number, minimumValue: number, startAngle: number, endAngle: number, isClockWise: boolean): number;
/**
 * Function to get the degree for circular gauge.
 * @returns number
 * @private
 */
export  function getDegree(startAngle: number, endAngle: number): number;
/**
 * Function to get the value from angle for circular gauge.
 * @returns number
 * @private
 */
export  function getValueFromAngle(angle: number, maximumValue: number, minimumValue: number, startAngle: number, endAngle: number, isClockWise: boolean): number;
/**
 * Function to check whether it's a complete circle for circular gauge.
 * @returns boolean
 * @private
 */
export  function isCompleteAngle(startAngle: number, endAngle: number): boolean;
/**
 * Function to get angle from location for circular gauge.
 * @returns number
 * @private
 */
export  function getAngleFromLocation(center: GaugeLocation, point: GaugeLocation): number;
/**
 * Function to get the location from angle for circular gauge.
 * @returns GaugeLocation
 * @private
 */
export  function getLocationFromAngle(degree: number, radius: number, center: GaugeLocation): GaugeLocation;
/**
 * Function to get the path direction of the circular gauge.
 * @returns string
 * @private
 */
export  function getPathArc(center: GaugeLocation, start: number, end: number, radius: number, startWidth?: number, endWidth?: number): string;
/**
 * Function to get the range path direction of the circular gauge.
 * @returns string
 * @private
 */
export  function getRangePath(start: GaugeLocation, end: GaugeLocation, innerStart: GaugeLocation, innerEnd: GaugeLocation, radius: number, startRadius: number, endRadius: number, clockWise: number): string;
/**
 * Function to get the rounded path direction of the circular gauge.
 * @returns string
 * @private
 */
export  function getRoundedPathArc(center: GaugeLocation, actualStart: number, actualEnd: number, oldStart: number, oldEnd: number, radius: number, startWidth?: number, endWidth?: number): string;
/**
 * Function to get the rounded range path direction of the circular gauge.
 * @returns string
 * @private
 */
export  function getRoundedPath(start: GaugeLocation, end: GaugeLocation, outerOldEnd: GaugeLocation, innerOldEnd: GaugeLocation, outerOldStart: GaugeLocation, innerOldStart: GaugeLocation, innerStart: GaugeLocation, innerEnd: GaugeLocation, radius: number, startRadius: number, endRadius: number, clockWise: number): string;
/**
 * Function to calculate the complete path arc of the circular gauge.
 * @returns string
 * @private
 */
export  function getCompleteArc(center: GaugeLocation, start: number, end: number, radius: number, innerRadius: number): string;
/**
 * Function to get the circular path direction of the circular gauge.
 * @returns string
 * @private
 */
export  function getCirclePath(start: GaugeLocation, end: GaugeLocation, radius: number, clockWise: number): string;
/**
 * Function to get the complete path direction of the circular gauge.
 * @returns string
 * @private
 */
export  function getCompletePath(center: GaugeLocation, start: GaugeLocation, end: GaugeLocation, radius: number, innerStart: GaugeLocation, innerEnd: GaugeLocation, innerRadius: number, clockWise: number): string;
/**
 * Function to get element from id.
 * @returns Element
 * @private
 */
export  function getElement(id: string): Element;
/**
 * Function to compile the template function for circular gauge.
 * @returns Function
 * @private
 */
export  function getTemplateFunction(template: string): Function;
/**
 * Function to remove the element from id.
 * @private
 */
export  function removeElement(id: string): void;
/**
 * Function to get current point for circular gauge using element id.
 * @returns IVisiblePointer
 * @private
 */
export  function getPointer(targetId: string, gauge: CircularGauge): IVisiblePointer;
export  function getElementSize(template: string, gauge: CircularGauge, parent: HTMLElement): Size;
/**
 * Function to get the mouse position
 * @param pageX
 * @param pageY
 * @param element
 */
export  function getMousePosition(pageX: number, pageY: number, element: Element): GaugeLocation;
/**
 * Function to convert the label using format for cirular gauge.
 * @returns string
 * @private
 */
export  function getLabelFormat(format: string): string;
/**
 * Function to calculate the marker shape for circular gauge.
 * @returns PathOption
 * @private
 */
export  function calculateShapes(location: GaugeLocation, shape: string, size: Size, url: string, options: PathOption): PathOption;
/**
 * Function to get range color from value for circular gauge.
 * @returns string
 * @private
 */
export  function getRangeColor(value: number, ranges: Range[], color: string): string;
/** @private */
export  class CustomizeOption {
    id: string;
    constructor(id?: string);
}
/** @private */
export  class PathOption extends CustomizeOption {
    opacity: number;
    fill: string;
    stroke: string;
    ['stroke-width']: number;
    ['stroke-dasharray']: string;
    d: string;
    transform: string;
    style: string;
    constructor(id: string, fill: string, width: number, color: string, opacity?: number, dashArray?: string, d?: string, transform?: string, style?: string);
}
/** @private */
export  class RectOption extends CustomizeOption {
    x: number;
    y: number;
    height: number;
    width: number;
    opacity: number;
    fill: string;
    stroke: string;
    ['stroke-width']: number;
    constructor(id: string, fill: string, border: BorderModel, opacity: number, rect: Rect);
}
/**
 * Internal class size
 */
export  class Size {
    /**
     * Specifies the height.
     */
    height: number;
    /**
     * Specifies the width.
     */
    width: number;
    constructor(width: number, height: number);
}
/**
 * Internal use of circular gauge location
 */
export  class GaugeLocation {
    /**
     * To specify x value
     */
    x: number;
    /**
     * To specify y value
     */
    y: number;
    constructor(x: number, y: number);
}
/** @private */
export  class Rect {
    x: number;
    y: number;
    height: number;
    width: number;
    constructor(x: number, y: number, width: number, height: number);
}
/** @private */
export  function textTrim(maxWidth: number, text: string, font: FontModel): string;
/** @private */
export  function showTooltip(text: string, x: number, y: number, areaWidth: number, id: string, element: Element): void;
/** @private */
export  class TextOption extends CustomizeOption {
    anchor: string;
    text: string;
    transform: string;
    x: number;
    y: number;
    baseLine: string;
    constructor(id?: string, x?: number, y?: number, anchor?: string, text?: string, transform?: string, baseLine?: string);
}
/** @private */
export  class VisibleLabels {
    text: string;
    value: number;
    size: Size;
    constructor(text: string, value: number, size?: Size);
}
//node_modules/@syncfusion/ej2-circulargauge/src/index.d.ts
/**
 * Circular Gauge component exported.
 */
 }
export namespace compression { 

//node_modules/@syncfusion/ej2-compression/src/compression-writer.d.ts
/**
 * represent compression stream writer
 * ```typescript
 * let compressedWriter = new CompressedStreamWriter();
 * let text: string = 'Hello world!!!';
 * compressedWriter.write(text, 0, text.length);
 * compressedWriter.close();
 * ```
 */
export  class CompressedStreamWriter {
    private static isHuffmanTreeInitiated;
    private stream;
    private pendingBuffer;
    private pendingBufLength;
    private pendingBufCache;
    private pendingBufBitsInCache;
    private treeLiteral;
    private treeDistances;
    private treeCodeLengths;
    private bufferPosition;
    private arrLiterals;
    private arrDistances;
    private extraBits;
    private currentHash;
    private hashHead;
    private hashPrevious;
    private matchStart;
    private matchLength;
    private matchPrevAvail;
    private blockStart;
    private stringStart;
    private lookAhead;
    private dataWindow;
    private inputBuffer;
    private totalBytesIn;
    private inputOffset;
    private inputEnd;
    private windowSize;
    private windowMask;
    private hashSize;
    private hashMask;
    private hashShift;
    private maxDist;
    private checkSum;
    private noWrap;
    /**
     * get compressed data
     */
    readonly compressedData: Uint8Array[];
    readonly getCompressedString: string;
    /**
     * Initializes compressor and writes ZLib header if needed.
     * @param {boolean} noWrap - optional if true, ZLib header and checksum will not be written.
     */
    constructor(noWrap?: boolean);
    /**
     * Compresses data and writes it to the stream.
     * @param {Uint8Array} data - data to compress
     * @param {number} offset - offset in data
     * @param {number} length - length of the data
     * @returns {void}
     */
    write(data: Uint8Array | string, offset: number, length: number): void;
    /**
     * write ZLib header to the compressed data
     * @return {void}
     */
    writeZLibHeader(): void;
    /**
     *  Write Most Significant Bytes in to stream
     * @param {number} s - check sum value
     */
    pendingBufferWriteShortBytes(s: number): void;
    private compressData;
    private compressSlow;
    private discardMatch;
    private matchPreviousAvailable;
    private matchPreviousBest;
    private lookAheadCompleted;
    private huffmanIsFull;
    private fillWindow;
    private slideWindow;
    private insertString;
    private findLongestMatch;
    private updateHash;
    private huffmanTallyLit;
    private huffmanTallyDist;
    private huffmanFlushBlock;
    private huffmanFlushStoredBlock;
    private huffmanLengthCode;
    private huffmanDistanceCode;
    private huffmanSendAllTrees;
    private huffmanReset;
    private huffmanCompressBlock;
    /**
     * write bits in to internal buffer
     * @param {number} b - source of bits
     * @param {number} count - count of bits to write
     */
    pendingBufferWriteBits(b: number, count: number): void;
    private pendingBufferFlush;
    private pendingBufferFlushBits;
    private pendingBufferWriteByteBlock;
    private pendingBufferWriteShort;
    private pendingBufferAlignToByte;
    /**
     * Huffman Tree literal calculation
     * @private
     */
    static initHuffmanTree(): void;
    /**
     * close the stream and write all pending buffer in to stream
     * @returns {void}
     */
    close(): void;
    /**
     * release allocated un-managed resource
     * @returns {void}
     */
    destroy(): void;
}
/**
 * represent the Huffman Tree
 */
export  class CompressorHuffmanTree {
    private codeFrequency;
    private codes;
    private codeLength;
    private lengthCount;
    private codeMinCount;
    private codeCount;
    private maxLength;
    private writer;
    private static reverseBits;
    static huffCodeLengthOrders: number[];
    readonly treeLength: number;
    readonly codeLengths: Uint8Array;
    readonly codeFrequencies: Uint16Array;
    /**
     * Create new Huffman Tree
     * @param {CompressedStreamWriter} writer instance
     * @param {number} elementCount - element count
     * @param {number} minCodes - minimum count
     * @param {number} maxLength - maximum count
     */
    constructor(writer: CompressedStreamWriter, elementCount: number, minCodes: number, maxLength: number);
    setStaticCodes(codes: Int16Array, lengths: Uint8Array): void;
    /**
     * reset all code data in tree
     * @returns {void}
     */
    reset(): void;
    /**
     * write code to the compressor output stream
     * @param {number} code - code to be written
     * @returns {void}
     */
    writeCodeToStream(code: number): void;
    /**
     * calculate code from their frequencies
     * @returns {void}
     */
    buildCodes(): void;
    static bitReverse(value: number): number;
    /**
     * calculate length of compressed data
     * @returns {number}
     */
    getEncodedLength(): number;
    /**
     * calculate code frequencies
     * @param {CompressorHuffmanTree} blTree
     * @returns {void}
     */
    calculateBLFreq(blTree: CompressorHuffmanTree): void;
    /**
     * @param {CompressorHuffmanTree} blTree - write tree to output stream
     * @returns {void}
     */
    writeTree(blTree: CompressorHuffmanTree): void;
    /**
     * Build huffman tree
     * @returns {void}
     */
    buildTree(): void;
    private constructHuffmanTree;
    private buildLength;
    private recreateTree;
    private calculateOptimalCodeLength;
}
/**
 * Checksum calculator, based on Adler32 algorithm.
 */
export  class ChecksumCalculator {
    private static checkSumBitOffset;
    private static checksumBase;
    private static checksumIterationCount;
    /**
     * Updates checksum by calculating checksum of the
     * given buffer and adding it to current value.
     * @param {number} checksum - current checksum.
     * @param {Uint8Array} buffer - data byte array.
     * @param {number} offset - offset in the buffer.
     * @param {number} length - length of data to be used from the stream.
     * @returns {number}
     */
    static checksumUpdate(checksum: number, buffer: Uint8Array, offset: number, length: number): number;
}
//node_modules/@syncfusion/ej2-compression/src/index.d.ts
/**
 * export ZipArchive class
 */
//node_modules/@syncfusion/ej2-compression/src/zip-archive.d.ts
/**
 * class provide compression library
 * ```typescript
 * let archive = new ZipArchive();
 * archive.compressionLevel = 'Normal';
 * let archiveItem = new ZipArchiveItem(archive, 'directoryName\fileName.txt');
 * archive.addItem(archiveItem);
 * archive.save(fileName.zip);
 * ```
 */
export  class ZipArchive {
    private files;
    private level;
    /**
     * gets compression level
     */
    /**
    * sets compression level
    */
    compressionLevel: CompressionLevel;
    /**
     * gets items count
     */
    readonly length: number;
    /**
     * constructor for creating ZipArchive instance
     */
    constructor();
    /**
     * add new item to archive
     * @param {ZipArchiveItem} item - item to be added
     * @returns {void}
     */
    addItem(item: ZipArchiveItem): void;
    /**
     * add new directory to archive
     * @param directoryName directoryName to be created
     * @returns {void}
     */
    addDirectory(directoryName: string): void;
    /**
     * gets item at specified index
     * @param {number} index - item index
     * @returns {ZipArchiveItem}
     */
    getItem(index: number): ZipArchiveItem;
    /**
     * determines whether an element is in the collection
     * @param {string | ZipArchiveItem} item - item to search
     * @returns {boolean}
     */
    contains(item: string | ZipArchiveItem): boolean;
    /**
     * save archive with specified file name
     * @param {string} fileName save archive with specified file name
     * @returns {Promise<ZipArchive>}
     */
    save(fileName: string): Promise<ZipArchive>;
    /**
     * Save archive as blob
     * @return {Promise<Blob>}
     */
    saveAsBlob(): Promise<Blob>;
    private saveInternal;
    /**
     * release allocated un-managed resource
     * @returns {void}
     */
    destroy(): void;
    private getCompressedData;
    private compressData;
    private constructZippedObject;
    private writeHeader;
    private writeZippedContent;
    private writeCentralDirectory;
    private writeFooter;
    private getArrayBuffer;
    private getBytes;
    private getModifiedTime;
    private getModifiedDate;
    private calculateCrc32Value;
    /**
     * construct cyclic redundancy code table
     * @private
     */
    static initCrc32Table(): void;
}
/**
 * Class represent unique ZipArchive item
 * ```typescript
 * let archiveItem = new ZipArchiveItem(archive, 'directoryName\fileName.txt');
 * ```
 */
export  class ZipArchiveItem {
    data: Blob | ArrayBuffer;
    private fileName;
    /**
     * Get the name of archive item
     * @returns string
     */
    /**
    * Set the name of archive item
    * @param  {string} value
    */
    name: string;
    /**
     * constructor for creating {ZipArchiveItem} instance
     * @param {Blob|ArrayBuffer} data file data
     * @param {itemName} itemName absolute file path
     */
    constructor(data: Blob | ArrayBuffer, itemName: string);
    /**
     * release allocated un-managed resource
     * @returns {void}
     */
    destroy(): void;
}
export interface CompressedData {
    fileName: string;
    compressedData: Uint8Array[] | string;
    uncompressedDataSize: number;
    compressedSize: number;
    crc32Value: number;
    compressionType: string;
    isDirectory: boolean;
}
export interface ZippedObject {
    localHeader: string;
    centralDir: string;
    compressedData: CompressedData;
}
/**
 * Compression level.
 */
export  type CompressionLevel = 'NoCompression' | 'Normal';
 }
export namespace data { 

//node_modules/@syncfusion/ej2-data/src/adaptors.d.ts
/**
 * Adaptors are specific data source type aware interfaces that are used by DataManager to communicate with DataSource.
 * This is the base adaptor class that other adaptors can extend.
 * @hidden
 */
export  class Adaptor {
    /**
     * Specifies the datasource option.
     * @default null
     */
    dataSource: DataOptions;
    updateType: string;
    updateKey: string;
    /**
     * It contains the datamanager operations list like group, searches, etc.,
     * @default null
     * @hidden
     */
    pvt: PvtOptions;
    /**
     * Constructor for Adaptor class
     * @param  {DataOptions} ds?
     * @hidden
     * @returns aggregates
     */
    constructor(ds?: DataOptions);
    protected options: RemoteOptions;
    /**
     * Returns the data from the query processing.
     * @param  {Object} data
     * @param  {DataOptions} ds?
     * @param  {Query} query?
     * @param  {XMLHttpRequest} xhr?
     * @returns Object
     */
    processResponse(data: Object, ds?: DataOptions, query?: Query, xhr?: XMLHttpRequest): Object;
    /**
     * Specifies the type of adaptor.
     * @default Adaptor
     */
    type: Object;
}
/**
 * JsonAdaptor is used to process JSON data. It contains methods to process the given JSON data based on the queries.
 * @hidden
 */
export  class JsonAdaptor extends Adaptor {
    /**
     * Process the JSON data based on the provided queries.
     * @param  {DataManager} dataManager
     * @param  {Query} query
     * @returns Object
     */
    processQuery(dataManager: DataManager, query: Query): Object;
    /**
     * Performs batch update in the JSON array which add, remove and update records.
     * @param  {DataManager} dm
     * @param  {CrudOptions} changes
     * @param  {RemoteArgs} e
     */
    batchRequest(dm: DataManager, changes: CrudOptions, e: RemoteArgs): CrudOptions;
    /**
     * Performs filter operation with the given data and where query.
     * @param  {Object[]} ds
     * @param  {{validate:Function}} e
     */
    onWhere(ds: Object[], e: {
        validate: Function;
    }): Object[];
    /**
     * Returns aggregate function based on the aggregate type.
     * @param  {Object[]} ds
     * @param  {{field:string} e
     * @param  {string}} type
     */
    onAggregates(ds: Object[], e: {
        field: string;
        type: string;
    }): Function;
    /**
     * Performs search operation based on the given query.
     * @param  {Object[]} ds
     * @param  {QueryOptions} e
     */
    onSearch(ds: Object[], e: QueryOptions): Object[];
    /**
     * Sort the data with given direction and field.
     * @param  {Object[]} ds
     * @param  {{comparer:(a:Object} e
     * @param  {Object} b
     */
    onSortBy(ds: Object[], e: {
        comparer: (a: Object, b: Object) => number;
        fieldName: string;
    }, query: Query): Object[];
    /**
     * Group the data based on the given query.
     * @param  {Object[]} ds
     * @param  {QueryOptions} e
     * @param  {Query} query
     */
    onGroup(ds: Object[], e: QueryOptions, query: Query): Object[];
    /**
     * Retrieves records based on the given page index and size.
     * @param  {Object[]} ds
     * @param  {{pageSize:number} e
     * @param  {number}} pageIndex
     * @param  {Query} query
     */
    onPage(ds: Object[], e: {
        pageSize: number;
        pageIndex: number;
    }, query: Query): Object[];
    /**
     * Retrieves records based on the given start and end index from query.
     * @param  {Object[]} ds
     * @param  {{start:number} e
     * @param  {number}} end
     */
    onRange(ds: Object[], e: {
        start: number;
        end: number;
    }): Object[];
    /**
     * Picks the given count of records from the top of the datasource.
     * @param  {Object[]} ds
     * @param  {{nos:number}} e
     */
    onTake(ds: Object[], e: {
        nos: number;
    }): Object[];
    /**
     * Skips the given count of records from the data source.
     * @param  {Object[]} ds
     * @param  {{nos:number}} e
     */
    onSkip(ds: Object[], e: {
        nos: number;
    }): Object[];
    /**
     * Selects specified columns from the data source.
     * @param  {Object[]} ds
     * @param  {{fieldNames:string}} e
     */
    onSelect(ds: Object[], e: {
        fieldNames: string[] | Function;
    }): Object[];
    /**
     * Inserts new record in the table.
     * @param  {DataManager} dm
     * @param  {Object} data
     * @param  {number} position
     */
    insert(dm: DataManager, data: Object, tableName?: string, query?: Query, position?: number): Object;
    /**
     * Remove the data from the dataSource based on the key field value.
     * @param  {DataManager} dm
     * @param  {string} keyField
     * @param  {Object} value
     * @param  {string} tableName?
     * @returns null
     */
    remove(dm: DataManager, keyField: string, value: Object, tableName?: string): Object;
    /**
     * Updates existing record and saves the changes to the table.
     * @param  {DataManager} dm
     * @param  {string} keyField
     * @param  {Object} value
     * @param  {string} tableName?
     * @returns null
     */
    update(dm: DataManager, keyField: string, value: Object, tableName?: string): void;
}
/**
 * URL Adaptor of DataManager can be used when you are required to use remote service to retrieve data.
 * It interacts with server-side for all DataManager Queries and CRUD operations.
 * @hidden
 */
export  class UrlAdaptor extends Adaptor {
    /**
     * Process the query to generate request body.
     * @param  {DataManager} dm
     * @param  {Query} query
     * @param  {Object[]} hierarchyFilters?
     * @returns p
     */
    processQuery(dm: DataManager, query: Query, hierarchyFilters?: Object[]): Object;
    private getRequestQuery;
    /**
     * Convert the object from processQuery to string which can be added query string.
     * @param  {Object} req
     * @param  {Query} query
     * @param  {DataManager} dm
     */
    convertToQueryString(request: Object, query: Query, dm: DataManager): string;
    /**
     * Return the data from the data manager processing.
     * @param  {DataResult} data
     * @param  {DataOptions} ds?
     * @param  {Query} query?
     * @param  {XMLHttpRequest} xhr?
     * @param  {Object} request?
     * @param  {CrudOptions} changes?
     */
    processResponse(data: DataResult, ds?: DataOptions, query?: Query, xhr?: XMLHttpRequest, request?: Object, changes?: CrudOptions): DataResult;
    /**
     * Add the group query to the adaptor`s option.
     * @param  {Object[]} e
     * @returns void
     */
    onGroup(e: QueryOptions[]): QueryOptions[];
    /**
     * Add the aggregate query to the adaptor`s option.
     * @param  {Aggregates[]} e
     * @returns void
     */
    onAggregates(e: Aggregates[]): void;
    /**
     * Prepare the request body based on the newly added, removed and updated records.
     * The result is used by the batch request.
     * @param  {DataManager} dm
     * @param  {CrudOptions} changes
     * @param  {Object} e
     */
    batchRequest(dm: DataManager, changes: CrudOptions, e: Object, query: Query, original?: Object): Object;
    /**
     * Method will trigger before send the request to server side.
     * Used to set the custom header or modify the request options.
     * @param  {DataManager} dm
     * @param  {XMLHttpRequest} request
     * @returns void
     */
    beforeSend(dm: DataManager, request: XMLHttpRequest): void;
    /**
     * Prepare and returns request body which is used to insert a new record in the table.
     * @param  {DataManager} dm
     * @param  {Object} data
     * @param  {string} tableName
     */
    insert(dm: DataManager, data: Object, tableName: string, query: Query): Object;
    /**
     * Prepare and return request body which is used to remove record from the table.
     * @param  {DataManager} dm
     * @param  {string} keyField
     * @param  {number|string} value
     * @param  {string} tableName
     */
    remove(dm: DataManager, keyField: string, value: number | string, tableName: string, query: Query): Object;
    /**
     * Prepare and return request body which is used to update record.
     * @param  {DataManager} dm
     * @param  {string} keyField
     * @param  {Object} value
     * @param  {string} tableName
     */
    update(dm: DataManager, keyField: string, value: Object, tableName: string, query: Query): Object;
    /**
     * To generate the predicate based on the filtered query.
     * @param  {Object[]|string[]|number[]} data
     * @param  {Query} query
     * @hidden
     */
    getFiltersFrom(data: Object[] | string[] | number[], query: Query): Predicate;
    protected getAggregateResult(pvt: PvtOptions, data: DataResult, args: DataResult, groupDs?: Object[], query?: Query): DataResult;
    protected getQueryRequest(query: Query): Requests;
    addParams(options: {
        dm: DataManager;
        query: Query;
        params: ParamOption[];
        reqParams: {
            [key: string]: Object;
        };
    }): void;
}
/**
 * OData Adaptor that is extended from URL Adaptor, is used for consuming data through OData Service.
 * @hidden
 */
export  class ODataAdaptor extends UrlAdaptor {
    protected getModuleName(): string;
    /**
     * Specifies the root url of the provided odata url.
     * @hidden
     * @default null
     */
    rootUrl: string;
    /**
     * Specifies the resource name of the provided odata table.
     * @hidden
     * @default null
     */
    resourceTableName: string;
    protected options: RemoteOptions;
    constructor(props?: RemoteOptions);
    /**
     * Generate request string based on the filter criteria from query.
     * @param  {Predicate} pred
     * @param  {boolean} requiresCast?
     */
    onPredicate(predicate: Predicate, query: Query | boolean, requiresCast?: boolean): string;
    addParams(options: {
        dm: DataManager;
        query: Query;
        params: ParamOption[];
        reqParams: {
            [key: string]: Object;
        };
    }): void;
    /**
     * Generate request string based on the multiple filter criteria from query.
     * @param  {Predicate} pred
     * @param  {boolean} requiresCast?
     */
    onComplexPredicate(predicate: Predicate, query: Query, requiresCast?: boolean): string;
    /**
     * Generate query string based on the multiple filter criteria from query.
     * @param  {Predicate} filter
     * @param  {boolean} requiresCast?
     */
    onEachWhere(filter: Predicate, query: Query, requiresCast?: boolean): string;
    /**
     * Generate query string based on the multiple filter criteria from query.
     * @param  {string[]} filters
     */
    onWhere(filters: string[]): string;
    /**
     * Generate query string based on the multiple search criteria from query.
     * @param  {{fields:string[]} e
     * @param  {string} operator
     * @param  {string} key
     * @param  {boolean}} ignoreCase
     */
    onEachSearch(e: {
        fields: string[];
        operator: string;
        key: string;
        ignoreCase: boolean;
    }): void;
    /**
     * Generate query string based on the search criteria from query.
     * @param  {Object} e
     */
    onSearch(e: Object): string;
    /**
     * Generate query string based on multiple sort criteria from query.
     * @param  {QueryOptions} e
     */
    onEachSort(e: QueryOptions): string;
    /**
     * Returns sort query string.
     * @param  {string[]} e
     */
    onSortBy(e: string[]): string;
    /**
     * Adds the group query to the adaptor option.
     * @param  {Object[]} e
     * @returns string
     */
    onGroup(e: QueryOptions[]): QueryOptions[];
    /**
     * Returns the select query string.
     * @param  {string[]} e
     */
    onSelect(e: string[]): string;
    /**
     * Add the aggregate query to the adaptor option.
     * @param  {Object[]} e
     * @returns string
     */
    onAggregates(e: Object[]): string;
    /**
     * Returns the query string which requests total count from the data source.
     * @param  {boolean} e
     * @returns string
     */
    onCount(e: boolean): string;
    /**
     * Method will trigger before send the request to server side.
     * Used to set the custom header or modify the request options.
     * @param  {DataManager} dm
     * @param  {XMLHttpRequest} request
     * @param  {base.Ajax} settings?
     */
    beforeSend(dm: DataManager, request: XMLHttpRequest, settings?: base.Ajax): void;
    /**
     * Returns the data from the query processing.
     * @param  {DataResult} data
     * @param  {DataOptions} ds?
     * @param  {Query} query?
     * @param  {XMLHttpRequest} xhr?
     * @param  {base.Ajax} request?
     * @param  {CrudOptions} changes?
     * @returns aggregateResult
     */
    processResponse(data: DataResult, ds?: DataOptions, query?: Query, xhr?: XMLHttpRequest, request?: base.Ajax, changes?: CrudOptions): Object;
    /**
     * Converts the request object to query string.
     * @param  {Object} req
     * @param  {Query} query
     * @param  {DataManager} dm
     * @returns tableName
     */
    convertToQueryString(request: Object, query: Query, dm: DataManager): string;
    private localTimeReplacer;
    /**
     * Prepare and returns request body which is used to insert a new record in the table.
     * @param  {DataManager} dm
     * @param  {Object} data
     * @param  {string} tableName?
     */
    insert(dm: DataManager, data: Object, tableName?: string): Object;
    /**
     * Prepare and return request body which is used to remove record from the table.
     * @param  {DataManager} dm
     * @param  {string} keyField
     * @param  {number} value
     * @param  {string} tableName?
     */
    remove(dm: DataManager, keyField: string, value: number, tableName?: string): Object;
    /**
     * Updates existing record and saves the changes to the table.
     * @param  {DataManager} dm
     * @param  {string} keyField
     * @param  {Object} value
     * @param  {string} tableName?
     * @returns this
     */
    update(dm: DataManager, keyField: string, value: Object, tableName?: string, query?: Query, original?: Object): Object;
    /**
     * Prepare the request body based on the newly added, removed and updated records.
     * The result is used by the batch request.
     * @param  {DataManager} dm
     * @param  {CrudOptions} changes
     * @param  {RemoteArgs} e
     * @returns {Object}
     */
    batchRequest(dm: DataManager, changes: CrudOptions, e: RemoteArgs, query: Query, original?: CrudOptions): Object;
    /**
     * Generate the string content from the removed records.
     * The result will be send during batch update.
     * @param  {Object[]} arr
     * @param  {RemoteArgs} e
     * @returns this
     */
    generateDeleteRequest(arr: Object[], e: RemoteArgs, dm: DataManager): string;
    /**
     * Generate the string content from the inserted records.
     * The result will be send during batch update.
     * @param  {Object[]} arr
     * @param  {RemoteArgs} e
     */
    generateInsertRequest(arr: Object[], e: RemoteArgs, dm: DataManager): string;
    /**
     * Generate the string content from the updated records.
     * The result will be send during batch update.
     * @param  {Object[]} arr
     * @param  {RemoteArgs} e
     */
    generateUpdateRequest(arr: Object[], e: RemoteArgs, dm: DataManager, org?: Object[]): string;
    protected static getField(prop: string): string;
    private generateBodyContent;
    protected processBatchResponse(data: DataResult, query?: Query, xhr?: XMLHttpRequest, request?: base.Ajax, changes?: CrudOptions): CrudOptions | DataResult;
    compareAndRemove(data: Object, original: Object, key?: string): Object;
}
/**
 * The OData v4 is an improved version of OData protocols.
 * The DataManager uses the ODataV4Adaptor to consume OData v4 services.
 * @hidden
 */
export  class ODataV4Adaptor extends ODataAdaptor {
    /**
     * @hidden
     */
    protected getModuleName(): string;
    protected options: RemoteOptions;
    constructor(props?: RemoteOptions);
    /**
     * Returns the query string which requests total count from the data source.
     * @param  {boolean} e
     * @returns string
     */
    onCount(e: boolean): string;
    /**
     * Generate request string based on the filter criteria from query.
     * @param  {Predicate} pred
     * @param  {boolean} requiresCast?
     */
    onPredicate(predicate: Predicate, query: Query | boolean, requiresCast?: boolean): string;
    /**
     *  Generate query string based on the multiple search criteria from query.
     * @param  {{fields:string[]} e
     * @param  {string} operator
     * @param  {string} key
     * @param  {boolean}} ignoreCase
     */
    onEachSearch(e: {
        fields: string[];
        operator: string;
        key: string;
        ignoreCase: boolean;
    }): void;
    /**
     *  Generate query string based on the search criteria from query.
     * @param  {Object} e
     */
    onSearch(e: Object): string;
    /**
     * Returns the expand query string.
     * @param  {string} e
     */
    onExpand(e: {
        selects: string[];
        expands: string[];
    }): string;
    /**
     * Returns the groupby query string.
     * @param  {string} e
     */
    onDistinct(distinctFields: string[]): Object;
    /**
     * Returns the select query string.
     * @param  {string[]} e
     */
    onSelect(e: string[]): string;
    /**
     * Method will trigger before send the request to server side.
     * Used to set the custom header or modify the request options.
     * @param  {DataManager} dm
     * @param  {XMLHttpRequest} request
     * @param  {base.Ajax} settings
     * @returns void
     */
    beforeSend(dm: DataManager, request: XMLHttpRequest, settings: base.Ajax): void;
    /**
     * Returns the data from the query processing.
     * @param  {DataResult} data
     * @param  {DataOptions} ds?
     * @param  {Query} query?
     * @param  {XMLHttpRequest} xhr?
     * @param  {base.Ajax} request?
     * @param  {CrudOptions} changes?
     * @returns aggregateResult
     */
    processResponse(data: DataResult, ds?: DataOptions, query?: Query, xhr?: XMLHttpRequest, request?: base.Ajax, changes?: CrudOptions): Object;
}
/**
 * The Web API is a programmatic interface to define the request and response messages system that is mostly exposed in JSON or XML.
 * The DataManager uses the WebApiAdaptor to consume Web API.
 * Since this adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor
 * @hidden
 */
export  class WebApiAdaptor extends ODataAdaptor {
    protected getModuleName(): string;
    /**
     * Prepare and returns request body which is used to insert a new record in the table.
     * @param  {DataManager} dm
     * @param  {Object} data
     * @param  {string} tableName?
     */
    insert(dm: DataManager, data: Object, tableName?: string): Object;
    /**
     * Prepare and return request body which is used to remove record from the table.
     * @param  {DataManager} dm
     * @param  {string} keyField
     * @param  {number} value
     * @param  {string} tableName?
     */
    remove(dm: DataManager, keyField: string, value: number, tableName?: string): Object;
    /**
     * Prepare and return request body which is used to update record.
     * @param  {DataManager} dm
     * @param  {string} keyField
     * @param  {Object} value
     * @param  {string} tableName?
     */
    update(dm: DataManager, keyField: string, value: Object, tableName?: string): Object;
    /**
     * Method will trigger before send the request to server side.
     * Used to set the custom header or modify the request options.
     * @param  {DataManager} dm
     * @param  {XMLHttpRequest} request
     * @param  {base.Ajax} settings
     * @returns void
     */
    beforeSend(dm: DataManager, request: XMLHttpRequest, settings: base.Ajax): void;
    /**
     * Returns the data from the query processing.
     * @param  {DataResult} data
     * @param  {DataOptions} ds?
     * @param  {Query} query?
     * @param  {XMLHttpRequest} xhr?
     * @param  {base.Ajax} request?
     * @param  {CrudOptions} changes?
     * @returns aggregateResult
     */
    processResponse(data: DataResult, ds?: DataOptions, query?: Query, xhr?: XMLHttpRequest, request?: base.Ajax, changes?: CrudOptions): Object;
}
/**
 * WebMethodAdaptor can be used by DataManager to interact with web method.
 * @hidden
 */
export  class WebMethodAdaptor extends UrlAdaptor {
    /**
     * Prepare the request body based on the query.
     * The query information can be accessed at the WebMethod using variable named `value`.
     * @param  {DataManager} dm
     * @param  {Query} query
     * @param  {Object[]} hierarchyFilters?
     * @returns application
     */
    processQuery(dm: DataManager, query: Query, hierarchyFilters?: Object[]): Object;
}
/**
 * RemoteSaveAdaptor, extended from JsonAdaptor and it is used for binding local data and performs all DataManager queries in client-side.
 * It interacts with server-side only for CRUD operations.
 * @hidden
 */
export  class RemoteSaveAdaptor extends JsonAdaptor {
    /**
     * @hidden
     */
    constructor();
    insert(dm: DataManager, data: Object, tableName: string, query: Query, position?: number): Object;
    remove(dm: DataManager, keyField: string, val: Object, tableName?: string, query?: Query): Object;
    update(dm: DataManager, keyField: string, val: Object, tableName: string, query?: Query): Object;
    processResponse(data: CrudOptions, ds?: DataOptions, query?: Query, xhr?: XMLHttpRequest, request?: base.Ajax, changes?: CrudOptions, e?: RemoteArgs): Object;
    /**
     * Prepare the request body based on the newly added, removed and updated records.
     * Also perform the changes in the locally cached data to sync with the remote data.
     * The result is used by the batch request.
     * @param  {DataManager} dm
     * @param  {CrudOptions} changes
     * @param  {RemoteArgs} e
     */
    batchRequest(dm: DataManager, changes: CrudOptions, e: RemoteArgs): Object;
    addParams(options: {
        dm: DataManager;
        query: Query;
        params: ParamOption[];
        reqParams: {
            [key: string]: Object;
        };
    }): void;
}
/**
 * Cache Adaptor is used to cache the data of the visited pages. It prevents new requests for the previously visited pages.
 * You can configure cache page size and duration of caching by using cachingPageSize and timeTillExpiration properties of the DataManager
 * @hidden
 */
export  class CacheAdaptor extends UrlAdaptor {
    private cacheAdaptor;
    private pageSize;
    private guidId;
    private isCrudAction;
    private isInsertAction;
    /**
     * Constructor for CacheAdaptor class.
     * @param  {CacheAdaptor} adaptor?
     * @param  {number} timeStamp?
     * @param  {number} pageSize?
     * @hidden
     */
    constructor(adaptor?: CacheAdaptor, timeStamp?: number, pageSize?: number);
    /**
     * It will generate the key based on the URL when we send a request to server.
     * @param  {string} url
     * @param  {Query} query?
     * @hidden
     */
    generateKey(url: string, query: Query): string;
    /**
     * Process the query to generate request body.
     * If the data is already cached, it will return the cached data.
     * @param  {DataManager} dm
     * @param  {Query} query?
     * @param  {Object[]} hierarchyFilters?
     */
    processQuery(dm: DataManager, query?: Query, hierarchyFilters?: Object[]): Object;
    /**
     * Returns the data from the query processing.
     * It will also cache the data for later usage.
     * @param  {DataResult} data
     * @param  {DataManager} ds?
     * @param  {Query} query?
     * @param  {XMLHttpRequest} xhr?
     * @param  {base.Ajax} request?
     * @param  {CrudOptions} changes?
     */
    processResponse(data: DataResult, ds?: DataManager, query?: Query, xhr?: XMLHttpRequest, request?: base.Ajax, changes?: CrudOptions): DataResult;
    /**
     * Method will trigger before send the request to server side. Used to set the custom header or modify the request options.
     * @param  {DataManager} dm
     * @param  {XMLHttpRequest} request
     * @param  {base.Ajax} settings?
     */
    beforeSend(dm: DataManager, request: XMLHttpRequest, settings?: base.Ajax): void;
    /**
     * Updates existing record and saves the changes to the table.
     * @param  {DataManager} dm
     * @param  {string} keyField
     * @param  {Object} value
     * @param  {string} tableName
     */
    update(dm: DataManager, keyField: string, value: Object, tableName: string): Object;
    /**
     * Prepare and returns request body which is used to insert a new record in the table.
     * @param  {DataManager} dm
     * @param  {Object} data
     * @param  {string} tableName?
     */
    insert(dm: DataManager, data: Object, tableName?: string): Object;
    /**
     * Prepare and return request body which is used to remove record from the table.
     * @param  {DataManager} dm
     * @param  {string} keyField
     * @param  {Object} value
     * @param  {string} tableName?
     */
    remove(dm: DataManager, keyField: string, value: Object, tableName?: string): Object[];
    /**
     * Prepare the request body based on the newly added, removed and updated records.
     * The result is used by the batch request.
     * @param  {DataManager} dm
     * @param  {CrudOptions} changes
     * @param  {RemoteArgs} e
     */
    batchRequest(dm: DataManager, changes: CrudOptions, e: RemoteArgs): CrudOptions;
}
/**
 * @hidden
 */
export interface CrudOptions {
    changedRecords?: Object[];
    addedRecords?: Object[];
    deletedRecords?: Object[];
    changed?: Object[];
    added?: Object[];
    deleted?: Object[];
    action?: string;
    table?: string;
    key?: string;
}
/**
 * @hidden
 */
export interface PvtOptions {
    groups?: QueryOptions[];
    aggregates?: Aggregates[];
    search?: Object | Predicate;
    changeSet?: number;
    searches?: Object[];
    position?: number;
}
/**
 * @hidden
 */
export interface DataResult {
    nodeType?: number;
    addedRecords?: Object[];
    d?: DataResult | Object[];
    Count?: number;
    count?: number;
    result?: Object;
    results?: Object[] | DataResult;
    aggregate?: DataResult;
    aggregates?: Aggregates;
    value?: Object;
    Items?: Object[] | DataResult;
    keys?: string[];
    groupDs?: Object[];
}
/**
 * @hidden
 */
export interface Requests {
    sorts: QueryOptions[];
    groups: QueryOptions[];
    filters: QueryOptions[];
    searches: QueryOptions[];
    aggregates: QueryOptions[];
}
/**
 * @hidden
 */
export interface RemoteArgs {
    guid?: string;
    url?: string;
    key?: string;
    cid?: number;
    cSet?: string;
}
/**
 * @hidden
 */
export interface RemoteOptions {
    from?: string;
    requestType?: string;
    sortBy?: string;
    select?: string;
    skip?: string;
    group?: string;
    take?: string;
    search?: string;
    count?: string;
    where?: string;
    aggregates?: string;
    expand?: string;
    accept?: string;
    multipartAccept?: string;
    batch?: string;
    changeSet?: string;
    batchPre?: string;
    contentId?: string;
    batchContent?: string;
    changeSetContent?: string;
    batchChangeSetContentType?: string;
    updateType?: string;
    localTime?: boolean;
    apply?: string;
}
//node_modules/@syncfusion/ej2-data/src/index.d.ts
/**
 * Data modules
 */
//node_modules/@syncfusion/ej2-data/src/manager.d.ts
/**
 * DataManager is used to manage and manipulate relational data.
 */
export  class DataManager {
    /** @hidden */
    adaptor: AdaptorOptions;
    /** @hidden */
    defaultQuery: Query;
    /** @hidden */
    dataSource: DataOptions;
    /** @hidden */
    dateParse: boolean;
    /** @hidden */
    ready: Promise<base.Ajax>;
    private isDataAvailable;
    private requests;
    /**
     * Constructor for DataManager class
     * @param  {DataOptions|JSON[]} dataSource?
     * @param  {Query} query?
     * @param  {AdaptorOptions|string} adaptor?
     * @hidden
     */
    constructor(dataSource?: DataOptions | JSON[] | Object[], query?: Query, adaptor?: AdaptorOptions | string);
    /**
     * Overrides DataManager's default query with given query.
     * @param  {Query} query - Defines the new default query.
     */
    setDefaultQuery(query: Query): DataManager;
    /**
     * Executes the given query with local data source.
     * @param  {Query} query - Defines the query to retrieve data.
     */
    executeLocal(query?: Query): Object[];
    /**
     * Executes the given query with either local or remote data source.
     * It will be executed as asynchronously and returns Promise object which will be resolved or rejected after action completed.
     * @param  {Query|Function} query - Defines the query to retrieve data.
     * @param  {Function} done - Defines the callback function and triggers when the Promise is resolved.
     * @param  {Function} fail - Defines the callback function and triggers when the Promise is rejected.
     * @param  {Function} always - Defines the callback function and triggers when the Promise is resolved or rejected.
     */
    executeQuery(query: Query | Function, done?: Function, fail?: Function, always?: Function): Promise<base.Ajax>;
    private static getDeferedArgs;
    private static nextTick;
    private extendRequest;
    private makeRequest;
    private beforeSend;
    /**
     * Save bulk changes to the given table name.
     * User can add a new record, edit an existing record, and delete a record at the same time.
     * If the datasource from remote, then updated in a single post.
     * @param  {Object} changes - Defines the CrudOptions.
     * @param  {string} key - Defines the column field.
     * @param  {string|Query} tableName - Defines the table name.
     * @param  {Query} query - Sets default query for the DataManager.
     */
    saveChanges(changes: Object, key?: string, tableName?: string | Query, query?: Query, original?: Object): Promise<Object> | Object;
    /**
     * Inserts new record in the given table.
     * @param  {Object} data - Defines the data to insert.
     * @param  {string|Query} tableName - Defines the table name.
     * @param  {Query} query - Sets default query for the DataManager.
     */
    insert(data: Object, tableName?: string | Query, query?: Query, position?: number): Object | Promise<Object>;
    /**
     * Removes data from the table with the given key.
     * @param  {string} keyField - Defines the column field.
     * @param  {Object} value - Defines the value to find the data in the specified column.
     * @param  {string|Query} tableName - Defines the table name
     * @param  {Query} query - Sets default query for the DataManager.
     */
    remove(keyField: string, value: Object, tableName?: string | Query, query?: Query): Object | Promise<Object>;
    /**
     * Updates existing record in the given table.
     * @param  {string} keyField - Defines the column field.
     * @param  {Object} value - Defines the value to find the data in the specified column.
     * @param  {string|Query} tableName - Defines the table name
     * @param  {Query} query - Sets default query for the DataManager.
     */
    update(keyField: string, value: Object, tableName?: string | Query, query?: Query, original?: Object): Object | Promise<Object>;
    private doAjaxRequest;
}
/**
 * Deferred is used to handle asynchronous operation.
 */
export  class Deferred {
    /**
     * Resolve a Deferred object and call doneCallbacks with the given args.
     */
    resolve: Function;
    /**
     * Reject a Deferred object and call failCallbacks with the given args.
     */
    reject: Function;
    /**
     * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.
     */
    promise: Promise<Object>;
    /**
     * Defines the callback function triggers when the Deferred object is resolved.
     */
    then: Function;
    /**
     * Defines the callback function triggers when the Deferred object is rejected.
     */
    catch: Function;
}
/**
 * @hidden
 */
export interface DataOptions {
    url?: string;
    adaptor?: AdaptorOptions;
    insertUrl?: string;
    removeUrl?: string;
    updateUrl?: string;
    crudUrl?: string;
    batchUrl?: string;
    json?: Object[];
    headers?: Object[];
    accept?: boolean;
    data?: JSON;
    timeTillExpiration?: number;
    cachingPageSize?: number;
    enableCaching?: boolean;
    requestType?: string;
    key?: string;
    crossDomain?: boolean;
    jsonp?: string;
    dataType?: string;
    offline?: boolean;
    requiresFormat?: boolean;
}
/**
 * @hidden
 */
export interface ReturnOption {
    result?: ReturnOption;
    count?: number;
    url?: string;
    aggregates?: Aggregates;
}
/**
 * @hidden
 */
export interface RequestOptions {
    xhr?: XMLHttpRequest;
    count?: number;
    result?: ReturnOption;
    request?: base.Ajax;
    aggregates?: Aggregates;
    actual?: Object;
    virtualSelectRecords?: Object;
    error?: string;
}
/**
 * @hidden
 */
export interface AdaptorOptions {
    processQuery?: Function;
    processResponse?: Function;
    beforeSend?: Function;
    batchRequest?: Function;
    insert?: Function;
    remove?: Function;
    update?: Function;
    key?: string;
}
//node_modules/@syncfusion/ej2-data/src/query.d.ts
/**
 * Query class is used to build query which is used by the DataManager to communicate with datasource.
 */
export  class Query {
    /** @hidden */
    queries: QueryOptions[];
    /** @hidden */
    key: string;
    /** @hidden */
    fKey: string;
    /** @hidden */
    fromTable: string;
    /** @hidden */
    lookups: string[];
    /** @hidden */
    expands: Object[];
    /** @hidden */
    sortedColumns: Object[];
    /** @hidden */
    groupedColumns: Object[];
    /** @hidden */
    subQuerySelector: Function;
    /** @hidden */
    subQuery: Query;
    /** @hidden */
    isChild: boolean;
    /** @hidden */
    params: ParamOption[];
    /** @hidden */
    isCountRequired: boolean;
    /** @hidden */
    dataManager: DataManager;
    /** @hidden */
    distincts: string[];
    /**
     * Constructor for Query class.
     * @param  {string|string[]} from?
     * @hidden
     */
    constructor(from?: string | string[]);
    /**
     * Sets the primary key.
     * @param  {string} field - Defines the column field.
     */
    setKey(field: string): Query;
    /**
     * Sets default DataManager to execute query.
     * @param  {DataManager} dataManager - Defines the DataManager.
     */
    using(dataManager: DataManager): Query;
    /**
     * Executes query with the given DataManager.
     * @param  {DataManager} dataManager - Defines the DataManager.
     * @param  {Function} done - Defines the success callback.
     * @param  {Function} fail - Defines the failure callback.
     * @param  {Function} always - Defines the callback which will be invoked on either success or failure.
     *
     * <pre>
     * let dataManager: DataManager = new DataManager([{ ID: '10' }, { ID: '2' }, { ID: '1' }, { ID: '20' }]);
     * let query: Query = new Query();
     * query.sortBy('ID', (x: string, y: string): number => { return parseInt(x, 10) - parseInt(y, 10) });
     * let promise: Promise< Object > = query.execute(dataManager);
     * promise.then((e: { result: Object }) => { });
     * </pre>
     */
    execute(dataManager?: DataManager, done?: Function, fail?: Function, always?: Function): Promise<Object>;
    /**
     * Executes query with the local datasource.
     * @param  {DataManager} dataManager - Defines the DataManager.
     */
    executeLocal(dataManager?: DataManager): Object[];
    /**
     * Creates deep copy of the Query object.
     */
    clone(): Query;
    /**
     * Specifies the name of table to retrieve data in query execution.
     * @param  {string} tableName - Defines the table name.
     */
    from(tableName: string): Query;
    /**
     * Adds additional parameter which will be sent along with the request which will be generated while DataManager execute.
     * @param  {string} key - Defines the key of additional parameter.
     * @param  {Function|string} value - Defines the value for the key.
     */
    addParams(key: string, value: Function | string | null): Query;
    /**
     * @hidden
     */
    distinct(fields: string | string[]): Query;
    /**
     * Expands the related table.
     * @param  {string|Object[]} tables
     */
    expand(tables: string | Object[]): Query;
    /**
     * Filter data with given filter criteria.
     * @param  {string|Predicate} fieldName - Defines the column field or Predicate.
     * @param  {string} operator - Defines the operator how to filter data.
     * @param  {string|number|boolean} value - Defines the values to match with data.
     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else
     * filter data with case insensitive.
     */
    where(fieldName: string | Predicate | Predicate[], operator?: string, value?: string | Date | number | boolean | null, ignoreCase?: boolean, ignoreAccent?: boolean): Query;
    /**
     * Search data with given search criteria.
     * @param  {string|number|boolean} searchKey - Defines the search key.
     * @param  {string|string[]} fieldNames - Defines the collection of column fields.
     * @param  {string} operator - Defines the operator how to search data.
     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else
     * filter data with case insensitive.
     */
    search(searchKey: string | number | boolean, fieldNames?: string | string[], operator?: string, ignoreCase?: boolean, ignoreAccent?: boolean): Query;
    /**
     * Sort the data with given sort criteria.
     * By default, sort direction is ascending.
     * @param  {string|string[]} fieldName - Defines the single or collection of column fields.
     * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.
     */
    sortBy(fieldName: string | string[], comparer?: string | Function, isFromGroup?: boolean): Query;
    /**
     * Sorts data in descending order.
     * @param  {string} fieldName - Defines the column field.
     */
    sortByDesc(fieldName: string): Query;
    /**
     * Groups data with the given field name.
     * @param  {string} fieldName - Defines the column field.
     */
    group(fieldName: string, fn?: Function, format?: string | base.NumberFormatOptions | base.DateFormatOptions): Query;
    /**
     * Gets data based on the given page index and size.
     * @param  {number} pageIndex - Defines the current page index.
     * @param  {number} pageSize - Defines the no of records per page.
     */
    page(pageIndex: number, pageSize: number): Query;
    /**
     * Gets data based on the given start and end index.
     * @param  {number} start - Defines the start index of the datasource.
     * @param  {number} end - Defines the end index of the datasource.
     */
    range(start: number, end: number): Query;
    /**
     * Gets data from the top of the data source based on given number of records count.
     * @param  {number} nos - Defines the no of records to retrieve from datasource.
     */
    take(nos: number): Query;
    /**
     * Skips data with given number of records count from the top of the data source.
     * @param  {number} nos - Defines the no of records skip in the datasource.
     */
    skip(nos: number): Query;
    /**
     * Selects specified columns from the data source.
     * @param  {string|string[]} fieldNames - Defines the collection of column fields.
     */
    select(fieldNames: string | string[]): Query;
    /**
     * Gets the records in hierarchical relationship from two tables. It requires the foreign key to relate two tables.
     * @param  {Query} query - Defines the query to relate two tables.
     * @param  {Function} selectorFn - Defines the custom function to select records.
     */
    hierarchy(query: Query, selectorFn: Function): Query;
    /**
     * Sets the foreign key which is used to get data from the related table.
     * @param  {string} key - Defines the foreign key.
     */
    foreignKey(key: string): Query;
    /**
     * It is used to get total number of records in the DataManager execution result.
     */
    requiresCount(): Query;
    /**
     * Aggregate the data with given type and field name.
     * @param  {string} type - Defines the aggregate type.
     * @param  {string} field - Defines the column field to aggregate.
     */
    aggregate(type: string, field: string): Query;
    /**
     * Pass array of filterColumn query for performing filter operation.
     * @param  {QueryOptions[]} queries
     * @param  {string} name
     * @hidden
     */
    static filterQueries(queries: QueryOptions[], name: string): QueryOptions[];
    /**
     * To get the list of queries which is already filtered in current data source.
     * @param  {Object[]} queries
     * @param  {string[]} singles
     * @hidden
     */
    static filterQueryLists(queries: Object[], singles: string[]): Object;
}
/**
 * Predicate class is used to generate complex filter criteria.
 * This will be used by DataManager to perform multiple filtering operation.
 */
export  class Predicate {
    /** @hidden */
    field: string;
    /** @hidden */
    operator: string;
    /** @hidden */
    value: string | number | Date | boolean | Predicate | Predicate[] | null;
    /** @hidden */
    condition: string;
    /** @hidden */
    ignoreCase: boolean;
    /** @hidden */
    ignoreAccent: boolean;
    /** @hidden */
    isComplex: boolean;
    /** @hidden */
    predicates: Predicate[];
    /** @hidden */
    comparer: Function;
    [x: string]: string | number | Date | boolean | Predicate | Predicate[] | Function | null;
    /**
     * Constructor for Predicate class.
     * @param  {string|Predicate} field
     * @param  {string} operator
     * @param  {string|number|boolean|Predicate|Predicate[]} value
     * @param  {boolean=false} ignoreCase
     * @hidden
     */
    constructor(field: string | Predicate, operator: string, value: string | number | Date | boolean | Predicate | Predicate[] | null, ignoreCase?: boolean, ignoreAccent?: boolean);
    /**
     * Adds n-number of new predicates on existing predicate with “and” condition.
     * @param  {Object[]} args - Defines the collection of predicates.
     */
    static and(...args: Object[]): Predicate;
    /**
     * Adds new predicate on existing predicate with “and” condition.
     * @param  {string} field - Defines the column field.
     * @param  {string} operator - Defines the operator how to filter data.
     * @param  {string} value - Defines the values to match with data.
     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else
     * filter data with case insensitive.
     */
    and(field: string | Predicate, operator?: string, value?: string | number | Date | null, ignoreCase?: boolean, ignoreAccent?: boolean): Predicate;
    /**
     * Adds n-number of new predicates on existing predicate with “or” condition.
     * @param  {Object[]} args - Defines the collection of predicates.
     */
    static or(...args: Object[]): Predicate;
    /**
     * Adds new predicate on existing predicate with “or” condition.
     * @param  {string} field - Defines the column field.
     * @param  {string} operator - Defines the operator how to filter data.
     * @param  {string} value - Defines the values to match with data.
     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else
     * filter data with case insensitive.
     */
    or(field: string | Predicate, operator?: string, value?: string | number | Date | null, ignoreCase?: boolean, ignoreAccent?: boolean): Predicate;
    /**
     * Converts plain JavaScript object to Predicate object.
     * @param  {Predicate[]|Predicate} json - Defines single or collection of Predicate.
     */
    static fromJson(json: Predicate[] | Predicate): Predicate[];
    /**
     * Validate the record based on the predicates.
     * @param  {Object} record - Defines the datasource record.
     */
    validate(record: Object): boolean;
    /**
     * Converts predicates to plain JavaScript.
     * This method is uses Json stringify when serializing Predicate object.
     */
    toJson(): Object;
    private static combinePredicates;
    private static combine;
    private static fromJSONData;
}
/**
 * @hidden
 */
export interface QueryOptions {
    fn?: string;
    e?: QueryOptions;
    fieldNames?: string | string[];
    operator?: string;
    searchKey?: string | number | boolean;
    ignoreCase?: boolean;
    ignoreAccent?: boolean;
    comparer?: string | Function;
    format?: string | base.NumberFormatOptions | base.DateFormatOptions;
    direction?: string;
    pageIndex?: number;
    pageSize?: number;
    start?: number;
    end?: number;
    nos?: number;
    field?: string;
    fieldName?: string;
    type?: Object;
    name?: string | string[];
    filter?: Object;
    key?: string;
    value?: string | number | Date | boolean | Predicate | Predicate[];
    isComplex?: boolean;
    predicates?: Predicate[];
    condition?: string;
}
/**
 * @hidden
 */
export interface QueryList {
    onSelect?: QueryOptions;
    onPage?: QueryOptions;
    onSkip?: QueryOptions;
    onTake?: QueryOptions;
    onRange?: QueryOptions;
}
/**
 * @hidden
 */
export interface ParamOption {
    key: string;
    value?: string | null;
    fn?: Function;
}
//node_modules/@syncfusion/ej2-data/src/util.d.ts
/**
 * Data manager common utility methods.
 * @hidden
 */
export  class DataUtil {
    /**
     * Specifies the value which will be used to adjust the date value to server timezone.
     * @default null
     */
    static serverTimezoneOffset: number;
    /**
     * Returns the value by invoking the provided parameter function.
     * If the paramater is not of type function then it will be returned as it is.
     * @param  {Function|string|string[]|number} value
     * @param  {Object} inst?
     * @hidden
     */
    static getValue<T>(value: T | Function, inst?: Object): T;
    /**
     * Returns true if the input string ends with given string.
     * @param  {string} input
     * @param  {string} substr
     */
    static endsWith(input: string, substr: string): boolean;
    /**
     * Returns true if the input string starts with given string.
     * @param  {string} str
     * @param  {string} startstr
     */
    static startsWith(input: string, start: string): boolean;
    /**
     * To return the sorting function based on the string.
     * @param  {string} order
     * @hidden
     */
    static fnSort(order: string): Function;
    /**
     * Comparer function which is used to sort the data in ascending order.
     * @param  {string|number} x
     * @param  {string|number} y
     * @returns number
     */
    static fnAscending(x: string | number, y: string | number): number;
    /**
     * Comparer function which is used to sort the data in descending order.
     * @param  {string|number} x
     * @param  {string|number} y
     * @returns number
     */
    static fnDescending(x: string | number, y: string | number): number;
    private static extractFields;
    /**
     * Select objects by given fields from jsonArray.
     * @param  {Object[]} jsonArray
     * @param  {string[]} fields
     */
    static select(jsonArray: Object[], fields: string[]): Object[];
    /**
     * Group the input data based on the field name.
     * It also performs aggregation of the grouped records based on the aggregates paramater.
     * @param  {Object[]} jsonArray
     * @param  {string} field?
     * @param  {Object[]} agg?
     * @param  {number} level?
     * @param  {Object[]} groupDs?
     */
    static group(jsonArray: Object[], field?: string, aggregates?: Object[], level?: number, groupDs?: Object[], format?: Function): Object[];
    /**
     * It is used to categorize the multiple items based on a specific field in jsonArray.
     * The hierarchical queries are commonly required when you use foreign key binding.
     * @param  {string} fKey
     * @param  {string} from
     * @param  {Object[]} source
     * @param  {Group} lookup?
     * @param  {string} pKey?
     * @hidden
     */
    static buildHierarchy(fKey: string, from: string, source: Group, lookup?: Group, pKey?: string): void;
    /**
     * Throw error with the given string as message.
     * @param  {string} er
     */
    static throwError: Function;
    static aggregates: Aggregates;
    /**
     * The method used to get the field names which started with specified characters.
     * @param  {Object} obj
     * @param  {string[]} fields?
     * @param  {string} prefix?
     * @hidden
     */
    static getFieldList(obj: Object, fields?: string[], prefix?: string): string[];
    /**
     * Gets the value of the property in the given object.
     * The complex object can be accessed by providing the field names concatenated with dot(.).
     * @param  {string} nameSpace - The name of the property to be accessed.
     * @param  {Object} from - Defines the source object.
     */
    static getObject(nameSpace: string, from: Object): Object;
    /**
     * To set value for the nameSpace in desired object.
     * @param {string} nameSpace - String value to the get the inner object.
     * @param {Object} value - Value that you need to set.
     * @param {Object} obj - Object to get the inner object value.
     * @return { [key: string]: Object;
 } | Object
     * @hidden
     */
    static setValue(nameSpace: string, value: Object | null, obj: Object): {
        [key: string]: Object;
    } | Object;
    /**
     * Sort the given data based on the field and comparer.
     * @param  {Object[]} ds - Defines the input data.
     * @param  {string} field - Defines the field to be sorted.
     * @param  {Function} comparer - Defines the comparer function used to sort the records.
     */
    static sort(ds: Object[], field: string, comparer: Function): Object[];
    static ignoreDiacritics(value: string | number | boolean): string | Object;
    private static merge;
    private static getVal;
    private static toLowerCase;
    /**
     * Specifies the Object with filter operators.
     */
    static operatorSymbols: {
        [key: string]: string;
    };
    /**
     * Specifies the Object with filter operators which will be used for OData filter query generation.
     * * It will be used for date/number type filter query.
     */
    static odBiOperator: {
        [key: string]: string;
    };
    /**
     * Specifies the Object with filter operators which will be used for OData filter query generation.
     * It will be used for string type filter query.
     */
    static odUniOperator: {
        [key: string]: string;
    };
    /**
     * Specifies the Object with filter operators which will be used for ODataV4 filter query generation.
     * It will be used for string type filter query.
     */
    static odv4UniOperator: {
        [key: string]: string;
    };
    static diacritics: {
        [key: string]: string;
    };
    static fnOperators: Operators;
    /**
     * To perform the filter operation with specified adaptor and returns the result.
     * @param  {Object} adaptor
     * @param  {string} fnName
     * @param  {Object} param1?
     * @param  {Object} param2?
     * @hidden
     */
    static callAdaptorFunction(adaptor: Object, fnName: string, param1?: Object, param2?: Object): Object;
    static getAddParams(adp: Object, dm: DataManager, query: Query): Object;
    /**
     * To perform the parse operation on JSON data, like convert to string from JSON or convert to JSON from string.
     */
    static parse: ParseOption;
    /**
     * Checks wheather the given input is a plain object or not.
     * @param  {Object|Object[]} obj
     */
    static isPlainObject(obj: Object | Object[]): boolean;
    /**
     * Returns true when the browser cross origin request.
     */
    static isCors(): boolean;
    /**
     * Generate random GUID value which will be prefixed with the given value.
     * @param  {string} prefix
     */
    static getGuid(prefix: string): string;
    /**
     * Checks wheather the given value is null or not.
     * @param  {string|Object} val
     * @returns boolean
     */
    static isNull(val: string | Object): boolean;
    /**
     * To get the required items from collection of objects.
     * @param  {Object[]} array
     * @param  {string} field
     * @param  {Function} comparer
     * @returns Object
     * @hidden
     */
    static getItemFromComparer(array: Object[], field: string, comparer: Function): Object;
    /**
     * To get distinct values of Array or Array of Objects.
     * @param  {Object[]} json
     * @param  {string} field
     * @param  {boolean} requiresCompleteRecord
     * @returns Object[]
     * * distinct array of objects is return when requiresCompleteRecord set as true.
     * @hidden
     */
    static distinct(json: Object[], fieldName: string, requiresCompleteRecord?: boolean): Object[];
    /**
     * @hidden
     */
    static dateParse: DateParseOption;
}
/**
 * @hidden
 */
export interface Aggregates {
    sum?: Function;
    average?: Function;
    min?: Function;
    max?: Function;
    truecount?: Function;
    falsecount?: Function;
    count?: Function;
    type?: string;
    field?: string;
}
/**
 * @hidden
 */
export interface Operators {
    equal?: Function;
    notequal?: Function;
    lessthan?: Function;
    greaterthan?: Function;
    lessthanorequal?: Function;
    greaterthanorequal?: Function;
    contains?: Function;
    notnull?: Function;
    isnull?: Function;
    startswith?: Function;
    endswith?: Function;
    processSymbols?: Function;
    processOperator?: Function;
}
/**
 * @hidden
 */
export interface Group {
    GroupGuid?: string;
    level?: number;
    childLevels?: number;
    records?: Object[];
    key?: string;
    count?: number;
    items?: Object[];
    aggregates?: Object;
    field?: string;
    result?: Object;
}
/**
 * @hidden
 */
export interface ParseOption {
    parseJson?: Function;
    iterateAndReviveArray?: Function;
    iterateAndReviveJson?: Function;
    jsonReviver?: (key: string, value: Object) => Object;
    isJson?: Function;
    isGuid?: Function;
    replacer?: Function;
    jsonReplacer?: Function;
    arrayReplacer?: Function;
}
/**
 * @hidden
 */
export interface DateParseOption {
    addSelfOffset?: (input: Date) => Date;
    toUTC?: (input: Date) => Date;
    toTimeZone?: (input: Date, offset?: number, utc?: boolean) => Date;
    toLocalTime?: (input: Date) => string;
}
 }
export namespace diagrams { 

//node_modules/@syncfusion/ej2-diagrams/src/diagram/core/appearance-model.d.ts
/**
 * Interface for a class Thickness
 */
export interface ThicknessModel {
}
/**
 * Interface for a class Margin
 */
export interface MarginModel {
    /**
     * Sets the space to be left from the left side of the immediate parent of an element
     * @default 0
     * @isBlazorNullableType true
     */
    left?: number;
    /**
     * Sets the space to be left from the right side of the immediate parent of an element
     * @default 0
     * @isBlazorNullableType true
     */
    right?: number;
    /**
     * Sets the space to be left from the top side of the immediate parent of an element
     * @default 0
     * @isBlazorNullableType true
     */
    top?: number;
    /**
     * Sets the space to be left from the bottom side of the immediate parent of an element
     * @default 0
     * @isBlazorNullableType true
     */
    bottom?: number;
}
/**
 * Interface for a class Shadow
 */
export interface ShadowModel {
    /**
     * Defines the angle of Shadow
     * @default 45
     */
    angle?: number;
    /**
     * Defines the distance of Shadow
     * @default 5
     */
    distance?: number;
    /**
     * Defines the opacity of Shadow
     * @default 0.7
     */
    opacity?: number;
    /**
     * Defines the color of Shadow
     * @default ''
     */
    color?: string;
}
/**
 * Interface for a class Stop
 */
export interface StopModel {
    /**
     * Sets the color to be filled over the specified region
     * @default ''
     */
    color?: string;
    /**
     * Sets the position where the previous color transition ends and a new color transition starts
     * @default 0
     * @isBlazorNullableType true
     */
    offset?: number;
    /**
     * Describes the transparency level of the region
     * @default 1
     */
    opacity?: number;
}
/**
 * Interface for a class Gradient
 */
export interface GradientModel {
    /**
     * Defines the stop collection of gradient
     * @default []
     */
    stops?: StopModel[];
    /**
     * Defines the type of gradient
     * * Linear - Sets the type of the gradient as Linear
     * * Radial - Sets the type of the gradient as Radial
     * @default 'None'
     */
    type?: GradientType;
    /**
     * Defines the id of gradient
     * @default ''
     */
    id?: string;
}
/**
 * Interface for a class LinearGradient
 */
export interface LinearGradientModel extends GradientModel{
    /**
     * Defines the x1 value of linear gradient
     * @default 0
     */
    x1?: number;
    /**
     * Defines the x2 value of linear gradient
     * @default 0
     */
    x2?: number;
    /**
     * Defines the y1 value of linear gradient
     * @default 0
     */
    y1?: number;
    /**
     * Defines the y2 value of linear gradient
     * @default 0
     */
    y2?: number;
}
/**
 * Interface for a class RadialGradient
 */
export interface RadialGradientModel extends GradientModel{
    /**
     * Defines the cx value of radial gradient
     * @default 0
     */
    cx?: number;
    /**
     * Defines the cy value of radial gradient
     * @default cy
     */
    cy?: number;
    /**
     * Defines the fx value of radial gradient
     * @default 0
     */
    fx?: number;
    /**
     * Defines the fy value of radial gradient
     * @default fy
     */
    fy?: number;
    /**
     * Defines the r value of radial gradient
     * @default 50
     */
    r?: number;
}
/**
 * Interface for a class ShapeStyle
 */
export interface ShapeStyleModel {
    /**
     * Sets the fill color of a shape/path
     * @default 'white'
     */
    fill?: string;
    /**
     * Sets the stroke color of a shape/path
     * @default 'black'
     */
    strokeColor?: string;
    /**
     * Defines the pattern of dashes and spaces to stroke the path/shape
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```
     *  let nodes: NodeModel[] = [{  id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100,
     * style: { fill: 'red', strokeColor: 'blue', strokeWidth: 5, 
     * strokeDashArray: '2 2', opacity: 0.6 } as ShapeStyleModel,
     * }];
     * let diagram: Diagram = new Diagram({
     * ...
     *   nodes: nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default ''
     */
    strokeDashArray?: string;
    /**
     * Defines the stroke width of the path/shape
     * @default 1
     */
    strokeWidth?: number;
    /**
     * Sets the opacity of a shape/path
     * @default 1
     */
    opacity?: number;
    /**
     * Defines the gradient of a shape/path
     * @default null
     * @aspType object
     */
    gradient?: GradientModel | LinearGradientModel | RadialGradientModel;
}
/**
 * Interface for a class StrokeStyle
 */
export interface StrokeStyleModel extends ShapeStyleModel{
    /**
     * Sets the fill color of a shape/path
     * @default 'transparent'
     */
    fill?: string;
}
/**
 * Interface for a class TextStyle
 */
export interface TextStyleModel extends ShapeStyleModel{
    /**
     * Sets the font color of a text
     * @default 'black'
     */
    color?: string;
    /**
     * Sets the font type of a text
     * @default 'Arial'
     */
    fontFamily?: string;
    /**
     * Defines the font size of a text
     * @default 12
     */
    fontSize?: number;
    /**
     * Enables/disables the italic style of text
     * @default false
     */
    italic?: boolean;
    /**
     * Enables/disables the bold style of text
     * @default false
     */
    bold?: boolean;
    /**
     * Defines how the white space and new line characters have to be handled
     * * PreserveAll - Preserves all empty spaces and empty lines
     * * CollapseSpace - Collapses the consequent spaces into one
     * * CollapseAll - Collapses all consequent empty spaces and empty lines
     * @default 'CollapseSpace'
     */
    whiteSpace?: WhiteSpace;
    /**
     * Defines how the text should be wrapped, when the text size exceeds some specific bounds
     * * WrapWithOverflow - Wraps the text so that no word is broken
     * * Wrap - Wraps the text and breaks the word, if necessary
     * * NoWrap - Text will no be wrapped
     * @default  'WrapWithOverflow'
     */
    textWrapping?: TextWrap;
    /**
     * Defines how the text should be aligned within its bounds
     * * Left - Aligns the text at the left of the text bounds
     * * Right - Aligns the text at the right of the text bounds
     * * Center - Aligns the text at the center of the text bounds
     * * Justify - Aligns the text in a justified manner
     * @default 'Center'
     */
    textAlign?: TextAlign;
    /**
     * Defines how the text should be decorated. For example, with underline/over line
     * * Overline - Decorates the text with a line above the text
     * * Underline - Decorates the text with an underline
     * * LineThrough - Decorates the text by striking it with a line
     * * None - Text will not have any specific decoration
     * @default 'None'
     */
    textDecoration?: TextDecoration;
    /**
     * Defines how to handle the text when it exceeds the given size.
     * * Wrap - Wraps the text to next line, when it exceeds its bounds
     * * Ellipsis - It truncates the overflown text and represents the clipping with an ellipsis
     * * Clip - It clips the overflow text
     * @default 'Wrap'
     */
    textOverflow?: TextOverflow;
    /**
     * Sets the fill color of a shape/path
     * @default 'transparent'
     */
    fill?: string;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/core/appearance.d.ts
/**
 * Layout Model module defines the styles and types to arrange objects in containers
 */
export  class Thickness {
    /**
     * Sets the left value of the thickness
     * @default 0
     */
    left: number;
    /**
     * Sets the right value of the thickness
     * @default 0
     */
    right: number;
    /**
     * Sets the top value of the thickness
     * @default 0
     */
    top: number;
    /**
     * Sets the bottom value of the thickness
     * @default 0
     */
    bottom: number;
    constructor(left: number, right: number, top: number, bottom: number);
}
/**
 * Defines the space to be left between an object and its immediate parent
 */
export  class Margin extends base.ChildProperty<Margin> {
    /**
     * Sets the space to be left from the left side of the immediate parent of an element
     * @default 0
     * @isBlazorNullableType true
     */
    left: number;
    /**
     * Sets the space to be left from the right side of the immediate parent of an element
     * @default 0
     * @isBlazorNullableType true
     */
    right: number;
    /**
     * Sets the space to be left from the top side of the immediate parent of an element
     * @default 0
     * @isBlazorNullableType true
     */
    top: number;
    /**
     * Sets the space to be left from the bottom side of the immediate parent of an element
     * @default 0
     * @isBlazorNullableType true
     */
    bottom: number;
}
/**
 * Defines the Shadow appearance of the objects
 * ```html
 * <div id='diagram'></div>
 * ```
 * ```typescript
 *  let nodes$: NodeModel[] = [{ id: 'node2', width: 100, height: 100,
 *  constraints: NodeConstraints.Default | NodeConstraints.Shadow,
 *  shadow: { angle: 45, distance: 5, opacity: 0.7, color: 'grey'}
 * }];
 * let diagram$: Diagram = new Diagram({
 * ...
 *   nodes: nodes,
 * ...
 * });
 * diagram.appendTo('#diagram');
 * ```
 */
export  class Shadow extends base.ChildProperty<Shadow> {
    /**
     * Defines the angle of Shadow
     * @default 45
     */
    angle: number;
    /**
     * Defines the distance of Shadow
     * @default 5
     */
    distance: number;
    /**
     * Defines the opacity of Shadow
     * @default 0.7
     */
    opacity: number;
    /**
     * Defines the color of Shadow
     * @default ''
     */
    color: string;
}
/**
 * Defines the different colors and the region of color transitions
 * ```html
 * <div id='diagram'></div>
 * ```
 * ```typescript
 * let stopscol: StopModel[] = [];
 * let stops1: StopModel = { color: 'white', offset: 0, opacity: 0.7 };
 * stopscol.push(stops1);
 * let stops2: StopModel = { color: 'red', offset: 0, opacity: 0.3 };
 * stopscol.push(stops2);
 * let gradient: RadialGradientModel = { cx: 50, cy: 50, fx: 50, fy: 50, stops: stopscol, type: 'Radial' };
 * let nodes$: NodeModel[] = [{ id: 'node1', width: 100, height: 100,
 * style: { gradient: gradient }
 * }];
 * let diagram$: Diagram = new Diagram({
 * ...
 *   nodes: nodes,
 * ...
 * });
 * diagram.appendTo('#diagram');
 * ```
 */
export  class Stop extends base.ChildProperty<Stop> {
    /**
     * Sets the color to be filled over the specified region
     * @default ''
     */
    color: string;
    /**
     * Sets the position where the previous color transition ends and a new color transition starts
     * @default 0
     * @isBlazorNullableType true
     */
    offset: number;
    /**
     * Describes the transparency level of the region
     * @default 1
     */
    opacity: number;
    /**
     * @private
     * Returns the name of class Stop
     */
    getClassName(): string;
}
/**
 * Paints the node with a smooth transition from one color to another color
 */
export  class Gradient extends base.ChildProperty<Gradient> {
    /**
     * Defines the stop collection of gradient
     * @default []
     */
    stops: StopModel[];
    /**
     * Defines the type of gradient
     * * Linear - Sets the type of the gradient as Linear
     * * Radial - Sets the type of the gradient as Radial
     * @default 'None'
     */
    type: GradientType;
    /**
     * Defines the id of gradient
     * @default ''
     */
    id: string;
}
/**
 * Defines the linear gradient of styles
 * ```html
 * <div id='diagram'></div>
 * ```
 * ```typescript
 * let stopscol: StopModel[] = [];
 * let stops1: StopModel = { color: 'white', offset: 0, opacity: 0.7 };
 * stopscol.push(stops1);
 * let stops2: StopModel = { color: 'red', offset: 0, opacity: 0.3 };
 * stopscol.push(stops2);
 * let gradient: LinearGradientModel = { x1: 0, x2: 50, y1: 0, y2: 50, stops: stopscol, type: 'Linear' };
 * let nodes$: NodeModel[] = [{ id: 'node1', width: 100, height: 100,
 * style: { gradient: gradient }
 * }];
 * let diagram$: Diagram = new Diagram({
 * ...
 *   nodes: nodes,
 * ...
 * });
 * diagram.appendTo('#diagram');
 * ```
 */
/**
 * Paints the node with linear color transitions
 */
export  class LinearGradient extends Gradient {
    /**
     * Defines the x1 value of linear gradient
     * @default 0
     */
    x1: number;
    /**
     * Defines the x2 value of linear gradient
     * @default 0
     */
    x2: number;
    /**
     * Defines the y1 value of linear gradient
     * @default 0
     */
    y1: number;
    /**
     * Defines the y2 value of linear gradient
     * @default 0
     */
    y2: number;
}
/**
 * A focal point defines the beginning of the gradient, and a circle defines the end point of the gradient
 * ```html
 * <div id='diagram'></div>
 * ```
 * ```typescript
 * let stopscol: StopModel[] = [];
 * let stops1: StopModel = { color: 'white', offset: 0, opacity: 0.7 };
 * stopscol.push(stops1);
 * let stops2: StopModel = { color: 'red', offset: 0, opacity: 0.3 };
 * stopscol.push(stops2);
 * let gradient: RadialGradientModel = { cx: 50, cy: 50, fx: 50, fy: 50, stops: stopscol, type: 'Radial' };
 * let nodes$: NodeModel[] = [{ id: 'node1', width: 100, height: 100,
 * style: { gradient: gradient }
 * }];
 * let diagram$: Diagram = new Diagram({
 * ...
 *   nodes: nodes,
 * ...
 * });
 * diagram.appendTo('#diagram');
 * ```
 */
export  class RadialGradient extends Gradient {
    /**
     * Defines the cx value of radial gradient
     * @default 0
     */
    cx: number;
    /**
     * Defines the cy value of radial gradient
     * @default cy
     */
    cy: number;
    /**
     * Defines the fx value of radial gradient
     * @default 0
     */
    fx: number;
    /**
     * Defines the fy value of radial gradient
     * @default fy
     */
    fy: number;
    /**
     * Defines the r value of radial gradient
     * @default 50
     */
    r: number;
}
/**
 * Defines the style of shape/path
 */
export  class ShapeStyle extends base.ChildProperty<ShapeStyle> {
    /**
     * Sets the fill color of a shape/path
     * @default 'white'
     */
    fill: string;
    /**
     * Sets the stroke color of a shape/path
     * @default 'black'
     */
    strokeColor: string;
    /**
     * Defines the pattern of dashes and spaces to stroke the path/shape
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```
     *  let nodes$: NodeModel[] = [{  id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100,
     * style: { fill: 'red', strokeColor: 'blue', strokeWidth: 5,
     * strokeDashArray: '2 2', opacity: 0.6 } as ShapeStyleModel,
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     *   nodes: nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default ''
     */
    strokeDashArray: string;
    /**
     * Defines the stroke width of the path/shape
     * @default 1
     */
    strokeWidth: number;
    /**
     * Sets the opacity of a shape/path
     * @default 1
     */
    opacity: number;
    /**
     * Defines the gradient of a shape/path
     * @default null
     * @aspType object
     */
    gradient: GradientModel | LinearGradientModel | RadialGradientModel;
}
/**
 * Defines the stroke style of a path
 */
export  class StrokeStyle extends ShapeStyle {
    /**
     * Sets the fill color of a shape/path
     * @default 'transparent'
     */
    fill: string;
}
/**
 * Defines the appearance of text
 * ```html
 * <div id='diagram'></div>
 * ```
 * ```typescript
 * let style: TextStyleModel = { strokeColor: 'black', opacity: 0.5, whiteSpace:'CollapseSpace', strokeWidth: 1 };
 * let node: NodeModel;
 * node = {
 * ...
 * id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100,
 * annotations : [{
 * content: 'text', style: style }];
 * ...
 * };
 * let diagram$: Diagram = new Diagram({
 * ...
 *   nodes: [node],
 * ...
 * });
 * diagram.appendTo('#diagram');
 * ```
 */
export  class TextStyle extends ShapeStyle {
    /**
     * Sets the font color of a text
     * @default 'black'
     */
    color: string;
    /**
     * Sets the font type of a text
     * @default 'Arial'
     */
    fontFamily: string;
    /**
     * Defines the font size of a text
     * @default 12
     */
    fontSize: number;
    /**
     * Enables/disables the italic style of text
     * @default false
     */
    italic: boolean;
    /**
     * Enables/disables the bold style of text
     * @default false
     */
    bold: boolean;
    /**
     * Defines how the white space and new line characters have to be handled
     * * PreserveAll - Preserves all empty spaces and empty lines
     * * CollapseSpace - Collapses the consequent spaces into one
     * * CollapseAll - Collapses all consequent empty spaces and empty lines
     * @default 'CollapseSpace'
     */
    whiteSpace: WhiteSpace;
    /**
     * Defines how the text should be wrapped, when the text size exceeds some specific bounds
     * * WrapWithOverflow - Wraps the text so that no word is broken
     * * Wrap - Wraps the text and breaks the word, if necessary
     * * NoWrap - Text will no be wrapped
     * @default  'WrapWithOverflow'
     */
    textWrapping: TextWrap;
    /**
     * Defines how the text should be aligned within its bounds
     * * Left - Aligns the text at the left of the text bounds
     * * Right - Aligns the text at the right of the text bounds
     * * Center - Aligns the text at the center of the text bounds
     * * Justify - Aligns the text in a justified manner
     * @default 'Center'
     */
    textAlign: TextAlign;
    /**
     * Defines how the text should be decorated. For example, with underline/over line
     * * Overline - Decorates the text with a line above the text
     * * Underline - Decorates the text with an underline
     * * LineThrough - Decorates the text by striking it with a line
     * * None - Text will not have any specific decoration
     * @default 'None'
     */
    textDecoration: TextDecoration;
    /**
     * Defines how to handle the text when it exceeds the given size.
     * * Wrap - Wraps the text to next line, when it exceeds its bounds
     * * Ellipsis - It truncates the overflown text and represents the clipping with an ellipsis
     * * Clip - It clips the overflow text
     * @default 'Wrap'
     */
    textOverflow: TextOverflow;
    /**
     * Sets the fill color of a shape/path
     * @default 'transparent'
     */
    fill: string;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/core/containers/canvas.d.ts
/**
 * Canvas module is used to define a plane(canvas) and to arrange the children based on margin
 */
export  class Canvas extends Container {
    /**
     * Not applicable for canvas
     *  @private
     */
    measureChildren: boolean;
    /**
     * Measures the minimum space that the canvas requires
     * @param availableSize
     */
    measure(availableSize: Size): Size;
    /**
     * Arranges the child elements of the canvas
     */
    arrange(desiredSize: Size, isStack?: boolean): Size;
    /**
     * Aligns the child element based on its parent
     * @param child
     * @param childSize
     * @param parentSize
     * @param x
     * @param y
     */
    private alignChildBasedOnParent;
    /**
     * Aligns the child elements based on a point
     * @param child
     * @param x
     * @param y
     */
    private alignChildBasedOnaPoint;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/core/containers/container.d.ts
/**
 * Container module is used to group related objects
 */
export  class Container extends DiagramElement {
    /**
     * Gets/Sets the space between the container and its immediate children
     */
    padding: Thickness;
    /**
     * Gets/Sets the collection of child elements
     */
    children: DiagramElement[];
    private desiredBounds;
    /** @private */
    measureChildren: boolean;
    /**
     * returns whether the container has child elements or not
     */
    hasChildren(): boolean;
    /**   @private  */
    prevRotateAngle: number;
    /**
     * Measures the minimum space that the container requires
     *
     * @param availableSize
     */
    measure(availableSize: Size): Size;
    /**
     * Arranges the container and its children
     * @param desiredSize
     */
    arrange(desiredSize: Size): Size;
    /**
     * Stretches the child elements based on the size of the container
     * @param size
     */
    protected stretchChildren(size: Size): void;
    /**
     * Considers the padding of the element when measuring its desired size
     * @param size
     */
    protected applyPadding(size: Size): void;
    /**
     * Finds the offset of the child element with respect to the container
     * @param child
     * @param center
     */
    protected findChildOffsetFromCenter(child: DiagramElement, center: PointModel): void;
    private GetChildrenBounds;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/core/containers/grid.d.ts
/**
 * Grid panel is used to arrange the children in a table like structure
 */
export  class GridPanel extends Container {
    private childTable;
    /** @private */
    rowDefinitions(): RowDefinition[];
    private rowDefns;
    /** @private */
    columnDefinitions(): ColumnDefinition[];
    private colDefns;
    /** @private */
    rows: GridRow[];
    cellStyle: ShapeStyleModel;
    private desiredRowHeight;
    private desiredCellWidth;
    addObject(obj: DiagramElement, rowId?: number, columnId?: number, rowSpan?: number, columnSpan?: number): void;
    private addObjectToCell;
    /** @private */
    updateProperties(offsetX: number, offsetY: number, width: number, height: number): void;
    /** @private */
    setDefinitions(rows: RowDefinition[], columns: ColumnDefinition[]): void;
    /** @private */
    private addCellInRow;
    /** @private */
    private calculateSize;
    /** @private */
    updateRowHeight(rowId: number, height: number, isConsiderChild: boolean, padding?: number): void;
    private setTextRefresh;
    /** @private */
    updateColumnWidth(colId: number, width: number, isConsiderChild: boolean, padding?: number): void;
    private calculateCellWidth;
    private calculateCellHeight;
    private calculateCellSizeBasedOnChildren;
    private calculateCellWidthBasedOnChildren;
    private calculateCellHeightBasedOnChildren;
    /** @private */
    addRow(rowId: number, rowDefn: RowDefinition, isMeasure: boolean): void;
    /** @private */
    addColumn(columnId: number, column: ColumnDefinition, isMeasure?: boolean): void;
    /** @private */
    removeRow(rowId: number): void;
    /** @private */
    removeColumn(columnId: number): void;
    /** @private */
    updateRowIndex(currentIndex: number, newIndex: number): void;
    /** @private */
    updateColumnIndex(startRowIndex: number, currentIndex: number, newIndex: number): void;
    /** @private */
    measure(availableSize: Size): Size;
    /** @private */
    arrange(desiredSize: Size, isChange?: boolean): Size;
}
/**
 * Defines the behavior of the RowDefinition of node
 */
export  class RowDefinition {
    /** returns the height of node */
    height: number;
}
/**
 * Defines the behavior of the ColumnDefinition of node
 */
export  class ColumnDefinition {
    /** returns the width of node */
    width: number;
}
/** @private */
export  class GridRow {
    cells: GridCell[];
}
/** @private */
export  class GridCell extends Canvas {
    columnSpan: number;
    rowSpan: number;
    desiredCellWidth: number;
    desiredCellHeight: number;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/core/containers/stack-panel.d.ts
/**
 * StackPanel module is used to arrange its children in a line
 */
export  class StackPanel extends Container {
    /**
     * Gets/Sets the orientation of the stack panel
     */
    orientation: Orientation;
    /**
     * Not applicable for canvas
     * to avoid the child size updation with respect to parent ser true
     * @private
     */
    measureChildren: boolean;
    /**
     * Measures the minimum space that the panel needs
     * @param availableSize
     */
    measure(availableSize: Size): Size;
    /**
     * Arranges the child elements of the stack panel
     * @param desiredSize
     */
    arrange(desiredSize: Size): Size;
    /**
     * Measures the minimum space that the panel needs
     * @param availableSize
     */
    private measureStackPanel;
    private arrangeStackPanel;
    private updateHorizontalStack;
    private updateVerticalStack;
    private arrangeHorizontalStack;
    private arrangeVerticalStack;
    protected stretchChildren(size: Size): void;
    private applyChildMargin;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/diagram-element.d.ts
/**
 * DiagramElement module defines the basic unit of diagram
 */
export  class DiagramElement {
    /**
     * Sets the unique id of the element
     */
    id: string;
    /**
     * Sets/Gets the reference point of the element
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let stackPanel: StackPanel = new StackPanel();
     * stackPanel.offsetX = 300;
 stackPanel.offsetY = 200;
     * stackPanel.width = 100;
 stackPanel.height = 100;
     * stackPanel.style.fill = 'red';
     * stackPanel.pivot = { x: 0.5, y: 0.5 };
     * let diagram$: Diagram = new Diagram({
     * ...
     * basicElements: [stackPanel],
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     */
    pivot: PointModel;
    /**
     * Sets or gets whether the content of the element needs to be measured
     */
    protected isDirt: boolean;
    /**
     * set to true during print and eport
     */
    /** @private */
    isExport: boolean;
    /**
     * set scaling value for print and export
     */
    /** @private */
    exportScaleValue: PointModel;
    /**
     * set scaling value for print and export
     */
    /** @private */
    exportScaleOffset: PointModel;
    /**
     * Check whether style need to be apply or not
     */
    /** @private */
    canApplyStyle: boolean;
    /**
     * Sets or gets whether the content of the element to be visible
     */
    visible: boolean;
    /**
     * Sets/Gets the x-coordinate of the element
     */
    offsetX: number;
    /**
     * Sets/Gets the y-coordinate of the element
     */
    offsetY: number;
    /**
     * Set the corner of the element
     */
    cornerRadius: number;
    /**
     * Sets/Gets the minimum height of the element
     */
    minHeight: number;
    /**
     * Sets/Gets the minimum width of the element
     */
    minWidth: number;
    /**
     * Sets/Gets the maximum width of the element
     */
    maxWidth: number;
    /**
     * Sets/Gets the maximum height of the element
     */
    maxHeight: number;
    /**
     * Sets/Gets the width of the element
     */
    width: number;
    /**
     * Sets/Gets the height of the element
     */
    height: number;
    /**
     * Sets/Gets the rotate angle of the element
     */
    rotateAngle: number;
    /**
     * Sets/Gets the margin of the element
     */
    margin: MarginModel;
    /**
     * Sets/Gets how the element has to be horizontally arranged with respect to its immediate parent
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Left - Aligns the diagram element at the left of its immediate parent
     * * Right - Aligns the diagram element at the right of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     */
    horizontalAlignment: HorizontalAlignment;
    /**
     * Sets/Gets how the element has to be vertically arranged with respect to its immediate parent
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Top - Aligns the diagram element at the top of its immediate parent
     * * Bottom - Aligns the diagram element at the bottom of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     */
    verticalAlignment: VerticalAlignment;
    /**
     * Sets/Gets the mirror image of diagram element in both horizontal and vertical directions
     * * FlipHorizontal - Translate the diagram element throughout its immediate parent
     * * FlipVertical - Rotate the diagram element throughout its immediate parent
     */
    flip: FlipDirection;
    /**
     * Sets whether the element has to be aligned with respect to a point/with respect to its immediate parent
     * * Point - Diagram elements will be aligned with respect to a point
     * * Object - Diagram elements will be aligned with respect to its immediate parent
     */
    relativeMode: RelativeMode;
    /**
     * Sets whether the element has to be transformed based on its parent or not
     * * Self - Sets the transform type as Self
     * * Parent - Sets the transform type as Parent
     */
    transform: Transform;
    /**
     * Sets the style of the element
     */
    style: ShapeStyleModel;
    /**
     * Gets the parent id for the element
     */
    parentId: string;
    /**
     * Gets the minimum size that is required by the element
     */
    desiredSize: Size;
    /**
     * Gets the size that the element will be rendered
     */
    actualSize: Size;
    /**
     * Gets the rotate angle that is set to the immediate parent of the element
     */
    parentTransform: number;
    /** @private */
    preventContainer: boolean;
    /**
     * Gets/Set the boolean value for the element
     */
    isSvgRender: boolean;
    /**
     * Gets/Sets the boundary of the element
     */
    bounds: Rect;
    /**
     * Gets/Sets the corners of the rectangular bounds
     */
    corners: Corners;
    /**
     * Defines the appearance of the shadow of the element
     */
    shadow: ShadowModel;
    /**
     * Defines the description of the diagram element
     */
    description: string;
    /**
     * Defines whether the element has to be measured or not
     */
    staticSize: boolean;
    /**
     * check whether the element is rect or not
     */
    isRectElement: boolean;
    /** @private */
    isCalculateDesiredSize: boolean;
    /**
     * Set the offset values for container in flipping
     */
    /** @private */
    flipOffset: PointModel;
    /**
     * Defines whether the element is group or port
     */
    /** @private */
    elementActions: ElementAction;
    /**
     * Sets the offset of the element with respect to its parent
     * @param x
     * @param y
     * @param mode
     */
    setOffsetWithRespectToBounds(x: number, y: number, mode: UnitMode): void;
    /**
     * Gets the position of the element with respect to its parent
     * @param size
     */
    getAbsolutePosition(size: Size): PointModel;
    private position;
    private unitMode;
    /**   @private  */
    float: boolean;
    /**
    * used to set the outer bounds value
    * @private
    */
    outerBounds: Rect;
    private floatingBounds;
    /**
     * Measures the minimum space that the element requires
     * @param availableSize
     */
    measure(availableSize: Size): Size;
    /**
     * Arranges the element
     * @param desiredSize
     */
    arrange(desiredSize: Size): Size;
    /**
     * Updates the bounds of the element
     */
    updateBounds(): void;
    /**
     * Validates the size of the element with respect to its minimum and maximum size
     * @param desiredSize
     * @param availableSize
     */
    protected validateDesiredSize(desiredSize: Size, availableSize: Size): Size;
}
/**
 * Interface for a class corners
 */
export interface Corners {
    /** returns the top left point of canvas corner */
    topLeft: PointModel;
    /** returns the top center point of canvas corner */
    topCenter: PointModel;
    /** returns the top right point of canvas corner */
    topRight: PointModel;
    /** returns the middle left point of canvas corner */
    middleLeft: PointModel;
    /** returns the center point of canvas corner */
    center: PointModel;
    /** returns the middle left point of canvas corner */
    middleRight: PointModel;
    /** returns the bottom left point of canvas corner */
    bottomLeft: PointModel;
    /** returns the bottom center point of canvas corner */
    bottomCenter: PointModel;
    /** returns the bottom right point of canvas corner */
    bottomRight: PointModel;
    /** returns left position of canvas corner */
    left: number;
    /** returns right position of canvas corner */
    right: number;
    /** returns top position of canvas corner */
    top: number;
    /** returns bottom position of canvas corner */
    bottom: number;
    /** returns width of canvas */
    width: number;
    /** returns height of canvas */
    height: number;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/html-element.d.ts
/**
 * HTMLElement defines the basic html elements
 */
export  class DiagramHtmlElement extends DiagramElement {
    /**
     * set the id for each element
     */
    constructor(nodeId: string, diagramId: string, annotationId?: string);
    private data;
    /**
     * Gets the node id for the element
     */
    nodeId: string;
    /**
     * defines the id of the annotation on rendering template on label.
     * @private
     */
    annotationId: string;
    /**
     * defines the constraints of the annotation on rendering template on label.
     * @private
     */
    constraints: AnnotationConstraints;
    /**
     * Gets the diagram id for the html element
     */
    diagramId: string;
    /**
     * Gets or sets the geometry of the html element
     */
    /**
    * Gets or sets the value of the html element
    */
    content: string | HTMLElement;
    /**
     * defines geometry of the html element
     * @private
     */
    template: HTMLElement;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/image-element.d.ts
/**
 * ImageElement defines a basic image elements
 */
export  class ImageElement extends DiagramElement {
    /**
     * set the id for each element
     */
    constructor();
    /**
     * sets or gets the image source
     */
    private imageSource;
    /**
     * Gets the source for the image element
     */
    /**
    * Sets the source for the image element
    */
    source: string;
    /**
     * sets scaling factor of the image
     */
    imageScale: Scale;
    /**
     * sets the alignment of the image
     */
    imageAlign: ImageAlignment;
    /**
     * Sets how to stretch the image
     */
    stretch: Stretch;
    /**
     * Saves the actual size of the image
     */
    contentSize: Size;
    /**
     * Measures minimum space that is required to render the image
     * @param availableSize
     */
    measure(availableSize: Size): Size;
    /**
     * Arranges the image
     * @param desiredSize
     */
    arrange(desiredSize: Size): Size;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/native-element.d.ts
/**
 * NativeElement defines the basic native elements
 */
export  class DiagramNativeElement extends DiagramElement {
    /**
     * set the id for each element
     */
    constructor(nodeId: string, diagramId: string);
    private data;
    /**
     * set the node id
     */
    nodeId: string;
    /**
     * set the diagram id
     */
    diagramId: string;
    /**   @private  */
    /**
    * sets the geometry of the native element
    */
    content: string | SVGElement;
    /**
     * defines geometry of the native element
     * @private
     */
    template: SVGElement;
    /**
     * sets scaling factor of the Native Element
     */
    scale: Stretch;
    /**
     * Saves the actual size of the Native Element
     * @private
     */
    contentSize: Size;
    /**
     * Saves the top left point of the Native Element
     * @private
     */
    templatePosition: PointModel;
    /**
     * Measures minimum space that is required to render the Native Element
     * @param availableSize
     */
    measure(availableSize: Size): Size;
    /**
     * Arranges the Native Element
     * @param desiredSize
     */
    arrange(desiredSize: Size): Size;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/path-element.d.ts
/**
 * PathElement takes care of how to align the path based on offsetX and offsetY
 */
export  class PathElement extends DiagramElement {
    /**
     * set the id for each element
     */
    constructor();
    /**
     * Gets or sets the geometry of the path element
     */
    private pathData;
    /**
     * Gets the geometry of the path element
     */
    /**
    * Sets the geometry of the path element
    */
    data: string;
    /**
     * Gets/Sets whether the path has to be transformed to fit the given x,y, width, height
     */
    transformPath: boolean;
    /**
     * Gets/Sets the equivalent path, that will have the origin as 0,0
     */
    absolutePath: string;
    /**   @private  */
    canMeasurePath: boolean;
    /**   @private  */
    absoluteBounds: Rect;
    private points;
    private pointTimer;
    /** @private */
    getPoints(): PointModel[];
    /**
     * Measures the minimum space that is required to render the element
     * @param availableSize
     */
    measure(availableSize: Size): Size;
    /**
     * Arranges the path element
     * @param desiredSize
     */
    arrange(desiredSize: Size): Size;
    /**
     * Translates the path to 0,0 and scales the path based on the actual size
     * @param pathData
     * @param bounds
     * @param actualSize
     */
    updatePath(pathData: string, bounds: Rect, actualSize: Size): string;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/text-element.d.ts
/**
 * TextElement is used to display text/annotations
 */
export  class TextElement extends DiagramElement {
    /**
     * set the id for each element
     */
    constructor();
    /**
     * sets or gets the image source
     */
    private textContent;
    /** @private */
    canMeasure: boolean;
    /** @private */
    isLaneOrientation: boolean;
    /** @private */
    canConsiderBounds: boolean;
    /**
     * sets the constraints for the text element
     */
    constraints: AnnotationConstraints;
    /**
     * sets the hyperlink color to blue
     */
    hyperlink: HyperlinkModel;
    /** @private */
    doWrap: boolean;
    /**
     * gets the content for the text element
     */
    /**
    * sets the content for the text element
    */
    content: string;
    private textNodes;
    /**
     * sets the content for the text element
     */
    /**
    * gets the content for the text element
    */
    childNodes: SubTextElement[];
    private textWrapBounds;
    /**
     * gets the wrapBounds for the text
     */
    /**
    * sets the wrapBounds for the text
    */
    wrapBounds: TextBounds;
    /** @private */
    refreshTextElement(): void;
    /**
     * Defines the appearance of the text element
     */
    style: TextStyleModel;
    /**
     * Measures the minimum size that is required for the text element
     * @param availableSize
     */
    measure(availableSize: Size): Size;
    /**
     * Arranges the text element
     * @param desiredSize
     */
    arrange(desiredSize: Size): Size;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/data-binding/data-binding.d.ts
/**
 * data source defines the basic unit of diagram
 */
export  class DataBinding {
    /**
     * Constructor for the data binding module.
     * @private
     */
    constructor();
    /**
     * To destroy the data binding module
     * @return {void}
     * @private
     */
    destroy(): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**   @private  */
    dataTable: Object;
    /**
     * Initialize nodes and connectors when we have a data as JSON
     * @param data
     * @param diagram
     * @private
     */
    initData(data: DataSourceModel, diagram: Diagram): void;
    /**
     * Initialize nodes and connector when we have a data as remote url
     * @param data
     * @param diagram
     * @private
     */
    initSource(data: DataSourceModel, diagram: Diagram): void;
    private applyDataSource;
    /**
     * updateMultipleRootNodes method is used  to update the multiple Root Nodes
     * @param object
     * @param rootnodes
     * @param mapper
     * @param data
     */
    private updateMultipleRootNodes;
    /**
     * Get the node values
     * @param mapper
     * @param item
     * @param diagram
     */
    private applyNodeTemplate;
    private splitString;
    private renderChildNodes;
    private containsConnector;
    /**
     *  collectionContains method is used to  check wthear the node is already present in collection or not
     * @param node
     * @param diagram
     * @param id
     * @param parentId
     */
    private collectionContains;
    /**
     * Get the Connector values
     * @param sourceNode
     * @param targetNode
     * @param diagram
     */
    private applyConnectorTemplate;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/diagram-model.d.ts
/**
 * Interface for a class Diagram
 */
export interface DiagramModel extends base.ComponentModel{
    /**
     * Defines the width of the diagram model.
     * ```html
     * <div id='diagram'/>
     * ```
     * ```typescript
     * let diagram$: Diagram = new Diagram({
     * width:'1000px', height:'500px' });
     * diagram.appendTo('#diagram');
     * ```
     * @default '100%'
     */
    width?: string | number;
    /**
     * Defines the diagram rendering mode.
     * * SVG - Renders the diagram objects as SVG elements
     * * Canvas - Renders the diagram in a canvas
     * @default 'SVG'
     */
    mode?: RenderingMode;
    /**
     * Defines the height of the diagram model.
     * @default '100%'
     */
    height?: string | number;
    /**
     * Defines type of menu that appears when you perform right-click operation
     * An object to customize the context menu of diagram
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let diagram$: Diagram = new Diagram({
     * ...
     *   contextMenuSettings: { show: true },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @deprecated
     */
    contextMenuSettings?: ContextMenuSettingsModel;
    /**
     * Constraints are used to enable/disable certain behaviors of the diagram.
     * * None - Disables DiagramConstraints constraints
     * * Bridging - Enables/Disables Bridging support for connector
     * * UndoRedo - Enables/Disables the Undo/Redo support
     * * popups.Tooltip - Enables/Disables popups.Tooltip support
     * * UserInteraction - Enables/Disables editing diagram interactively
     * * ApiUpdate - Enables/Disables editing diagram through code
     * * PageEditable - Enables/Disables editing diagrams both interactively and through code
     * * Zoom - Enables/Disables Zoom support for the diagram
     * * PanX - Enables/Disable PanX support for the diagram
     * * PanY - Enables/Disable PanY support for the diagram
     * * Pan - Enables/Disable Pan support the diagram
     * @default 'Default'
     * @aspNumberEnum 
     * @blazorNumberEnum
     */
    constraints?: DiagramConstraints;
    /**
     * Defines the precedence of the interactive tools. They are,
     * * None - Disables selection, zooming and drawing tools
     * * SingleSelect - Enables/Disables single select support for the diagram
     * * MultipleSelect - Enables/Disable MultipleSelect select support for the diagram
     * * ZoomPan - Enables/Disable ZoomPan support for the diagram
     * * DrawOnce - Enables/Disable ContinuousDraw support for the diagram 
     * * ContinuousDraw - Enables/Disable ContinuousDraw support for the diagram
     * @default 'Default'
     * @aspNumberEnum
     * @blazorNumberEnum
     */
    tool?: DiagramTools;
    /**
     * Defines the direction of the bridge that is inserted when the segments are intersected
     * * Top - Defines the direction of the bridge as Top
     * * Bottom - Defines the direction of the bridge as Bottom
     * * Left - Sets the bridge direction as left
     * * Right - Sets the bridge direction as right
     * @default top
     */
    bridgeDirection?: BridgeDirection;
    /**
     * Defines the background color of the diagram
     * @default 'transparent'
     */
    backgroundColor?: string;
    /**
     * Defines the gridlines and defines how and when the objects have to be snapped
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let horizontalGridlines: GridlinesModel = {lineColor: 'black', lineDashArray: '1,1' };
     * let verticalGridlines: GridlinesModel = {lineColor: 'black', lineDashArray: '1,1'};
     * let diagram$: Diagram = new Diagram({
     * ...
     * snapSettings: { horizontalGridlines, verticalGridlines, constraints: SnapConstraints.ShowLines,
     * snapObjectDistance: 5, snapAngle: 5 },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default {}
     */
    snapSettings?: SnapSettingsModel;
    /**
     * Defines the properties of both horizontal and vertical guides/rulers to measure the diagram area.
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let arrange: Function = (args: IArrangeTickOptions) => {
     * if (args.tickInterval % 10 == 0) {
     * args.tickLength = 25;
     * }
     * }
     * let diagram$: Diagram = new Diagram({
     * ...
     * rulerSettings: { showRulers: true,
     * horizontalRuler: { segmentWidth: 50, orientation: 'Horizontal', interval: 10,  arrangeTick: arrange },
     * verticalRuler: {segmentWidth: 200,interval: 20, thickness: 20,
     * tickAlignment: 'LeftOrTop', segmentWidth: 50, markerColor: 'red' }
     * },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default {}
     */
    rulerSettings?: RulerSettingsModel;
    /**
     * Page settings enable to customize the appearance, width, and height of the Diagram page.
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let diagram$: Diagram = new Diagram({
     * ...
     * pageSettings: {  width: 800, height: 600, orientation: 'Landscape',
     * background: { color: 'blue' }, boundaryConstraints: 'Infinity'},
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default {}
     */
    pageSettings?: PageSettingsModel;
    /**
     * Defines the serialization settings of diagram.
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let diagram$: Diagram = new Diagram({
     * ...
     * serializationSettings: { preventDefaults: true },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default {}
     */
    serializationSettings?: SerializationSettingsModel;
    /**
     * Defines the collection of nodes
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *           id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *           annotations: [{ content: 'Default Shape' }]
     *       },
     *       {
     *           id: 'node2', width: 100, height: 100, offsetX: 300, offsetY: 100,
     *           shape: {
     *               type: 'Basic', shape: 'Ellipse'
     *           },
     *           annotations: [{ content: 'Path Element' }]
     *       }
     *       ];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes: nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    nodes?: NodeModel[];
    /**
     * Defines the object to be drawn using drawing tool
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let diagram$: Diagram = new Diagram({
     * ...
     * drawingObject : {id: 'connector3', type: 'Straight'},
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    drawingObject?: NodeModel | ConnectorModel;
    /**
     * Defines a collection of objects, used to create link between two points, nodes or ports to represent the relationships between them
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     *       let connectors: ConnectorModel[] = [{
     *           id: 'connector1',
     *           type: 'Straight',
     *           sourcePoint: { x: 100, y: 300 },
     *           targetPoint: { x: 200, y: 400 },
     *       }];
     * let diagram$: Diagram = new Diagram({
     * ...
     *       connectors: connectors,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default []
     */
    connectors?: ConnectorModel[];
    /**
     * Defines the basic elements for the diagram
     * @default []
     * @hidden
     */
    basicElements?: DiagramElement[];
    /**
     * Defines the tooltip that should be shown when the mouse hovers over a node or connector
     * An object that defines the description, appearance and alignments of tooltip
     * @default {}
     */
    tooltip?: DiagramTooltipModel;
    /**
     * Configures the data source that is to be bound with diagram
     * @default {}
     */
    dataSourceSettings?: DataSourceModel;
    /**
     * Allows the user to save custom information/data about diagram
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    addInfo?: Object;
    /**
     * Customizes the undo redo functionality 
     * @default undefined
     * @deprecated
     */
    historyManager?: History;
    /**
     * Helps to return the default properties of node
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *           id: 'node1', height: 100, offsetX: 100, offsetY: 100,
     *           annotations: [{ content: 'Default Shape' }]
     *       },
     *       {
     *           id: 'node2', width: 100, height: 100, offsetX: 300, offsetY: 100,
     *           shape: {
     *               type: 'Basic', shape: 'Ellipse'
     *           },
     *           annotations: [{ content: 'Ellipse' }]
     *       }
     *       ];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes: nodes,
     * getNodeDefaults: (node: NodeModel) => {
     *   let obj: NodeModel = {};
     *   if (obj.width === undefined) {
     *       obj.width = 145;
     *   }
     *   obj.style = { fill: '#357BD2', strokeColor: 'white' };
     *   obj.annotations = [{ style: { color: 'white', fill: 'transparent' } }];
     *   return obj;
     *    },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    getNodeDefaults?: Function | string;
    /**
     * Helps to assign the default properties of nodes
     * @blazorType DiagramNode
     */
    nodeDefaults?: NodeModel;
    /**
     * Helps to return the default properties of connector
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     *       let connectors: ConnectorModel[] = [{
     *           id: 'connector1',
     *           sourcePoint: { x: 100, y: 300 },
     *           targetPoint: { x: 200, y: 400 },
     *       }];
     * let diagram$: Diagram = new Diagram({
     * ...
     *   connectors: connectors,
     *   getConnectorDefaults: (connector: ConnectorModel, diagram: Diagram) => {
     *   let connObj: ConnectorModel = {};
     *   connObj.targetDecorator ={ shape :'None' };
     *   connObj.type = 'Orthogonal';
     *   return connObj;
     *   },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated 
     */
    getConnectorDefaults?: Function | string;
    /**
     * Helps to assign the default properties of connector
     * @blazorType DiagramConnector
     */
    connectorDefaults?: ConnectorModel;
    /**
     * setNodeTemplate helps to customize the content of a node
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let getTextElement: Function = (text: string) => {
     * let textElement: TextElement = new TextElement();
     * textElement.width = 50;
     * textElement.height = 20;
     * textElement.content = text;
     * return textElement;
     * };
     * let nodes$: NodeModel[] = [{
     *           id: 'node1', height: 100, offsetX: 100, offsetY: 100,
     *           annotations: [{ content: 'Default Shape' }]
     *       },
     *       {
     *           id: 'node2', width: 100, height: 100, offsetX: 300, offsetY: 100
     *       }
     *       ];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes: nodes,
     * setNodeTemplate : setNodeTemplate,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * function setNodeTemplate() {
     * setNodeTemplate: (obj: NodeModel, diagram: Diagram): StackPanel => {
     *   if (obj.id === 'node2') {
     *       let table: StackPanel = new StackPanel();
     *       table.orientation = 'Horizontal';
     *       let column1: StackPanel = new StackPanel();
     *       column1.children = [];
     *       column1.children.push(getTextElement('Column1'));
     *       addRows(column1);
     *       let column2: StackPanel = new StackPanel();
     *       column2.children = [];
     *       column2.children.push(getTextElement('Column2'));
     *       addRows(column2);
     *       table.children = [column1, column2];
     *       return table;
     *   }
     *   return null;
     *   }
     * ...
     * }
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    setNodeTemplate?: Function | string;
    /**
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let connector1: ConnectorModel = {
     *          id: 'connector1', type: 'Straight',
     *          sourcePoint: { x: 100, y: 100 },targetPoint: { x: 200, y: 200 },
     *          annotations: [{ 'content': 'label', 'offset': 0, 'alignment': 'Center' }]
     *       };
     * let connector2: ConnectorModel = {
     *           id: 'connector2', type: 'Straight',
     *           sourcePoint: { x: 400, y: 400 }, targetPoint: { x: 600, y: 600 },
     *       };
     * let diagram$: Diagram;
     * diagram = new Diagram({
     * width: 1000, height: 1000,
     * connectors: [connector1, connector2],
     * snapSettings: { constraints: SnapConstraints.ShowLines },
     * getDescription: getAccessibility
     * });
     * diagram.appendTo('#diagram');
     * function getAccessibility(obj: ConnectorModel, diagram: Diagram): string {
     * let value: string;
     * if (obj instanceof Connector) {
     * value = 'clicked on Connector';
     * } else if (obj instanceof TextElement) {
     * value = 'clicked on annotation';
     * }
     * else if (obj instanceof Decorator) {
     * value = 'clicked on Decorator';
     * }
     * else { value = undefined;
 }
     * return value;
     * }
     * ```
     * @deprecated
     */
    getDescription?: Function | string;
    /**
     * Allows to get the custom properties that have to be serialized
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *           id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *           annotations: [{ content: 'Default Shape' }]
     *       },
     *       {
     *           id: 'node2', width: 100, height: 100, offsetX: 300, offsetY: 100,
     *           shape: { type: 'Basic', shape: 'Ellipse' },
     *           annotations: [{ content: 'Path Element' }]
     *       }
     *       ];
     *       let connectors: ConnectorModel[] = [{
     *           id: 'connector1', type: 'Straight',
     *           sourcePoint: { x: 100, y: 300 }, targetPoint: { x: 200, y: 400 },
     *       }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * connectors: connectors, nodes: nodes,
     * getCustomProperty: (key: string) => {
     * if (key === 'nodes') {
     * return ['description'];
     * }
     *         return null;
     * }
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    getCustomProperty?: Function | string;
    /**
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * function getTool(action: string): ToolBase {
     * let tool: ToolBase;
     * if (action === 'userHandle1') {
     * tool = new CloneTool(diagram.commandHandler, true);
     * }
     * return tool;
     * }
     * class CloneTool extends ToolBase {
     * public mouseDown(args: MouseEventArgs): void {
     * super.mouseDown(args);
     * diagram.copy();
     * diagram.paste();
     * }
     * }
     * let nodes$: NodeModel[] = [{
     *           id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *       },
     *       {
     *           id: 'node2', width: 100, height: 100, offsetX: 300, offsetY: 100,
     *           shape: { type: 'Basic', shape: 'Ellipse' },
     *       }];
     *       let connectors: ConnectorModel[] = [{
     *           id: 'connector1', type: 'Straight',
     *           sourcePoint: { x: 100, y: 300 }, targetPoint: { x: 200, y: 400 },
     *       }];
     *      let handles: UserHandleModel[] = [
     *          { name: 'handle', margin: { top: 0, bottom: 0, left: 0, right: 0 }, offset: 0,
     *            pathData: 'M 376.892,225.284L 371.279,211.95L 376.892,198.617L 350.225,211.95L 376.892,225.284 Z',
     *            side: 'Top', horizontalAlignment: 'Center', verticalAlignment: 'Center', 
     *            pathColor: 'yellow' }];
     * let diagram$: Diagram = new Diagram({
     * ...
     *     connectors: connectors, nodes: nodes,
     *     selectedItems: { constraints: SelectorConstraints.All, userHandles: handles },
     *     getCustomTool: getTool
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @deprecated
     */
    getCustomTool?: Function | string;
    /**
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * function getCursor(action: string, active: boolean): string {
     * let cursor: string;
     * if (active && action === 'Drag') {
     * cursor = '-webkit-grabbing';
     * } else if (action === 'Drag') {
     * cursor = '-webkit-grab'
     * }
     * return cursor;
     * }
     * let nodes$: NodeModel[] = [{
     *           id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *       },
     *       {
     *           id: 'node2', width: 100, height: 100, offsetX: 300, offsetY: 100,
     *           shape: { type: 'Basic', shape: 'Ellipse' },
     *       }];
     * let handle: UserHandleModel[] = [
     * { name: 'handle', margin: { top: 0, bottom: 0, left: 0, right: 0 }, offset: 0,
     * pathData: 'M 376.892,225.284L 371.279,211.95L 376.892,198.617L 350.225,211.95L 376.892,225.284 Z',
     * side: 'Top', horizontalAlignment: 'Center', verticalAlignment: 'Center', 
     * pathColor: 'yellow' }];
     * let diagram$: Diagram = new Diagram({
     * ...
     *     nodes: nodes,
     *     selectedItems: { constraints: SelectorConstraints.All, userHandles: handle },
     *     getCustomCursor: getCursor
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @deprecated
     */
    getCustomCursor?: Function | string;
    /**
     * A collection of JSON objects where each object represents a custom cursor action. Layer is a named category of diagram shapes.
     * @default []
     */
    customCursor?: CustomCursorActionModel[];
    /**
     * Helps to set the undo and redo node selection
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     *       let connectors: ConnectorModel[] = [{
     *           id: 'connector1',
     *           sourcePoint: { x: 100, y: 300 },
     *           targetPoint: { x: 200, y: 400 },
     *       }];
     * let diagram$: Diagram = new Diagram({
     * ...
     *   connectors: connectors,
     *   updateSelection: (object: ConnectorModel | NodeModel, diagram: Diagram) => {
     *   let objectCollection = [];
     *   objectCollection.push(obejct);
     *   diagram.select(objectCollection);
     *   },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    updateSelection?: Function | string;
    /**
     * Defines the collection of selected items, size and position of the selector
     * @default {}
     * @deprecated
     */
    selectedItems?: SelectorModel;
    /**
     * Defines the current zoom value, zoom factor, scroll status and view port size of the diagram
     * @default {}
     */
    scrollSettings?: ScrollSettingsModel;
    /**
     * Layout is used to auto-arrange the nodes in the Diagram area
     * @default {}
     */
    layout?: LayoutModel;
    /**
     * Defines a set of custom commands and binds them with a set of desired key gestures
     * @default {}
     * @deprecated
     */
    commandManager?: CommandManagerModel;
    /**
     * Triggers after diagram is populated from the external data source
     * @event
     * @blazorProperty 'DataLoaded'
     */
    dataLoaded?: base.EmitType<IDataLoadedEventArgs>;
    /**
     * Triggers when a symbol is dragged into diagram from symbol palette
     * @deprecated
     * @event
     * @blazorProperty 'DragEnter'
     * @blazorType Syncfusion.EJ2.Blazor.Diagrams.IBlazorDragEnterEventArgs
     */
    dragEnter?: base.EmitType<IDragEnterEventArgs>;
    /**
     * Triggers when a symbol is dragged outside of the diagram.
     * @event
     * @blazorProperty 'DragLeave'
     */
    dragLeave?: base.EmitType<IDragLeaveEventArgs>;
    /**
     * Triggers when a symbol is dragged over diagram
     * @event
     * @blazorProperty 'DragOver'
     */
    dragOver?: base.EmitType<IDragOverEventArgs>;
    /**
     * Triggers when a node, connector or diagram is clicked
     * @event
     * @blazorProperty 'Clicked'
     * @blazorType Syncfusion.EJ2.Blazor.Diagrams.IBlazorClickEventArgs
     */
    click?: base.EmitType<IClickEventArgs>;
    /**
     * Triggers when a change is reverted or restored(undo/redo)
     * @event
     * @blazorProperty 'HistoryChanged'
     * @blazorType 'IBlazorHistoryChangeArgs'
     */
    historyChange?: base.EmitType<IHistoryChangeArgs>;
    /**
     * Triggers when a custom entry change is reverted or restored(undo/redo)
     * @event
     * @blazorProperty 'CustomHistoryChanged'
     * @blazorType IBlazorCustomHistoryChangeArgs
     */
    historyStateChange?: base.EmitType<IBlazorCustomHistoryChangeArgs>;
    /**
     * Triggers when a node, connector or diagram model is clicked twice
     * @event
     * @blazorProperty 'OnDoubleClick'
     * @blazorType Syncfusion.EJ2.Blazor.Diagrams.IBlazorDoubleClickEventArgs
     */
    doubleClick?: base.EmitType<IDoubleClickEventArgs>;
    /**
     * Triggers when editor got focus at the time of node’s label or text node editing.
     * @deprecated
     * @event
     * @blazorProperty 'TextEdited'
     */
    textEdit?: base.EmitType<ITextEditEventArgs>;
    /**
     * Triggers when the diagram is zoomed or panned
     * @event
     * @blazorProperty 'ScrollChanged'
     * @blazorType 'IBlazorScrollChangeEventArgs'
     */
    scrollChange?: base.EmitType<IScrollChangeEventArgs>;
    /**
     * Triggers when the selection is changed in diagram
     * @deprecated
     * @event
     * @blazorProperty 'SelectionChanged'
     * @blazorType 'IBlazorSelectionChangeEventArgs'
     */
    selectionChange?: base.EmitType<ISelectionChangeEventArgs>;
    /**
     * Triggers when a node is resized
     * @deprecated
     * @event
     * @blazorProperty 'OnSizeChange'
     */
    sizeChange?: base.EmitType<ISizeChangeEventArgs>;
    /**
     * Triggers when the connection is changed
     * @deprecated
     * @event
     * @blazorProperty 'OnConnectionChange'
     * @blazorType 'IBlazorConnectionChangeEventArgs'
     */
    connectionChange?: base.EmitType<IConnectionChangeEventArgs>;
    /**
     * Triggers when the connector's source point is changed
     * @event
     * @blazorProperty 'OnSourcePointChange'
     * @deprecated
     */
    sourcePointChange?: base.EmitType<IEndChangeEventArgs>;
    /**
     * Triggers when the connector's target point is changed
     * @event
     * @blazorProperty 'OnTargetPointChange'
     * @deprecated
     */
    targetPointChange?: base.EmitType<IEndChangeEventArgs>;
    /**
     * Triggers once the node or connector property changed.
     * @event
     * @blazorProperty 'PropertyChanged'
     * @blazorType Syncfusion.EJ2.Blazor.Diagrams.IBlazorPropertyChangeEventArgs
     */
    propertyChange?: base.EmitType<IPropertyChangeEventArgs>;
    /**
     * Triggers while dragging the elements in diagram
     * @event
     * @blazorProperty 'OnPositionChange'
     * @blazorType Syncfusion.EJ2.Blazor.Diagrams.IBlazorDraggingEventArgs
     */
    positionChange?: base.EmitType<IDraggingEventArgs>;
    /**
     * Triggers after animation is completed for the diagram elements.
     * @event
     * @blazorProperty 'OnAnimationComplete'
     */
    animationComplete?: base.EmitType<Object>;
    /**
     * Triggers when the diagram elements are rotated
     * @deprecated
     * @event
     * @blazorProperty 'OnRotateChange'
     */
    rotateChange?: base.EmitType<IRotationEventArgs>;
    /**
     * Triggers when a node/connector is added/removed to/from the diagram.
     * @deprecated
     * @event
     * @blazorProperty 'OnCollectionChange'
     * @blazorType 'IBlazorCollectionChangeEventArgs'
     */
    collectionChange?: base.EmitType<ICollectionChangeEventArgs>;
    /**
     * Triggers when a mouseDown on the user handle.
     * @event
     * @blazorProperty 'OnUserHandleMouseDown'
     */
    onUserHandleMouseDown?: base.EmitType<UserHandleEventsArgs>;
    /**
     * Triggers when a mouseUp on the user handle.
     * @event
     * @blazorProperty 'OnUserHandleMouseUp'
     */
    onUserHandleMouseUp?: base.EmitType<UserHandleEventsArgs>;
    /**
     * Triggers when a mouseEnter on the user handle.
     * @event
     * @blazorProperty 'OnUserHandleMouseEnter'
     */
    onUserHandleMouseEnter?: base.EmitType<UserHandleEventsArgs>;
    /**
     * Triggers when a mouseLeave on the user handle.
     * @event
     * @blazorProperty 'OnUserHandleMouseLeave'
     */
    onUserHandleMouseLeave?: base.EmitType<UserHandleEventsArgs>;
    /**
     * Triggers when a segment is added/removed to/from the connector.
     * @event
     * @blazorProperty 'OnSegmentCollectionChange'
     * @deprecated
     * @blazorType 'IBlazorSegmentCollectionChangeEventArgs'
     */
    segmentCollectionChange?: base.EmitType<ISegmentCollectionChangeEventArgs>;
    /**
     * Triggers when the state of the expand and collapse icon change for a node.
     * @event
     * @blazorProperty 'OnExpandStateChange'
     */
    expandStateChange?: base.EmitType<IExpandStateChangeEventArgs>;
    /**
     * Triggered when the diagram is rendered completely.
     * @event
     * @blazorProperty 'Created'
     */
    created?: base.EmitType<Object>;
    /**
     * Triggered when mouse enters a node/connector.
     * @event
     * @blazorProperty 'MouseEnter'
     * @blazorType Syncfusion.EJ2.Blazor.Diagrams.IBlazorMouseEventArgs
     */
    mouseEnter?: base.EmitType<IMouseEventArgs>;
    /**
     * Triggered when mouse leaves node/connector.
     * @event
     * @blazorProperty 'MouseLeave'
     * @blazorType Syncfusion.EJ2.Blazor.Diagrams.IBlazorMouseEventArgs
     */
    mouseLeave?: base.EmitType<IMouseEventArgs>;
    /**
     * Triggered when mouse hovers a node/connector.
     * @event
     * @blazorProperty 'MouseOver'
     * @blazorType Syncfusion.EJ2.Blazor.Diagrams.IBlazorMouseEventArgs
     */
    mouseOver?: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers before opening the context menu
     * @event
     * @blazorProperty 'OnContextMenuOpen'
     * @blazorType Syncfusion.EJ2.Blazor.Diagrams.DiagramBeforeMenuOpenEventArgs
     */
    contextMenuOpen?: base.EmitType<navigations.BeforeOpenCloseMenuEventArgs>;
    /**
     * Triggers before rendering the context menu item
     * @event
     * @blazorProperty 'OnContextMenuItemRender'
     * @blazorType Syncfusion.EJ2.Blazor.Diagrams.DiagramMenuEventArgs
     */
    contextMenuBeforeItemRender?: base.EmitType<navigations.MenuEventArgs>;
    /**
     * Triggers when a context menu item is clicked
     * @event
     * @blazorProperty 'ContextMenuItemClicked'
     * @blazorType Syncfusion.EJ2.Blazor.Diagrams.DiagramMenuEventArgs
     */
    contextMenuClick?: base.EmitType<navigations.MenuEventArgs>;
    /**
     * Triggers when a command executed.
     * @event
     * @blazorProperty 'OnCommandExecuted'
     */
    commandExecute?: base.EmitType<ICommandExecuteEventArgs>;
    /**
     * A collection of JSON objects where each object represents a layer. Layer is a named category of diagram shapes.
     * @default []
     */
    layers?: LayerModel[];
    /**
     * Triggers when a symbol is dragged and dropped from symbol palette to drawing area
     * @deprecated
     * @event
     * @blazorProperty 'OnDrop'
     * @blazorType 'IBlazorDropEventArgs'
     */
    drop?: base.EmitType<IDropEventArgs>;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/diagram.d.ts
/**
 * Represents the Diagram control
 * ```html
 * <div id='diagram'/>
 * ```
 * ```typescript
 * let diagram$: Diagram = new Diagram({
 * width:'1000px', height:'500px' });
 * diagram.appendTo('#diagram');
 * ```
 */
export  class Diagram extends base.Component<HTMLElement> implements base.INotifyPropertyChanged {
    /**
     * `organizationalChartModule` is used to arrange the nodes in a organizational chart like struture
     * @private
     */
    organizationalChartModule: HierarchicalTree;
    /**
     * `mindMapChartModule` is used to arrange the nodes in a mind map like structure
     */
    mindMapChartModule: MindMap;
    /**
     * `radialTreeModule` is used to arrange the nodes in a radial tree like structure
     * @ignoreapilink
     */
    radialTreeModule: RadialTree;
    /**
     * `complexHierarchicalTreeModule` is used to arrange the nodes in a hierarchical tree like structure
     * @private
     */
    complexHierarchicalTreeModule: ComplexHierarchicalTree;
    /**
     * `dataBindingModule` is used to populate nodes from given data source
     * @private
     */
    dataBindingModule: DataBinding;
    /**
     * `snappingModule` is used to Snap the objects
     * @private
     */
    snappingModule: Snapping;
    /**
     * `printandExportModule` is used to print or export the objects
     * @private
     */
    printandExportModule: PrintAndExport;
    /**
     * `bpmnModule` is used to add built-in BPMN Shapes to diagrams
     * @private
     */
    bpmnModule: BpmnDiagrams;
    /**
     * 'symmetricalLayoutModule' is usd to render layout in symmetrical method
     * @private
     */
    symmetricalLayoutModule: SymmetricLayout;
    /**
     * `bridgingModule` is used to add bridges to connectors
     * @private
     */
    bridgingModule: ConnectorBridging;
    /**
     * `undoRedoModule` is used to revert and restore the changes
     * @private
     */
    undoRedoModule: UndoRedo;
    /**
     * `layoutAnimateModule` is used to revert and restore the changes
     * @private
     */
    layoutAnimateModule: LayoutAnimation;
    /**
     * 'contextMenuModule' is used to manipulate context menu
     * @private
     */
    contextMenuModule: DiagramContextMenu;
    /**
     * `connectorEditingToolModule` is used to edit the segments for connector
     * @private
     */
    connectorEditingToolModule: ConnectorEditing;
    /**
     * `lineRoutingModule` is used to connect the node's without overlapping
     * @private
     */
    lineRoutingModule: LineRouting;
    /**
     * Defines the width of the diagram model.
     * ```html
     * <div id='diagram'/>
     * ```
     * ```typescript
     * let diagram$: Diagram = new Diagram({
     * width:'1000px', height:'500px' });
     * diagram.appendTo('#diagram');
     * ```
     * @default '100%'
     */
    width: string | number;
    /**
     * Defines the diagram rendering mode.
     * * SVG - Renders the diagram objects as SVG elements
     * * Canvas - Renders the diagram in a canvas
     * @default 'SVG'
     */
    mode: RenderingMode;
    /**
     * Defines the height of the diagram model.
     * @default '100%'
     */
    height: string | number;
    /**
     * Defines type of menu that appears when you perform right-click operation
     * An object to customize the context menu of diagram
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let diagram$: Diagram = new Diagram({
     * ...
     *   contextMenuSettings: { show: true },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @deprecated
     */
    contextMenuSettings: ContextMenuSettingsModel;
    /**
     * Constraints are used to enable/disable certain behaviors of the diagram.
     * * None - Disables DiagramConstraints constraints
     * * Bridging - Enables/Disables Bridging support for connector
     * * UndoRedo - Enables/Disables the Undo/Redo support
     * * popups.Tooltip - Enables/Disables popups.Tooltip support
     * * UserInteraction - Enables/Disables editing diagram interactively
     * * ApiUpdate - Enables/Disables editing diagram through code
     * * PageEditable - Enables/Disables editing diagrams both interactively and through code
     * * Zoom - Enables/Disables Zoom support for the diagram
     * * PanX - Enables/Disable PanX support for the diagram
     * * PanY - Enables/Disable PanY support for the diagram
     * * Pan - Enables/Disable Pan support the diagram
     * @default 'Default'
     * @aspNumberEnum
     * @blazorNumberEnum
     */
    constraints: DiagramConstraints;
    /**
     * Defines the precedence of the interactive tools. They are,
     * * None - Disables selection, zooming and drawing tools
     * * SingleSelect - Enables/Disables single select support for the diagram
     * * MultipleSelect - Enables/Disable MultipleSelect select support for the diagram
     * * ZoomPan - Enables/Disable ZoomPan support for the diagram
     * * DrawOnce - Enables/Disable ContinuousDraw support for the diagram
     * * ContinuousDraw - Enables/Disable ContinuousDraw support for the diagram
     * @default 'Default'
     * @aspNumberEnum
     * @blazorNumberEnum
     */
    tool: DiagramTools;
    /**
     * Defines the direction of the bridge that is inserted when the segments are intersected
     * * Top - Defines the direction of the bridge as Top
     * * Bottom - Defines the direction of the bridge as Bottom
     * * Left - Sets the bridge direction as left
     * * Right - Sets the bridge direction as right
     * @default top
     */
    bridgeDirection: BridgeDirection;
    /**
     * Defines the background color of the diagram
     * @default 'transparent'
     */
    backgroundColor: string;
    /**
     * Defines the gridlines and defines how and when the objects have to be snapped
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let horizontalGridlines$: GridlinesModel = {lineColor: 'black', lineDashArray: '1,1' };
     * let verticalGridlines$: GridlinesModel = {lineColor: 'black', lineDashArray: '1,1'};
     * let diagram$: Diagram = new Diagram({
     * ...
     * snapSettings: { horizontalGridlines, verticalGridlines, constraints: SnapConstraints.ShowLines,
     * snapObjectDistance: 5, snapAngle: 5 },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default {}
     */
    snapSettings: SnapSettingsModel;
    /**
     * Defines the properties of both horizontal and vertical guides/rulers to measure the diagram area.
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let arrange$: Function = (args: IArrangeTickOptions) => {
     * if (args.tickInterval % 10 == 0) {
     * args.tickLength = 25;
     * }
     * }
     * let diagram$: Diagram = new Diagram({
     * ...
     * rulerSettings: { showRulers: true,
     * horizontalRuler: { segmentWidth: 50, orientation: 'Horizontal', interval: 10,  arrangeTick: arrange },
     * verticalRuler: {segmentWidth: 200,interval: 20, thickness: 20,
     * tickAlignment: 'LeftOrTop', segmentWidth: 50, markerColor: 'red' }
     * },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default {}
     */
    rulerSettings: RulerSettingsModel;
    /**
     * Page settings enable to customize the appearance, width, and height of the Diagram page.
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let diagram$: Diagram = new Diagram({
     * ...
     * pageSettings: {  width: 800, height: 600, orientation: 'Landscape',
     * background: { color: 'blue' }, boundaryConstraints: 'Infinity'},
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default {}
     */
    pageSettings: PageSettingsModel;
    /**
     * Defines the serialization settings of diagram.
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let diagram$: Diagram = new Diagram({
     * ...
     * serializationSettings: { preventDefaults: true },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default {}
     */
    serializationSettings: SerializationSettingsModel;
    /**
     * Defines the collection of nodes
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *           id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *           annotations: [{ content: 'Default Shape' }]
     *       },
     *       {
     *           id: 'node2', width: 100, height: 100, offsetX: 300, offsetY: 100,
     *           shape: {
     *               type: 'Basic', shape: 'Ellipse'
     *           },
     *           annotations: [{ content: 'Path Element' }]
     *       }
     *       ];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes: nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    nodes: NodeModel[];
    /**
     * Defines the object to be drawn using drawing tool
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let diagram$: Diagram = new Diagram({
     * ...
     * drawingObject : {id: 'connector3', type: 'Straight'},
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    drawingObject: NodeModel | ConnectorModel;
    /**
     * Defines a collection of objects, used to create link between two points, nodes or ports to represent the relationships between them
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     *       let connectors$: ConnectorModel[] = [{
     *           id: 'connector1',
     *           type: 'Straight',
     *           sourcePoint: { x: 100, y: 300 },
     *           targetPoint: { x: 200, y: 400 },
     *       }];
     * let diagram$: Diagram = new Diagram({
     * ...
     *       connectors: connectors,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default []
     */
    connectors: ConnectorModel[];
    /**
     * Defines the basic elements for the diagram
     * @default []
     * @hidden
     */
    basicElements: DiagramElement[];
    /**
     * Defines the tooltip that should be shown when the mouse hovers over a node or connector
     * An object that defines the description, appearance and alignments of tooltip
     * @default {}
     */
    tooltip: DiagramTooltipModel;
    /**
     * Configures the data source that is to be bound with diagram
     * @default {}
     */
    dataSourceSettings: DataSourceModel;
    /**
     * Allows the user to save custom information/data about diagram
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    addInfo: Object;
    /**
     * Customizes the undo redo functionality
     * @default undefined
     * @deprecated
     */
    historyManager: History;
    /**
     * Helps to return the default properties of node
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *           id: 'node1', height: 100, offsetX: 100, offsetY: 100,
     *           annotations: [{ content: 'Default Shape' }]
     *       },
     *       {
     *           id: 'node2', width: 100, height: 100, offsetX: 300, offsetY: 100,
     *           shape: {
     *               type: 'Basic', shape: 'Ellipse'
     *           },
     *           annotations: [{ content: 'Ellipse' }]
     *       }
     *       ];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes: nodes,
     * getNodeDefaults: (node: NodeModel) => {
     *   let obj$: NodeModel = {};
     *   if (obj.width === undefined) {
     *       obj.width = 145;
     *   }
     *   obj.style = { fill: '#357BD2', strokeColor: 'white' };
     *   obj.annotations = [{ style: { color: 'white', fill: 'transparent' } }];
     *   return obj;
     *    },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    getNodeDefaults: Function | string;
    /**
     * Helps to assign the default properties of nodes
     * @blazorType DiagramNode
     */
    nodeDefaults: NodeModel;
    /**
     * Helps to return the default properties of connector
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     *       let connectors$: ConnectorModel[] = [{
     *           id: 'connector1',
     *           sourcePoint: { x: 100, y: 300 },
     *           targetPoint: { x: 200, y: 400 },
     *       }];
     * let diagram$: Diagram = new Diagram({
     * ...
     *   connectors: connectors,
     *   getConnectorDefaults: (connector: ConnectorModel, diagram: Diagram) => {
     *   let connObj$: ConnectorModel = {};
     *   connObj.targetDecorator ={ shape :'None' };
     *   connObj.type = 'Orthogonal';
     *   return connObj;
     *   },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    getConnectorDefaults: Function | string;
    /**
     * Helps to assign the default properties of connector
     * @blazorType DiagramConnector
     */
    connectorDefaults: ConnectorModel;
    /**
     * setNodeTemplate helps to customize the content of a node
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let getTextElement$: Function = (text: string) => {
     * let textElement$: TextElement = new TextElement();
     * textElement.width = 50;
     * textElement.height = 20;
     * textElement.content = text;
     * return textElement;
     * };
     * let nodes$: NodeModel[] = [{
     *           id: 'node1', height: 100, offsetX: 100, offsetY: 100,
     *           annotations: [{ content: 'Default Shape' }]
     *       },
     *       {
     *           id: 'node2', width: 100, height: 100, offsetX: 300, offsetY: 100
     *       }
     *       ];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes: nodes,
     * setNodeTemplate : setNodeTemplate,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * function setNodeTemplate() {
     * setNodeTemplate: (obj: NodeModel, diagram: Diagram): StackPanel => {
     *   if (obj.id === 'node2') {
     *       let table$: StackPanel = new StackPanel();
     *       table.orientation = 'Horizontal';
     *       let column1$: StackPanel = new StackPanel();
     *       column1.children = [];
     *       column1.children.push(getTextElement('Column1'));
     *       addRows(column1);
     *       let column2$: StackPanel = new StackPanel();
     *       column2.children = [];
     *       column2.children.push(getTextElement('Column2'));
     *       addRows(column2);
     *       table.children = [column1, column2];
     *       return table;
     *   }
     *   return null;
     *   }
     * ...
     * }
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    setNodeTemplate: Function | string;
    /**
     * Allows to set accessibility content for diagram objects
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    /**
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let connector1$: ConnectorModel = {
     *          id: 'connector1', type: 'Straight',
     *          sourcePoint: { x: 100, y: 100 },targetPoint: { x: 200, y: 200 },
     *          annotations: [{ 'content': 'label', 'offset': 0, 'alignment': 'Center' }]
     *       };
     * let connector2$: ConnectorModel = {
     *           id: 'connector2', type: 'Straight',
     *           sourcePoint: { x: 400, y: 400 }, targetPoint: { x: 600, y: 600 },
     *       };
     * let diagram$: Diagram;
     * diagram = new Diagram({
     * width: 1000, height: 1000,
     * connectors: [connector1, connector2],
     * snapSettings: { constraints: SnapConstraints.ShowLines },
     * getDescription: getAccessibility
     * });
     * diagram.appendTo('#diagram');
     * function getAccessibility(obj: ConnectorModel, diagram: Diagram): string {
     * let value$: string;
     * if (obj instanceof Connector) {
     * value = 'clicked on Connector';
     * } else if (obj instanceof TextElement) {
     * value = 'clicked on annotation';
     * }
     * else if (obj instanceof Decorator) {
     * value = 'clicked on Decorator';
     * }
     * else { value = undefined;
 }
     * return value;
     * }
     * ```
     * @deprecated
     */
    getDescription: Function | string;
    /**
     * Allows to get the custom properties that have to be serialized
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *           id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *           annotations: [{ content: 'Default Shape' }]
     *       },
     *       {
     *           id: 'node2', width: 100, height: 100, offsetX: 300, offsetY: 100,
     *           shape: { type: 'Basic', shape: 'Ellipse' },
     *           annotations: [{ content: 'Path Element' }]
     *       }
     *       ];
     *       let connectors$: ConnectorModel[] = [{
     *           id: 'connector1', type: 'Straight',
     *           sourcePoint: { x: 100, y: 300 }, targetPoint: { x: 200, y: 400 },
     *       }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * connectors: connectors, nodes: nodes,
     * getCustomProperty: (key: string) => {
     * if (key === 'nodes') {
     * return ['description'];
     * }
     *         return null;
     * }
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    getCustomProperty: Function | string;
    /**
     * Allows the user to set custom tool that corresponds to the given action
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    /**
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * function getTool(action: string): ToolBase {
     * let tool$: ToolBase;
     * if (action === 'userHandle1') {
     * tool = new CloneTool(diagram.commandHandler, true);
     * }
     * return tool;
     * }
     * class CloneTool extends ToolBase {
     * public mouseDown(args: MouseEventArgs): void {
     * super.mouseDown(args);
     * diagram.copy();
     * diagram.paste();
     * }
     * }
     * let nodes$: NodeModel[] = [{
     *           id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *       },
     *       {
     *           id: 'node2', width: 100, height: 100, offsetX: 300, offsetY: 100,
     *           shape: { type: 'Basic', shape: 'Ellipse' },
     *       }];
     *       let connectors$: ConnectorModel[] = [{
     *           id: 'connector1', type: 'Straight',
     *           sourcePoint: { x: 100, y: 300 }, targetPoint: { x: 200, y: 400 },
     *       }];
     *      let handles$: UserHandleModel[] = [
     *          { name: 'handle', margin: { top: 0, bottom: 0, left: 0, right: 0 }, offset: 0,
     *            pathData: 'M 376.892,225.284L 371.279,211.95L 376.892,198.617L 350.225,211.95L 376.892,225.284 Z',
     *            side: 'Top', horizontalAlignment: 'Center', verticalAlignment: 'Center',
     *            pathColor: 'yellow' }];
     * let diagram$: Diagram = new Diagram({
     * ...
     *     connectors: connectors, nodes: nodes,
     *     selectedItems: { constraints: SelectorConstraints.All, userHandles: handles },
     *     getCustomTool: getTool
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @deprecated
     */
    getCustomTool: Function | string;
    /**
     * Allows the user to set custom cursor that corresponds to the given action
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    /**
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * function getCursor(action: string, active: boolean): string {
     * let cursor$: string;
     * if (active && action === 'Drag') {
     * cursor = '-webkit-grabbing';
     * } else if (action === 'Drag') {
     * cursor = '-webkit-grab'
     * }
     * return cursor;
     * }
     * let nodes$: NodeModel[] = [{
     *           id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *       },
     *       {
     *           id: 'node2', width: 100, height: 100, offsetX: 300, offsetY: 100,
     *           shape: { type: 'Basic', shape: 'Ellipse' },
     *       }];
     * let handle$: UserHandleModel[] = [
     * { name: 'handle', margin: { top: 0, bottom: 0, left: 0, right: 0 }, offset: 0,
     * pathData: 'M 376.892,225.284L 371.279,211.95L 376.892,198.617L 350.225,211.95L 376.892,225.284 Z',
     * side: 'Top', horizontalAlignment: 'Center', verticalAlignment: 'Center',
     * pathColor: 'yellow' }];
     * let diagram$: Diagram = new Diagram({
     * ...
     *     nodes: nodes,
     *     selectedItems: { constraints: SelectorConstraints.All, userHandles: handle },
     *     getCustomCursor: getCursor
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @deprecated
     */
    getCustomCursor: Function | string;
    /**
     * A collection of JSON objects where each object represents a custom cursor action. Layer is a named category of diagram shapes.
     * @default []
     */
    customCursor: CustomCursorActionModel[];
    /**
     * Helps to set the undo and redo node selection
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     *       let connectors$: ConnectorModel[] = [{
     *           id: 'connector1',
     *           sourcePoint: { x: 100, y: 300 },
     *           targetPoint: { x: 200, y: 400 },
     *       }];
     * let diagram$: Diagram = new Diagram({
     * ...
     *   connectors: connectors,
     *   updateSelection: (object: ConnectorModel | NodeModel, diagram: Diagram) => {
     *   let objectCollection$ = [];
     *   objectCollection.push(obejct);
     *   diagram.select(objectCollection);
     *   },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    updateSelection: Function | string;
    /** @private */
    version: number;
    /**
     * Defines the collection of selected items, size and position of the selector
     * @default {}
     * @deprecated
     */
    selectedItems: SelectorModel;
    /**
     * Defines the current zoom value, zoom factor, scroll status and view port size of the diagram
     * @default {}
     */
    scrollSettings: ScrollSettingsModel;
    /**
     * Layout is used to auto-arrange the nodes in the Diagram area
     * @default {}
     */
    layout: LayoutModel;
    /**
     * Defines a set of custom commands and binds them with a set of desired key gestures
     * @default {}
     * @deprecated
     */
    commandManager: CommandManagerModel;
    /**
     * Triggers after diagram is populated from the external data source
     * @event
     * @blazorProperty 'DataLoaded'
     */
    dataLoaded: base.EmitType<IDataLoadedEventArgs>;
    /**
     * Triggers when a symbol is dragged into diagram from symbol palette
     * @deprecated
     * @event
     * @blazorProperty 'DragEnter'
     * @blazorType Syncfusion.EJ2.Blazor.Diagrams.IBlazorDragEnterEventArgs
     */
    dragEnter: base.EmitType<IDragEnterEventArgs>;
    /**
     * Triggers when a symbol is dragged outside of the diagram.
     * @event
     * @blazorProperty 'DragLeave'
     */
    dragLeave: base.EmitType<IDragLeaveEventArgs>;
    /**
     * Triggers when a symbol is dragged over diagram
     * @event
     * @blazorProperty 'DragOver'
     */
    dragOver: base.EmitType<IDragOverEventArgs>;
    /**
     * Triggers when a node, connector or diagram is clicked
     * @event
     * @blazorProperty 'Clicked'
     * @blazorType Syncfusion.EJ2.Blazor.Diagrams.IBlazorClickEventArgs
     */
    click: base.EmitType<IClickEventArgs>;
    /**
     * Triggers when a change is reverted or restored(undo/redo)
     * @event
     * @blazorProperty 'HistoryChanged'
     * @blazorType 'IBlazorHistoryChangeArgs'
     */
    historyChange: base.EmitType<IHistoryChangeArgs>;
    /**
     * Triggers when a custom entry change is reverted or restored(undo/redo)
     * @event
     * @blazorProperty 'CustomHistoryChanged'
     * @blazorType IBlazorCustomHistoryChangeArgs
     */
    historyStateChange: base.EmitType<IBlazorCustomHistoryChangeArgs>;
    /**
     * Triggers when a node, connector or diagram model is clicked twice
     * @event
     * @blazorProperty 'OnDoubleClick'
     * @blazorType Syncfusion.EJ2.Blazor.Diagrams.IBlazorDoubleClickEventArgs
     */
    doubleClick: base.EmitType<IDoubleClickEventArgs>;
    /**
     * Triggers when editor got focus at the time of node’s label or text node editing.
     * @deprecated
     * @event
     * @blazorProperty 'TextEdited'
     */
    textEdit: base.EmitType<ITextEditEventArgs>;
    /**
     * Triggers when the diagram is zoomed or panned
     * @event
     * @blazorProperty 'ScrollChanged'
     * @blazorType 'IBlazorScrollChangeEventArgs'
     */
    scrollChange: base.EmitType<IScrollChangeEventArgs>;
    /**
     * Triggers when the selection is changed in diagram
     * @deprecated
     * @event
     * @blazorProperty 'SelectionChanged'
     * @blazorType 'IBlazorSelectionChangeEventArgs'
     */
    selectionChange: base.EmitType<ISelectionChangeEventArgs>;
    /**
     * Triggers when a node is resized
     * @deprecated
     * @event
     * @blazorProperty 'OnSizeChange'
     */
    sizeChange: base.EmitType<ISizeChangeEventArgs>;
    /**
     * Triggers when the connection is changed
     * @deprecated
     * @event
     * @blazorProperty 'OnConnectionChange'
     * @blazorType 'IBlazorConnectionChangeEventArgs'
     */
    connectionChange: base.EmitType<IConnectionChangeEventArgs>;
    /**
     * Triggers when the connector's source point is changed
     * @event
     * @blazorProperty 'OnSourcePointChange'
     * @deprecated
     */
    sourcePointChange: base.EmitType<IEndChangeEventArgs>;
    /**
     * Triggers when the connector's target point is changed
     * @event
     * @blazorProperty 'OnTargetPointChange'
     * @deprecated
     */
    targetPointChange: base.EmitType<IEndChangeEventArgs>;
    /**
     * Triggers once the node or connector property changed.
     * @event
     * @blazorProperty 'PropertyChanged'
     * @blazorType Syncfusion.EJ2.Blazor.Diagrams.IBlazorPropertyChangeEventArgs
     */
    propertyChange: base.EmitType<IPropertyChangeEventArgs>;
    /**
     * Triggers while dragging the elements in diagram
     * @event
     * @blazorProperty 'OnPositionChange'
     * @blazorType Syncfusion.EJ2.Blazor.Diagrams.IBlazorDraggingEventArgs
     */
    positionChange: base.EmitType<IDraggingEventArgs>;
    /**
     * Triggers after animation is completed for the diagram elements.
     * @event
     * @blazorProperty 'OnAnimationComplete'
     */
    animationComplete: base.EmitType<Object>;
    /**
     * Triggers when the diagram elements are rotated
     * @deprecated
     * @event
     * @blazorProperty 'OnRotateChange'
     */
    rotateChange: base.EmitType<IRotationEventArgs>;
    /**
     * Triggers when a node/connector is added/removed to/from the diagram.
     * @deprecated
     * @event
     * @blazorProperty 'OnCollectionChange'
     * @blazorType 'IBlazorCollectionChangeEventArgs'
     */
    collectionChange: base.EmitType<ICollectionChangeEventArgs>;
    /**
     * Triggers when a mouseDown on the user handle.
     * @event
     * @blazorProperty 'OnUserHandleMouseDown'
     */
    onUserHandleMouseDown: base.EmitType<UserHandleEventsArgs>;
    /**
     * Triggers when a mouseUp on the user handle.
     * @event
     * @blazorProperty 'OnUserHandleMouseUp'
     */
    onUserHandleMouseUp: base.EmitType<UserHandleEventsArgs>;
    /**
     * Triggers when a mouseEnter on the user handle.
     * @event
     * @blazorProperty 'OnUserHandleMouseEnter'
     */
    onUserHandleMouseEnter: base.EmitType<UserHandleEventsArgs>;
    /**
     * Triggers when a mouseLeave on the user handle.
     * @event
     * @blazorProperty 'OnUserHandleMouseLeave'
     */
    onUserHandleMouseLeave: base.EmitType<UserHandleEventsArgs>;
    /**
     * Triggers when a segment is added/removed to/from the connector.
     * @event
     * @blazorProperty 'OnSegmentCollectionChange'
     * @deprecated
     * @blazorType 'IBlazorSegmentCollectionChangeEventArgs'
     */
    segmentCollectionChange: base.EmitType<ISegmentCollectionChangeEventArgs>;
    /**
     * Triggers when the state of the expand and collapse icon change for a node.
     * @event
     * @blazorProperty 'OnExpandStateChange'
     */
    expandStateChange: base.EmitType<IExpandStateChangeEventArgs>;
    /**
     * Triggered when the diagram is rendered completely.
     * @event
     * @blazorProperty 'Created'
     */
    created: base.EmitType<Object>;
    /**
     * Triggered when mouse enters a node/connector.
     * @event
     * @blazorProperty 'MouseEnter'
     * @blazorType Syncfusion.EJ2.Blazor.Diagrams.IBlazorMouseEventArgs
     */
    mouseEnter: base.EmitType<IMouseEventArgs>;
    /**
     * Triggered when mouse leaves node/connector.
     * @event
     * @blazorProperty 'MouseLeave'
     * @blazorType Syncfusion.EJ2.Blazor.Diagrams.IBlazorMouseEventArgs
     */
    mouseLeave: base.EmitType<IMouseEventArgs>;
    /**
     * Triggered when mouse hovers a node/connector.
     * @event
     * @blazorProperty 'MouseOver'
     * @blazorType Syncfusion.EJ2.Blazor.Diagrams.IBlazorMouseEventArgs
     */
    mouseOver: base.EmitType<IMouseEventArgs>;
    /**
     * Triggers before opening the context menu
     * @event
     * @blazorProperty 'OnContextMenuOpen'
     * @blazorType Syncfusion.EJ2.Blazor.Diagrams.DiagramBeforeMenuOpenEventArgs
     */
    contextMenuOpen: base.EmitType<navigations.BeforeOpenCloseMenuEventArgs>;
    /**
     * Triggers before rendering the context menu item
     * @event
     * @blazorProperty 'OnContextMenuItemRender'
     * @blazorType Syncfusion.EJ2.Blazor.Diagrams.DiagramMenuEventArgs
     */
    contextMenuBeforeItemRender: base.EmitType<navigations.MenuEventArgs>;
    /**
     * Triggers when a context menu item is clicked
     * @event
     * @blazorProperty 'ContextMenuItemClicked'
     * @blazorType Syncfusion.EJ2.Blazor.Diagrams.DiagramMenuEventArgs
     */
    contextMenuClick: base.EmitType<navigations.MenuEventArgs>;
    /**
     * Triggers when a command executed.
     * @event
     * @blazorProperty 'OnCommandExecuted'
     */
    commandExecute: base.EmitType<ICommandExecuteEventArgs>;
    /**
     * A collection of JSON objects where each object represents a layer. Layer is a named category of diagram shapes.
     * @default []
     */
    layers: LayerModel[];
    /**
     * Triggers when a symbol is dragged and dropped from symbol palette to drawing area
     * @deprecated
     * @event
     * @blazorProperty 'OnDrop'
     * @blazorType 'IBlazorDropEventArgs'
     */
    drop: base.EmitType<IDropEventArgs>;
    /** @private */
    preventUpdate: boolean;
    /** @hidden */
    /** @private */
    localeObj: base.L10n;
    private defaultLocale;
    /** @private */
    currentDrawingObject: Node | Connector;
    /** @private */
    currentSymbol: Node | Connector;
    /** @private */
    diagramRenderer: DiagramRenderer;
    private gridlineSvgLayer;
    private renderer;
    /** @private */
    tooltipObject: popups.Tooltip;
    /** @private */
    hRuler: Ruler;
    /** @private */
    vRuler: Ruler;
    /** @private */
    droppable: base.Droppable;
    /** @private */
    diagramCanvas: HTMLElement;
    /** @private */
    diagramLayer: HTMLCanvasElement | SVGGElement;
    private diagramLayerDiv;
    private adornerLayer;
    private eventHandler;
    /** @private */
    scroller: DiagramScroller;
    /** @private */
    spatialSearch: SpatialSearch;
    /** @private */
    commandHandler: CommandHandler;
    /** @private */
    layerZIndex: number;
    /** @private */
    layerZIndexTable: {};
    /** @private */
    nameTable: {};
    /** @private */
    pathTable: {};
    /** @private */
    connectorTable: {};
    /** @private */
    groupTable: {};
    /** @private */
    private htmlLayer;
    /** @private */
    diagramActions: DiagramAction;
    /** @private */
    commands: {};
    /** @private */
    activeLabel: ActiveLabel;
    /** @private */
    activeLayer: LayerModel;
    /** @private */
    serviceLocator: ServiceLocator;
    /** @private */
    views: string[];
    /** @private */
    isLoading: Boolean;
    /** @private */
    textEditing: Boolean;
    /** @private */
    isTriggerEvent: Boolean;
    /** @private */
    preventNodesUpdate: Boolean;
    /** @private */
    preventConnectorsUpdate: Boolean;
    /** @private */
    selectionConnectorsList: ConnectorModel[];
    /** @private */
    deleteVirtualObject: boolean;
    /** @private */
    realActions: RealAction;
    /** @private */
    previousSelectedObject: (NodeModel | ConnectorModel)[];
    private crudDeleteNodes;
    /** @private */
    selectedObject: {
        helperObject: NodeModel;
        actualObject: NodeModel;
    };
    /**
     * Constructor for creating the widget
     */
    constructor(options?: DiagramModel, element?: HTMLElement | string);
    private clearCollection;
    /**
     * Updates the diagram control when the objects are changed
     * @param newProp Lists the new values of the changed properties
     * @param oldProp Lists the old values of the changed properties
     */
    onPropertyChanged(newProp: DiagramModel, oldProp: DiagramModel): void;
    private updateSnapSettings;
    private updateRulerSettings;
    /**
     * Get the properties to be maintained in the persisted state.
     * @return {string}
     */
    getPersistData(): string;
    /**
     * Initialize nodes, connectors and renderer
     */
    protected preRender(): void;
    private initializePrivateVariables;
    private initializeServices;
    /**
     * Method to set culture for chart
     */
    private setCulture;
    /**
     * Renders the diagram control with nodes and connectors
     */
    render(): void;
    private updateTemplate;
    private resetTemplate;
    private renderInitialCrud;
    /**
     * Returns the module name of the diagram
     */
    getModuleName(): string;
    /**
     * @private
     * Returns the name of class Diagram
     */
    getClassName(): string;
    /**
     * To provide the array of modules needed for control rendering
     * @return {base.ModuleDeclaration[]}
     * @private
     */
    requiredModules(): base.ModuleDeclaration[];
    /**
     * Destroys the diagram control
     */
    destroy(): void;
    /**
     * Wires the mouse events with diagram control
     */
    private wireEvents;
    /**
     * Unwires the mouse events from diagram control
     */
    private unWireEvents;
    /**
     * Selects the given collection of objects
     * @param objects Defines the collection of nodes and connectors to be selected
     * @param multipleSelection Defines whether the existing selection has to be cleared or not
     */
    select(objects: (NodeModel | ConnectorModel)[], multipleSelection?: boolean): void;
    /**
     * Selects the all the objects.
     */
    selectAll(): void;
    /**
     * Removes the given object from selection list
     * @param obj Defines the object to be unselected
     */
    unSelect(obj: NodeModel | ConnectorModel): void;
    /**
     * Removes all elements from the selection list
     */
    clearSelection(): void;
    /**
     * Update the diagram clipboard dimension
     */
    updateViewPort(): void;
    private cutCommand;
    /**
     * Removes the selected nodes and connectors from diagram and moves them to diagram clipboard
     */
    cut(): void;
    /**
     * Add a process into the sub-process
     */
    addProcess(process: NodeModel, parentId: string): void;
    /**
     * Remove a process from the sub-process
     */
    removeProcess(id: string): void;
    private pasteCommand;
    /**
     * Adds the given objects/ the objects in the diagram clipboard to diagram control
     * @param obj Defines the objects to be added to diagram
     */
    paste(obj?: (NodeModel | ConnectorModel)[]): void;
    /**
     * fit the diagram to the page with respect to mode and region
     */
    fitToPage(options?: IFitOptions): void;
    /**
     * bring the specified bounds into the viewport
     */
    bringIntoView(bound: Rect): void;
    /**
     * bring the specified bounds to the center of the viewport
     */
    bringToCenter(bound: Rect): void;
    private copyCommand;
    /**
     * Copies the selected nodes and connectors to diagram clipboard
     */
    copy(): Object;
    /**
     * Group the selected nodes and connectors in diagram
     */
    group(): void;
    /**
     * UnGroup the selected nodes and connectors in diagram
     */
    unGroup(): void;
    /**
     * send the selected nodes or connectors back
     */
    sendToBack(): void;
    /**
     * set the active layer
     *  @param layerName defines the name of the layer which is to be active layer
     */
    setActiveLayer(layerName: string): void;
    /**
     * add the layer into diagram
     * @param layer defines the layer model which is to be added
     * @param layerObject defines the object of the layer
     */
    addLayer(layer: LayerModel, layerObject?: Object[]): void;
    /**
     * remove the layer from diagram
     * @param layerId define the id of the layer
     */
    removeLayer(layerId: string): void;
    /**
     * move objects from the layer to another layer from diagram
     * @param objects define the objects id of string array
     */
    moveObjects(objects: string[], targetLayer?: string): void;
    /**
     * move the layer backward
     * @param layerName define the name of the layer
     */
    sendLayerBackward(layerName: string): void;
    /**
     * move the layer forward
     * @param layerName define the name of the layer
     */
    bringLayerForward(layerName: string): void;
    /**
     * clone a layer with its object
     * @param layerName define the name of the layer
     */
    cloneLayer(layerName: string): void;
    /**
     * bring the selected nodes or connectors to front
     */
    bringToFront(): void;
    /**
     * send the selected nodes or connectors forward
     */
    moveForward(): void;
    /**
     * send the selected nodes or connectors back
     */
    sendBackward(): void;
    /**
     * gets the node or connector having the given name
     */
    getObject(name: string): {};
    /**
     * gets the node object for the given node ID
     */
    getNodeObject(id: string): NodeModel;
    /**
     * gets the connector object for the given node ID
     */
    getConnectorObject(id: string): ConnectorModel;
    /**
     * gets the active layer back
     */
    getActiveLayer(): LayerModel;
    private nudgeCommand;
    /**
     * Moves the selected objects towards the given direction
     * @param direction Defines the direction by which the objects have to be moved
     * @param x Defines the distance by which the selected objects have to be horizontally moved
     * @param y Defines the distance by which the selected objects have to be vertically moved
     */
    nudge(direction: NudgeDirection, x?: number, y?: number): void;
    /**
     * Drags the given object by the specified pixels
     * @param obj Defines the nodes/connectors to be dragged
     * @param tx Defines the distance by which the given objects have to be horizontally moved
     * @param ty Defines the distance by which the given objects have to be vertically moved
     */
    drag(obj: NodeModel | ConnectorModel | SelectorModel, tx: number, ty: number): void;
    /**
     * Scales the given objects by the given ratio
     * @param obj Defines the objects to be resized
     * @param sx Defines the ratio by which the objects have to be horizontally scaled
     * @param sy Defines the ratio by which the objects have to be vertically scaled
     * @param pivot Defines the reference point with respect to which the objects will be resized
     */
    scale(obj: NodeModel | ConnectorModel | SelectorModel, sx: number, sy: number, pivot: PointModel): boolean;
    /**
     * Rotates the given nodes/connectors by the given angle
     * @param obj Defines the objects to be rotated
     * @param angle Defines the angle by which the objects have to be rotated
     * @param pivot Defines the reference point with reference to which the objects have to be rotated
     */
    rotate(obj: NodeModel | ConnectorModel | SelectorModel, angle: number, pivot?: PointModel): boolean;
    /**
     * Moves the source point of the given connector
     * @param obj Defines the connector, the end points of which has to be moved
     * @param tx Defines the distance by which the end point has to be horizontally moved
     * @param ty Defines the distance by which the end point has to be vertically moved
     */
    dragSourceEnd(obj: ConnectorModel, tx: number, ty: number): void;
    /**
     * Moves the target point of the given connector
     * @param obj Defines the connector, the end points of which has to be moved
     * @param tx Defines the distance by which the end point has to be horizontally moved
     * @param ty Defines the distance by which the end point has to be vertically moved
     */
    dragTargetEnd(obj: ConnectorModel, tx: number, ty: number): void;
    /**
     * Finds all the objects that is under the given mouse position
     * @param position Defines the position, the objects under which has to be found
     * @param source Defines the object, the objects under which has to be found
     */
    findObjectsUnderMouse(position: PointModel, source?: IElement): IElement[];
    /**
     * Finds the object that is under the given mouse position
     * @param objects Defines the collection of objects, from which the object has to be found.
     * @param action Defines the action, using which the relevant object has to be found.
     * @param inAction Defines the active state of the action.
     */
    findObjectUnderMouse(objects: (NodeModel | ConnectorModel)[], action: Actions, inAction: boolean): IElement;
    /**
     * Finds the object that is under the given active object (Source)
     * @param objects Defines the collection of objects, from which the object has to be found.
     * @param action Defines the action, using which the relevant object has to be found.
     * @param inAction Defines the active state of the action.
     */
    findTargetObjectUnderMouse(objects: (NodeModel | ConnectorModel)[], action: Actions, inAction: boolean, position: PointModel, source?: IElement): IElement;
    /**
     * Finds the child element of the given object at the given position
     * @param obj Defines the object, the child element of which has to be found
     * @param position Defines the position, the child element under which has to be found
     */
    findElementUnderMouse(obj: IElement, position: PointModel): DiagramElement;
    /**
     * Defines the action to be done, when the mouse hovers the given element of the given object
     * @param obj Defines the object under mouse
     * @param wrapper Defines the target element of the object under mouse
     * @param position Defines the current mouse position
     * @private
     */
    findActionToBeDone(obj: NodeModel | ConnectorModel, wrapper: DiagramElement, position: PointModel, target?: NodeModel | PointPortModel | ShapeAnnotationModel | PathAnnotationModel): Actions;
    /**
     * Returns the tool that handles the given action
     * @param action Defines the action that is going to be performed
     */
    getTool(action: string): ToolBase;
    /**
     * Defines the cursor that corresponds to the given action
     * @param action Defines the action that is going to be performed
     */
    getCursor(action: string, active: boolean): string;
    /**
     * Initializes the undo redo actions
     * @private
     */
    initHistory(): void;
    /**
     * Adds the given change in the diagram control to the track
     * @param entry Defines the entry/information about a change in diagram
     */
    addHistoryEntry(entry: HistoryEntry): void;
    /** @private */
    historyChangeTrigger(entry: HistoryEntry): void;
    /**
     * Starts grouping the actions that will be undone/restored as a whole
     */
    startGroupAction(): void;
    /**
     * Closes grouping the actions that will be undone/restored as a whole
     */
    endGroupAction(): void;
    /**
     * Restores the last action that is performed
     */
    undo(): void;
    /**
     * Restores the last undone action
     */
    redo(): void;
    /**
     * Aligns the group of objects to with reference to the first object in the group
     * @param objects Defines the objects that have to be aligned
     * @param option Defines the factor, by which the objects have to be aligned
     */
    align(option: AlignmentOptions, objects?: (NodeModel | ConnectorModel)[], type?: AlignmentMode): void;
    /**
     * Arranges the group of objects with equal intervals, but within the group of objects
     * @param objects Defines the objects that have to be equally spaced
     * @param option Defines the factor to distribute the shapes
     */
    distribute(option: DistributeOptions, objects?: (NodeModel | ConnectorModel)[]): void;
    /**
     * Scales the given objects to the size of the first object in the group
     * @param objects Defines the collection of objects that have to be scaled
     * @param option Defines whether the node has to be horizontally scaled, vertically scaled or both
     */
    sameSize(option: SizingOptions, objects?: (NodeModel | ConnectorModel)[]): void;
    /**
     * Scales the diagram control by the given factor
     * @param factor Defines the factor by which the diagram is zoomed
     * @param focusedPoint Defines the point with respect to which the diagram has to be zoomed
     */
    zoom(factor: number, focusedPoint?: PointModel): void;
    /**
     * Scales the diagram control by the given factor
     * @param options used to define the zoom factor, focus point and zoom type.
     *
     */
    zoomTo(options: ZoomOptions): void;
    /**
     * Pans the diagram control to the given horizontal and vertical offsets
     * @param horizontalOffset Defines the horizontal distance to which the diagram has to be scrolled
     * @param verticalOffset Defines the vertical distance to which the diagram has to be scrolled
     */
    pan(horizontalOffset: number, verticalOffset: number, focusedPoint?: PointModel): void;
    /**
     * Resets the zoom and scroller offsets to default values
     */
    reset(): void;
    /** @private */
    triggerEvent(eventName: DiagramEvent, args: Object): void;
    private updateEventValue;
    addNodeToLane(node: NodeModel, swimLane: string, lane: string): void;
    /**
     * Shows tooltip for corresponding diagram object
     * @param obj Defines the object for that tooltip has to be shown
     */
    showTooltip(obj: NodeModel | ConnectorModel): void;
    /**
     * hides tooltip for corresponding diagram object
     * @param obj Defines the object for that tooltip has to be hide
     */
    hideTooltip(obj: NodeModel | ConnectorModel): void;
    /**
     * Adds the given node to diagram control
     * @param obj Defines the node that has to be added to diagram
     */
    addNode(obj: NodeModel, group?: boolean): Node;
    /**
     * Adds the given connector to diagram control
     * @param obj Defines the connector that has to be added to diagram
     */
    addConnector(obj: ConnectorModel): Connector;
    /**
     * Adds the given object to diagram control
     * @param obj Defines the object that has to be added to diagram
     */
    add(obj: NodeModel | ConnectorModel, group?: boolean): Node | Connector;
    private updateBlazorCollectionChange;
    private updateSvgNodes;
    /** @private */
    updateProcesses(node: (Node | Connector)): void;
    /** @private */
    moveSvgNode(nodeId: string): void;
    /**
     * Adds the given annotation to the given node
     * @param annotation Defines the annotation to be added
     * @param node Defines the node to which the annotation has to be added
     */
    addTextAnnotation(annotation: BpmnAnnotationModel, node: NodeModel): void;
    /**
     * Splice the InEdge and OutEdge of the for the node with respect to corresponding connectors that is deleting
     */
    private spliceConnectorEdges;
    /**
     * Remove the dependent connectors if the node is deleted
     * @private
     */
    removeDependentConnector(node: Node): void;
    /** @private */
    removeObjectsFromLayer(obj: (NodeModel | ConnectorModel)): void;
    /** @private */
    removeElements(currentObj: NodeModel | ConnectorModel): void;
    private removeCommand;
    /**
     * Removes the given object from diagram
     * @param obj Defines the object that has to be removed from diagram
     */
    remove(obj?: NodeModel | ConnectorModel): void;
    private isStackChild;
    /** @private */
    deleteChild(node: NodeModel | ConnectorModel | string, parentNode?: NodeModel): void;
    /** @private  */
    addChild(node: NodeModel, child: string | NodeModel | ConnectorModel, index?: number): void;
    /**
     * Clears all nodes and objects in the diagram
     */
    clear(): void;
    private clearObjects;
    private startEditCommad;
    /**
     * Specified annotation to edit mode
     * @param node Defines node/connector that contains the annotation to be edited
     * @param id Defines annotation id to be edited in the node
     */
    startTextEdit(node?: NodeModel | ConnectorModel, id?: string): void;
    private updateNodeExpand;
    private updateConnectorAnnotation;
    private removeChildrenFromLayout;
    /**
     * Automatically updates the diagram objects based on the type of the layout
     */
    doLayout(): ILayout;
    /**
     * Serializes the diagram control as a string
     */
    saveDiagram(): string;
    /**
     * Converts the given string as a Diagram Control
     * @param data Defines the behavior of the diagram to be loaded
     */
    loadDiagram(data: string): Object;
    /**
     * To  get the html diagram content
     * @param styleSheets defines the collection of style files to be considered while exporting.
     */
    getDiagramContent(styleSheets?: StyleSheetList): string;
    /**
     * To export diagram native/html image
     * @param image defines image content to be exported.
     * @param options defines the image properties.
     */
    exportImage(image: string, options: IExportOptions): void;
    /**
     * To print native/html nodes of diagram
     * @param image defines image content.
     * @param options defines the properties of the image
     */
    printImage(image: string, options: IExportOptions): void;
    /**
     * To limit the history entry of the diagram
     * @param stackLimit defines stackLimit of the history manager.
     */
    setStackLimit(stackLimit: number): void;
    /**
     * To clear history of the diagram
     */
    clearHistory(): void;
    /**
     * To get the bound of the diagram
     */
    getDiagramBounds(): Rect;
    /**
     * To export Diagram
     * @param options defines the how the image to be exported.
     */
    exportDiagram(options: IExportOptions): string | SVGElement;
    /**
     * To print Diagram
     * @param optons defines how the image to be printed.
     */
    print(options: IPrintOptions): void;
    /**
     * Add ports at the run time
     */
    addPorts(obj: NodeModel, ports: PointPortModel[]): void;
    /**
     * Add constraints at run time
     */
    addConstraints(constraintsType: number, constraintsValue: number): number;
    /**
     * Remove constraints at run time
     */
    removeConstraints(constraintsType: number, constraintsValue: number): number;
    /**
     * Add labels in node at the run time in the blazor platform
     */
    addNodeLabels(obj: NodeModel, labels: ShapeAnnotationModel[]): void;
    /**
     * Add labels in connector at the run time in the blazor platform
     */
    addConnectorLabels(obj: ConnectorModel, labels: PathAnnotationModel[]): void;
    /**
     * Add Labels at the run time
     */
    addLabels(obj: NodeModel | ConnectorModel, labels: ShapeAnnotationModel[] | PathAnnotation[] | PathAnnotationModel[]): void;
    /**
     * Add dynamic Lanes to swimLane at runtime
     */
    addLanes(node: NodeModel, lane: LaneModel[], index?: number): void;
    /**
     * Add a phase to a swimLane at runtime
     */
    addPhases(node: NodeModel, phases: PhaseModel[]): void;
    /**
     * Remove dynamic Lanes to swimLane at runtime
     */
    removeLane(node: NodeModel, lane: LaneModel): void;
    /**
     * Remove a phase to a swimLane at runtime
     */
    removePhase(node: NodeModel, phase: PhaseModel): void;
    private removelabelExtension;
    /**
     * Remove Labels at the run time
     */
    removeLabels(obj: Node | ConnectorModel, labels: ShapeAnnotationModel[] | PathAnnotationModel[]): void;
    private removePortsExtenion;
    /**
     * Remove Ports at the run time
     */
    removePorts(obj: Node, ports: PointPortModel[]): void;
    /**
     * @private
     * @param real
     * @param rulerSize
     */
    getSizeValue(real: string | number, rulerSize?: number): string;
    private renderRulers;
    private intOffPageBackground;
    private initDiagram;
    private renderBackgroundLayer;
    private renderGridLayer;
    private renderDiagramLayer;
    private initLayers;
    private renderAdornerLayer;
    private renderPortsExpandLayer;
    private renderHTMLLayer;
    private renderNativeLayer;
    /** @private */
    createSvg(id: string, width: string | Number, height: string | Number): SVGElement;
    private initObjects;
    /** @private */
    initLayerObjects(): void;
    private addToLayer;
    private updateLayer;
    private updateScrollSettings;
    private initData;
    private generateData;
    private makeData;
    private initNodes;
    private initConnectors;
    private setZIndex;
    private initializeDiagramLayers;
    /** @private */
    resetTool(): void;
    private initObjectExtend;
    /** @private */
    initObject(obj: IElement, layer?: LayerModel, independentObj?: boolean, group?: boolean): void;
    private getConnectedPort;
    private scaleObject;
    private updateDefaultLayoutIcons;
    private updateDefaultLayoutIcon;
    /**
     * @private
     */
    updateGroupOffset(node: NodeModel | ConnectorModel, isUpdateSize?: boolean): void;
    private initNode;
    private updateChildPosition;
    private canExecute;
    private updateStackProperty;
    private initViews;
    private initCommands;
    private overrideCommands;
    private initCommandManager;
    /** @private */
    updateNodeEdges(node: Node): void;
    /** @private */
    private updateIconVisibility;
    /** @private */
    updateEdges(obj: Connector): void;
    /** @private */
    refreshDiagram(): void;
    private updateCanupdateStyle;
    private getZindexPosition;
    /** @private */
    updateDiagramObject(obj: (NodeModel | ConnectorModel), canIgnoreIndex?: boolean): void;
    /** @private  */
    updateGridContainer(grid: GridPanel): void;
    /** @private  */
    getObjectsOfLayer(objectArray: string[]): (NodeModel | ConnectorModel)[];
    /** @private */
    refreshDiagramLayer(): void;
    /** @private */
    refreshCanvasLayers(view?: View): void;
    private renderBasicElement;
    private refreshElements;
    private renderTimer;
    /** @private */
    refreshCanvasDiagramLayer(view: View): void;
    /** @private */
    updatePortVisibility(node: Node, portVisibility: PortVisibility, inverse?: Boolean): void;
    /** @private */
    refreshSvgDiagramLayer(view: View): void;
    /** @private */
    removeVirtualObjects(clearIntervalVal: Object): void;
    /** @private */
    updateTextElementValue(object: NodeModel | ConnectorModel): void;
    /** @private */
    updateVirtualObjects(collection: string[], remove: boolean, tCollection?: string[]): void;
    /** @private */
    renderDiagramElements(canvas: HTMLCanvasElement | SVGElement, renderer: DiagramRenderer, htmlLayer: HTMLElement, transform?: boolean, fromExport?: boolean, isOverView?: boolean): void;
    /** @private */
    updateBridging(isLoad?: boolean): void;
    /** @private */
    setCursor(cursor: string): void;
    /** @private */
    clearCanvas(view: View): void;
    /** @private */
    updateScrollOffset(): void;
    /** @private */
    setOffset(offsetX: number, offsetY: number): void;
    /** @private */
    setSize(width: number, height: number): void;
    /** @private */
    transformLayers(): void;
    /**
     * Defines how to remove the Page breaks
     * @private
     */
    removePageBreaks(): void;
    /**
     * Defines how the page breaks has been rendered
     * @private
     */
    renderPageBreaks(bounds?: Rect): void;
    private validatePageSize;
    /**
     * @private
     */
    setOverview(overview: View, id?: string): void;
    private renderNodes;
    private updateThumbConstraints;
    /** @private */
    renderSelector(multipleSelection: boolean, isSwimLane?: boolean): void;
    /** @private */
    updateSelector(): void;
    /** @private */
    renderSelectorForAnnotation(selectorModel: Selector, selectorElement: (SVGElement | HTMLCanvasElement)): void;
    /** @private */
    drawSelectionRectangle(x: number, y: number, width: number, height: number): void;
    /**
     * @private
     */
    renderHighlighter(element: DiagramElement): void;
    /**
     * @private
     */
    clearHighlighter(): void;
    /** @private */
    getNodesConnectors(selectedItems: (NodeModel | ConnectorModel)[]): (NodeModel | ConnectorModel)[];
    /** @private */
    clearSelectorLayer(): void;
    /** @private */
    getWrapper(nodes: Container, id: string): DiagramElement;
    /** @private */
    getEndNodeWrapper(node: NodeModel, connector: ConnectorModel, source: boolean): DiagramElement;
    private containsMargin;
    private focusOutEdit;
    private endEditCommand;
    /**
     * @private
     */
    endEdit(): void;
    /** @private */
    canLogChange(): boolean;
    private modelChanged;
    private resetDiagramActions;
    /** @private */
    removeNode(node: NodeModel | ConnectorModel): void;
    /** @private */
    deleteGroup(node: NodeModel): void;
    /** @private */
    updateObject(actualObject: Node | Connector, oldObject: Node | Connector, changedProp: Node | Connector): void;
    private nodePropertyChangeExtend;
    private swimLaneNodePropertyChange;
    /** @private */
    nodePropertyChange(actualObject: Node, oldObject: Node, node: Node, isLayout?: boolean, rotate?: boolean, propertyChange?: boolean): void;
    private updatePorts;
    private updateFlipOffset;
    private updateUMLActivity;
    private updateConnectorProperties;
    /** @private */
    updateConnectorEdges(actualObject: Node): void;
    private connectorProprtyChangeExtend;
    /** @private */
    connectorPropertyChange(actualObject: Connector, oldProp: Connector, newProp: Connector, disableBridging?: boolean, propertyChange?: boolean): void;
    private getpropertyChangeArgs;
    private triggerPropertyChange;
    private findInOutConnectPorts;
    private getPoints;
    /**
     * update the  opacity  and visibility for the node  once the layout animation starts
     */
    /** @private */
    updateNodeProperty(element: Container, visible?: boolean, opacity?: number): void;
    /**
     * checkSelected Item for Connector
     * @private
     */
    checkSelectedItem(actualObject: Connector | Node): boolean;
    /**
     * Updates the visibility of the diagram container
     * @private
     */
    private updateDiagramContainerVisibility;
    /**
     * Updates the visibility of the node/connector
     * @private
     */
    updateElementVisibility(element: Container, obj: Connector | Node, visible: boolean): void;
    private updateAnnotations;
    /** @private */
    updateAnnotation(changedObject: AnnotationModel, actualAnnotation: ShapeAnnotationModel, nodes: Container, actualObject?: Object, canUpdateSize?: boolean): void;
    private updateAnnotationContent;
    private updateAnnotationWrapper;
    /** @private */
    updatePort(changedObject: PointPortModel, actualPort: PointPortModel, nodes: Container): void;
    /** @private */
    updateIcon(actualObject: Node): void;
    private getPortContainer;
    private updateTooltip;
    /** @private */
    updateQuad(obj: IElement): void;
    /** @private */
    removeFromAQuad(obj: IElement): void;
    /** @private */
    updateGroupSize(node: NodeModel | ConnectorModel): void;
    private updatePage;
    /** @private */
    protectPropertyChange(enable: boolean): void;
    /** @private */
    updateShadow(nodeShadow: ShadowModel, changedShadow: ShadowModel): void;
    /** @private */
    updateMargin(node: Node, changes: Node): void;
    private initDroppables;
    private getDropEventArgs;
    private removeChildInNodes;
    private getBlazorDragEventArgs;
    private findChild;
    private getChildren;
    private addChildNodes;
    private moveNode;
    moveObjectsUp(node: NodeModel | ConnectorModel, currentLayer: LayerModel): void;
    /**
     * Inserts newly added element into the database
     */
    insertData(node?: Node | Connector): object;
    /**
     * updates the user defined element properties into the existing database
     */
    updateData(node?: Node | Connector): object;
    /**
     * Removes the user deleted element from the existing database
     */
    removeData(node?: Node | Connector): object;
    private crudOperation;
    private processCrudCollection;
    private parameterMap;
    private getNewUpdateNodes;
    private getDeletedNodes;
    private raiseAjaxPost;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/diagram/custom-cursor-model.d.ts
/**
 * Interface for a class CustomCursorAction
 */
export interface CustomCursorActionModel {
    /**
     * Defines the property of a Data Map Items 
     * @blazorDefaultValueIgnore
     */
    action?: Actions;
    /**
     * Defines the Fields for the Data Map Items 
     * @default ''
     */
    cursor?: string;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/diagram/custom-cursor.d.ts
/**
 * A collection of JSON objects where each object represents a layer.
 * Layer is a named category of diagram shapes.
 */
export  class CustomCursorAction extends base.ChildProperty<CustomCursorAction> {
    /**
     * Defines the property of a Data Map Items
     * @blazorDefaultValueIgnore
     */
    action: Actions;
    /**
     * Defines the Fields for the Data Map Items
     * @default ''
     */
    cursor: string;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/diagram/data-mapping-model.d.ts
/**
 * Interface for a class DataMappingItems
 */
export interface DataMappingItemsModel {
    /**
     * Defines the property of a Data Map Items 
     * @default ''
     */
    property?: string;
    /**
     * Defines the Fields for the Data Map Items 
     * @default ''
     */
    field?: string;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/diagram/data-mapping.d.ts
/**
 * A collection of JSON objects where each object represents a layer.
 * Layer is a named category of diagram shapes.
 */
export  class DataMappingItems extends base.ChildProperty<DataMappingItems> {
    /**
     * Defines the property of a Data Map Items
     * @default ''
     */
    property: string;
    /**
     * Defines the Fields for the Data Map Items
     * @default ''
     */
    field: string;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/diagram/data-source-model.d.ts
/**
 * Interface for a class CrudAction
 */
export interface CrudActionModel {
    /**
     * set an URL to get a data from database
     * @default ''
     */
    read?: string;
    /**
     * set an URL to add a data into database
     * @default ''
     */
    create?: string;
    /**
     * set an URL to update the existing data in database
     * @default ''
     */
    update?: string;
    /**
     * set an URL to remove an data in database
     * @default ''
     */
    destroy?: string;
    /**
     * Add custom fields to node
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    customFields?: Object[];
}
/**
 * Interface for a class ConnectionDataSource
 */
export interface ConnectionDataSourceModel {
    /**
     * set an id for connector dataSource
     * @default ''
     */
    id?: string;
    /**
     * define sourceID to connect with connector
     * @default ''
     */
    sourceID?: string;
    /**
     * define targetID to connect with connector
     * @default ''
     */
    targetID?: string;
    /**
     * define sourcePoint to render connector startPoint
     * @default null
     */
    sourcePointX?: number;
    /**
     * define sourcePoint to render connector startPoint
     * @default null
     */
    sourcePointY?: number;
    /**
     * define targetPoint to render connector targetPoint
     * @default null
     */
    targetPointX?: number;
    /**
     * define targetPoint to render connector targetPoint
     * @default null
     */
    targetPointY?: number;
    /**
     * Sets the data source either as a collection of objects or as an URL of data.DataManager
     * @default null
     */
    dataManager?: data.DataManager;
    /**
     * Add CrudAction to connector data source
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    crudAction?: CrudActionModel;
}
/**
 * Interface for a class DataSource
 */
export interface DataSourceModel {
    /**
     * Sets the unique id of the data source items
     * @default ''
     */
    id?: string;
    /**
     * Sets the data source either as a collection of objects or as an URL of data.DataManager
     * @default null
     * @deprecated
     */
    dataManager?: data.DataManager;
    /**
     * Sets the data source either as a collection of objects or as an URL of data.DataManager
     * @default null
     */
    dataSource?: data.DataManager;
    /**
     * Sets the unique id of the root data source item
     * @default ''
     */
    root?: string;
    /**
     * Sets the unique id that defines the relationship between the data source items
     * @default ''
     */
    parentId?: string;
    /**
     * Binds the custom data with node model
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    doBinding?: Function | string;
    /**
     * A collection of JSON objects where each object represents an Data Map Items.
     * @default []
     */
    dataMapSettings?: DataMappingItemsModel[];
    /**
     * Add CrudAction to data source
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    crudAction?: CrudActionModel;
    /**
     * define connectorDataSource collection
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    connectionDataSource?: ConnectionDataSourceModel;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/diagram/data-source.d.ts
/**
 * Configures the data source that is to be bound with diagram
 * ```html
 * <div id='diagram'></div>
 * ```
 * ```typescript
 * let data: object[] = [
 * { Name: "Elizabeth", Role: "Director" },
 * { Name: "Christina", ReportingPerson: "Elizabeth", Role: "Manager" },
 * { Name: "Yoshi", ReportingPerson: "Christina", Role: "Lead" },
 * { Name: "Philip", ReportingPerson: "Christina", Role: "Lead" },
 * { Name: "Yang", ReportingPerson: "Elizabeth", Role: "Manager" },
 * { Name: "Roland", ReportingPerson: "Yang", Role: "Lead" },
 * { Name: "Yvonne", ReportingPerson: "Yang", Role: "Lead" }
 * ];
 * let items: data.DataManager = new data.DataManager(data as JSON[]);
 * let diagram$: Diagram = new Diagram({
 * ...
 * layout: {
 *             type: 'OrganizationalChart'
 * },
 * dataSourceSettings: {
 * id: 'Name', parentId: 'ReportingPerson', dataManager: items,
 * }
 * ...
 * });
 * diagram.appendTo('#diagram');
 * ```
 */
export  class CrudAction extends base.ChildProperty<CrudAction> {
    /**
     * set an URL to get a data from database
     * @default ''
     */
    read: string;
    /**
     * set an URL to add a data into database
     * @default ''
     */
    create: string;
    /**
     * set an URL to update the existing data in database
     * @default ''
     */
    update: string;
    /**
     * set an URL to remove an data in database
     * @default ''
     */
    destroy: string;
    /**
     * Add custom fields to node
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    customFields: Object[];
}
export  class ConnectionDataSource extends base.ChildProperty<ConnectionDataSource> {
    /**
     * set an id for connector dataSource
     * @default ''
     */
    id: string;
    /**
     * define sourceID to connect with connector
     * @default ''
     */
    sourceID: string;
    /**
     * define targetID to connect with connector
     * @default ''
     */
    targetID: string;
    /**
     * define sourcePoint to render connector startPoint
     * @default null
     */
    sourcePointX: number;
    /**
     * define sourcePoint to render connector startPoint
     * @default null
     */
    sourcePointY: number;
    /**
     * define targetPoint to render connector targetPoint
     * @default null
     */
    targetPointX: number;
    /**
     * define targetPoint to render connector targetPoint
     * @default null
     */
    targetPointY: number;
    /**
     * Sets the data source either as a collection of objects or as an URL of data.DataManager
     * @default null
     */
    dataManager: data.DataManager;
    /**
     * Add CrudAction to connector data source
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    crudAction: CrudActionModel;
}
export  class DataSource extends base.ChildProperty<DataSource> {
    /**
     * Sets the unique id of the data source items
     * @default ''
     */
    id: string;
    /**
     * Sets the data source either as a collection of objects or as an URL of data.DataManager
     * @default null
     * @deprecated
     */
    dataManager: data.DataManager;
    /**
     * Sets the data source either as a collection of objects or as an URL of data.DataManager
     * @default null
     */
    dataSource: data.DataManager;
    /**
     * Sets the unique id of the root data source item
     * @default ''
     */
    root: string;
    /**
     * Sets the unique id that defines the relationship between the data source items
     * @default ''
     */
    parentId: string;
    /**
     * Binds the custom data with node model
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    doBinding: Function | string;
    /**
     * A collection of JSON objects where each object represents an Data Map Items.
     * @default []
     */
    dataMapSettings: DataMappingItemsModel[];
    /**
     * Add CrudAction to data source
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    crudAction: CrudActionModel;
    /**
     * define connectorDataSource collection
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    connectionDataSource: ConnectionDataSourceModel;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/diagram/grid-lines-model.d.ts
/**
 * Interface for a class Gridlines
 */
export interface GridlinesModel {
    /**
     * Sets the line color of gridlines
     * @default ''
     */
    lineColor?: string;
    /**
     * Defines the pattern of dashes and gaps used to stroke horizontal grid lines
     * @default ''
     */
    lineDashArray?: string;
    /**
     * A pattern of lines and gaps that defines a set of horizontal/vertical gridlines
     * @default [1.25, 18.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75]
     */
    lineIntervals?: number[];
    /**
     * Specifies a set of intervals to snap the objects
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let diagram$: Diagram = new Diagram({
     * ...
     * snapSettings: {
     * horizontalGridlines: { lineIntervals: [0.95, 9.05, 0.2, 9.75], snapIntervals: [10] },
     * verticalGridlines: { lineIntervals: [0.95, 9.05, 0.2, 9.75], snapIntervals: [10] }
     * },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default [20]
     */
    snapIntervals?: number[];
}
/**
 * Interface for a class SnapSettings
 */
export interface SnapSettingsModel {
    /**
     * Defines the horizontal gridlines
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let horizontalGridlines$: GridlinesModel = {lineColor: 'black', lineDashArray: '1,1' };
     * let verticalGridlines$: GridlinesModel = {lineColor: 'black', lineDashArray: '1,1'};
     * let diagram$: Diagram = new Diagram({
     * ...
     * snapSettings: { horizontalGridlines, verticalGridlines, constraints: SnapConstraints.ShowLines,
     * snapObjectDistance: 5, snapAngle: 5 },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default {}
     */
    horizontalGridlines?: GridlinesModel;
    /**
     * Defines the vertical gridlines
     * @default {}
     */
    verticalGridlines?: GridlinesModel;
    /**
     * Constraints for gridlines and snapping
     * * None - Snapping does not happen
     * * ShowHorizontalLines - Displays only the horizontal gridlines in diagram.
     * * ShowVerticalLines - Displays only the Vertical gridlines in diagram.
     * * ShowLines - Display both Horizontal and Vertical gridlines.
     * * SnapToHorizontalLines - Enables the object to snap only with horizontal gridlines.
     * * SnapToVerticalLines - Enables the object to snap only with horizontal gridlines.
     * * SnapToLines - Enables the object to snap with both horizontal and Vertical gridlines.
     * * snapToObject - Enables the object to snap with the other objects in the diagram.
     * @default 'All'
     * @aspNumberEnum
     * @blazorNumberEnum
     */
    constraints?: SnapConstraints;
    /**
     * Defines the angle by which the object needs to be snapped
     * @default 5
     */
    snapAngle?: number;
    /**
     * Sets the minimum distance between the selected object and the nearest object
     * @default 5
     */
    snapObjectDistance?: number;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/diagram/grid-lines.d.ts
/**
 * Provides a visual guidance while dragging or arranging the objects on the Diagram surface
 */
export  class Gridlines extends base.ChildProperty<Gridlines> {
    /**
     * Sets the line color of gridlines
     * @default ''
     */
    lineColor: string;
    /**
     * Defines the pattern of dashes and gaps used to stroke horizontal grid lines
     * @default ''
     */
    lineDashArray: string;
    /**
     * A pattern of lines and gaps that defines a set of horizontal/vertical gridlines
     * @default [1.25, 18.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75]
     */
    lineIntervals: number[];
    /**
     * Specifies a set of intervals to snap the objects
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let diagram$: Diagram = new Diagram({
     * ...
     * snapSettings: {
     * horizontalGridlines: { lineIntervals: [0.95, 9.05, 0.2, 9.75], snapIntervals: [10] },
     * verticalGridlines: { lineIntervals: [0.95, 9.05, 0.2, 9.75], snapIntervals: [10] }
     * },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default [20]
     */
    snapIntervals: number[];
    /** @private */
    scaledIntervals: number[];
}
/**
 * Defines the gridlines and defines how and when the objects have to be snapped
 * @default {}
 */
export  class SnapSettings extends base.ChildProperty<SnapSettings> {
    /**
     * Defines the horizontal gridlines
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let horizontalGridlines$: GridlinesModel = {lineColor: 'black', lineDashArray: '1,1' };
     * let verticalGridlines$: GridlinesModel = {lineColor: 'black', lineDashArray: '1,1'};
     * let diagram$: Diagram = new Diagram({
     * ...
     * snapSettings: { horizontalGridlines, verticalGridlines, constraints: SnapConstraints.ShowLines,
     * snapObjectDistance: 5, snapAngle: 5 },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default {}
     */
    horizontalGridlines: GridlinesModel;
    /**
     * Defines the vertical gridlines
     * @default {}
     */
    verticalGridlines: GridlinesModel;
    /**
     * Constraints for gridlines and snapping
     * * None - Snapping does not happen
     * * ShowHorizontalLines - Displays only the horizontal gridlines in diagram.
     * * ShowVerticalLines - Displays only the Vertical gridlines in diagram.
     * * ShowLines - Display both Horizontal and Vertical gridlines.
     * * SnapToHorizontalLines - Enables the object to snap only with horizontal gridlines.
     * * SnapToVerticalLines - Enables the object to snap only with horizontal gridlines.
     * * SnapToLines - Enables the object to snap with both horizontal and Vertical gridlines.
     * * snapToObject - Enables the object to snap with the other objects in the diagram.
     * @default 'All'
     * @aspNumberEnum
     * @blazorNumberEnum
     */
    constraints: SnapConstraints;
    /**
     * Defines the angle by which the object needs to be snapped
     * @default 5
     */
    snapAngle: number;
    /**
     * Sets the minimum distance between the selected object and the nearest object
     * @default 5
     */
    snapObjectDistance: number;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/diagram/history.d.ts
/**
 * Interface for a class HistoryEntry
 */
export interface HistoryEntry {
    /**
     * Sets the type of the entry to be stored
     */
    type?: EntryType;
    /**
     * Sets the changed values to be stored
     */
    redoObject?: NodeModel | ConnectorModel | SelectorModel | DiagramModel;
    /**
     * Sets the changed values to be stored
     */
    undoObject?: NodeModel | ConnectorModel | SelectorModel | DiagramModel | ShapeAnnotation | PathAnnotation | PointPortModel;
    /**
     * Sets the changed values to be stored in table
     */
    childTable?: {};
    /**
     * Sets the category for the entry
     */
    category?: EntryCategory;
    /**
     * Sets the next the current object
     */
    next?: HistoryEntry;
    /**
     * Sets the previous of the current object
     */
    previous?: HistoryEntry;
    /**
     * Sets the type of the object is added or remove
     */
    changeType?: EntryChangeType;
    /**
     * Set the value for undo action is activated
     */
    isUndo?: boolean;
    /**
     * Used to stored the entry or not
     */
    cancel?: boolean;
    /**
     * Used to stored the which annotation or port to be changed
     */
    objectId?: string;
    /**
     * Used to indicate last phase to be changed.
     */
    isLastPhase?: boolean;
    /**
     * Used to stored the previous phase.
     */
    previousPhase?: PhaseModel;
    /**
     * Used to stored the added node cause.
     * @blazorType object
     */
    historyAction?: DiagramHistoryAction;
    /**
     * Used to define the object type that is to be added into the entry.
     */
    blazorHistoryEntryType?: HistoryEntryType
}
export interface History {
    /**
     * set the history entry can be undo
     */
    canUndo?: boolean;
    /**
     * Set the history entry can be redo
     */
    canRedo?: boolean;
    /**
     *  Set the current entry object
     */
    currentEntry?: HistoryEntry;
    /**
     * Stores a history entry to history list
     */
    push?: Function;
    /**
     * Used for custom undo option
     */
    undo?: Function;
    /**
     * Used for custom redo option
     */
    redo?: Function;
    /**
     * Used to intimate the group action is start
     */
    startGroupAction?: Function;
    /**
     * Used to intimate the group action is end 
     */
    endGroupAction?: Function;
    /**
     * Used to decide to stored the changes to history
     */
    canLog?: Function;
    /**
     * Used to store the undoStack
     */
    undoStack?: HistoryEntry[];
    /**
     * Used to store the redostack
     */
    redoStack?: HistoryEntry[];
    /**
     * Used to restrict or limits the number of history entry will be stored on the history list
     */
    stackLimit?: number;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/diagram/keyboard-commands-model.d.ts
/**
 * Interface for a class KeyGesture
 */
export interface KeyGestureModel {
    /**
     * Sets the key value, on recognition of which the command will be executed.
     * * none - no key
     * * Number0 = The 0 key
     * * Number1 = The 1 key
     * * Number2 = The 2 key
     * * Number3 = The 3 key
     * * Number4 = The 4 key
     * * Number5 = The 5 key
     * * Number6 = The 6 key
     * * Number7 = The 7 key
     * * Number8 = The 8 key
     * * Number9 = The 9 key
     * * Number0 = The 0 key
     * * BackSpace = The BackSpace key 
     * * F1 = The f1 key
     * * F2 = The f2 key
     * * F3 = The f3 key
     * * F4 = The f4 key
     * * F5 = The f5 key
     * * F6 = The f6 key
     * * F7 = The f7 key
     * * F8 = The f8 key
     * * F9 = The f9 key
     * * F10 = The f10 key
     * * F11 = The f11 key
     * * F12 = The f12 key
     * * A = The a key
     * * B = The b key
     * * C = The c key
     * * D = The d key
     * * E = The e key
     * * F = The f key
     * * G = The g key
     * * H = The h key
     * * I = The i key
     * * J = The j key
     * * K = The k key
     * * L = The l key
     * * M = The m key
     * * N = The n key
     * * O = The o key
     * * P = The p key
     * * Q = The q key
     * * R = The r key
     * * S = The s key
     * * T = The t key
     * * U = The u key
     * * V = The v key
     * * W = The w key
     * * X = The x key
     * * Y = The y key
     * * Z = The z key
     * * Left = The left key
     * * Right = The right key
     * * Top = The top key
     * * Bottom = The bottom key
     * * Escape = The Escape key
     * * Tab = The tab key
     * * Delete = The delete key
     * * Enter = The enter key 
     * * The Space key 
     * * The page up key 
     * * The page down key 
     * * The end key 
     * * The home key 
     * * The Minus
     * * The Plus
     * * The Star
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @aspNumberEnum
     * @blazorNumberEnum
     * @default undefined
     */
    key?: Keys;
    /**
     * Sets a combination of key modifiers, on recognition of which the command will be executed.
     * * None - no modifiers are pressed
     * * Control - ctrl key
     * * Meta - meta key im mac
     * * Alt - alt key
     * * Shift - shift key
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @aspNumberEnum
     * @blazorNumberEnum
     * @default undefined
     */
    keyModifiers?: KeyModifiers;
}
/**
 * Interface for a class Command
 */
export interface CommandModel {
    /**
     * Defines the name of the command
     * @default ''
     */
    name?: string;
    /**
     * Check the command is executable at the moment or not
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    canExecute?: Function | string;
    /**
     * Defines what to be executed when the key combination is recognized
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    execute?: Function | string;
    /**
     * Defines a combination of keys and key modifiers, on recognition of which the command will be executed
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let node$: NodeModel;
     * node = {
     * ...
     * id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100,
     * annotations : [{ content: 'text' }];
     * ...
     * };
     * 
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes:[node],
     * commandManager:{
     * commands:[{
     * name:'customCopy',
     * parameter : 'node',
     * canExecute:function(){
     * if(diagram.selectedItems.nodes.length>0 || diagram.selectedItems.connectors.length>0){
     *               return true;
     *           }
     *           return false;
     * },
     * execute:function(){
     * for(let i=0;
 i<diagram.selectedItems.nodes.length;
 i++){
     *               diagram.selectedItems.nodes[i].style.fill = 'red';
     *           }
     *           diagram.dataBind();
     * },
     * gesture:{
     * key:Keys.G, keyModifiers:KeyModifiers.Shift | KeyModifiers.Alt
     * }
     * }]
     * },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default {}
     */
    gesture?: KeyGestureModel;
    /**
     * Defines any additional parameters that are required at runtime
     * @default ''
     */
    parameter?: string;
}
/**
 * Interface for a class CommandManager
 */
export interface CommandManagerModel {
    /**
     * Stores the multiple command names with the corresponding command objects
     * @default []
     */
    commands?: CommandModel[];
}
/**
 * Interface for a class ContextMenuSettings
 */
export interface ContextMenuSettingsModel {
    /**
     * Enables/Disables the context menu items
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    show?: boolean;
    /**
     * Shows only the custom context menu items
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    showCustomMenuOnly?: boolean;
    /**
     * Defines the custom context menu items
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let diagram$: Diagram = new Diagram({
     * ...
     *   contextMenuSettings: {   show: true, items: [{
     * text: 'delete', id: 'delete', target: '.e-diagramcontent', iconCss: 'e-copy'
     * }],
     * showCustomMenuOnly: false,
     * },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    items?: ContextMenuItemModel[];
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/diagram/keyboard-commands.d.ts
/**
 * Defines the combination of keys and modifier keys
 */
export  class KeyGesture extends base.ChildProperty<KeyGesture> {
    /**
     * Sets the key value, on recognition of which the command will be executed.
     * * none - no key
     * * Number0 = The 0 key
     * * Number1 = The 1 key
     * * Number2 = The 2 key
     * * Number3 = The 3 key
     * * Number4 = The 4 key
     * * Number5 = The 5 key
     * * Number6 = The 6 key
     * * Number7 = The 7 key
     * * Number8 = The 8 key
     * * Number9 = The 9 key
     * * Number0 = The 0 key
     * * BackSpace = The BackSpace key
     * * F1 = The f1 key
     * * F2 = The f2 key
     * * F3 = The f3 key
     * * F4 = The f4 key
     * * F5 = The f5 key
     * * F6 = The f6 key
     * * F7 = The f7 key
     * * F8 = The f8 key
     * * F9 = The f9 key
     * * F10 = The f10 key
     * * F11 = The f11 key
     * * F12 = The f12 key
     * * A = The a key
     * * B = The b key
     * * C = The c key
     * * D = The d key
     * * E = The e key
     * * F = The f key
     * * G = The g key
     * * H = The h key
     * * I = The i key
     * * J = The j key
     * * K = The k key
     * * L = The l key
     * * M = The m key
     * * N = The n key
     * * O = The o key
     * * P = The p key
     * * Q = The q key
     * * R = The r key
     * * S = The s key
     * * T = The t key
     * * U = The u key
     * * V = The v key
     * * W = The w key
     * * X = The x key
     * * Y = The y key
     * * Z = The z key
     * * Left = The left key
     * * Right = The right key
     * * Top = The top key
     * * Bottom = The bottom key
     * * Escape = The Escape key
     * * Tab = The tab key
     * * Delete = The delete key
     * * Enter = The enter key
     * * The Space key
     * * The page up key
     * * The page down key
     * * The end key
     * * The home key
     * * The Minus
     * * The Plus
     * * The Star
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @aspNumberEnum
     * @blazorNumberEnum
     * @default undefined
     */
    key: Keys;
    /**
     * Sets a combination of key modifiers, on recognition of which the command will be executed.
     * * None - no modifiers are pressed
     * * Control - ctrl key
     * * Meta - meta key im mac
     * * Alt - alt key
     * * Shift - shift key
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @aspNumberEnum
     * @blazorNumberEnum
     * @default undefined
     */
    keyModifiers: KeyModifiers;
}
/**
 * Defines a command and a key gesture to define when the command should be executed
 */
export  class Command extends base.ChildProperty<Command> {
    /**
     * Defines the name of the command
     * @default ''
     */
    name: string;
    /**
     * Check the command is executable at the moment or not
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    canExecute: Function | string;
    /**
     * Defines what to be executed when the key combination is recognized
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    execute: Function | string;
    /**
     * Defines a combination of keys and key modifiers, on recognition of which the command will be executed
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let node$: NodeModel;
     * node = {
     * ...
     * id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100,
     * annotations : [{ content: 'text' }];
     * ...
     * };
     *
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes:[node],
     * commandManager:{
     * commands:[{
     * name:'customCopy',
     * parameter : 'node',
     * canExecute:function(){
     * if(diagram.selectedItems.nodes.length>0 || diagram.selectedItems.connectors.length>0){
     *               return true;
     *           }
     *           return false;
     * },
     * execute:function(){
     *$ for(let i=0;
 i<diagram.selectedItems.nodes.length;
 i++){
     *               diagram.selectedItems.nodes[i].style.fill = 'red';
     *           }
     *           diagram.dataBind();
     * },
     * gesture:{
     * key:Keys.G, keyModifiers:KeyModifiers.Shift | KeyModifiers.Alt
     * }
     * }]
     * },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default {}
     */
    gesture: KeyGestureModel;
    /**
     * Defines any additional parameters that are required at runtime
     * @default ''
     */
    parameter: string;
    /**
     * @private
     * Returns the name of class Command
     */
    getClassName(): string;
}
/**
 * Defines the collection of commands and the corresponding key gestures
 */
export  class CommandManager extends base.ChildProperty<CommandManager> {
    /**
     * Stores the multiple command names with the corresponding command objects
     * @default []
     */
    commands: CommandModel[];
}
/**
 * Defines the behavior of the context menu items
 */
export  class ContextMenuSettings extends base.ChildProperty<ContextMenuSettings> {
    /**
     * Enables/Disables the context menu items
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    show: boolean;
    /**
     * Shows only the custom context menu items
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    showCustomMenuOnly: boolean;
    /**
     * Defines the custom context menu items
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let diagram$: Diagram = new Diagram({
     * ...
     *   contextMenuSettings: {   show: true, items: [{
     * text: 'delete', id: 'delete', target: '.e-diagramcontent', iconCss: 'e-copy'
     * }],
     * showCustomMenuOnly: false,
     * },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    items: ContextMenuItemModel[];
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/diagram/layer-model.d.ts
/**
 * Interface for a class Layer
 */
export interface LayerModel {
    /**
     * Defines the id of a diagram layer 
     * @default ''
     */
    id?: string;
    /**
     * Enables or disables the visibility of objects in a particular layer
     * @default true
     */
    visible?: boolean;
    /**
     * Enables or disables editing objects in a particular layer
     * @default false
     */
    lock?: boolean;
    /**
     * Defines the collection of the objects that are added to a particular layer
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    objects?: string[];
    /**
     * Defines the description of the layer
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *           id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *           annotations: [{ content: 'Default Shape' }]
     *       },
     *       {
     *           id: 'node2', width: 100, height: 100, offsetX: 300, offsetY: 100,
     *           shape: {
     *               type: 'Basic', shape: 'Ellipse'
     *           },
     *           annotations: [{ content: 'Path Element' }]
     *       }
     *       ];
     *       let connectors$: ConnectorModel[] = [{
     *           id: 'connector1',
     *           type: 'Straight',
     *           sourcePoint: { x: 100, y: 300 },
     *           targetPoint: { x: 200, y: 400 },
     *       }];
     * let diagram$: Diagram = new Diagram({
     * ...
     *       connectors: connectors, nodes: nodes,
     *       layers: [{ id: 'layer1', visible: true, objects: ['node1', 'node2', 'connector1'] }],
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    addInfo?: Object;
    /**
     * Defines the zOrder of the layer
     * @default -1
     */
    zIndex?: number;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/diagram/layer.d.ts
/**
 * A collection of JSON objects where each object represents a layer.
 * Layer is a named category of diagram shapes.
 */
export  class Layer extends base.ChildProperty<Layer> {
    /**
     * Defines the id of a diagram layer
     * @default ''
     */
    id: string;
    /**
     * Enables or disables the visibility of objects in a particular layer
     * @default true
     */
    visible: boolean;
    /**
     * Enables or disables editing objects in a particular layer
     * @default false
     */
    lock: boolean;
    /**
     * Defines the collection of the objects that are added to a particular layer
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    objects: string[];
    /**
     * Defines the description of the layer
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *           id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *           annotations: [{ content: 'Default Shape' }]
     *       },
     *       {
     *           id: 'node2', width: 100, height: 100, offsetX: 300, offsetY: 100,
     *           shape: {
     *               type: 'Basic', shape: 'Ellipse'
     *           },
     *           annotations: [{ content: 'Path Element' }]
     *       }
     *       ];
     *       let connectors$: ConnectorModel[] = [{
     *           id: 'connector1',
     *           type: 'Straight',
     *           sourcePoint: { x: 100, y: 300 },
     *           targetPoint: { x: 200, y: 400 },
     *       }];
     * let diagram$: Diagram = new Diagram({
     * ...
     *       connectors: connectors, nodes: nodes,
     *       layers: [{ id: 'layer1', visible: true, objects: ['node1', 'node2', 'connector1'] }],
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    addInfo: Object;
    /**
     * Defines the zOrder of the layer
     * @default -1
     */
    zIndex: number;
    /**  @private   */
    objectZIndex: number;
    /**   @private  */
    zIndexTable: {};
    constructor(parent: any, propName: string, defaultValue: Object, isArray?: boolean);
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/diagram/page-settings-model.d.ts
/**
 * Interface for a class Background
 */
export interface BackgroundModel {
    /**
     * Defines the source of the background image
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let background: BackgroundModel = { source: 'https://www.w3schools.com/images/w3schools_green.jpg',
     * scale: 'Slice', align: 'XMinYMin' };
     * let diagram$: Diagram = new Diagram({
     * ...
     * pageSettings: {  width: 800, height: 600, orientation: 'Landscape',
     * background: background },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default ''
     */
    source?: string;
    /**
     * Defines the background color of diagram
     * @default 'transparent'
     */
    color?: string;
    /**
     * Defines how the background image should be scaled/stretched
     * * None - Scale value will be set as None for the image
     * * Meet - Scale value Meet will be set for the image
     * * Slice - Scale value Slice will be set for the image
     * @default 'None'
     */
    scale?: Scale;
    /**
     * Defines how to align the background image over the diagram area.
     * * None - Alignment value will be set as none
     * * XMinYMin - smallest X value of the view port and  smallest Y value of the view port
     * * XMidYMin - midpoint X value of the view port and  smallest Y value of the view port
     * * XMaxYMin - maximum X value of the view port and  smallest Y value of the view port
     * * XMinYMid - smallest X value of the view port and midpoint Y value of the view port
     * * XMidYMid - midpoint X value of the view port and midpoint Y value of the view port
     * * XMaxYMid - maximum X value of the view port and midpoint Y value of the view port
     * * XMinYMax - smallest X value of the view port and maximum Y value of the view port
     * * XMidYMax - midpoint X value of the view port and maximum Y value of the view port
     * * XMaxYMax - maximum X value of the view port and maximum Y value of the view port
     * @default 'None'
     */
    align?: ImageAlignment;
}
/**
 * Interface for a class PageSettings
 */
export interface PageSettingsModel {
    /**
     * Sets the width of a diagram Page
     * @default null
     */
    width?: number;
    /**
     * Sets the height of a diagram Page
     * @default null
     */
    height?: number;
    /**
     * Sets the margin of a diagram page
     * @default new Margin(0,0,0,0)
     */
    margin?: MarginModel;
    /**
     * Sets the orientation of the pages in a diagram
     *  * Landscape - Display with page Width is more than the page Height.
     *  * Portrait - Display with page Height is more than the page width.
     * @default 'Landscape'
     */
    orientation?: PageOrientation;
    /**
     * Defines the editable region of the diagram
     * * Infinity - Allow the interactions to take place at the infinite height and width 
     * * Diagram - Allow the interactions to take place around the diagram height and width 
     * * Page - Allow the interactions to take place around the page height and width
     * @default 'Infinity'
     */
    boundaryConstraints?: BoundaryConstraints;
    /**
     * Defines the background color and image of diagram
     * @default 'transparent' 
     */
    background?: BackgroundModel;
    /**
     * Sets whether multiple pages can be created to fit all nodes and connectors
     * @default false
     */
    multiplePage?: boolean;
    /**
     * Enables or disables the page break lines
     * @default false
     */
    showPageBreaks?: boolean;
}
/**
 * Interface for a class ScrollSettings
 */
export interface ScrollSettingsModel {
    /**
     * Defines horizontal offset of the scroller
     * @default 0
     * @isBlazorNullableType true
     */
    horizontalOffset?: number;
    /**
     * Defines vertical offset of the scroller
     * @default 0
     * @isBlazorNullableType true
     */
    verticalOffset?: number;
    /**
     * Defines the currentZoom value of diagram
     * @default 1
     */
    currentZoom?: number;
    /**
     * Allows to read the viewport width of the diagram
     * @default 0
     * @isBlazorNullableType true
     */
    viewPortWidth?: number;
    /**
     * Allows to read the viewport height of the diagram
     * @default 0
     * @isBlazorNullableType true
     */
    viewPortHeight?: number;
    /**
     * Defines the minimum zoom value of the diagram
     * @default 0.2
     */
    minZoom?: number;
    /**
     * Defines the maximum zoom value of the scroller
     * @default 30
     */
    maxZoom?: number;
    /**
     * Defines the scrollable region of diagram.
     * * Diagram - Enables scrolling to view the diagram content
     * * Infinity - Diagram will be extended, when we try to scroll the diagram
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let diagram$: Diagram = new Diagram({
     * ...
     *     scrollSettings: { canAutoScroll: true, scrollLimit: 'Infinity',
     *        scrollableArea : new Rect(0, 0, 300, 300), horizontalOffset : 0
     *                     },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default 'Diagram'
     */
    scrollLimit?: ScrollLimit;
    /**
     * Defines the scrollable area of diagram. Applicable, if the scroll limit is “limited”.
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    scrollableArea?: Rect;
    /**
     * Enables or Disables the auto scroll option
     * @default false
     */
    canAutoScroll?: boolean;
    /**
     * Defines the maximum distance to be left between the object and the scroll bar to trigger auto scrolling
     * @default { left: 15, right: 15, top: 15, bottom: 15 }
     */
    autoScrollBorder?: MarginModel;
    /**
     * Defines the maximum distance to be left between the object and the edge of the page.
     * @default { left: 0, right: 0, top: 0, bottom: 0 }
     */
    padding?: MarginModel;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/diagram/page-settings.d.ts
/**
 * Defines the size and appearance of the diagram page
 */
export  class Background extends base.ChildProperty<Background> {
    /**
     * Defines the source of the background image
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let background$: BackgroundModel = { source: 'https://www.w3schools.com/images/w3schools_green.jpg',
     * scale: 'Slice', align: 'XMinYMin' };
     * let diagram$: Diagram = new Diagram({
     * ...
     * pageSettings: {  width: 800, height: 600, orientation: 'Landscape',
     * background: background },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default ''
     */
    source: string;
    /**
     * Defines the background color of diagram
     * @default 'transparent'
     */
    color: string;
    /**
     * Defines how the background image should be scaled/stretched
     * * None - Scale value will be set as None for the image
     * * Meet - Scale value Meet will be set for the image
     * * Slice - Scale value Slice will be set for the image
     * @default 'None'
     */
    scale: Scale;
    /**
     * Defines how to align the background image over the diagram area.
     * * None - Alignment value will be set as none
     * * XMinYMin - smallest X value of the view port and  smallest Y value of the view port
     * * XMidYMin - midpoint X value of the view port and  smallest Y value of the view port
     * * XMaxYMin - maximum X value of the view port and  smallest Y value of the view port
     * * XMinYMid - smallest X value of the view port and midpoint Y value of the view port
     * * XMidYMid - midpoint X value of the view port and midpoint Y value of the view port
     * * XMaxYMid - maximum X value of the view port and midpoint Y value of the view port
     * * XMinYMax - smallest X value of the view port and maximum Y value of the view port
     * * XMidYMax - midpoint X value of the view port and maximum Y value of the view port
     * * XMaxYMax - maximum X value of the view port and maximum Y value of the view port
     * @default 'None'
     */
    align: ImageAlignment;
}
/**
 * Defines the size and appearance of diagram page
 * ```html
 * <div id='diagram'></div>
 * ```
 * ```typescript
 * let diagram$: Diagram = new Diagram({
 * ...
 * pageSettings: {  width: 800, height: 600, orientation: 'Landscape',
 * background: { color: 'blue' }, boundaryConstraints: 'Infinity',
 * multiplePage: true, showPageBreaks: true, },
 * ...
 * });
 * diagram.appendTo('#diagram');
 * ```
 * @default {}
 */
export  class PageSettings extends base.ChildProperty<PageSettings> {
    /**
     * Sets the width of a diagram Page
     * @default null
     */
    width: number;
    /**
     * Sets the height of a diagram Page
     * @default null
     */
    height: number;
    /**
     * Sets the margin of a diagram page
     * @default new Margin(0,0,0,0)
     */
    margin: MarginModel;
    /**
     * Sets the orientation of the pages in a diagram
     *  * Landscape - Display with page Width is more than the page Height.
     *  * Portrait - Display with page Height is more than the page width.
     * @default 'Landscape'
     */
    orientation: PageOrientation;
    /**
     * Defines the editable region of the diagram
     * * Infinity - Allow the interactions to take place at the infinite height and width
     * * Diagram - Allow the interactions to take place around the diagram height and width
     * * Page - Allow the interactions to take place around the page height and width
     * @default 'Infinity'
     */
    boundaryConstraints: BoundaryConstraints;
    /**
     * Defines the background color and image of diagram
     * @default 'transparent'
     */
    background: BackgroundModel;
    /**
     * Sets whether multiple pages can be created to fit all nodes and connectors
     * @default false
     */
    multiplePage: boolean;
    /**
     * Enables or disables the page break lines
     * @default false
     */
    showPageBreaks: boolean;
}
/**
 * Diagram ScrollSettings module handles the scroller properties of the diagram
 */
export  class ScrollSettings extends base.ChildProperty<ScrollSettings> {
    /**
     * Defines horizontal offset of the scroller
     * @default 0
     * @isBlazorNullableType true
     */
    horizontalOffset: number;
    /**
     * Defines vertical offset of the scroller
     * @default 0
     * @isBlazorNullableType true
     */
    verticalOffset: number;
    /**
     * Defines the currentZoom value of diagram
     * @default 1
     */
    currentZoom: number;
    /**
     * Allows to read the viewport width of the diagram
     * @default 0
     * @isBlazorNullableType true
     */
    viewPortWidth: number;
    /**
     * Allows to read the viewport height of the diagram
     * @default 0
     * @isBlazorNullableType true
     */
    viewPortHeight: number;
    /**
     * Defines the minimum zoom value of the diagram
     * @default 0.2
     */
    minZoom: number;
    /**
     * Defines the maximum zoom value of the scroller
     * @default 30
     */
    maxZoom: number;
    /**
     * Defines the scrollable region of diagram.
     * * Diagram - Enables scrolling to view the diagram content
     * * Infinity - Diagram will be extended, when we try to scroll the diagram
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let diagram$: Diagram = new Diagram({
     * ...
     *     scrollSettings: { canAutoScroll: true, scrollLimit: 'Infinity',
     *        scrollableArea : new Rect(0, 0, 300, 300), horizontalOffset : 0
     *                     },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default 'Diagram'
     */
    scrollLimit: ScrollLimit;
    /**
     * Defines the scrollable area of diagram. Applicable, if the scroll limit is “limited”.
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    scrollableArea: Rect;
    /**
     * Enables or Disables the auto scroll option
     * @default false
     */
    canAutoScroll: boolean;
    /**
     * Defines the maximum distance to be left between the object and the scroll bar to trigger auto scrolling
     * @default { left: 15, right: 15, top: 15, bottom: 15 }
     */
    autoScrollBorder: MarginModel;
    /**
     * Defines the maximum distance to be left between the object and the edge of the page.
     * @default { left: 0, right: 0, top: 0, bottom: 0 }
     */
    padding: MarginModel;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/diagram/ruler-settings-model.d.ts
/**
 * Interface for a class DiagramRuler
 */
export interface DiagramRulerModel {
    /**
     * Defines the number of intervals to be present on each segment of the ruler.
     * @default 5
     */
    interval?: number;
    /**
     * Defines the textual description of the ruler segment, and the appearance of the ruler ticks of the ruler.
     * @default 100
     */
    segmentWidth?: number;
    /**
     * Defines the orientation of the ruler
     * @default 'Horizontal'
     */
    orientation?: RulerOrientation;
    /**
     * Defines and sets the tick alignment of the ruler scale.
     * @default 'RightOrBottom'
     */
    tickAlignment?: TickAlignment;
    /**
     * Defines the color of the ruler marker brush.
     * @default 'red'
     */
    markerColor?: string;
    /**
     * Defines the height of the ruler.
     * @default 25
     */
    thickness?: number;
    /**
     * Defines the method which is used to position and arrange the tick elements of the ruler.
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let arrange$: Function = (args: IArrangeTickOptions) => {
     * if (args.tickInterval % 10 == 0) {
     * args.tickLength = 25;
     * }
     * }
     * let diagram$: Diagram = new Diagram({
     * ...
     * rulerSettings: { showRulers: true,
     * horizontalRuler: { segmentWidth: 50, orientation: 'Horizontal', interval: 10,  arrangeTick: arrange },
     * verticalRuler: {segmentWidth: 200,interval: 20, thickness: 20,
     * tickAlignment: 'LeftOrTop', segmentWidth: 50, markerColor: 'red' }
     * },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default null
     * @deprecated
     */
    arrangeTick?: Function | string;
}
/**
 * Interface for a class RulerSettings
 */
export interface RulerSettingsModel {
    /**
     * Enables or disables both horizontal and vertical ruler.
     * @default false
     */
    showRulers?: boolean;
    /**
     * Updates the gridlines relative to the ruler ticks.
     * @default true
     */
    dynamicGrid?: boolean;
    /**
     * Defines the appearance of horizontal ruler
     * @default {}
     */
    horizontalRuler?: DiagramRulerModel;
    /**
     * Defines the appearance of vertical ruler
     * @default {}
     */
    verticalRuler?: DiagramRulerModel;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/diagram/ruler-settings.d.ts
/**
 * Defines the properties of both horizontal and vertical guides/rulers to measure the diagram area.
 */
export  abstract class DiagramRuler extends base.ChildProperty<DiagramRuler> {
    /**
     * Defines the number of intervals to be present on each segment of the ruler.
     * @default 5
     */
    interval: number;
    /**
     * Defines the textual description of the ruler segment, and the appearance of the ruler ticks of the ruler.
     * @default 100
     */
    segmentWidth: number;
    /**
     * Defines the orientation of the ruler
     * @default 'Horizontal'
     */
    orientation: RulerOrientation;
    /**
     * Defines and sets the tick alignment of the ruler scale.
     * @default 'RightOrBottom'
     */
    tickAlignment: TickAlignment;
    /**
     * Defines the color of the ruler marker brush.
     * @default 'red'
     */
    markerColor: string;
    /**
     * Defines the height of the ruler.
     * @default 25
     */
    thickness: number;
    /**
     * Defines the method which is used to position and arrange the tick elements of the ruler.
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let arrange$: Function = (args: IArrangeTickOptions) => {
     * if (args.tickInterval % 10 == 0) {
     * args.tickLength = 25;
     * }
     * }
     * let diagram$: Diagram = new Diagram({
     * ...
     * rulerSettings: { showRulers: true,
     * horizontalRuler: { segmentWidth: 50, orientation: 'Horizontal', interval: 10,  arrangeTick: arrange },
     * verticalRuler: {segmentWidth: 200,interval: 20, thickness: 20,
     * tickAlignment: 'LeftOrTop', segmentWidth: 50, markerColor: 'red' }
     * },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default null
     * @deprecated
     */
    arrangeTick: Function | string;
}
/**
 * Defines the ruler settings of diagram
 * ```html
 * <div id='diagram'></div>
 * ```
 * ```typescript
 * let diagram$: Diagram = new Diagram({
 * ...
 * rulerSettings: { showRulers: true,
 * horizontalRuler: { segmentWidth: 50,interval: 10 },
 * verticalRuler: {segmentWidth: 200,interval: 20}
 * },
 * ...
 * });
 * diagram.appendTo('#diagram');
 * ```
 * @default {}
 */
export  class RulerSettings extends base.ChildProperty<RulerSettings> {
    /**
     * Enables or disables both horizontal and vertical ruler.
     * @default false
     */
    showRulers: boolean;
    /**
     * Updates the gridlines relative to the ruler ticks.
     * @default true
     */
    dynamicGrid: boolean;
    /**
     * Defines the appearance of horizontal ruler
     * @default {}
     */
    horizontalRuler: DiagramRulerModel;
    /**
     * Defines the appearance of vertical ruler
     * @default {}
     */
    verticalRuler: DiagramRulerModel;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/diagram/serialization-settings-model.d.ts
/**
 * Interface for a class SerializationSettings
 */
export interface SerializationSettingsModel {
    /**
     * Enables or Disables serialization of default values.
     * @default false
     */
    preventDefaults?: boolean;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/diagram/serialization-settings.d.ts
/**
 * Defines the serialization settings of diagram
 * ```html
 * <div id='diagram'></div>
 * ```
 * ```typescript
 * let diagram$: Diagram = new Diagram({
 * ...
 * serializationSettings: { preventDefaults: true },
 * ...
 * });
 * diagram.appendTo('#diagram');
 * ```
 * @default {}
 */
export  class SerializationSettings extends base.ChildProperty<SerializationSettings> {
    /**
     * Enables or Disables serialization of default values.
     * @default false
     */
    preventDefaults: boolean;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/enum/enum.d.ts
/**
 * enum module defines the public enumerations
 */
/**
 * Defines how the diagram elements have to be aligned with respect to its immediate parent
 * * Stretch - Stretches the diagram element throughout its immediate parent
 * * Left - Aligns the diagram element at the left of its immediate parent
 * * Right - Aligns the diagram element at the right of its immediate parent
 * * Center - Aligns the diagram element at the center of its immediate parent
 * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
 */
export  type HorizontalAlignment = 
/**
 * Stretch - Stretches the diagram element throughout its immediate parent
 */
'Stretch' | 
/**
 * Left - Aligns the diagram element at the left of its immediate parent
 */
'Left' | 
/**
 * Right - Aligns the diagram element at the right of its immediate parent
 */
'Right' | 
/**
 * Center - Aligns the diagram element at the center of its immediate parent
 */
'Center' | 
/**
 * Auto - Aligns the diagram element based on the characteristics of its immediate parent
 */
'Auto';
/**
 * Defines how the diagram elements have to be aligned with respect to its immediate parent
 * * Stretch - Stretches the diagram element throughout its immediate parent
 * * Top - Aligns the diagram element at the top of its immediate parent
 * * Bottom - Aligns the diagram element at the bottom of its immediate parent
 * * Center - Aligns the diagram element at the center of its immediate parent
 * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
 */
export  type VerticalAlignment = 
/**
 * Stretch - Stretches the diagram element throughout its immediate parent
 */
'Stretch' | 
/**
 * Top - Aligns the diagram element at the top of its immediate parent
 */
'Top' | 
/**
 * Bottom - Aligns the diagram element at the bottom of its immediate parent
 */
'Bottom' | 
/**
 * Center - Aligns the diagram element at the center of its immediate parent
 */
'Center' | 
/**
 * Auto - Aligns the diagram element based on the characteristics of its immediate parent
 */
'Auto';
/**
 * Defines how the diagram elements have to be flipped with respect to its immediate parent
 * * FlipHorizontal - Translate the diagram element throughout its immediate parent
 * * FlipVertical - Rotate the diagram element throughout its immediate parent
 * * Both - Rotate  and Translate the diagram element throughout its immediate parent
 * * None - Set the flip Direction as None
 */
export  type FlipDirection = 
/**
 * FlipHorizontal - Translate the diagram element throughout its immediate parent
 */
'Horizontal' | 
/**
 * FlipVertical - Rotate the diagram element throughout its immediate parent
 */
'Vertical' | 
/**
 * Both - Rotate  and Translate the diagram element throughout its immediate parent
 */
'Both' | 
/**
 * None - Set the flip Direction as None
 */
'None';
/**
 * Defines the orientation of the Page
 * Landscape - Display with page Width is more than the page Height.
 * Portrait - Display with page Height is more than the page width.
 */
export  type PageOrientation = 
/**
 * Landscape - Display with page Width is more than the page Height
 */
'Landscape' | 
/**
 * Portrait - Display with page Height is more than the page width
 */
'Portrait';
/**
 * Defines the orientation of the layout
 * * TopToBottom - Renders the layout from top to bottom
 * * BottomToTop - Renders the layout from bottom to top
 * * LeftToRight - Renders the layout from left to right
 * * RightToLeft - Renders the layout from right to left
 */
export  type LayoutOrientation = 
/**
 * TopToBottom - Renders the layout from top to bottom
 */
'TopToBottom' | 
/**
 * BottomToTop - Renders the layout from bottom to top
 */
'BottomToTop' | 
/**
 * LeftToRight - Renders the layout from left to right
 */
'LeftToRight' | 
/**
 * RightToLeft - Renders the layout from right to left
 */
'RightToLeft';
/**
 * Defines the types of the automatic layout
 * * None - None of the layouts is applied
 * * HierarchicalTree - Defines the type of the layout as Hierarchical Tree
 * * OrganizationalChart - Defines the type of the layout as Organizational Chart
 * * ComplexHierarchicalTree - Defines the type of the layout as complex HierarchicalTree
 * * RadialTree - Defines the type of the layout as Radial tree
 */
export  type LayoutType = 
/**
 * None - None of the layouts is applied
 */
'None' | 
/**
 * HierarchicalTree - Defines the type of the layout as Hierarchical Tree
 */
'HierarchicalTree' | 
/**
 * RadialTree - Defines the type of the layout as Radial Tree
 */
'RadialTree' | 
/**
 * OrganizationalChart - Defines the type of the layout as Organizational Chart
 */
'OrganizationalChart' | 
/**
 * SymmetricalLayout - Defines the type of the layout as SymmetricalLayout
 */
'SymmetricalLayout' | 
/**
 * ComplexHierarchicalTree - Defines the type of the layout as complex HierarchicalTree
 */
'ComplexHierarchicalTree' | 
/**
 * MindMap - Defines the type of the layout as MindMap
 */
'MindMap';
/**
 * Alignment position
 * Left - Sets the branch type as Left
 * Right - Sets the branch type as Right
 */
export  type BranchTypes = 
/**
 * Left - Sets the branch type as Left
 */
'Left' | 
/**
 * Right - Sets the branch type as Right
 */
'Right';
/**
 * Defines how the first segments have to be defined in a layout
 * Auto - Defines the first segment direction based on the type of the layout
 * Orientation - Defines the first segment direction based on the orientation of the layout
 * Custom - Defines the first segment direction dynamically by the user
 */
export  type ConnectionDirection = 
/**
 * Auto - Defines the first segment direction based on the type of the layout
 */
'Auto' | 
/**
 * Orientation - Defines the first segment direction based on the orientation of the layout
 */
'Orientation' | 
/**
 * Custom - Defines the first segment direction dynamically by the user
 */
'Custom';
/**
 * Defines where the user handles have to be aligned
 * Top - Aligns the user handles at the top of an object
 * Bottom - Aligns the user handles at the bottom of an object
 * Left - Aligns the user handles at the left of an object
 * Right - Aligns the user handles at the right of an object
 */
export  type Side = 
/**
 * Top - Aligns the user handles at the top of an object
 */
'Top' | 
/**
 * Bottom - Aligns the user handles at the bottom of an object
 */
'Bottom' | 
/**
 * Left - Aligns the user handles at the left of an object
 */
'Left' | 
/**
 * Right - Aligns the user handles at the right of an object
 */
'Right';
/**
 * Defines how the connectors have to be routed in a layout
 * Default - Routes the connectors like a default diagram
 * Layout - Routes the connectors based on the type of the layout
 */
export  type ConnectorSegments = 
/**
 * Default - Routes the connectors like a default diagram
 */
'Default' | 
/**
 * Layout - Routes the connectors based on the type of the layout
 */
'Layout';
/**
 * Defines how the annotations have to be aligned with respect to its immediate parent
 * Center - Aligns the annotation at the center of a connector segment
 * Before - Aligns the annotation before a connector segment
 * After - Aligns the annotation after a connector segment
 */
export  type AnnotationAlignment = 
/**
 * Center - Aligns the annotation at the center of a connector segment
 */
'Center' | 
/**
 * Before - Aligns the annotation before a connector segment
 */
'Before' | 
/**
 * After - Aligns the annotation after a connector segment
 */
'After';
/**
 * Defines the type of the port
 * Point - Sets the type of the port as Point
 * Path - Sets the type of the port as Path
 * Dynamic - Sets the type of the port as Dynamic
 */
export  type PortTypes = 
/**
 * Point - Sets the type of the port as Point
 */
'Point' | 
/**
 * Path - Sets the type of the port as Path
 */
'Path' | 
/**
 * Dynamic - Sets the type of the port as Dynamic
 */
'Dynamic';
/**
 * Defines the type of the annotation
 * Shape - Sets the annotation type as Shape
 * Path - Sets the annotation type as Path
 */
export  type AnnotationTypes = 
/**
 * Shape - Sets the annotation type as Shape
 */
'Shape' | 
/**
 * Path - Sets the annotation type as Path
 */
'Path';
/**
 * File Format type for export.
 * JPG - Save the file in JPG Format
 * PNG - Saves the file in PNG Format
 * BMP - Save the file in BMP Format
 * SVG - save the file in SVG format
 * @IgnoreSingular
 */
export  type FileFormats = 
/** JPG-Save the file in JPG Format  */
'JPG' | 
/** PNG - Save the file in PNG Format */
'PNG' | 
/** BMP - Save the file in BMP format */
'BMP' | 
/** SVG - Saves the file in SVG format */
'SVG';
/**
 * Defines whether the diagram has to be exported as an image or it has to be converted as image url
 * Download
 * Data
 * @IgnoreSingular
 */
export  type ExportModes = 
/** Download - Download the image */
'Download' | 
/** Data - Converted as image url */
'Data';
/**
 * Defines the region that has to be drawn as an image
 * PageSettings -  With the given page settings image has to be exported.
 * Content - The diagram content is export
 * CustomBounds - Exported with given bounds.
 * @IgnoreSingular
 */
export  type DiagramRegions = 
/** PageSettings -  With the given page settings image has to be exported. */
'PageSettings' | 
'Content' | 
/** CustomBounds - Exported with given bounds. */
'CustomBounds';
/**
 * Constraints to define when a port has to be visible
 * Visible - Always shows the port
 * Hidden - Always hides the port
 * Hover - Shows the port when the mouse hovers over a node
 * Connect - Shows the port when a connection end point is dragged over a node
 * Default - By default the ports will be visible when a node is hovered and being tried to connect
 * @aspNumberEnum
 * @blazorNumberEnum
 */
export  enum PortVisibility {
    /** Always shows the port */
    Visible = 1,
    /** Always hides the port */
    Hidden = 2,
    /** Shows the port when the mouse hovers over a node */
    Hover = 4,
    /** Shows the port when a connection end point is dragged over a node */
    Connect = 8
}
/**
 * Defines the constraints to Enables / Disables some features of Snapping.
 * None - Snapping does not happen
 * ShowHorizontalLines - Displays only the horizontal gridlines in diagram.
 * ShowVerticalLines - Displays only the Vertical gridlines in diagram.
 * ShowLines - Display both Horizontal and Vertical gridlines.
 * SnapToHorizontalLines - Enables the object to snap only with horizontal gridlines.
 * SnapToVerticalLines - Enables the object to snap only with horizontal gridlines.
 * SnapToLines - Enables the object to snap with both horizontal and Vertical gridlines.
 * snapToObject - Enables the object to snap with the other objects in the diagram.
 * @IgnoreSingular
 * @aspNumberEnum
 * @blazorNumberEnum
 */
export  enum SnapConstraints {
    /** None - Snapping does not happen */
    None = 0,
    /** ShowHorizontalLines - Displays only the horizontal gridlines in diagram. */
    ShowHorizontalLines = 1,
    /** ShowVerticalLines - Displays only the Vertical gridlines in diagram  */
    ShowVerticalLines = 2,
    /** ShowLines - Display both Horizontal and Vertical gridlines */
    ShowLines = 3,
    /** SnapToHorizontalLines - Enables the object to snap only with horizontal gridlines */
    SnapToHorizontalLines = 4,
    /** SnapToVerticalLines - Enables the object to snap only with horizontal gridlines */
    SnapToVerticalLines = 8,
    /** SnapToLines - Enables the object to snap with both horizontal and Vertical gridlines */
    SnapToLines = 12,
    /** SnapToObject - Enables the object to snap with the other objects in the diagram. */
    SnapToObject = 16,
    /** Shows gridlines and enables snapping */
    All = 31
}
/**
 * Defines the visibility of the selector handles
 * None - Hides all the selector elements
 * ConnectorSourceThumb - Shows/hides the source thumb of the connector
 * ConnectorTargetThumb - Shows/hides the target thumb of the connector
 * ResizeSouthEast - Shows/hides the bottom right resize handle of the selector
 * ResizeSouthWest - Shows/hides the bottom left resize handle of the selector
 * ResizeNorthEast - Shows/hides the top right resize handle of the selector
 * ResizeNorthWest - Shows/hides the top left resize handle of the selector
 * ResizeEast - Shows/hides the middle right resize handle of the selector
 * ResizeWest - Shows/hides the middle left resize handle of the selector
 * ResizeSouth - Shows/hides the bottom center resize handle of the selector
 * ResizeNorth - Shows/hides the top center resize handle of the selector
 * Rotate - Shows/hides the rotate handle of the selector
 * UserHandles - Shows/hides the user handles of the selector
 * Resize - Shows/hides all resize handles of the selector
 * @aspNumberEnum
 * @blazorNumberEnum
 * @IgnoreSingular
 */
export  enum SelectorConstraints {
    /** Hides all the selector elements */
    None = 1,
    /** Shows/hides the source thumb of the connector */
    ConnectorSourceThumb = 2,
    /** Shows/hides the target thumb of the connector */
    ConnectorTargetThumb = 4,
    /** Shows/hides the bottom right resize handle of the selector */
    ResizeSouthEast = 8,
    /** Shows/hides the bottom left resize handle of the selector */
    ResizeSouthWest = 16,
    /** Shows/hides the top right resize handle of the selector */
    ResizeNorthEast = 32,
    /** Shows/hides the top left resize handle of the selector */
    ResizeNorthWest = 64,
    /** Shows/hides the middle right resize handle of the selector  */
    ResizeEast = 128,
    /** Shows/hides the middle left resize handle of the selector */
    ResizeWest = 256,
    /** Shows/hides the bottom center resize handle of the selector */
    ResizeSouth = 512,
    /** Shows/hides the top center resize handle of the selector */
    ResizeNorth = 1024,
    /**  Shows/hides the rotate handle of the selector */
    Rotate = 2048,
    /** Shows/hides the user handles of the selector */
    UserHandle = 4096,
    /** Shows/hides the default tooltip of nodes and connectors */
    ToolTip = 8192,
    /** Shows/hides all resize handles of the selector */
    ResizeAll = 2046,
    /** Shows all handles of the selector  */
    All = 16382
}
/**
 * Defines the type of the panel
 * None - Defines that the panel will not rearrange its children. Instead, it will be positioned based on its children.
 * Canvas - Defines the type of the panel as Canvas
 * Stack - Defines the type of the panel as Stack
 * Grid - Defines the type of the panel as Grid
 * WrapPanel - Defines the type of the panel as WrapPanel
 */
export  type Panels = 
/** None - Defines that the panel will not rearrange its children. Instead, it will be positioned based on its children. */
'None' | 
/** Canvas - Defines the type of the panel as Canvas */
'Canvas' | 
/** Stack - Defines the type of the panel as Stack */
'Stack' | 
/** Grid - Defines the type of the panel as Grid */
'Grid' | 
/** WrapPanel - Defines the type of the panel as WrapPanel */
'WrapPanel';
/**
 * Defines the orientation
 * Horizontal - Sets the orientation as Horizontal
 * Vertical - Sets the orientation as Vertical
 */
export  type Orientation = 
/** Horizontal - Sets the orientation as Horizontal */
'Horizontal' | 
/** Vertical - Sets the orientation as Vertical */
'Vertical';
/**
 * Defines the orientation
 * Horizontal - Sets the orientation as Horizontal
 * Vertical - Sets the orientation as Vertical
 */
export  type ContainerTypes = 
/** Canvas - Sets the ContainerTypes as Canvas */
'Canvas' | 
/** Stack - Sets the ContainerTypes as Stack */
'Stack' | 
/** Grid - Sets the ContainerTypes as Grid */
'Grid';
/**
 * Defines the reference with respect to which the diagram elements have to be aligned
 * Point - Diagram elements will be aligned with respect to a point
 * Object - Diagram elements will be aligned with respect to its immediate parent
 */
export  type RelativeMode = 
/** Point - Diagram elements will be aligned with respect to a point */
'Point' | 
/** Object - Diagram elements will be aligned with respect to its immediate parent */
'Object';
/**
 * Defines how to wrap the text when it exceeds the element bounds
 * WrapWithOverflow - Wraps the text so that no word is broken
 * Wrap - Wraps the text and breaks the word, if necessary
 * NoWrap - Text will no be wrapped
 */
export  type TextWrap = 
/** WrapWithOverflow - Wraps the text so that no word is broken */
'WrapWithOverflow' | 
/** Wrap - Wraps the text and breaks the word, if necessary */
'Wrap' | 
/** NoWrap - Text will no be wrapped */
'NoWrap';
/**
 * Defines how to handle the text when it exceeds the element bounds
 * Wrap - Wraps the text to next line, when it exceeds its bounds
 * Ellipsis - It truncates the overflown text and represents the clipping with an ellipsis
 * Clip - It clips the overflow text
 */
export  type TextOverflow = 
/** Wrap - Wraps the text to next line, when it exceeds its bounds */
'Wrap' | 
/** Ellipsis - It truncates the overflown text and represents the clipping with an ellipsis */
'Ellipsis' | 
/** Clip - It clips the overflow text */
'Clip';
/**
 * Defines how to show tooltip
 * Auto - Shows the tooltip on drag, scale, and rotate the object
 * Custom - Shows the tooltip for the diagram element
 */
export  type TooltipMode = 
/** Auto - It shows the tooltip On drag,scale,rotate the object */
'Auto' | 
/** Custom - It shows tooltip based on object */
'Custom';
/**
 * Defines the mode of the alignment based on which the elements should be aligned
 * Object - Aligns the objects based on the first object in the selected list
 * Selector - Aligns the objects based on the  the selector bounds
 */
export  type AlignmentMode = 
/** Object - Aligns the objects based on the first object in the selected list */
'Object' | 
/** Selector - Aligns the objects based on the  the selector bounds */
'Selector';
/**
 * Defines the alignment options
 * Left - Aligns the objects at the left of the selector bounds
 * Right - Aligns the objects at the right of the selector bounds
 * Center - Aligns the objects at the horizontal center of the selector bounds
 * Top - Aligns the objects at the top of the selector bounds
 * Bottom - Aligns the objects at the bottom of the selector bounds
 * Middle - Aligns the objects at the vertical center of the selector bounds
 */
export  type AlignmentOptions = 
/** Left - Aligns the objects at the left of the selector bounds */
'Left' | 
/** Right - Aligns the objects at the right of the selector bounds */
'Right' | 
/** Center - Aligns the objects at the horizontal center of the selector bounds */
'Center' | 
/** Top - Aligns the objects at the top of the selector bounds */
'Top' | 
/** Bottom - Aligns the objects at the bottom of the selector bounds */
'Bottom' | 
/** Middle - Aligns the objects at the vertical center of the selector bounds */
'Middle';
/**
 * Defines the distribution options
 * RightToLeft - Distributes the objects based on the distance between the right and left sides of the adjacent objects
 * Left - Distributes the objects based on the distance between the left sides of the adjacent objects
 * Right - Distributes the objects based on the distance between the right sides of the adjacent objects
 * Center - Distributes the objects based on the distance between the center of the adjacent objects
 * BottomToTop - Distributes the objects based on the distance between the bottom and top sides of the adjacent objects
 * Top - Distributes the objects based on the distance between the top sides of the adjacent objects
 * Bottom - Distributes the objects based on the distance between the bottom sides of the adjacent objects
 * Middle - Distributes the objects based on the distance between the vertical center of the adjacent objects
 */
export  type DistributeOptions = 
/** RightToLeft - Distributes the objects based on the distance between the right and left sides of the adjacent objects */
'RightToLeft' | 
/** Left - Distributes the objects based on the distance between the left sides of the adjacent objects */
'Left' | 
/** Right - Distributes the objects based on the distance between the right sides of the adjacent objects */
'Right' | 
/** Center - Distributes the objects based on the distance between the center of the adjacent objects */
'Center' | 
/** BottomToTop - Distributes the objects based on the distance between the bottom and top sides of the adjacent objects */
'BottomToTop' | 
/** Top - Distributes the objects based on the distance between the top sides of the adjacent objects */
'Top' | 
/** Bottom - Distributes the objects based on the distance between the bottom sides of the adjacent objects */
'Bottom' | 
/** Middle - Distributes the objects based on the distance between the vertical center of the adjacent objects */
'Middle';
/**
 * Defines the sizing options
 * Width - Scales the width of the selected objects
 * Height - Scales the height of the selected objects
 * Size - Scales the selected objects both vertically and horizontally
 */
export  type SizingOptions = 
/** Width - Scales the width of the selected objects */
'Width' | 
/** Height - Scales the height of the selected objects */
'Height' | 
/** Size - Scales the selected objects both vertically and horizontally */
'Size';
/**
 * Defines how to handle the empty space and empty lines of a text
 * PreserveAll - Preserves all empty spaces and empty lines
 * CollapseSpace - Collapses the consequent spaces into one
 * CollapseAll - Collapses all consequent empty spaces and empty lines
 */
export  type WhiteSpace = 
/** PreserveAll - Preserves all empty spaces and empty lines */
'PreserveAll' | 
/** CollapseSpace - Collapses the consequent spaces into one */
'CollapseSpace' | 
/** CollapseAll - Collapses all consequent empty spaces and empty lines */
'CollapseAll';
/**
 * Defines how to handle the rubber band selection
 * CompleteIntersect - Selects the objects that are contained within the selected region
 * PartialIntersect - Selects the objects that are partially intersected with the selected region
 */
export  type RubberBandSelectionMode = 
/** CompleteIntersect - Selects the objects that are contained within the selected region */
'CompleteIntersect' | 
/** PartialIntersect - Selects the objects that are partially intersected with the selected region */
'PartialIntersect';
/**
 * Defines the rendering mode of the diagram
 * SVG - Renders the diagram objects as SVG elements
 * Canvas - Renders the diagram in a canvas
 */
export  type RenderingMode = 
/** SVG - Renders the diagram objects as SVG elements */
'SVG' | 
/** Canvas - Renders the diagram in a canvas */
'Canvas';
/**
 * Defines how to decorate the text
 * Overline - Decorates the text with a line above the text
 * Underline - Decorates the text with an underline
 * LineThrough - Decorates the text by striking it with a line
 * None - Text will not have any specific decoration
 */
export  type TextDecoration = 
/** Overline - Decorates the text with a line above the text */
'Overline' | 
/** Underline - Decorates the text with an underline */
'Underline' | 
/** LineThrough - Decorates the text by striking it with a line */
'LineThrough' | 
/** None - Text will not have any specific decoration */
'None';
/**
 * Defines how the text has to be aligned
 * Left - Aligns the text at the left of the text bounds
 * Right - Aligns the text at the right of the text bounds
 * Center - Aligns the text at the center of the text bounds
 * Justify - Aligns the text in a justified manner
 */
export  type TextAlign = 
/** Left - Aligns the text at the left of the text bounds */
'Left' | 
/** Right - Aligns the text at the right of the text bounds */
'Right' | 
/** Center - Aligns the text at the center of the text bounds */
'Center' | 
/** Justify - Aligns the text in a justified manner */
'Justify';
/**
 * Defines the constraints to enable/disable certain features of connector.
 * * None - Interaction of the connectors cannot be done.
 * * Select - Selects the connector.
 * * Delete - Delete the connector.
 * * Drag - Drag the connector.
 * * DragSourceEnd - Drag the source end of the connector.
 * * DragTargetEnd - Drag the target end of the connector.
 * * DragSegmentThump - Drag the segment thumb of the connector.
 * * AllowDrop - Allow to drop a node.
 * * Bridging - Creates bridge  on intersection of two connectors.
 * * BridgeObstacle -
 * * InheritBridging - Creates bridge  on intersection of two connectors.
 * * PointerEvents - Sets the pointer events.
 * * Tooltip - Displays a tooltip for the connectors.
 * * InheritToolTip - Displays a tooltip for the connectors.
 * * Interaction - Features of the connector used for interaction.
 * * ReadOnly - Enables ReadOnly
 * * Default - Default features of the connector.
 * @aspNumberEnum
 * @blazorNumberEnum
 * @IgnoreSingular
 */
export  enum ConnectorConstraints {
    /** Disable all connector Constraints. */
    None = 1,
    /** Enables connector to be selected. */
    Select = 2,
    /** Enables connector to be Deleted. */
    Delete = 4,
    /** Enables connector to be Dragged. */
    Drag = 8,
    /** Enables connectors source end to be selected. */
    DragSourceEnd = 16,
    /** Enables connectors target end to be selected. */
    DragTargetEnd = 32,
    /** Enables control point and end point of every segment in a connector for editing. */
    DragSegmentThumb = 64,
    /** Enables AllowDrop constraints to the  connector. */
    AllowDrop = 128,
    /** Enables bridging to the connector. */
    Bridging = 256,
    /** Enables or Disables Bridge Obstacles with overlapping of connectors. */
    BridgeObstacle = 512,
    /** Enables bridging to the connector. */
    InheritBridging = 1024,
    /** Used to set the pointer events. */
    PointerEvents = 2048,
    /** Enables or disables tool tip for the connectors */
    Tooltip = 4096,
    /** Enables or disables tool tip for the connectors */
    InheritTooltip = 8192,
    /** Enables Interaction. */
    Interaction = 4218,
    /** Enables ReadOnly */
    ReadOnly = 16384,
    /** Enables or disables routing to the connector. */
    LineRouting = 32768,
    /** Enables or disables routing to the connector. */
    InheritLineRouting = 65536,
    /** Enables all constraints. */
    Default = 77374
}
/**
 * Enables/Disables the annotation constraints
 * ReadOnly - Enables/Disables the ReadOnly Constraints
 * InheritReadOnly - Enables/Disables the InheritReadOnly Constraints
 * Select -Enables/Disable select support for the annotation
 * Drag - Enables/Disable drag support for the annotation
 * Resize - Enables/Disable resize support for the annotation
 * Rotate - Enables/Disable rotate support for the annotation
 * Interaction - Enables annotation to inherit the interaction option
 * None - Disable all annotation constraints
 * @aspNumberEnum
 * @blazorNumberEnum
 * @IgnoreSingular
 */
export  enum AnnotationConstraints {
    /** Enables/Disables the ReadOnly Constraints */
    ReadOnly = 2,
    /** Enables/Disables the InheritReadOnly Constraints */
    InheritReadOnly = 4,
    /** Enables/Disable select support for the annotation */
    Select = 8,
    /** Enables/Disable drag support for the annotation */
    Drag = 16,
    /** Enables/Disable resize support for the annotation */
    Resize = 32,
    /** Enables/Disable rotate support for the annotation */
    Rotate = 64,
    /** Enables annotation to inherit the interaction option */
    Interaction = 120,
    /** Disable all annotation Constraints */
    None = 0
}
/**
 * Enables/Disables certain features of node
 * None - Disable all node Constraints
 * Select - Enables node to be selected
 * Drag - Enables node to be Dragged
 * Rotate - Enables node to be Rotate
 * Shadow - Enables node to display shadow
 * PointerEvents - Enables node to provide pointer  option
 * Delete - Enables node to delete
 * InConnect - Enables node to provide in connect option
 * OutConnect - Enables node to provide out connect option
 * Individual - Enables node to provide individual resize option
 * Expandable - Enables node to provide Expandable option
 * AllowDrop - Enables node to provide allow to drop option
 * Inherit - Enables node to inherit the interaction option
 * ResizeNorthEast - Enable ResizeNorthEast of the node
 * ResizeEast - Enable ResizeEast of the node
 * ResizeSouthEast - Enable ResizeSouthEast of the node
 * ResizeSouth - Enable ResizeSouthWest of the node
 * ResizeSouthWest - Enable ResizeSouthWest of the node
 * ResizeSouth - Enable ResizeSouth of the node
 * ResizeSouthWest - Enable ResizeSouthWest of the node
 * ResizeWest - Enable ResizeWest of the node
 * ResizeNorth - Enable ResizeNorth of the node
 * Resize - Enables the Aspect ratio fo the node
 * AspectRatio - Enables the Aspect ratio fo the node
 * Tooltip - Enables or disables tool tip for the Nodes
 * InheritTooltip - Enables or disables tool tip for the Nodes
 * ReadOnly - Enables the  ReadOnly support for Annotation
 * Default - Enables all constraints
 * @aspNumberEnum
 * @blazorNumberEnum
 * @IgnoreSingular
 */
export  enum NodeConstraints {
    /** Disable all node Constraints. */
    None = 0,
    /** Enables node to be selected. */
    Select = 2,
    /** Enables node to be Dragged. */
    Drag = 4,
    /** Enables node to be Rotate. */
    Rotate = 8,
    /** Enables node to display shadow. */
    Shadow = 16,
    /** Enables node to provide pointer  option */
    PointerEvents = 32,
    /** Enables node to delete */
    Delete = 64,
    /** Enables node to provide in connect option */
    InConnect = 128,
    /** Enables node to provide out connect option */
    OutConnect = 256,
    /** Enables node to provide individual resize option */
    Individual = 512,
    /** Enables node to provide Expandable option */
    Expandable = 1024,
    /** Enables node to provide allow to drop option */
    AllowDrop = 2048,
    /** Enables node to inherit the interaction option */
    Inherit = 78,
    /** Enable ResizeNorthEast of the node  */
    ResizeNorthEast = 4096,
    /** Enable ResizeEast of the node  */
    ResizeEast = 8192,
    /** Enable ResizeSouthEast of the node  */
    ResizeSouthEast = 16384,
    /** Enable ResizeSouth of the node  */
    ResizeSouth = 32768,
    /** Enable ResizeSouthWest of the node  */
    ResizeSouthWest = 65536,
    /** Enable ResizeWest of the node  */
    ResizeWest = 131072,
    /** Enable ResizeNorthWest of the node  */
    ResizeNorthWest = 262144,
    /** Enable ResizeNorth of the node  */
    ResizeNorth = 524288,
    /** Enable Resize of the node  */
    Resize = 1044480,
    /** Enables the Aspect ratio fo the node */
    AspectRatio = 1048576,
    /** hide all resize support for node */
    HideThumbs = 16777216,
    /** Enables or disables tool tip for the Nodes */
    Tooltip = 2097152,
    /** Enables or disables tool tip for the Nodes */
    InheritTooltip = 4194304,
    /** Enables the  ReadOnly support for Annotation */
    ReadOnly = 8388608,
    /** Enables all constraints */
    Default = 5240814
}
/** Enables/Disables The element actions
 * None - Diables all element actions are none
 * ElementIsPort - Enable element action is port
 * ElementIsGroup - Enable element action as Group
 * @private
 */
export  enum ElementAction {
    /** Disables all element actions are none  */
    None = 0,
    /** Enable the element action is Port  */
    ElementIsPort = 2,
    /** Enable the element action as Group  */
    ElementIsGroup = 4
}
/** Enables/Disables the handles of the selector
 * Rotate - Enable Rotate Thumb
 * ConnectorSource - Enable Connector source point
 * ConnectorTarget - Enable Connector target point
 * ResizeNorthEast - Enable ResizeNorthEast Resize
 * ResizeEast - Enable ResizeEast Resize
 * ResizeSouthEast - Enable ResizeSouthEast Resize
 * ResizeSouth - Enable ResizeSouth Resize
 * ResizeSouthWest - Enable ResizeSouthWest Resize
 * ResizeWest - Enable ResizeWest Resize
 * ResizeNorthWest - Enable ResizeNorthWest Resize
 * ResizeNorth - Enable ResizeNorth Resize
 * Default - Enables all constraints
 * @private
 */
export  enum ThumbsConstraints {
    /** Enable Rotate Thumb  */
    Rotate = 2,
    /** Enable Connector source point  */
    ConnectorSource = 4,
    /** Enable Connector target point  */
    ConnectorTarget = 8,
    /** Enable ResizeNorthEast Resize  */
    ResizeNorthEast = 16,
    /** Enable ResizeEast Resize  */
    ResizeEast = 32,
    /** Enable ResizeSouthEast Resize */
    ResizeSouthEast = 64,
    /** Enable ResizeSouth Resize */
    ResizeSouth = 128,
    /** Enable ResizeSouthWest Resize */
    ResizeSouthWest = 256,
    /** Enable ResizeWest Resize */
    ResizeWest = 512,
    /** Enable ResizeNorthWest Resize */
    ResizeNorthWest = 1024,
    /** Enable ResizeNorth Resize */
    ResizeNorth = 2048,
    /** Enables all constraints */
    Default = 4094
}
/**
 * Enables/Disables certain features of diagram
 * None - Disable DiagramConstraints constraints
 * Bridging - Enables/Disable Bridging support for connector
 * UndoRedo - Enables/Disable the Undo/Redo support
 * Tooltip - Enables/Disable Tooltip support
 * UserInteraction - Enables/Disable UserInteraction support for the diagram
 * ApiUpdate - Enables/Disable ApiUpdate support for the diagram
 * PageEditable - Enables/Disable PageEditable support for the diagram
 * Zoom - Enables/Disable Zoom support for the diagram
 * PanX - Enables/Disable PanX support for the diagram
 * PanY - Enables/Disable PanY support for the diagram
 * Pan - Enables/Disable Pan support the diagram
 * ZoomTextEdit - Enables/Disables zooming the text box while editing the text
 * Virtualization - Enables/Disable Virtualization support the diagram
 * Default - Enables/Disable all constraints
 * @aspNumberEnum
 * @blazorNumberEnum
 * @IgnoreSingular
 */
export  enum DiagramConstraints {
    /** Disable DiagramConstraints constraints */
    None = 1,
    /** Enables/Disable Bridging support for connector */
    Bridging = 2,
    /** Enables/Disable the Undo/Redo support */
    UndoRedo = 4,
    /** Enables/Disable Tooltip support */
    Tooltip = 8,
    /** Enables/Disable UserInteraction support for the diagram */
    UserInteraction = 16,
    /** Enables/Disable ApiUpdate support for the diagram */
    ApiUpdate = 32,
    /** Enables/Disable PageEditable support for the diagram */
    PageEditable = 48,
    /** Enables/Disable Zoom support for the diagram */
    Zoom = 64,
    /** Enables/Disable PanX support for the diagram */
    PanX = 128,
    /** Enables/Disable PanY support for the diagram */
    PanY = 256,
    /** Enables/Disable Pan support the diagram */
    Pan = 384,
    /** Enables/Disables zooming the text box while editing the text */
    ZoomTextEdit = 512,
    /** Enables/Disable Virtualization support the diagram */
    Virtualization = 1024,
    /** Enables/ Disable the line routing */
    LineRouting = 2048,
    /** Enables/Disable all constraints */
    Default = 500
}
/**
 * Activates the diagram tools
 * None - Enables/Disable single select support for the diagram
 * SingleSelect - Enables/Disable single select support for the diagram
 * MultipleSelect - Enables/Disable MultipleSelect select support for the diagram
 * ZoomPan - Enables/Disable ZoomPan support for the diagram
 * DrawOnce - Enables/Disable continuousDraw support for the diagram
 * ContinuousDraw - Enables/Disable continuousDraw support for the diagram
 * Default - Enables/Disable all constraints
 * @aspNumberEnum
 * @blazorNumberEnum
 * @IgnoreSingular
 */
export  enum DiagramTools {
    /** Disable all constraints */
    None = 0,
    /** Enables/Disable single select support for the diagram */
    SingleSelect = 1,
    /** Enables/Disable MultipleSelect select support for the diagram */
    MultipleSelect = 2,
    /** Enables/Disable ZoomPan support for the diagram */
    ZoomPan = 4,
    /** Enables/Disable DrawOnce support for the diagram */
    DrawOnce = 8,
    /** Enables/Disable continuousDraw support for the diagram */
    ContinuousDraw = 16,
    /** Enables/Disable all constraints */
    Default = 3
}
/**
 * Defines the bridge direction
 * Top - Defines the direction of the bridge as Top
 * Bottom - Defines the direction of the bridge as Bottom
 * Left - Sets the bridge direction as left
 * Right - Sets the bridge direction as right
 */
export  type BridgeDirection = 
/** Top - Defines the direction of the bridge as Top */
'Top' | 
/** Bottom - Defines the direction of the bridge as Bottom */
'Bottom' | 
/** Left - Sets the bridge direction as left */
'Left' | 
/** Right - Sets the bridge direction as right */
'Right';
/**
 * Defines the type of the gradient
 * Linear - Sets the type of the gradient as Linear
 * Radial - Sets the type of the gradient as Radial
 */
export  type GradientType = 
/** None - Sets the type of the gradient as None */
'None' | 
/** Linear - Sets the type of the gradient as Linear */
'Linear' | 
/** Radial - Sets the type of the gradient as Radial */
'Radial';
/**
 * Defines the shape of a node
 * Path - Sets the type of the node as Path
 * Text - Sets the type of the node as Text
 * Image - Sets the type of the node as Image
 * Basic - Sets the type of the node as Basic
 * Flow - Sets the type of the node as Flow
 * Bpmn - Sets the type of the node as Bpmn
 * Native - Sets the type of the node as Native
 * HTML - Sets the type of the node as HTML
 */
export  type Shapes = 
/** Path - Sets the type of the node as Path */
'Path' | 
/** Text - Sets the type of the node as Text */
'Text' | 
/** Image - Sets the type of the node as Image */
'Image' | 
/** Basic - Sets the type of the node as Basic */
'Basic' | 
/** Flow - Sets the type of the node as Flow */
'Flow' | 
/** Bpmn - Sets the type of the node as Bpmn */
'Bpmn' | 
/** Native - Sets the type of the node as Native */
'Native' | 
/** HTML - Sets the type of the node as HTML */
'HTML' | 
/** UMLActivity - Sets the type of the node as UMLActivity */
'UmlActivity' | 
/** UMLClassifier - Sets the type of the node as UMLClassifier */
'UmlClassifier' | 
/** SwimLane - Sets the type of the node as SwimLane */
'SwimLane';
/**
 * None - Scale value will be set as None for the image
 * Meet - Scale value Meet will be set for the image
 * Slice - Scale value Slice will be set for the image
 */
export  type Scale = 
/** None - Scale value will be set as None for the image */
'None' | 
/** Meet - Scale value Meet will be set for the image */
'Meet' | 
/** Slice - Scale value Slice will be set for the image */
'Slice';
/**
 * None - Alignment value will be set as none
 * XMinYMin - smallest X value of the view port and  smallest Y value of the view port
 * XMidYMin - midpoint X value of the view port and  smallest Y value of the view port
 * XMaxYMin - maximum X value of the view port and  smallest Y value of the view port
 * XMinYMid - smallest X value of the view port and midpoint Y value of the view port
 * XMidYMid - midpoint X value of the view port and midpoint Y value of the view port
 * XMaxYMid - maximum X value of the view port and midpoint Y value of the view port
 * XMinYMax - smallest X value of the view port and maximum Y value of the view port
 * XMidYMax - midpoint X value of the view port and maximum Y value of the view port
 * XMaxYMax - maximum X value of the view port and maximum Y value of the view port
 */
export  type ImageAlignment = 
/** None - Alignment value will be set as none */
'None' | 
/** XMinYMin - smallest X value of the view port and  smallest Y value of the view port */
'XMinYMin' | 
/** XMidYMin - midpoint X value of the view port and  smallest Y value of the view port */
'XMidYMin' | 
/** XMaxYMin - maximum X value of the view port and  smallest Y value of the view port */
'XMaxYMin' | 
/** XMinYMid - smallest X value of the view port and midpoint Y value of the view port */
'XMinYMid' | 
/** XMidYMid - midpoint X value of the view port and midpoint Y value of the view port */
'XMidYMid' | 
/** XMaxYMid - maximum X value of the view port and midpoint Y value of the view port */
'XMaxYMid' | 
/** XMinYMax - smallest X value of the view port and maximum Y value of the view port */
'XMinYMax' | 
/** XMidYMax - midpoint X value of the view port and maximum Y value of the view port */
'XMidYMax' | 
/** XMaxYMax - maximum X value of the view port and maximum Y value of the view port */
'XMaxYMax';
/**
 * Defines the type of the flow shape
 * Process - Sets the type of the flow shape as Process
 * Decision - Sets the type of the flow shape as Decision
 * Document - Sets the type of the flow shape as Document
 * PreDefinedProcess - Sets the type of the flow shape as PreDefinedProcess
 * Terminator - Sets the type of the flow shape as Terminator
 * PaperTap - Sets the type of the flow shape as PaperTap
 * DirectData - Sets the type of the flow shape as DirectData
 * SequentialData - Sets the type of the flow shape as SequentialData
 * MultiData - Sets the type of the flow shape as MultiData
 * Collate - Sets the type of the flow shape as Collate
 * SummingJunction - Sets the type of the flow shape as SummingJunction
 * Or - Sets the type of the flow shape as Or
 * InternalStorage - Sets the type of the flow shape as InternalStorage
 * Extract - Sets the type of the flow shape as Extract
 * ManualOperation - Sets the type of the flow shape as ManualOperation
 * Merge - Sets the type of the flow shape as Merge
 * OffPageReference - Sets the type of the flow shape as OffPageReference
 * SequentialAccessStorage - Sets the type of the flow shape as SequentialAccessStorage
 * Annotation - Sets the type of the flow shape as Annotation
 * Annotation2 - Sets the type of the flow shape as Annotation2
 * Data - Sets the type of the flow shape as Data
 * Card - Sets the type of the flow shape as Card
 * Delay - Sets the type of the flow shape as Delay
 * Preparation - Sets the type of the flow shape as Preparation
 * Display - Sets the type of the flow shape as Display
 * ManualInput - Sets the type of the flow shape as ManualInput
 * LoopLimit - Sets the type of the flow shape as LoopLimit
 * StoredData - Sets the type of the flow shape as StoredData
 */
export  type FlowShapes = 
/** Process - Sets the type of the flow shape as Process */
'Process' | 
/** Decision - Sets the type of the flow shape as Decision */
'Decision' | 
/** Document - Sets the type of the flow shape as Document */
'Document' | 
/** PreDefinedProcess - Sets the type of the flow shape as PreDefinedProcess */
'PreDefinedProcess' | 
/** Terminator - Sets the type of the flow shape as Terminator */
'Terminator' | 
/** PaperTap - Sets the type of the flow shape as PaperTap */
'PaperTap' | 
/** DirectData - Sets the type of the flow shape as DirectData */
'DirectData' | 
/** SequentialData - Sets the type of the flow shape as SequentialData */
'SequentialData' | 
/** Sort - Sets the type of the flow shape as Sort */
'Sort' | 
/** MultiDocument - Sets the type of the flow shape as MultiDocument */
'MultiDocument' | 
/** Collate - Sets the type of the flow shape as Collate */
'Collate' | 
/** SummingJunction - Sets the type of the flow shape as SummingJunction */
'SummingJunction' | 
/** Or - Sets the type of the flow shape as Or */
'Or' | 
/** InternalStorage - Sets the type of the flow shape as InternalStorage */
'InternalStorage' | 
/** Extract - Sets the type of the flow shape as Extract */
'Extract' | 
/** ManualOperation - Sets the type of the flow shape as ManualOperation */
'ManualOperation' | 
/** Merge - Sets the type of the flow shape as Merge */
'Merge' | 
/** OffPageReference - Sets the type of the flow shape as OffPageReference */
'OffPageReference' | 
/** SequentialAccessStorage - Sets the type of the flow shape as SequentialAccessStorage */
'SequentialAccessStorage' | 
/** Annotation - Sets the type of the flow shape as Annotation */
'Annotation' | 
/** Annotation2 - Sets the type of the flow shape as Annotation2 */
'Annotation2' | 
/** Data - Sets the type of the flow shape as Data */
'Data' | 
/** Card - Sets the type of the flow shape as Card */
'Card' | 
/** Delay - Sets the type of the flow shape as Delay */
'Delay' | 
/** Preparation - Sets the type of the flow shape as Preparation */
'Preparation' | 
/** Display - Sets the type of the flow shape as Display */
'Display' | 
/** ManualInput - Sets the type of the flow shape as ManualInput */
'ManualInput' | 
/** LoopLimit - Sets the type of the flow shape as LoopLimit */
'LoopLimit' | 
/** StoredData - Sets the type of the flow shape as StoredData */
'StoredData';
/**
 * Defines the basic shapes
 * Rectangle - Sets the type of the basic shape as Rectangle
 * Ellipse - Sets the type of the basic shape as Ellipse
 * Hexagon - Sets the type of the basic shape as Hexagon
 * Parallelogram - Sets the type of the basic shape as Parallelogram
 * Triangle - Sets the type of the basic shape as Triangle
 * Plus - Sets the type of the basic shape as Plus
 * Star - Sets the type of the basic shape as Star
 * Pentagon - Sets the type of the basic shape as Pentagon
 * Heptagon - Sets the type of the basic shape as Heptagon
 * Octagon - Sets the type of the basic shape as Octagon
 * Trapezoid - Sets the type of the basic shape as Trapezoid
 * Decagon - Sets the type of the basic shape as Decagon
 * RightTriangle - Sets the type of the basic shape as RightTriangle
 * Cylinder - Sets the type of the basic shape as Cylinder
 * Diamond - Sets the type of the basic shape as Diamond
 */
export  type BasicShapes = 
/** Rectangle - Sets the type of the basic shape as Rectangle */
'Rectangle' | 
/** Ellipse - Sets the type of the basic shape as Ellipse */
'Ellipse' | 
/** Hexagon - Sets the type of the basic shape as Hexagon */
'Hexagon' | 
/** Parallelogram - Sets the type of the basic shape as Parallelogram */
'Parallelogram' | 
/** Triangle - Sets the type of the basic shape as Triangle */
'Triangle' | 
/** Plus - Sets the type of the basic shape as Plus */
'Plus' | 
/** Star - Sets the type of the basic shape as Star */
'Star' | 
/** Pentagon - Sets the type of the basic shape as Pentagon */
'Pentagon' | 
/** Heptagon - Sets the type of the basic shape as Heptagon */
'Heptagon' | 
/** Octagon - Sets the type of the basic shape as Octagon */
'Octagon' | 
/** Trapezoid - Sets the type of the basic shape as Trapezoid */
'Trapezoid' | 
/** Decagon - Sets the type of the basic shape as Decagon */
'Decagon' | 
/** RightTriangle - Sets the type of the basic shape as RightTriangle */
'RightTriangle' | 
/** Cylinder - Sets the type of the basic shape as Cylinder */
'Cylinder' | 
/** Diamond - Sets the type of the basic shape as Diamond */
'Diamond' | 
/** Polygon - Sets the type of the basic shape as Polygon */
'Polygon';
/**
 * Defines the type of the Bpmn Shape
 * Event - Sets the type of the Bpmn Shape as Event
 * Gateway - Sets the type of the Bpmn Shape as Gateway
 * Message - Sets the type of the Bpmn Shape as Message
 * DataObject - Sets the type of the Bpmn Shape as DataObject
 * DataSource - Sets the type of the Bpmn Shape as DataSource
 * Activity - Sets the type of the Bpmn Shape as Activity
 * Group - Sets the type of the Bpmn Shape as Group
 * TextAnnotation - Represents the shape as Text Annotation
 */
export  type BpmnShapes = 
/** Event - Sets the type of the Bpmn Shape as Event */
'Event' | 
/** Gateway - Sets the type of the Bpmn Shape as Gateway */
'Gateway' | 
/** Message - Sets the type of the Bpmn Shape as Message */
'Message' | 
/** DataObject - Sets the type of the Bpmn Shape as DataObject */
'DataObject' | 
/** DataSource - Sets the type of the Bpmn Shape as DataSource */
'DataSource' | 
/** Activity - Sets the type of the Bpmn Shape as Activity */
'Activity' | 
/** Group - Sets the type of the Bpmn Shape as Group */
'Group' | 
/** TextAnnotation - Represents the shape as Text Annotation */
'TextAnnotation';
/**
 * Defines the type of the UMLActivity Shape
 * Action - Sets the type of the UMLActivity Shape as Action
 * Decision - Sets the type of the UMLActivity Shape as Decision
 * MergeNode - Sets the type of the UMLActivity Shape as MergeNode
 * InitialNode - Sets the type of the UMLActivity Shape as InitialNode
 * FinalNode - Sets the type of the UMLActivity Shape as FinalNode
 * ForkNode - Sets the type of the UMLActivity Shape as ForkNode
 * JoinNode - Sets the type of the UMLActivity Shape as JoinNode
 * TimeEvent - Represents the UMLActivity shape as TimeEvent
 * @IgnoreSingular
 */
export  type UmlActivityShapes = 
/** Action - Sets the type of the UMLActivity Shape as Action */
'Action' | 
/** Decision - Sets the type of the UMLActivity Shape as Decision */
'Decision' | 
/** MergeNode - Sets the type of the UMLActivity Shape as MergeNode */
'MergeNode' | 
/** InitialNode - Sets the type of the UMLActivity Shape as InitialNode */
'InitialNode' | 
/** FinalNode - Sets the type of the UMLActivity Shape as FinalNode */
'FinalNode' | 
/** ForkNode - Sets the type of the UMLActivity Shape as ForkNode */
'ForkNode' | 
/** JoinNode - Sets the type of the UMLActivity Shape as JoinNode */
'JoinNode' | 
/** TimeEvent - Represents the shape as TimeEvent */
'TimeEvent' | 
/** AcceptingEvent - Sets the type of the UMLActivity Shape as AcceptingEvent */
'AcceptingEvent' | 
/** SendSignal - Sets the type of the UMLActivity Shape as SendSignal */
'SendSignal' | 
/** ReceiveSignal - Sets the type of the UMLActivity Shape as ReceiveSignal */
'ReceiveSignal' | 
/** StructuredNode - Sets the type of the UMLActivity Shape as StructuredNode */
'StructuredNode' | 
/** Note - Sets the type of the UMLActivity Shape as Note */
'Note';
/**
 * Defines the type of the UMLActivity flows
 * Object - Sets the type of the UMLActivity Flow as Object
 * Control - Sets the type of the UMLActivity Flow as Control
 * Exception - Sets the type of the UMLActivity Flow as Exception
 * @IgnoreSingular
 */
export  type UmlActivityFlows = 
/** Object - Sets the type of the UMLActivity Flow as Object */
'Object' | 
/** Control - Sets the type of the UMLActivity Flow as Control */
'Control' | 
/** Exception - Sets the type of the UMLActivity Flow as Exception */
'Exception';
/**
 * Defines the type of the Bpmn Events
 * Start - Sets the type of the Bpmn Event as Start
 * Intermediate - Sets the type of the Bpmn Event as Intermediate
 * End - Sets the type of the Bpmn Event as End
 * NonInterruptingStart - Sets the type of the Bpmn Event as NonInterruptingStart
 * NonInterruptingIntermediate - Sets the type of the Bpmn Event as NonInterruptingIntermediate
 * ThrowingIntermediate - Sets the type of the Bpmn Event as ThrowingIntermediate
 */
export  type BpmnEvents = 
/** Sets the type of the Bpmn Event as Start */
'Start' | 
/** Sets the type of the Bpmn Event as Intermediate */
'Intermediate' | 
/** Sets the type of the Bpmn Event as End */
'End' | 
/** Sets the type of the Bpmn Event as NonInterruptingStart */
'NonInterruptingStart' | 
/** Sets the type of the Bpmn Event as NonInterruptingIntermediate */
'NonInterruptingIntermediate' | 
/** Sets the type of the Bpmn Event as ThrowingIntermediate */
'ThrowingIntermediate';
/**
 * Defines the type of the Bpmn Triggers
 * None - Sets the type of the trigger as None
 * Message - Sets the type of the trigger as Message
 * Timer - Sets the type of the trigger as Timer
 * Escalation - Sets the type of the trigger as Escalation
 * Link - Sets the type of the trigger as Link
 * Error - Sets the type of the trigger as Error
 * Compensation - Sets the type of the trigger as Compensation
 * Signal - Sets the type of the trigger as Signal
 * Multiple - Sets the type of the trigger as Multiple
 * Parallel - Sets the type of the trigger as Parallel
 * Cancel - Sets the type of the trigger as Cancel
 * Conditional - Sets the type of the trigger as Conditional
 * Terminate - Sets the type of the trigger as Terminate
 */
export  type BpmnTriggers = 
/** None - Sets the type of the trigger as None */
'None' | 
/** Message - Sets the type of the trigger as Message */
'Message' | 
/** Timer - Sets the type of the trigger as Timer */
'Timer' | 
/** Escalation - Sets the type of the trigger as Escalation */
'Escalation' | 
/** Link - Sets the type of the trigger as Link */
'Link' | 
/** Error - Sets the type of the trigger as Error */
'Error' | 
/** Compensation - Sets the type of the trigger as Compensation */
'Compensation' | 
/** Signal - Sets the type of the trigger as Signal */
'Signal' | 
/** Multiple - Sets the type of the trigger as Multiple */
'Multiple' | 
/** Parallel - Sets the type of the trigger as Parallel */
'Parallel' | 
/** Cancel - Sets the type of the trigger as Cancel */
'Cancel' | 
/** Conditional - Sets the type of the trigger as Conditional */
'Conditional' | 
/** Terminate - Sets the type of the trigger as Terminate */
'Terminate';
/**
 * Defines the type of the Bpmn gateways
 * None - Sets the type of the gateway as None
 * Exclusive - Sets the type of the gateway as Exclusive
 * Inclusive - Sets the type of the gateway as Inclusive
 * Parallel - Sets the type of the gateway as Parallel
 * Complex - Sets the type of the gateway as Complex
 * EventBased - Sets the type of the gateway as EventBased
 * ExclusiveEventBased - Sets the type of the gateway as ExclusiveEventBased
 * ParallelEventBased - Sets the type of the gateway as ParallelEventBased
 */
export  type BpmnGateways = 
/** None - Sets the type of the gateway as None */
'None' | 
/** Exclusive - Sets the type of the gateway as Exclusive */
'Exclusive' | 
/** Inclusive - Sets the type of the gateway as Inclusive */
'Inclusive' | 
/** Parallel - Sets the type of the gateway as Parallel */
'Parallel' | 
/** Complex - Sets the type of the gateway as Complex */
'Complex' | 
/** EventBased - Sets the type of the gateway as EventBased */
'EventBased' | 
/** ExclusiveEventBased - Sets the type of the gateway as ExclusiveEventBased */
'ExclusiveEventBased' | 
/** ParallelEventBased - Sets the type of the gateway as ParallelEventBased */
'ParallelEventBased';
/**
 * Defines the type of the Bpmn Data Objects
 * None - Sets the type of the data object as None
 * Input - Sets the type of the data object as Input
 * Output - Sets the type of the data object as Output
 */
export  type BpmnDataObjects = 
/** None - Sets the type of the data object as None */
'None' | 
/** Input - Sets the type of the data object as Input */
'Input' | 
/** Output - Sets the type of the data object as Output */
'Output';
/**
 * Defines the type of the Bpmn Activity
 * None - Sets the type of the Bpmn Activity as None
 * Task - Sets the type of the Bpmn Activity as Task
 * SubProcess - Sets the type of the Bpmn Activity as SubProcess
 */
export  type BpmnActivities = 
/** None - Sets the type of the Bpmn Activity as None */
'None' | 
/** Task - Sets the type of the Bpmn Activity as Task */
'Task' | 
/** SubProcess - Sets the type of the Bpmn Activity as SubProcess */
'SubProcess';
/**
 * Defines the type of the Bpmn Loops
 * None - Sets the type of the Bpmn loop as None
 * Standard - Sets the type of the Bpmn loop as Standard
 * ParallelMultiInstance - Sets the type of the Bpmn loop as ParallelMultiInstance
 * SequenceMultiInstance - Sets the type of the Bpmn loop as SequenceMultiInstance
 */
export  type BpmnLoops = 
/** None - Sets the type of the Bpmn loop as None */
'None' | 
/** Standard - Sets the type of the Bpmn loop as Standard */
'Standard' | 
/** ParallelMultiInstance - Sets the type of the Bpmn loop as ParallelMultiInstance */
'ParallelMultiInstance' | 
/** SequenceMultiInstance - Sets the type of the Bpmn loop as SequenceMultiInstance */
'SequenceMultiInstance';
/**
 * Defines the type of the Bpmn Tasks
 * None - Sets the type of the Bpmn Tasks as None
 * Service - Sets the type of the Bpmn Tasks as Service
 * Receive - Sets the type of the Bpmn Tasks as Receive
 * Send - Sets the type of the Bpmn Tasks as Send
 * InstantiatingReceive - Sets the type of the Bpmn Tasks as InstantiatingReceive
 * Manual - Sets the type of the Bpmn Tasks as Manual
 * BusinessRule - Sets the type of the Bpmn Tasks as BusinessRule
 * User - Sets the type of the Bpmn Tasks as User
 * Script - Sets the type of the Bpmn Tasks as Script
 */
export  type BpmnTasks = 
/** None - Sets the type of the Bpmn Tasks as None */
'None' | 
/** Service - Sets the type of the Bpmn Tasks as Service */
'Service' | 
/** Receive - Sets the type of the Bpmn Tasks as Receive */
'Receive' | 
/** Send - Sets the type of the Bpmn Tasks as Send */
'Send' | 
/** InstantiatingReceive - Sets the type of the Bpmn Tasks as InstantiatingReceive */
'InstantiatingReceive' | 
/** Manual - Sets the type of the Bpmn Tasks as Manual */
'Manual' | 
/** BusinessRule - Sets the type of the Bpmn Tasks as BusinessRule */
'BusinessRule' | 
/** User - Sets the type of the Bpmn Tasks as User */
'User' | 
/** Script - Sets the type of the Bpmn Tasks as Script */
'Script';
/**
 * Defines the type of the Bpmn Subprocess
 * None - Sets the type of the Sub process as None
 * Transaction - Sets the type of the Sub process as Transaction
 * Event - Sets the type of the Sub process as Event
 */
export  type BpmnSubProcessTypes = 
/** None - Sets the type of the Sub process as None */
'None' | 
/** Transaction - Sets the type of the Sub process as Transaction */
'Transaction' | 
/** Event - Sets the type of the Sub process as Event */
'Event';
/**
 * Defines the type of the Bpmn boundary
 * Default - Sets the type of the boundary as Default
 * Call - Sets the type of the boundary as Call
 * Event - Sets the type of the boundary as Event
 */
export  type BpmnBoundary = 
/** Default - Sets the type of the boundary as Default */
'Default' | 
/** Call - Sets the type of the boundary as Call */
'Call' | 
/** Event - Sets the type of the boundary as Event */
'Event';
/**
 * Defines the connection shapes
 * Bpmn - Sets the type of the connection shape as Bpmn
 */
export  type ConnectionShapes = 
/** None - Sets the type of the connection shape as None */
'None' | 
/** Bpmn - Sets the type of the connection shape as Bpmn */
'Bpmn' | 
/** UMLActivity - Sets the type of the connection shape as UMLActivity */
'UmlActivity' | 
/** UMLClassifier - Sets the type of the connection shape as UMLClassifier */
'UmlClassifier';
/**
 * Defines the type of the Bpmn flows
 * Sequence - Sets the type of the Bpmn Flow as Sequence
 * Association - Sets the type of the Bpmn Flow as Association
 * Message - Sets the type of the Bpmn Flow as Message
 */
export  type BpmnFlows = 
/** Sequence - Sets the type of the Bpmn Flow as Sequence */
'Sequence' | 
/** Association - Sets the type of the Bpmn Flow as Association */
'Association' | 
/** Message - Sets the type of the Bpmn Flow as Message */
'Message';
/**
 * Defines the type of the Bpmn Association Flows
 * Default - Sets the type of Association flow as Default
 * Directional - Sets the type of Association flow as Directional
 * BiDirectional - Sets the type of Association flow as BiDirectional
 */
export  type BpmnAssociationFlows = 
/** Default - Sets the type of Association flow as Default */
'Default' | 
/** Directional - Sets the type of Association flow as Directional */
'Directional' | 
/** BiDirectional - Sets the type of Association flow as BiDirectional */
'BiDirectional';
/**
 * Defines the type of the Bpmn Message Flows
 * Default - Sets the type of the Message flow as Default
 * InitiatingMessage - Sets the type of the Message flow as InitiatingMessage
 * NonInitiatingMessage - Sets the type of the Message flow as NonInitiatingMessage
 */
export  type BpmnMessageFlows = 
/** Default - Sets the type of the Message flow as Default */
'Default' | 
/** InitiatingMessage - Sets the type of the Message flow as InitiatingMessage */
'InitiatingMessage' | 
/** NonInitiatingMessage - Sets the type of the Message flow as NonInitiatingMessage */
'NonInitiatingMessage';
/**
 * Defines the type of the Bpmn Sequence flows
 * Default - Sets the type of the sequence flow as Default
 * Normal - Sets the type of the sequence flow as Normal
 * Conditional - Sets the type of the sequence flow as Conditional
 */
export  type BpmnSequenceFlows = 
/** Default - Sets the type of the sequence flow as Default */
'Default' | 
/** Normal - Sets the type of the sequence flow as Normal */
'Normal' | 
/** Conditional - Sets the type of the sequence flow as Conditional */
'Conditional';
/**
 * Defines the segment type of the connector
 * Straight - Sets the segment type as Straight
 * Orthogonal - Sets the segment type as Orthogonal
 * Polyline - Sets the segment type as Polyline
 * Bezier - Sets the segment type as Bezier
 */
export  type Segments = 
/** Straight - Sets the segment type as Straight */
'Straight' | 
/** Orthogonal - Sets the segment type as Orthogonal */
'Orthogonal' | 
/** Polyline - Sets the segment type as Polyline */
'Polyline' | 
/** Bezier - Sets the segment type as Bezier */
'Bezier';
/**
 * Defines the decorator shape of the connector
 * None - Sets the decorator shape as None
 * Arrow - Sets the decorator shape as Arrow
 * Diamond - Sets the decorator shape as Diamond
 * Path - Sets the decorator shape as Path
 * OpenArrow - Sets the decorator shape as OpenArrow
 * Circle - Sets the decorator shape as Circle
 * Square - Sets the decorator shape as Square
 * Fletch - Sets the decorator shape as Fletch
 * OpenFetch - Sets the decorator shape as OpenFetch
 * IndentedArrow - Sets the decorator shape as Indented Arrow
 * OutdentedArrow - Sets the decorator shape as Outdented Arrow
 * DoubleArrow - Sets the decorator shape as DoubleArrow
 */
export  type DecoratorShapes = 
/** None - Sets the decorator shape as None */
'None' | 
/** Arrow - Sets the decorator shape as Arrow */
'Arrow' | 
/** Diamond - Sets the decorator shape as Diamond */
'Diamond' | 
/** OpenArrow - Sets the decorator shape as OpenArrow */
'OpenArrow' | 
/** Circle - Sets the decorator shape as Circle */
'Circle' | 
/** Square - Sets the decorator shape as Square */
'Square' | 
/** Fletch - Sets the decorator shape as Fletch */
'Fletch' | 
/** OpenFetch - Sets the decorator shape as OpenFetch */
'OpenFetch' | 
/** IndentedArrow - Sets the decorator shape as Indented Arrow */
'IndentedArrow' | 
/** OutdentedArrow - Sets the decorator shape as Outdented Arrow */
'OutdentedArrow' | 
/** DoubleArrow - Sets the decorator shape as DoubleArrow */
'DoubleArrow' | 
/** Custom - Sets the decorator shape as Custom */
'Custom';
/**
 * Defines the shape of the ports
 * X - Sets the decorator shape as X
 * Circle - Sets the decorator shape as Circle
 * Square - Sets the decorator shape as Square
 * Custom - Sets the decorator shape as Custom
 */
export  type PortShapes = 
/** X - Sets the decorator shape as X */
'X' | 
/** Circle - Sets the decorator shape as Circle */
'Circle' | 
/** Square - Sets the decorator shape as Square */
'Square' | 
/** Custom - Sets the decorator shape as Custom */
'Custom';
/**
 * Defines the unit mode
 * Absolute - Sets the unit mode type as Absolute
 * Fraction - Sets the unit mode type as Fraction
 */
export  type UnitMode = 
/** Absolute - Sets the unit mode type as Absolute */
'Absolute' | 
/** Fraction - Sets the unit mode type as Fraction */
'Fraction';
/**
 * Defines the property change entry type
 * PositionChanged - Sets the entry type as PositionChanged
 * Align - Sets the entry type as Align
 * Distribute - Sets the entry type as Distribute
 * SizeChanged - Sets the entry type as SizeChanged
 * Sizing - Sets the entry type as Sizing
 * RotationChanged - Sets the entry type as RotationChanged
 * ConnectionChanged - Sets the entry type as ConnectionChanged
 * PropertyChanged - Sets the entry type as PropertyChanged
 * CollectionChanged - Sets the entry type as CollectionChanged
 * StartGroup - Sets the entry type as StartGroup
 * EndGroup - Sets the entry type as EndGroup
 * Group - Sets the entry type as Group
 * UnGroup - Sets the entry type as UnGroup
 * SegmentChanged - Sets the entry type as SegmentChanged
 * LabelCollectionChanged - Sets the entry type as LabelCollectionChanged
 * PortCollectionChanged - Sets the entry type as PortCollectionChanged
 */
export  type EntryType = 
/** PositionChanged - Sets the entry type as PositionChanged */
'PositionChanged' | 
/** Align - Sets the entry type as Align */
'Align' | 
/** Distribute - Sets the entry type as Distribute */
'Distribute' | 
/** SizeChanged - Sets the entry type as SizeChanged */
'SizeChanged' | 
/** Sizing - Sets the entry type as Sizing */
'Sizing' | 
/** RotationChanged - Sets the entry type as RotationChanged */
'RotationChanged' | 
/** ConnectionChanged - Sets the entry type as ConnectionChanged */
'ConnectionChanged' | 
/** PropertyChanged - Sets the entry type as PropertyChanged */
'PropertyChanged' | 
/** CollectionChanged - Sets the entry type as CollectionChanged */
'CollectionChanged' | 
/** StartGroup - Sets the entry type as StartGroup */
'StartGroup' | 
/** EndGroup - Sets the entry type as EndGroup */
'EndGroup' | 
/** Group - Sets the entry type as Group */
'Group' | 
/** UnGroup - Sets the entry type as UnGroup */
'UnGroup' | 
/** SegmentChanged - Sets the entry type as SegmentChanged */
'SegmentChanged' | 
/** LabelCollectionChanged - Sets the entry type as LabelCollectionChanged */
'LabelCollectionChanged' | 
/** PortCollectionChanged - Sets the entry type as PortCollectionChanged */
'PortCollectionChanged' | 
/** PortPositionChanged - Sets the entry type as PortPositionChanged */
'PortPositionChanged' | 
/** AnnotationPropertyChanged - Sets the entry type as AnnotationPropertyChanged */
'AnnotationPropertyChanged' | 
/** ChildCollectionChanged - Sets the entry type as ChildCollectionChanged used for add and remove a child collection in a container */
'ChildCollectionChanged' | 
/** StackNodeChanged - Sets the entry type as StackNodePositionChanged */
'StackChildPositionChanged' | 
/** ColumnWidthChanged - Sets the entry type as ColumnWidthChanged */
'ColumnWidthChanged' | 
/** RowHeightChanged - Sets the entry type as RowHeightChanged */
'RowHeightChanged' | 
/** LanePositionChanged - Sets the entry type as LanePositionChanged */
'LanePositionChanged' | 
/** PhaseCollectionChanged - Sets the entry type as PhaseCollectionChanged */
'PhaseCollectionChanged' | 
/** LaneCollectionChanged - Sets the entry type as LaneCollectionChanged */
'LaneCollectionChanged';
/**
 * Defines the entry category type
 * Internal - Sets the entry category type as Internal
 * External - Sets the entry category type as External
 */
export  type EntryCategory = 
/** Internal - Sets the entry category type as Internal */
'Internal' | 
/** External - Sets the entry category type as External */
'External';
/**
 * Defines the entry change type
 * Insert - Sets the entry change type as Insert
 * Remove - Sets the entry change type as Remove
 */
export  type EntryChangeType = 
/** Insert - Sets the entry change type as Insert */
'Insert' | 
/** Remove - Sets the entry change type as Remove */
'Remove';
/**
 * Defines the container/canvas transform
 * Self - Sets the transform type as Self
 * Parent - Sets the transform type as Parent
 */
export  enum Transform {
    /** Self - Sets the transform type as Self */
    Self = 1,
    /** Parent - Sets the transform type as Parent */
    Parent = 2
}
/**
 * Defines the nudging direction
 * Left - Nudge the object in the left direction
 * Right - Nudge the object in the right direction
 * Up - Nudge the object in the up direction
 * Down - Nudge the object in the down direction
 */
export  type NudgeDirection = 
/** Left - Nudge the object in the left direction */
'Left' | 
/** Right - Nudge the object in the right direction */
'Right' | 
/** Up - Nudge the object in the up direction */
'Up' | 
/** Down - Nudge the object in the down direction */
'Down';
/**
 * Defines the diagrams stretch
 * None - Sets the stretch type for diagram as None
 * Stretch - Sets the stretch type for diagram as Stretch
 * Meet - Sets the stretch type for diagram as Meet
 * Slice - Sets the stretch type for diagram as Slice
 */
export  type Stretch = 
/** None - Sets the stretch type for diagram as None */
'None' | 
/** Stretch - Sets the stretch type for diagram as Stretch */
'Stretch' | 
/** Meet - Sets the stretch type for diagram as Meet */
'Meet' | 
/** Slice - Sets the stretch type for diagram as Slice */
'Slice';
/**
 * Defines the BoundaryConstraints for the diagram
 * Infinity - Allow the interactions to take place at the infinite height and width
 * Diagram - Allow the interactions to take place around the diagram height and width
 * Page - Allow the interactions to take place around the page height and width
 */
export  type BoundaryConstraints = 
/** Infinity - Allow the interactions to take place at the infinite height and width */
'Infinity' | 
/** Diagram - Allow the interactions to take place around the diagram height and width */
'Diagram' | 
/** Page - Allow the interactions to take place around the page height and width */
'Page';
/**
 * Defines the rendering mode for diagram
 * Canvas - Sets the rendering mode type as Canvas
 * Svg - Sets the rendering mode type as Svg
 */
export  enum RenderMode {
    /** Canvas - Sets the rendering mode type as Canvas */
    Canvas = 0,
    /** Svg - Sets the rendering mode type as Svg */
    Svg = 1
}
/**
 * Defines the objects direction
 * Left - Sets the direction type as Left
 * Right - Sets the direction type as Right
 * Top - Sets the direction type as Top
 * Bottom - Sets the direction type as Bottom
 */
export  type Direction = 
/** Left - Sets the direction type as Left */
'Left' | 
/** Right - Sets the direction type as Right */
'Right' | 
/** Top - Sets the direction type as Top */
'Top' | 
/** Bottom - Sets the direction type as Bottom */
'Bottom';
/**
 * Defines the scrollable region of diagram
 * Diagram - Enables scrolling to view the diagram content
 * Infinity - Diagram will be extended, when we try to scroll the diagram
 */
export  type ScrollLimit = 
/** Diagram - Enables scrolling to view the diagram content */
'Diagram' | 
/** Infinity - Diagram will be extended, when we try to scroll the diagram */
'Infinity' | 
/** Limited - Diagram scrolling will be limited */
'Limited';
/**
 * Sets a combination of key modifiers, on recognition of which the command will be executed.They are
 * * None - no modifiers are pressed
 * * Control - ctrl key
 * * Meta - meta key im mac
 * * Alt - alt key
 * * Shift - shift key
 * @aspNumberEnum
 * @blazorNumberEnum
 * @IgnoreSingular
 */
export  enum KeyModifiers {
    /** No modifiers are pressed */
    None = 0,
    /** The CTRL key */
    Control = 1,
    /** The Meta key pressed in Mac */
    Meta = 1,
    /** The ALT key */
    Alt = 2,
    /** The Shift key */
    Shift = 4
}
/**
 * Sets the key value, on recognition of which the command will be executed. They are
 * * none - no key
 * * Number0 = The 0 key
 * * Number1 = The 1 key
 * * Number2 = The 2 key
 * * Number3 = The 3 key
 * * Number4 = The 4 key
 * * Number5 = The 5 key
 * * Number6 = The 6 key
 * * Number7 = The 7 key
 * * Number8 = The 8 key
 * * Number9 = The 9 key
 * * Number0 = The 0 key
 * * BackSpace = The BackSpace key
 * * F1 = The f1 key
 * * F2 = The f2 key
 * * F3 = The f3 key
 * * F4 = The f4 key
 * * F5 = The f5 key
 * * F6 = The f6 key
 * * F7 = The f7 key
 * * F8 = The f8 key
 * * F9 = The f9 key
 * * F10 = The f10 key
 * * F11 = The f11 key
 * * F12 = The f12 key
 * * A = The a key
 * * B = The b key
 * * C = The c key
 * * D = The d key
 * * E = The e key
 * * F = The f key
 * * G = The g key
 * * H = The h key
 * * I = The i key
 * * J = The j key
 * * K = The k key
 * * L = The l key
 * * M = The m key
 * * N = The n key
 * * O = The o key
 * * P = The p key
 * * Q = The q key
 * * R = The r key
 * * S = The s key
 * * T = The t key
 * * U = The u key
 * * V = The v key
 * * W = The w key
 * * X = The x key
 * * Y = The y key
 * * Z = The z key
 * * Left = The left key
 * * Right = The right key
 * * Top = The top key
 * * Bottom = The bottom key
 * * Escape = The Escape key
 * * Tab = The tab key
 * * Delete = The delete key
 * * Enter = The enter key
 * * The Space key
 * * The page up key
 * * The page down key
 * * The end key
 * * The home key
 * * The Minus
 * * The Plus
 * * The Star
 * @aspNumberEnum
 * @blazorNumberEnum
 * @IgnoreSingular
 */
export  enum Keys {
    /** No key pressed */
    None,
    /** The 0 key */
    Number0 = 0,
    /** The 1 key */
    Number1 = 1,
    /** The 2 key */
    Number2 = 2,
    /** The 3 key */
    Number3 = 3,
    /** The 4 key */
    Number4 = 4,
    /** The 5 key */
    Number5 = 5,
    /** The 6 key */
    Number6 = 6,
    /** The 7 key */
    Number7 = 7,
    /** The 8 key */
    Number8 = 8,
    /** The 9 key */
    Number9 = 9,
    /** The A key */
    A = 65,
    /** The B key */
    B = 66,
    /** The C key */
    C = 67,
    /** The D key */
    D = 68,
    /** The E key */
    E = 69,
    /** The F key */
    F = 70,
    /** The G key */
    G = 71,
    /** The H key */
    H = 72,
    /** The I key */
    I = 73,
    /** The J key */
    J = 74,
    /** The K key */
    K = 75,
    /** The L key */
    L = 76,
    /** The M key */
    M = 77,
    /** The N key */
    N = 78,
    /** The O key */
    O = 79,
    /** The P key */
    P = 80,
    /** The Q key */
    Q = 81,
    /** The R key */
    R = 82,
    /** The S key */
    S = 83,
    /** The T key */
    T = 84,
    /** The U key */
    U = 85,
    /** The V key */
    V = 86,
    /** The W key */
    W = 87,
    /** The X key */
    X = 88,
    /** The Y key */
    Y = 89,
    /** The Z key */
    Z = 90,
    /** The left arrow key */
    Left = 37,
    /** The up arrow key */
    Up = 38,
    /** The right arrow key */
    Right = 39,
    /** The down arrow key */
    Down = 40,
    /** The Escape key */
    Escape = 27,
    /** The Space key */
    Space = 32,
    /** The page up key */
    PageUp = 33,
    /** The Space key */
    PageDown = 34,
    /** The Space key */
    End = 35,
    /** The Space key */
    Home = 36,
    /** The delete key */
    Delete = 46,
    /** The tab key */
    Tab = 9,
    /** The enter key */
    Enter = 13,
    /** The BackSpace key */
    BackSpace = 8,
    /** The F1 key */
    F1 = 112,
    /** The F2 key */
    F2 = 113,
    /** The F3 key */
    F3 = 114,
    /** The F4 key */
    F4 = 115,
    /** The F5 key */
    F5 = 116,
    /** The F6 key */
    F6 = 117,
    /** The F7 key */
    F7 = 118,
    /** The F8 key */
    F8 = 119,
    /** The F9 key */
    F9 = 120,
    /** The F10 key */
    F10 = 121,
    /** The F111 key */
    F11 = 122,
    /** The F12 key */
    F12 = 123,
    /** The Star */
    Star = 56,
    /** The Plus */
    Plus = 187,
    /** The Minus */
    Minus = 189
}
/**
 * Enables/Disables certain actions of diagram
 * * Render - Indicates the diagram is in render state.
 * * PublicMethod - Indicates the diagram public method is in action.
 * * ToolAction - Indicates the diagram Tool is in action.
 * * UndoRedo - Indicates the diagram undo/redo is in action.
 * * TextEdit - Indicates the text editing is in progress.
 * * Group - Indicates the group is in progress.
 * * Clear - Indicates diagram have clear all.
 * * PreventClearSelection - prevents diagram from clear selection
 */
export  enum DiagramAction {
    /** Indicates the diagram is in render state.r */
    Render = 2,
    /** Indicates the diagram public method is in action. */
    PublicMethod = 4,
    /** Indicates the diagram Tool is in action. */
    ToolAction = 8,
    /** Indicates the diagram undo/redo is in action. */
    UndoRedo = 16,
    /** Indicates the text editing is in progress. */
    TextEdit = 32,
    /** Indicates the group is in progress. */
    Group = 64,
    /** Indicates diagram have clear all. */
    Clear = 128,
    /** prevents diagram from clear selection. */
    PreventClearSelection = 256,
    /** Indicates whether drag or rotate tool has been activated */
    Interactions = 512,
    /** Use to prevent the history during some action in diagram */
    PreventHistory = 1024,
    /** Use to prevent the icon while expand a node in diagram */
    PreventIconsUpdate = 2048
}
/** @private */
export  type DiagramHistoryAction = 'AddNodeToLane';
/**
 * Defines the Selector type to be drawn
 * None - Draws Normal selector with resize handles
 * Symbol - Draws only the rectangle for the selector
 */
export  enum RendererAction {
    /** None - Draws Normal selector with resize handles */
    None = 2,
    /** DrawSelectorBorder - Draws only the Border for the selector */
    DrawSelectorBorder = 4,
    /** PreventRenderSelector - Avoid the render of selector during interaction */
    PreventRenderSelector = 8
}
export  enum RealAction {
    None = 0,
    PreventDrag = 2,
    PreventScale = 4,
    PreventDataInit = 8,
    /** Indicates when the diagram is scrolled horizontal using scroll bar */
    hScrollbarMoved = 16,
    /** Indicates when the diagram is scrolled vertical using scroll bar */
    vScrollbarMoved = 32
}
/** @private */
export  enum NoOfSegments {
    Zero = 0,
    One = 1,
    Two = 2,
    Three = 3,
    Four = 4,
    Five = 5
}
/** @private */
export  type SourceTypes = 'HierarchicalData' | 'MindMap';
/**
 * Defines the relative mode of the tooltip
 * Object - sets the tooltip position relative to the node
 * Mouse - sets the tooltip position relative to the mouse
 */
export  type TooltipRelativeMode = 
/** Object - sets the tooltip position relative to the node */
'Object' | 
/** Mouse - sets the tooltip position relative to the mouse */
'Mouse';
/**
 * Collections of icon content shapes.
 * None
 * Minus - sets the icon shape as minus
 * Plus - sets the icon shape as Plus
 * ArrowUp - sets the icon shape as ArrowUp
 * ArrowDown - sets the icon shape as ArrowDown
 * Template - sets the icon shape based on  the given  custom template
 * Path - sets the icon shape based on the given  custom Path
 */
export  type IconShapes = 
/** None - sets the icon shape as None */
'None' | 
/** Minus - sets the icon shape as minus */
'Minus' | 
/** Plus - sets the icon shape as Plus */
'Plus' | 
/** ArrowUp - sets the icon shape as ArrowUp */
'ArrowUp' | 
/** ArrowDown - sets the icon shape as ArrowDown */
'ArrowDown' | 
/** Template - sets the icon shape based on  the given  custom template */
'Template' | 
/** Path - sets the icon shape based on the given  custom Path */
'Path';
/**
 * Defines the collection of sub tree orientations in an organizational chart
 * Vertical - Aligns the child nodes in vertical manner
 * Horizontal - Aligns the child nodes in horizontal manner
 */
export  type SubTreeOrientation = 
/** Horizontal - Aligns the child nodes in horizontal manner */
'Horizontal' | 
/** Vertical - Aligns the child nodes in vertical manner */
'Vertical';
/**
 * Defines the collection of sub tree alignments in an organizational chart
 * Left - Aligns the child nodes at the left of the parent in a horizontal/vertical sub tree
 * Right - Aligns the child nodes at the right of the parent in a horizontal/vertical sub tree
 * Center - Aligns the child nodes at the center of the parent in a horizontal sub tree
 * Alternate - Aligns the child nodes at both left and right sides of the parent in a vertical sub tree
 * Balanced - Aligns the child nodes in multiple rows to balance the width and height of the horizontal sub tree
 */
export  type SubTreeAlignments = 
/** Left - Aligns the child nodes at the left of the parent in a horizontal/vertical sub tree */
'Left' | 
/** Right - Aligns the child nodes at the right of the parent in a horizontal/vertical sub tree */
'Right' | 
/** Center - Aligns the child nodes at the center of the parent in a horizontal sub tree */
'Center' | 
/** Alternate - Aligns the child nodes at both left and right sides of the parent in a vertical sub tree */
'Alternate' | 
/** Balanced - Aligns the child nodes in multiple rows to balance the width and height of the horizontal sub tree */
'Balanced';
/**
 * events of diagram
 * @private
 */
export  enum DiagramEvent {
    'collectionChange' = 0,
    'rotateChange' = 1,
    'positionChange' = 2,
    'propertyChange' = 3,
    'selectionChange' = 4,
    'sizeChange' = 5,
    'drop' = 6,
    'sourcePointChange' = 7,
    'targetPointChange' = 8,
    'connectionChange' = 9,
    'animationComplete' = 10,
    'click' = 11,
    'doubleClick' = 12,
    'scrollChange' = 13,
    'dragEnter' = 14,
    'dragLeave' = 15,
    'dragOver' = 16,
    'textEdit' = 17,
    'paletteSelectionChange' = 18,
    'historyChange' = 19,
    'mouseEnter' = 20,
    'mouseLeave' = 21,
    'mouseOver' = 22,
    'expandStateChange' = 23,
    'segmentCollectionChange' = 24,
    'commandExecute' = 25,
    'historyStateChange' = 26,
    'onUserHandleMouseDown' = 27,
    'onUserHandleMouseUp' = 28,
    'onUserHandleMouseEnter' = 29,
    'onUserHandleMouseLeave' = 30
}
export  type HistoryEntryType = 
/** Node - Defines the history entry type is node */
'Node' | 
/** Connector - Defines the history entry type is Connector */
'Connector' | 
/** Selector - Defines the history entry type is Selector Model */
'Selector' | 
/** Diagram - Defines the history entry type is Diagram */
'Diagram' | 
/** ShapeAnnotation - Defines the history entry type is ShapeAnnotation Model */
'ShapeAnnotation' | 
/** PathAnnotation - Defines the history entry type is PathAnnotation Model */
'PathAnnotation' | 
/** PortObject - Defines the history entry type is PortObject */
'PortObject' | 
/** Object - Defines the history entry type is Custom Object */
'Object';
/**
 * Defines the zoom type
 * ZoomIn - Zooms in the diagram control
 * ZoomOut - Zooms out the diagram control
 */
export  type ZoomTypes = 
/** ZoomIn - Zooms in the diagram control */
'ZoomIn' | 
/** ZoomOut - Zooms out the diagram control */
'ZoomOut';
/**
 * Defines how the diagram has to fit into view
 * Page - Fits the diagram content within the viewport
 * Width - Fits the width of the diagram content within the viewport
 * Height - Fits the height of the diagram content within the viewport
 */
export  type FitModes = 
/** Page - Fits the diagram content within the viewport */
'Page' | 
/** Width - Fits the width of the diagram content within the viewport */
'Width' | 
/** Height - Fits the height of the diagram content within the viewport */
'Height';
/** Enables/Disables certain features of port connection
 * @aspNumberEnum
 * @blazorNumberEnum
 * @IgnoreSingular
 */
export  enum PortConstraints {
    /** Disable all constraints  */
    None = 1,
    /** Enables connections with connector  */
    Drag = 2,
    /** Enables to create the connection when mouse hover on the port  */
    Draw = 4,
    /** Enables to only connect the target end of connector */
    InConnect = 8,
    /** Enables to only connect the source end of connector */
    OutConnect = 16,
    /** Enables all constraints */
    Default = 24
}
/**
 * Defines the type of the object
 * Port - Sets the port type as object
 * Annotations - Sets the annotation type as object
 */
export  type ObjectTypes = 
/** Port - Sets the port type as object */
'Port' | 
/** Annotations - Sets the annotation type as object */
'Annotations';
/**
 * Defines the selection change state
 * Interaction - Sets the selection change state as Interaction
 * Commands - Sets the selection change state as Commands
 * Keyboard - Sets the selection change state as Keyboard
 * Unknown - Sets the selection change state as Unknown
 */
export  type SelectionChangeCause = 
/** Interaction - Sets the selection change state as Interaction */
'Interaction' | 
/** Commands - Sets the selection change state as Commands */
'Commands' | 
/** Keyboard - Sets the selection change state as Keyboard */
'Keyboard' | 
/** Unknown - Sets the selection change state as Unknown */
'Unknown';
/**
 * Defines the change state
 * Changing - Sets the event state as Changing
 * Changed - Sets the event state as Changed
 * canceled - Sets the event state as canceled
 */
export  type EventState = 
/** Changing - Sets the event state as Changing */
'Changing' | 
/** Changed - Sets the event state as Changed */
'Changed' | 
/** canceled - Sets the event state as canceled */
'Cancelled';
/**
 * Defines the state of the interactions such as drag, resize and rotate
 * Start - Sets the interaction state as Start
 * Progress - Sets the interaction state as Progress
 * Completed - Sets the interaction state as Completed
 */
export  type State = 
/** Start - Sets the interaction state as Start */
'Start' | 
/** Progress - Sets the interaction state as Progress */
'Progress' | 
/** Completed - Sets the interaction state as Completed */
'Completed';
/**
 * Defines whether an object is added/removed from diagram
 * Addition - Sets the ChangeType as Addition
 * Removal - Sets the ChangeType as Removal
 */
export  type ChangeType = 
/** Addition - Sets the ChangeType as Addition */
'Addition' | 
/** Removal - Sets the ChangeType as Removal */
'Removal';
/**
 * Defines the accessibility element
 * NodeModel - Sets the accessibility element as NodeModel
 * ConnectorModel - Sets the accessibility element as ConnectorModel
 * PortModel - Sets the accessibility element as PortModel
 * TextElement - Sets the accessibility element as TextElement
 * IconShapeModel - Sets the accessibility element as IconShapeModel
 * DecoratorModel - Sets the accessibility element as DecoratorModel
 */
export  type accessibilityElement = 
/** NodeModel - Sets the accessibility element as NodeModel */
'NodeModel' | 
/** ConnectorModel - Sets the accessibility element as ConnectorModel */
'ConnectorModel' | 
/** PortModel - Sets the accessibility element as PortModel */
'PortModel' | 
/** TextElement - Sets the accessibility element as TextElement */
'TextElement' | 
/** IconShapeModel - Sets the accessibility element as IconShapeModel */
'IconShapeModel' | 
/** DecoratorModel - Sets the accessibility element as DecoratorModel */
'DecoratorModel';
/**
 * Defines the context menu click
 * contextMenuClick - Sets the context menu click as contextMenuClick
 */
export  const contextMenuClick: string;
/**
 * Defines the context menu open
 * contextMenuOpen - Sets the context menu open as contextMenuOpen
 */
export  const contextMenuOpen: string;
/**
 * Defines the context menu Before Item Render
 * contextMenuBeforeItemRender - Sets the context menu open as contextMenuBeforeItemRender
 */
export  const contextMenuBeforeItemRender: string;
/**
 * Detect the status of Crud operation performed in the diagram
 */
export  type Status = 'None' | 'New' | 'Update';
/**
 * Enables/Disables scope of the uml shapes
 * * Public - Indicates the scope is public.
 * * Protected - Indicates the scope is protected.
 * * Private - Indicates the scope is private.
 * * Package - Indicates the scope is package.
 */
export  type UmlScope = 'Public' | 'Protected' | 'Private' | 'Package';
/**
 * Enables/Disables shape of the uml classifier shapes
 * * Package - Indicates the scope is public.
 * * Class - Indicates the scope is protected.
 * * Interface - Indicates the scope is private.
 * * Enumeration - Indicates the scope is package.
 * * CollapsedPackage - Indicates the scope is public.
 * * Inheritance - Indicates the scope is protected.
 * * Association - Indicates the scope is private.
 * * Aggregation - Indicates the scope is package.
 * * Composition - Indicates the scope is public.
 * * Realization - Indicates the scope is protected.
 * * DirectedAssociation - Indicates the scope is private.
 * * Dependency - Indicates the scope is package.
 */
export  type ClassifierShape = 'Class' | 'Interface' | 'Enumeration' | 'Inheritance' | 'Association' | 'Aggregation' | 'Composition' | 'Realization' | 'Dependency';
/**
 * Defines the direction the uml connectors
 * * Default - Indicates the direction is Default.
 * * Directional - Indicates the direction is single Directional.
 * * BiDirectional - Indicates the direction is BiDirectional.
 */
export  type AssociationFlow = 'Default' | 'Directional' | 'BiDirectional';
/**
 * Define the Multiplicity of uml connector shapes
 * * OneToOne - Indicates the connector multiplicity is OneToOne.
 * * OneToMany - Indicates the connector multiplicity is OneToMany.
 * * ManyToOne - Indicates the connector multiplicity is ManyToOne.
 */
export  type Multiplicity = 'OneToOne' | 'OneToMany' | 'ManyToOne';
//node_modules/@syncfusion/ej2-diagrams/src/diagram/index.d.ts
/**
 * Diagram component exported items
 */
//node_modules/@syncfusion/ej2-diagrams/src/diagram/interaction/actions.d.ts
/**
 * Finds the action to be taken for the object under mouse
 *
 */
/** @private */
export  function findToolToActivate(obj: Object, wrapper: DiagramElement, position: PointModel, diagram: Diagram, touchStart?: ITouches[] | TouchList, touchMove?: ITouches[] | TouchList, target?: NodeModel | PointPortModel | ShapeAnnotationModel | PathAnnotationModel): Actions;
/** @private */
export  function findPortToolToActivate(diagram: Diagram, target?: NodeModel | PointPortModel, touchStart?: ITouches[] | TouchList, touchMove?: ITouches[] | TouchList): Actions;
/** @private */
export  function contains(mousePosition: PointModel, corner: PointModel, padding: number): boolean;
/** @private */
export  function hasSelection(diagram: Diagram): boolean;
/** @private */
export  function hasSingleConnection(diagram: Diagram): boolean;
/** @private */
export  function isSelected(diagram: Diagram, element: Object, firstLevel?: boolean, wrapper?: DiagramElement): boolean;
/** @private */
export  type Actions = 'None' | 'Select' | 'Drag' | 'ResizeWest' | 'ConnectorSourceEnd' | 'ConnectorTargetEnd' | 'ResizeEast' | 'ResizeSouth' | 'ResizeNorth' | 'ResizeSouthEast' | 'ResizeSouthWest' | 'ResizeNorthEast' | 'ResizeNorthWest' | 'Rotate' | 'ConnectorEnd' | 'Custom' | 'Draw' | 'Pan' | 'BezierSourceThumb' | 'BezierTargetThumb' | 'LayoutAnimation' | 'PinchZoom' | 'Hyperlink' | 'SegmentEnd' | 'OrthoThumb' | 'PortDrag' | 'PortDraw' | 'LabelSelect' | 'LabelDrag' | 'LabelResizeSouthEast' | 'LabelResizeSouthWest' | 'LabelResizeNorthEast' | 'LabelResizeNorthWest' | 'LabelResizeSouth' | 'LabelResizeNorth' | 'LabelResizeWest' | 'LabelResizeEast' | 'LabelRotate';
/** @private */
export  function getCursor(cursor: Actions, angle: number): string;
//node_modules/@syncfusion/ej2-diagrams/src/diagram/interaction/command-manager.d.ts
/**
 * Defines the behavior of commands
 */
export  class CommandHandler {
    /**   @private  */
    clipboardData: ClipBoardObject;
    /**   @private  */
    connectorsTable: Object[];
    /**   @private  */
    processTable: {};
    /** @private */
    isContainer: boolean;
    private state;
    private diagram;
    private childTable;
    private parentTable;
    /**   @private  */
    readonly snappingModule: Snapping;
    /**   @private  */
    readonly layoutAnimateModule: LayoutAnimation;
    constructor(diagram: Diagram);
    /** @private */
    startTransaction(protectChange: boolean): void;
    /** @private */
    endTransaction(protectChange: boolean): void;
    /**
     * @private
     */
    showTooltip(node: IElement, position: PointModel, content: string | HTMLElement, toolName: string, isTooltipVisible: boolean): void;
    /**
     * @private
     */
    closeTooltip(): void;
    /**
     * @private
     */
    canEnableDefaultTooltip(): boolean;
    /**
     * @private
     */
    updateSelector(): void;
    /**
     * @private
     */
    triggerEvent(event: DiagramEvent, args: Object): void;
    /**
     * @private
     */
    dragOverElement(args: MouseEventArgs, currentPosition: PointModel): void;
    /**
     * @private
     */
    disConnect(obj: IElement, endPoint?: string): void;
    private connectionEventChange;
    /**
     * @private
     */
    findTarget(element: DiagramElement, argsTarget: IElement, source?: boolean, connection?: boolean): NodeModel | PointPortModel | ShapeAnnotationModel | PathAnnotationModel;
    /**
     * @private
     */
    canDisconnect(endPoint: string, args: MouseEventArgs, targetPortId: string, targetNodeId: string): boolean;
    /**
     * @private
     */
    changeAnnotationDrag(args: MouseEventArgs): void;
    /**
     * @private
     */
    connect(endPoint: string, args: MouseEventArgs): void;
    /** @private */
    cut(): void;
    /** @private */
    addLayer(layer: LayerModel, objects?: Object[]): void;
    /** @private */
    getObjectLayer(objectName: string): LayerModel;
    /** @private */
    getLayer(layerName: string): LayerModel;
    /** @private */
    removeLayer(layerId: string): void;
    /** @private */
    moveObjects(objects: string[], targetLayer?: string): void;
    /** @private */
    cloneLayer(layerName: string): void;
    /** @private */
    copy(): Object;
    /** @private */
    copyObjects(): Object[];
    private copyProcesses;
    /** @private */
    group(): void;
    /** @private */
    unGroup(obj?: NodeModel): void;
    /** @private */
    paste(obj: (NodeModel | ConnectorModel)[]): void;
    private getNewObject;
    private cloneConnector;
    private cloneNode;
    private getAnnotation;
    private cloneSubProcesses;
    private cloneGroup;
    /** @private */
    translateObject(obj: Node | Connector, groupnodeID?: string): void;
    /**
     * @private
     */
    drawObject(obj: Node | Connector): Node | Connector;
    /**
     * @private
     */
    addObjectToDiagram(obj: Node | Connector): void;
    /**
     * @private
     */
    addText(obj: Node | Connector, currentPosition: PointModel): void;
    private updateArgsObject;
    private updateSelectionChangeEventArgs;
    /** @private */
    selectObjects(obj: (NodeModel | ConnectorModel)[], multipleSelection?: boolean, oldValue?: (NodeModel | ConnectorModel)[]): void;
    /**
     * @private
     */
    findParent(node: Node): Node;
    private selectProcesses;
    private selectGroup;
    /**
     * @private
     */
    private selectBpmnSubProcesses;
    /**
     * @private
     */
    private hasProcesses;
    /** @private */
    select(obj: NodeModel | ConnectorModel, multipleSelection?: boolean, preventUpdate?: boolean): void;
    private getObjectCollectionId;
    private updateBlazorSelectorModel;
    /** @private */
    labelSelect(obj: NodeModel | ConnectorModel, textWrapper: DiagramElement): void;
    /** @private */
    unSelect(obj: NodeModel | ConnectorModel): void;
    /** @private */
    getChildElements(child: DiagramElement[]): string[];
    /** @private */
    moveSvgNode(nodeId: string, targetID: string): void;
    /** @private */
    sendLayerBackward(layerName: string): void;
    /** @private */
    bringLayerForward(layerName: string): void;
    /** @private */
    sendToBack(): void;
    /** @private */
    bringToFront(): void;
    /** @private */
    sortByZIndex(nodeArray: Object[], sortID?: string): Object[];
    /** @private */
    sendForward(): void;
    /** @private */
    sendBackward(): void;
    /**   @private  */
    updateNativeNodeIndex(nodeId: string, targetID?: string): void;
    /**   @private  */
    initSelectorWrapper(): void;
    /** @private */
    doRubberBandSelection(region: Rect): void;
    private clearSelectionRectangle;
    /** @private */
    dragConnectorEnds(endPoint: string, obj: IElement, point: PointModel, segment: BezierSegmentModel, target?: IElement, targetPortId?: string): boolean;
    /**   @private  */
    getSelectedObject(): (NodeModel | ConnectorModel)[];
    /** @private */
    clearSelection(triggerAction?: boolean): void;
    /** @private */
    clearSelectedItems(): void;
    /**
     * @private
     */
    removeStackHighlighter(): void;
    /**
     * @private
     */
    renderStackHighlighter(args: MouseEventArgs, target?: IElement): void;
    /** @private */
    drag(obj: NodeModel | ConnectorModel, tx: number, ty: number): void;
    /**   @private  */
    connectorSegmentChange(actualObject: Node, existingInnerBounds: Rect, isRotate: boolean): void;
    /** @private */
    updateEndPoint(connector: Connector, oldChanges?: Connector): void;
    /** @private */
    dragSourceEnd(obj: ConnectorModel, tx: number, ty: number, preventUpdate?: boolean, point?: PointModel, endPoint?: string, update?: boolean, target?: NodeModel, targetPortId?: string, isDragSource?: boolean, segment?: BezierSegmentModel): boolean;
    /**
     * Update Path Element offset
     */
    updatePathElementOffset(connector: ConnectorModel): void;
    /**
     * Upadte the connector segments when change the source node
     */
    private changeSegmentLength;
    /**
     * Change the connector endPoint to port
     */
    private changeSourceEndToPort;
    /**
     * @private
     * Remove terinal segment in initial
     */
    removeTerminalSegment(connector: Connector, changeTerminal?: boolean): void;
    /**
     * Change the connector endPoint from point to node
     */
    private changeSourceEndToNode;
    /**
     * Translate the bezier points during the interaction
     */
    private translateBezierPoints;
    /** @private */
    dragTargetEnd(obj: ConnectorModel, tx: number, ty: number, preventUpdate?: boolean, point?: PointModel, endPoint?: string, update?: boolean, segment?: OrthogonalSegmentModel | BezierSegmentModel | StraightSegmentModel): boolean;
    /** @private */
    dragControlPoint(obj: ConnectorModel, tx: number, ty: number, preventUpdate?: boolean, segmentNumber?: number): boolean;
    /** @private */
    rotateObjects(parent: NodeModel | SelectorModel, objects: (NodeModel | ConnectorModel)[], angle: number, pivot?: PointModel, includeParent?: boolean): void;
    /** @private */
    snapConnectorEnd(currentPosition: PointModel): PointModel;
    /**   @private  */
    snapAngle(angle: number): number;
    /**   @private  */
    rotatePoints(conn: Connector, angle: number, pivot: PointModel): void;
    private updateInnerParentProperties;
    /** @private */
    scale(obj: NodeModel | ConnectorModel, sw: number, sh: number, pivot: PointModel, refObject?: IElement): boolean;
    /** @private */
    getAllDescendants(node: NodeModel, nodes: (NodeModel | ConnectorModel)[], includeParent?: boolean, innerParent?: boolean): (NodeModel | ConnectorModel)[];
    /**   @private  */
    getChildren(node: NodeModel, nodes: (NodeModel | ConnectorModel)[]): (NodeModel | ConnectorModel)[];
    /** @private */
    cloneChild(id: string): NodeModel;
    /** @private */
    scaleObject(sw: number, sh: number, pivot: PointModel, obj: IElement, element: DiagramElement, refObject: IElement): void;
    private scaleConnector;
    /** @private */
    portDrag(obj: NodeModel | ConnectorModel, portElement: DiagramElement, tx: number, ty: number): void;
    /** @private */
    labelDrag(obj: NodeModel | ConnectorModel, textElement: DiagramElement, tx: number, ty: number): void;
    private updatePathAnnotationOffset;
    private getRelativeOffset;
    private dragLimitValue;
    private updateLabelMargin;
    private boundsInterSects;
    private intersect;
    private getPointAtLength;
    private getInterceptWithSegment;
    /** @private */
    getAnnotationChanges(object: NodeModel | ConnectorModel, label: ShapeAnnotation | PathAnnotation): Object;
    /** @private */
    getPortChanges(object: NodeModel | ConnectorModel, port: PointPort): Object;
    /** @private */
    labelRotate(object: NodeModel | ConnectorModel, label: ShapeAnnotation | PathAnnotation, currentPosition: PointModel, selector: Selector): void;
    /** @private */
    labelResize(node: NodeModel | ConnectorModel, label: ShapeAnnotation | PathAnnotationModel, deltaWidth: number, deltaHeight: number, pivot: PointModel, selector: Selector): void;
    /** @private */
    getSubProcess(source: IElement): SelectorModel;
    /**   @private  */
    checkBoundaryConstraints(tx: number, ty: number, nodeBounds?: Rect): boolean;
    /** @private */
    dragSelectedObjects(tx: number, ty: number): boolean;
    /** @private */
    scaleSelectedItems(sx: number, sy: number, pivot: PointModel): boolean;
    /** @private */
    rotateSelectedItems(angle: number): boolean;
    /** @private */
    hasSelection(): boolean;
    /** @private */
    isSelected(element: IElement): boolean;
    /**
     * initExpand is used for layout expand and collapse interaction
     */
    initExpand(args: MouseEventArgs): void;
    /** @private */
    expandNode(node: Node, diagram?: Diagram): ILayout;
    private getparentexpand;
    /**
     * Setinterval and Clear interval for layout animation
     */
    /** @private */
    expandCollapse(source: Node, visibility: boolean, diagram: Diagram): void;
    /**
     * @private
     */
    updateNodeDimension(obj: Node | Connector, rect?: Rect): void;
    /**
     * @private
     */
    updateConnectorPoints(obj: Node | Connector, rect?: Rect): void;
    /**
     * @private
     */
    updateSelectedNodeProperties(object?: NodeModel | ConnectorModel[]): void;
    /** @private */
    drawSelectionRectangle(x: number, y: number, width: number, height: number): void;
    /** @private */
    startGroupAction(): void;
    /** @private */
    endGroupAction(): void;
    /** @private */
    removeChildFromBPmn(child: IElement, newTarget: IElement, oldTarget: IElement): void;
    /** @private */
    isDroppable(source: IElement, targetNodes: IElement): boolean;
    /**
     * @private
     */
    renderHighlighter(args: MouseEventArgs, connectHighlighter?: boolean, source?: boolean): void;
    /** @private */
    mouseOver(source: IElement, target: IElement, position: PointModel): boolean;
    /**
     * @private
     */
    snapPoint(startPoint: PointModel, endPoint: PointModel, tx: number, ty: number): PointModel;
    /**
     * @private
     */
    removeSnap(): void;
    /** @private */
    dropAnnotation(source: IElement, target: IElement): void;
    /** @private */
    drop(source: IElement, target: IElement, position: PointModel): void;
    /** @private */
    addHistoryEntry(entry: HistoryEntry): void;
    /** @private */
    align(objects: (NodeModel | ConnectorModel)[], option: AlignmentOptions, type: AlignmentMode): void;
    /** @private */
    distribute(objects: (NodeModel | ConnectorModel)[], option: DistributeOptions): void;
    /** @private */
    sameSize(objects: (NodeModel | ConnectorModel)[], option: SizingOptions): void;
    private storeObject;
    /** @private */
    scroll(scrollX: number, scrollY: number, focusPoint?: PointModel): void;
    /**
     * @private
     */
    drawHighlighter(element: IElement): void;
    /**
     * @private
     */
    removeHighlighter(): void;
    /**
     * @private
     */
    renderContainerHelper(node: NodeModel | SelectorModel): NodeModel | ConnectorModel;
    /**
     * @private
     */
    isParentAsContainer(node: NodeModel, isChild?: boolean): boolean;
    /**
     * @private
     */
    dropChildToContainer(parent: NodeModel, node: NodeModel): void;
    /** @private */
    checkSelection(selector: SelectorModel, corner: string): void;
    /** @private */
    zoom(scale: number, scrollX: number, scrollY: number, focusPoint?: PointModel): void;
}
/** @private */
export interface TransactionState {
    element: SelectorModel;
    backup: ObjectState;
}
/** @private */
export interface ClipBoardObject {
    pasteIndex?: number;
    clipObject?: Object;
    childTable?: {};
    processTable?: {};
}
/** @private */
export interface ObjectState {
    offsetX?: number;
    offsetY?: number;
    width?: number;
    height?: number;
    pivot?: PointModel;
    angle?: number;
}
/** @private */
export interface Distance {
    minDistance?: number;
}
/** @private */
export interface IsDragArea {
    x?: boolean;
    y?: boolean;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/interaction/connector-editing.d.ts
/**
 * Multiple segments editing for Connector
 */
export  class ConnectorEditing extends ToolBase {
    private endPoint;
    private selectedSegment;
    private segmentIndex;
    constructor(commandHandler: CommandHandler, endPoint: string);
    /**   @private  */
    mouseDown(args: MouseEventArgs): void;
    /**   @private  */
    mouseMove(args: MouseEventArgs): boolean;
    /**   @private  */
    mouseUp(args: MouseEventArgs): void;
    private removePrevSegment;
    private findSegmentDirection;
    private removeNextSegment;
    private addOrRemoveSegment;
    private findIndex;
    private dragOrthogonalSegment;
    private addSegments;
    private insertFirstSegment;
    private updateAdjacentSegments;
    private addTerminalSegment;
    private updatePortSegment;
    private updatePreviousSegment;
    private changeSegmentDirection;
    private updateNextSegment;
    private updateFirstSegment;
    private updateLastSegment;
    /**
     * To destroy the connector editing module
     * @return {void}
     * @private
     */
    destroy(): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/interaction/container-interaction.d.ts
/**
 * Interaction for Container
 */
/** @private */
export  function updateCanvasBounds(diagram: Diagram, obj: NodeModel | ConnectorModel, position: PointModel, isBoundsUpdate: boolean): boolean;
export  function removeChildInContainer(diagram: Diagram, obj: NodeModel | ConnectorModel, position: PointModel, isBoundsUpdate: boolean): void;
/** @private */
export  function findBounds(obj: NodeModel, columnIndex: number, isHeader: boolean): Rect;
/** @private */
export  function createHelper(diagram: Diagram, obj: Node): Node;
/** @private */
export  function renderContainerHelper(diagram: Diagram, obj: SelectorModel | NodeModel): NodeModel | ConnectorModel;
/** @private */
export  function checkParentAsContainer(diagram: Diagram, obj: NodeModel | ConnectorModel, isChild?: boolean): boolean;
/** @private */
export  function checkChildNodeInContainer(diagram: Diagram, obj: NodeModel): void;
/**
 * @private
 */
export  function addChildToContainer(diagram: Diagram, parent: NodeModel, node: NodeModel, isUndo?: boolean, historyAction?: boolean): void;
export  function updateLaneBoundsAfterAddChild(container: NodeModel, swimLane: NodeModel, node: NodeModel, diagram: Diagram, isBoundsUpdate?: boolean): boolean;
/** @private */
export  function renderStackHighlighter(element: DiagramElement, isVertical: Boolean, position: PointModel, diagram: Diagram, isUml?: boolean, isSwimlane?: boolean): void;
/** @private */
export  function moveChildInStack(sourceNode: Node, target: Node, diagram: Diagram, action: Actions): void;
//node_modules/@syncfusion/ej2-diagrams/src/diagram/interaction/event-handlers.d.ts
/**
 * This module handles the mouse and touch events
 */
export  class DiagramEventHandler {
    private currentAction;
    private previousAction;
    /**   @private  */
    focus: boolean;
    private action;
    private isBlocked;
    private blocked;
    private commandHandler;
    private isMouseDown;
    private inAction;
    private resizeTo;
    private currentPosition;
    private timeOutValue;
    private doingAutoScroll;
    private prevPosition;
    private diagram;
    private objectFinder;
    private tool;
    private eventArgs;
    private lastObjectUnderMouse;
    private hoverElement;
    private hoverNode;
    private isScrolling;
    private initialEventArgs;
    /** @private */
    touchStartList: ITouches[] | TouchList;
    /** @private */
    touchMoveList: ITouches[] | TouchList;
    /** @private */
    constructor(diagram: Diagram, commandHandler: CommandHandler);
    /** @private */
    getMousePosition(e: MouseEvent | PointerEvent | TouchEvent): PointModel;
    /**
     * @private
     */
    windowResize(evt: Event): boolean;
    /**
     * @private
     */
    updateViewPortSize(element: HTMLElement): void;
    /** @private */
    canHideResizers(): boolean;
    /** @private */
    private updateCursor;
    private isForeignObject;
    private isMetaKey;
    private renderUmlHighLighter;
    private isDeleteKey;
    private isMouseOnScrollBar;
    /**   @private  */
    updateVirtualization(): void;
    private checkPreviousAction;
    private checkUserHandleEvent;
    mouseDown(evt: PointerEvent): void;
    /**   @private  */
    mouseMoveExtend(e: PointerEvent | TouchEvent, obj: IElement): void;
    /** @private */
    checkAction(obj: IElement): void;
    private isSwimlaneElements;
    /** @private */
    mouseMove(e: PointerEvent | TouchEvent, touches: TouchList): void;
    private getContent;
    private checkAutoScroll;
    /** @private */
    mouseUp(evt: PointerEvent): void;
    private getBlazorClickEventArgs;
    addSwimLaneObject(selectedNode: NodeModel): void;
    /** @private */
    mouseLeave(evt: PointerEvent): void;
    /** @private */
    mouseWheel(evt: WheelEvent): void;
    /** @private */
    keyDown(evt: KeyboardEvent): void;
    private startAutoScroll;
    private doAutoScroll;
    private mouseEvents;
    private getBlazorCollectionObject;
    private elementEnter;
    private elementLeave;
    private altKeyPressed;
    private ctrlKeyPressed;
    private shiftKeyPressed;
    /** @private */
    scrolled(evt: PointerEvent): void;
    /** @private */
    doubleClick(evt: PointerEvent): void;
    /**
     * @private
     */
    itemClick(actualTarget: NodeModel, diagram: Diagram): NodeModel;
    /**
     * @private
     */
    inputChange(evt: inputs.InputArgs): void;
    /**
     * @private
     */
    isAddTextNode(node: Node | Connector, focusOut?: boolean): boolean;
    private checkEditBoxAsTarget;
    private getMouseEventArgs;
    /** @private */
    resetTool(): void;
    /** @private */
    getTool(action: Actions): ToolBase;
    /** @private */
    getCursor(action: Actions): string;
    /** @private */
    findElementUnderMouse(obj: IElement, position: PointModel): DiagramElement;
    /** @private */
    findObjectsUnderMouse(position: PointModel, source?: IElement): IElement[];
    /** @private */
    findObjectUnderMouse(objects: (NodeModel | ConnectorModel)[], action: Actions, inAction: boolean): IElement;
    /** @private */
    findTargetUnderMouse(objects: (NodeModel | ConnectorModel)[], action: Actions, inAction: boolean, position: PointModel, source?: IElement): IElement;
    /** @private */
    findActionToBeDone(obj: NodeModel | ConnectorModel, wrapper: DiagramElement, position: PointModel, target?: NodeModel | PointPortModel | ShapeAnnotationModel | PathAnnotationModel): Actions;
    private updateContainerBounds;
    private updateContainerProperties;
    private updateLaneChildNode;
    private updateContainerPropertiesExtend;
    private addUmlNode;
}
/** @private */
export interface Info {
    ctrlKey?: boolean;
    shiftKey?: boolean;
}
/** @private */
export interface MouseEventArgs {
    position?: PointModel;
    source?: IElement;
    sourceWrapper?: DiagramElement;
    target?: IElement;
    targetWrapper?: DiagramElement;
    info?: Info;
    startTouches?: TouchList | ITouches[];
    moveTouches?: TouchList | ITouches[];
    clickCount?: number;
    actualObject?: IElement;
}
/** @private */
export interface HistoryLog {
    hasStack?: boolean;
    isPreventHistory?: boolean;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/interaction/line-routing.d.ts
/**
 * Line Routing
 */
export  class LineRouting {
    private size;
    private startGrid;
    private noOfRows;
    private noOfCols;
    private width;
    private height;
    private diagramStartX;
    private diagramStartY;
    private intermediatePoints;
    private gridCollection;
    private startNode;
    private targetNode;
    private targetGrid;
    private startArray;
    private targetGridCollection;
    private sourceGridCollection;
    /** @private */
    lineRouting(diagram: Diagram): void;
    /** @private */
    renderVirtualRegion(diagram: Diagram, isUpdate?: boolean): void;
    private findNodes;
    private updateNodesInVirtualRegion;
    private intersectRect;
    private findEndPoint;
    /** @private */
    refreshConnectorSegments(diagram: Diagram, connector: Connector, isUpdate: boolean): void;
    private findEdgeBoundary;
    private checkObstacles;
    private getIntermediatePoints;
    private updateConnectorSegments;
    private findPath;
    private sorting;
    private octile;
    private manhattan;
    private findNearestNeigbours;
    private neigbour;
    private resetGridColl;
    private isWalkable;
    private findIntermediatePoints;
    /**
     * Constructor for the line routing module
     * @private
     */
    constructor();
    /**
     * To destroy the line routing module
     * @return {void}
     * @private
     */
    destroy(): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
}
/** @private */
export interface VirtualBoundaries {
    x: number;
    y: number;
    width: number;
    height: number;
    gridX: number;
    gridY: number;
    walkable: boolean;
    tested: boolean;
    nodeId: string[];
    previousDistance?: number;
    afterDistance?: number;
    totalDistance?: number;
    parent?: VirtualBoundaries;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/interaction/scroller.d.ts
/**
 */
export  class DiagramScroller {
    /** @private */
    transform: TransformFactor;
    /**   @private  */
    oldCollectionObjects: string[];
    /**   @private  */
    removeCollection: string[];
    private diagram;
    private objects;
    private vPortWidth;
    private vPortHeight;
    private currentZoomFActor;
    private hOffset;
    private vOffset;
    private scrolled;
    /** @private */
    /** @private */
    viewPortHeight: number;
    /** @private */
    /** @private */
    currentZoom: number;
    /** @private */
    /** @private */
    viewPortWidth: number;
    /** @private */
    /** @private */
    horizontalOffset: number;
    /** @private */
    /** @private */
    verticalOffset: number;
    private diagramWidth;
    private diagramHeight;
    /** @private */
    scrollerWidth: number;
    private hScrollSize;
    private vScrollSize;
    constructor(diagram: Diagram);
    /** @private */
    updateScrollOffsets(hOffset?: number, vOffset?: number): void;
    /** @private */
    setScrollOffset(hOffset: number, vOffset: number): void;
    /** @private */
    getObjects(coll1: string[], coll2: string[]): string[];
    /**   @private  */
    virtualizeElements(): void;
    /** @private */
    setSize(): void;
    /** @private */
    setViewPortSize(width: number, height: number): void;
    /**
     * To get page pageBounds
     * @private
     */
    getPageBounds(boundingRect?: boolean, region?: DiagramRegions, hasPadding?: boolean): Rect;
    /**
     * To get page break when PageBreak is set as true
     * @private
     */
    getPageBreak(pageBounds: Rect): Segment[];
    /** @private */
    zoom(factor: number, deltaX?: number, deltaY?: number, focusPoint?: PointModel): void;
    /** @private */
    fitToPage(options?: IFitOptions): void;
    /** @private */
    bringIntoView(rect: Rect): void;
    /** @private */
    bringToCenter(bounds: Rect): void;
    private applyScrollLimit;
}
/** @private */
export interface TransformFactor {
    tx: number;
    ty: number;
    scale: number;
}
export interface Segment {
    x1: number;
    y1: number;
    x2: number;
    y2: number;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/interaction/selector-model.d.ts
/**
 * Interface for a class UserHandle
 */
export interface UserHandleModel {
    /**
     * Defines the name of user Handle
     * @default ''
     */
    name?: string;
    /**
     * Defines the path data of user Handle 
     * @default ''
     */
    pathData?: string;
    /**
     * Defines the custom content of the user handle
     * @default ''
     */
    content?: string;
    /**
     * Defines the image source of the user handle
     * @default ''
     */
    source?: string;
    /**
     * Defines the background color of user Handle 
     * @default 'black'
     */
    backgroundColor?: string;
    /**
     * Defines the position of user Handle
     *  * Top - Aligns the user handles at the top of an object
     *  * Bottom - Aligns the user handles at the bottom of an object
     *  * Left - Aligns the user handles at the left of an object
     *  * Right - Aligns the user handles at the right of an object
     * @default 'top'
     */
    side?: Side;
    /**
     * Defines the borderColor of user Handle 
     * @default ''
     */
    borderColor?: string;
    /**
     * Defines the borderWidth of user Handle 
     * @default 0.5
     */
    borderWidth?: number;
    /**
     * Defines the size of user Handle 
     * @default 25
     */
    size?: number;
    /**
     * Defines the path color of user Handle 
     * @default 'white'
     */
    pathColor?: string;
    /**
     * Defines the displacement of user Handle 
     * @default 10
     */
    displacement?: number;
    /**
     * Defines the visible of user Handle 
     * @default true
     */
    visible?: boolean;
    /**
     * Defines the offset of user Handle 
     * @default 0
     * @isBlazorNullableType true
     */
    offset?: number;
    /**
     * Defines the margin of the user handle
     * @default new Margin(0,0,0,0)
     */
    margin?: MarginModel;
    /**
     * Defines the horizontal alignment of the user handle
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Left - Aligns the diagram element at the left of its immediate parent
     * * Right - Aligns the diagram element at the right of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Center'
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Defines the vertical alignment of the user handle
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Top - Aligns the diagram element at the top of its immediate parent
     * * Bottom - Aligns the diagram element at the bottom of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Center'
     */
    verticalAlignment?: VerticalAlignment;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/interaction/selector.d.ts
/**
 * A collection of frequently used commands that will be added around the selector
 * ```html
 * <div id='diagram'></div>
 * ```
 * ```typescript
 * let nodes$: NodeModel[] = [{
 *           id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
 *           annotations: [{ content: 'Default Shape' }]
 *       },
 *       {
 *           id: 'node2', width: 100, height: 100, offsetX: 300, offsetY: 100,
 *           shape: {
 *               type: 'Basic', shape: 'Ellipse'
 *           },
 *           annotations: [{ content: 'Path Element' }]
 *       }
 *       ];
 *       let connectors$: ConnectorModel[] = [{
 *           id: 'connector1',
 *           type: 'Straight',
 *           sourcePoint: { x: 100, y: 300 },
 *           targetPoint: { x: 200, y: 400 },
 *       }];
 * let handle$: UserHandleModel[] = [
 * { name: 'handle', margin: { top: 0, bottom: 0, left: 0, right: 0 }, offset: 0,
 * pathData: 'M 376.892,225.284L 371.279,211.95L 376.892,198.617L 350.225,211.95L 376.892,225.284 Z',
 * side: 'Top', horizontalAlignment: 'Center', verticalAlignment: 'Center',
 * pathColor: 'yellow' }];
 * let diagram$: Diagram = new Diagram({
 * ...
 *     connectors: connectors, nodes: nodes,
 *     selectedItems: { constraints: SelectorConstraints.All, userHandles: handle },
 * ...
 * });
 * diagram.appendTo('#diagram');
 * ```
 * @default {}
 */
export  class UserHandle extends base.ChildProperty<UserHandle> {
    /**
     * Defines the name of user Handle
     * @default ''
     */
    name: string;
    /**
     * Defines the path data of user Handle
     * @default ''
     */
    pathData: string;
    /**
     * Defines the custom content of the user handle
     * @default ''
     */
    content: string;
    /**
     * Defines the image source of the user handle
     * @default ''
     */
    source: string;
    /**
     * Defines the background color of user Handle
     * @default 'black'
     */
    backgroundColor: string;
    /**
     * Defines the position of user Handle
     *  * Top - Aligns the user handles at the top of an object
     *  * Bottom - Aligns the user handles at the bottom of an object
     *  * Left - Aligns the user handles at the left of an object
     *  * Right - Aligns the user handles at the right of an object
     * @default 'top'
     */
    side: Side;
    /**
     * Defines the borderColor of user Handle
     * @default ''
     */
    borderColor: string;
    /**
     * Defines the borderWidth of user Handle
     * @default 0.5
     */
    borderWidth: number;
    /**
     * Defines the size of user Handle
     * @default 25
     */
    size: number;
    /**
     * Defines the path color of user Handle
     * @default 'white'
     */
    pathColor: string;
    /**
     * Defines the displacement of user Handle
     * @default 10
     */
    displacement: number;
    /**
     * Defines the visible of user Handle
     * @default true
     */
    visible: boolean;
    /**
     * Defines the offset of user Handle
     * @default 0
     * @isBlazorNullableType true
     */
    offset: number;
    /**
     * Defines the margin of the user handle
     * @default new Margin(0,0,0,0)
     */
    margin: MarginModel;
    /**
     * Defines the horizontal alignment of the user handle
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Left - Aligns the diagram element at the left of its immediate parent
     * * Right - Aligns the diagram element at the right of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Center'
     */
    horizontalAlignment: HorizontalAlignment;
    /**
     * Defines the vertical alignment of the user handle
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Top - Aligns the diagram element at the top of its immediate parent
     * * Bottom - Aligns the diagram element at the bottom of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Center'
     */
    verticalAlignment: VerticalAlignment;
    /**
     * @private
     * Returns the name of class UserHandle
     */
    getClassName(): string;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/interaction/spatial-search/quad.d.ts
/**
 * Quad helps to maintain a set of objects that are contained within the particular region
 */
/** @private */
export  class Quad {
    /** @private */
    objects: IGroupable[];
    /** @private */
    left: number;
    /** @private */
    top: number;
    /** @private */
    width: number;
    /** @private */
    height: number;
    /** @private */
    first: Quad;
    /** @private */
    second: Quad;
    /** @private */
    third: Quad;
    /** @private */
    fourth: Quad;
    /** @private */
    parent: Quad;
    private spatialSearch;
    /** @private */
    constructor(left: number, top: number, width: number, height: number, spatialSearching: SpatialSearch);
    /** @private */
    findQuads(currentViewPort: Rect, quads: Quad[]): void;
    private isIntersect;
    /** @private */
    selectQuad(): Quad;
    private getQuad;
    /** @private */
    isContained(): boolean;
    /** @private */
    addIntoAQuad(node: IGroupable): Quad;
    private add;
}
/** @private */
export interface QuadSet {
    target?: Quad;
    source?: Quad;
}
/** @private */
export interface QuadAddition {
    quad?: Quad;
    isAdded?: boolean;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/interaction/spatial-search/spatial-search.d.ts
/**
 * Spatial search module helps to effectively find the objects over diagram
 */
export  class SpatialSearch {
    private topElement;
    private bottomElement;
    private rightElement;
    private leftElement;
    private quadSize;
    private quadTable;
    private objectTable;
    /** @private */
    parentQuad: Quad;
    private pageLeft;
    private pageRight;
    private pageTop;
    private pageBottom;
    /** @private */
    childLeft: number;
    /** @private */
    childTop: number;
    /** @private */
    childRight: number;
    /** @private */
    childBottom: number;
    /** @private */
    childNode: IGroupable;
    /** @private */
    constructor(objectTable: Object);
    /** @private */
    removeFromAQuad(node: IGroupable): void;
    private update;
    private addIntoAQuad;
    /** @private */
    private objectIndex;
    /** @private */
    updateQuad(node: IGroupable): boolean;
    private isWithinPageBounds;
    /** @private */
    findQuads(region: Rect): Quad[];
    /** @private */
    findObjects(region: Rect): IGroupable[];
    /** @private */
    updateBounds(node: IGroupable): boolean;
    private findBottom;
    private findRight;
    private findLeft;
    private findTop;
    /** @private */
    setCurrentNode(node: IGroupable): void;
    /** @private */
    getPageBounds(originX?: number, originY?: number): Rect;
    /** @private */
    getQuad(node: IGroupable): Quad;
}
/** @private */
export interface IGroupable {
    id: string;
    outerBounds: Rect;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/interaction/tool.d.ts
/**
 * Defines the interactive tools
 */
export  class ToolBase {
    /**
     * Initializes the tool
     * @param command Command that is corresponding to the current action
     */
    constructor(command: CommandHandler, protectChange?: boolean);
    /**
     * Command that is corresponding to the current action
     */
    protected commandHandler: CommandHandler;
    /**
     * Sets/Gets whether the interaction is being done
     */
    protected inAction: boolean;
    /**
     * Sets/Gets the protect change
     */
    protected isProtectChange: boolean;
    /**
     * Sets/Gets the current mouse position
     */
    protected currentPosition: PointModel;
    /**
     * Sets/Gets the previous mouse position
     */
    prevPosition: PointModel;
    /**
     * Sets/Gets the initial mouse position
     */
    protected startPosition: PointModel;
    /**
     * Sets/Gets the current element that is under mouse
     */
    protected currentElement: IElement;
    /**   @private  */
    blocked: boolean;
    protected isTooltipVisible: boolean;
    /** @private */
    childTable: {};
    /**
     * Sets/Gets the previous object when mouse down
     */
    protected undoElement: SelectorModel;
    private checkProperty;
    protected undoParentElement: SelectorModel;
    protected startAction(currentElement: IElement): void;
    /**   @private  */
    mouseDown(args: MouseEventArgs): void;
    checkPropertyValue(): void;
    /**   @private  */
    mouseMove(args: MouseEventArgs): boolean;
    /**   @private  */
    mouseUp(args: MouseEventArgs): void;
    protected endAction(): void;
    /**   @private  */
    mouseWheel(args: MouseEventArgs): void;
    /**   @private  */
    mouseLeave(args: MouseEventArgs): void;
    protected updateSize(shape: SelectorModel | NodeModel, startPoint: PointModel, endPoint: PointModel, corner: string, initialBounds: Rect, angle?: number): Rect;
    protected getPivot(corner: string): PointModel;
}
/**
 * Helps to select the objects
 */
export  class SelectTool extends ToolBase {
    private action;
    constructor(commandHandler: CommandHandler, protectChange: boolean, action?: Actions);
    /**   @private  */
    mouseDown(args: MouseEventArgs): void;
    /**   @private  */
    mouseMove(args: MouseEventArgs): boolean;
    /**   @private  */
    mouseUp(args: MouseEventArgs): void;
    /**   @private  */
    mouseLeave(args: MouseEventArgs): void;
}
/**
 * Helps to edit the selected connectors
 */
export  class ConnectTool extends ToolBase {
    protected endPoint: string;
    /**   @private  */
    selectedSegment: BezierSegment;
    constructor(commandHandler: CommandHandler, endPoint: string);
    /**   @private  */
    mouseDown(args: MouseEventArgs): void;
    /**   @private  */
    mouseUp(args: MouseEventArgs): void;
    /**   @private  */
    mouseMove(args: MouseEventArgs): boolean;
    /**   @private  */
    mouseLeave(args: MouseEventArgs): void;
    private getTooltipContent;
    private checkConnect;
    /**   @private  */
    endAction(): void;
}
/**
 * Drags the selected objects
 */
export  class MoveTool extends ToolBase {
    /**
     * Sets/Gets the previous mouse position
     */
    prevPosition: PointModel;
    private initialOffset;
    /**   @private  */
    currentTarget: IElement;
    private objectType;
    private portId;
    private source;
    constructor(commandHandler: CommandHandler, objType?: ObjectTypes);
    /**   @private  */
    mouseDown(args: MouseEventArgs): void;
    /**   @private  */
    mouseUp(args: MouseEventArgs, isPreventHistory?: boolean): void;
    private getBlazorPositionChangeEventArgs;
    /**   @private  */
    mouseMove(args: MouseEventArgs): boolean;
    private getTooltipContent;
    /**   @private  */
    mouseLeave(args: MouseEventArgs): void;
    /**   @private  */
    endAction(): void;
}
/**
 * Rotates the selected objects
 */
export  class RotateTool extends ToolBase {
    constructor(commandHandler: CommandHandler);
    /**   @private  */
    mouseDown(args: MouseEventArgs): void;
    /**   @private  */
    mouseUp(args: MouseEventArgs): void;
    /**   @private  */
    mouseMove(args: MouseEventArgs): boolean;
    private getTooltipContent;
    /**   @private  */
    mouseLeave(args: MouseEventArgs): void;
    /**   @private  */
    endAction(): void;
}
/**
 * Scales the selected objects
 */
export  class ResizeTool extends ToolBase {
    /**
     * Sets/Gets the previous mouse position
     */
    prevPosition: PointModel;
    private corner;
    /**   @private  */
    initialOffset: PointModel;
    /**   @private  */
    initialBounds: Rect;
    constructor(commandHandler: CommandHandler, corner: string);
    /**   @private  */
    mouseDown(args: MouseEventArgs): void;
    /**   @private  */
    mouseUp(args: MouseEventArgs, isPreventHistory?: boolean): boolean;
    /**   @private  */
    mouseMove(args: MouseEventArgs): boolean;
    /**   @private  */
    mouseLeave(args: MouseEventArgs): void;
    private getTooltipContent;
    private getChanges;
    /**
     * Updates the size with delta width and delta height using scaling.
     */
    /**
     * Aspect ratio used to resize the width or height based on resizing the height or width
     */
    private scaleObjects;
}
/**
 * Draws a node that is defined by the user
 */
export  class NodeDrawingTool extends ToolBase {
    /** @private */
    drawingObject: Node | Connector;
    /** @private */
    sourceObject: Node | Connector;
    constructor(commandHandler: CommandHandler, sourceObject: Node | Connector);
    /**   @private  */
    mouseDown(args: MouseEventArgs): void;
    /**   @private  */
    mouseMove(args: MouseEventArgs): boolean;
    /**   @private  */
    mouseUp(args: MouseEventArgs): void;
    /**   @private  */
    endAction(): void;
    /**   @private  */
    mouseLeave(args: MouseEventArgs): void;
}
/**
 * Draws a connector that is defined by the user
 */
export  class ConnectorDrawingTool extends ConnectTool {
    /** @private */
    drawingObject: Node | Connector;
    /** @private */
    sourceObject: Node | Connector;
    constructor(commandHandler: CommandHandler, endPoint: string, sourceObject: Node | Connector);
    /**   @private  */
    mouseDown(args: MouseEventArgs): void;
    /**   @private  */
    mouseMove(args: MouseEventArgs): boolean;
    /**   @private  */
    mouseUp(args: MouseEventArgs): void;
    /**   @private  */
    endAction(): void;
    /**   @private  */
    mouseLeave(args: MouseEventArgs): void;
}
export  class TextDrawingTool extends ToolBase {
    /**   @private  */
    drawingNode: Node | Connector;
    constructor(commandHandler: CommandHandler);
    /**   @private  */
    mouseDown(args: MouseEventArgs): void;
    /**   @private  */
    mouseMove(args: MouseEventArgs): boolean;
    /**   @private  */
    mouseUp(args: MouseEventArgs): void;
    /**   @private  */
    endAction(): void;
}
/**
 * Pans the diagram control on drag
 */
export  class ZoomPanTool extends ToolBase {
    private zooming;
    constructor(commandHandler: CommandHandler, zoom: boolean);
    /**   @private  */
    mouseDown(args: MouseEventArgs): void;
    /**   @private  */
    mouseMove(args: MouseEventArgs): boolean;
    /**   @private  */
    mouseUp(args: MouseEventArgs): void;
    /**   @private  */
    endAction(): void;
    private getDistance;
    private updateTouch;
}
/**
 * Animate the layout during expand and collapse
 */
export  class ExpandTool extends ToolBase {
    constructor(commandHandler: CommandHandler);
    /**   @private  */
    mouseUp(args: MouseEventArgs): void;
}
/**
 * Opens the annotation hypeLink at mouse up
 */
export  class LabelTool extends ToolBase {
    constructor(commandHandler: CommandHandler);
    /**   @private  */
    mouseUp(args: MouseEventArgs): void;
}
/**
 * Draws a Polygon shape node dynamically using polygon Tool
 */
export  class PolygonDrawingTool extends ToolBase {
    /** @private */
    drawingObject: Node | Connector;
    startPoint: PointModel;
    constructor(commandHandler: CommandHandler);
    /**   @private  */
    mouseDown(args: MouseEventArgs): void;
    /**   @private  */
    mouseMove(args: MouseEventArgs): boolean;
    /**   @private  */
    mouseUp(args: MouseEventArgs, dblClickArgs?: IDoubleClickEventArgs | IClickEventArgs): void;
    /**   @private  */
    mouseWheel(args: MouseEventArgs): void;
    /**   @private  */
    endAction(): void;
}
/**
 * Draws a PolyLine Connector dynamically using PolyLine Drawing Tool
 */
export  class PolyLineDrawingTool extends ToolBase {
    /** @private */
    drawingObject: Node | Connector;
    constructor(commandHandler: CommandHandler);
    /**   @private  */
    mouseMove(args: MouseEventArgs): boolean;
    /**   @private  */
    mouseDown(args: MouseEventArgs): void;
    /**   @private  */
    mouseWheel(args: MouseEventArgs): void;
    /**   @private  */
    mouseUp(args: MouseEventArgs): void;
    /**   @private  */
    endAction(): void;
}
export  class LabelDragTool extends ToolBase {
    private annotationId;
    constructor(commandHandler: CommandHandler);
    /**   @private  */
    mouseDown(args: MouseEventArgs): void;
    /**   @private  */
    mouseMove(args: MouseEventArgs): boolean;
    /**   @private  */
    mouseUp(args: MouseEventArgs): void;
    /**   @private  */
    mouseLeave(args: MouseEventArgs): void;
}
export  class LabelResizeTool extends ToolBase {
    private corner;
    private annotationId;
    private initialBounds;
    constructor(commandHandler: CommandHandler, corner: Actions);
    /**   @private  */
    mouseDown(args: MouseEventArgs): void;
    /**   @private  */
    mouseMove(args: MouseEventArgs): boolean;
    /**   @private  */
    mouseUp(args: MouseEventArgs): void;
    /**   @private  */
    mouseLeave(args: MouseEventArgs): void;
    /**   @private  */
    resizeObject(args: MouseEventArgs): void;
}
export  class LabelRotateTool extends ToolBase {
    private annotationId;
    constructor(commandHandler: CommandHandler);
    /**   @private  */
    mouseDown(args: MouseEventArgs): void;
    /**   @private  */
    mouseMove(args: MouseEventArgs): boolean;
    /**   @private  */
    mouseUp(args: MouseEventArgs): void;
    /**   @private  */
    mouseLeave(args: MouseEventArgs): void;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/layout/complex-hierarchical-tree.d.ts
/**
 * Connects diagram objects with layout algorithm
 */
export  class ComplexHierarchicalTree {
    /**
     * Constructor for the hierarchical tree layout module
     * @private
     */
    constructor();
    /**
     * To destroy the hierarchical tree module
     * @return {void}
     * @private
     */
    destroy(): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**   @private  */
    doLayout(nodes: INode[], nameTable: {}, layout: Layout, viewPort: PointModel): void;
    getLayoutNodesCollection(nodes: INode[]): INode[];
}
/**
 * Defines the properties of layout
 * @private
 */
export interface LayoutProp {
    orientation?: string;
    horizontalSpacing?: number;
    verticalSpacing?: number;
    marginX: number;
    marginY: number;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/layout/hierarchical-tree.d.ts
/**
 * Hierarchical Tree and Organizational Chart
 */
export  class HierarchicalTree {
    /**
     * Constructor for the organizational chart module.
     * @private
     */
    constructor();
    /**
     * To destroy the organizational chart
     * @return {void}
     * @private
     */
    destroy(): void;
    /**
     * Defines the layout animation
     *
     */
    isAnimation: boolean;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**   @private  */
    updateLayout(nodes: INode[], nameTable: Object, layoutProp: Layout, viewport: PointModel, uniqueId: string, action?: DiagramAction): ILayout;
    private doLayout;
    private getBounds;
    private updateTree;
    private updateLeafNode;
    private setUpLayoutInfo;
    private translateSubTree;
    private updateRearBounds;
    private shiftSubordinates;
    private setDepthSpaceForAssitants;
    private setBreadthSpaceForAssistants;
    private getDimensions;
    private hasChild;
    private updateHorizontalTree;
    private updateHorizontalTreeWithMultipleRows;
    private updateLeftTree;
    private alignRowsToCenter;
    private updateRearBoundsOfTree;
    private splitRows;
    private updateVerticalTree;
    private splitChildrenInRows;
    private extend;
    private findOffset;
    private uniteRects;
    private spaceLeftFromPrevSubTree;
    private findIntersectingLevels;
    private findLevel;
    private getParentNode;
    private updateEdges;
    private updateAnchor;
    private updateConnectors;
    private updateSegments;
    private updateSegmentsForBalancedTree;
    private get3Points;
    private get5Points;
    private getSegmentsFromPoints;
    private getSegmentsForMultipleRows;
    private updateSegmentsForHorizontalOrientation;
    private updateNodes;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/layout/layout-base-model.d.ts
/**
 * Interface for a class Layout
 */
export interface LayoutModel {
    /**
     * Sets the name of the node with respect to which all other nodes will be translated
     * @default ''
     */
    fixedNode?: string;
    /**
     * Sets the space that has to be horizontally left between the nodes
     * @default 30
     */
    horizontalSpacing?: number;
    /**
     * Sets the space that has to be Vertically left between the nodes
     * @default 30
     */
    verticalSpacing?: number;
    /**
     * Sets the Maximum no of iteration of the symmetrical layout
     * @default 30
     */
    maxIteration?: number;
    /**
     * Defines the Edge attraction and vertex repulsion forces, i.e., the more sibling nodes repel each other
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let diagram$: Diagram = new Diagram({
     * ...
     * layout: { type: 'SymmetricalLayout', springLength: 80, springFactor: 0.8, 
     * maxIteration: 500, margin: { left: 20, top: 20 } },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default 40
     */
    springFactor?: number;
    /**
     * Sets how long edges should be, ideally of the symmetrical layout
     * @default 50
     */
    springLength?: number;
    /**
     * * Defines the space between the viewport and the layout
     * @default { left: 50, top: 50, right: 0, bottom: 0 }
     */
    margin?: MarginModel;
    /**
     * Defines how the layout has to be horizontally aligned
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Left - Aligns the diagram element at the left of its immediate parent
     * * Right - Aligns the diagram element at the right of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Auto'
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Defines how the layout has to be vertically aligned
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Top - Aligns the diagram element at the top of its immediate parent
     * * Bottom - Aligns the diagram element at the bottom of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Auto'
     */
    verticalAlignment?: VerticalAlignment;
    /**
     * Defines the orientation of layout
     * * TopToBottom - Renders the layout from top to bottom
     * * BottomToTop - Renders the layout from bottom to top
     * * LeftToRight - Renders the layout from left to right
     * * RightToLeft - Renders the layout from right to left
     * @default 'TopToBottom'
     */
    orientation?: LayoutOrientation;
    /**
     * Sets how to define the connection direction (first segment direction & last segment direction).
     * * Auto - Defines the first segment direction based on the type of the layout
     * * Orientation - Defines the first segment direction based on the orientation of the layout
     * * Custom - Defines the first segment direction dynamically by the user
     * @default 'Auto'
     */
    connectionDirection?: ConnectionDirection;
    /**
     * Sets whether the segments have to be customized based on the layout or not
     *  * Default - Routes the connectors like a default diagram
     *  * Layout - Routes the connectors based on the type of the layout
     * @default 'Default'
     */
    connectorSegments?: ConnectorSegments;
    /**
     * Defines the type of the layout
     * * None - None of the layouts is applied
     * * HierarchicalTree - Defines the type of the layout as Hierarchical Tree
     * * OrganizationalChart - Defines the type of the layout as Organizational Chart
     * * ComplexHierarchicalTree - Defines the type of the layout as complex HierarchicalTree
     * * RadialTree - Defines the type of the layout as Radial tree
     * @default 'None'
     */
    type?: LayoutType;
    /**
     * getLayoutInfo is used to configure every subtree of the organizational chart
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *           id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *           annotations: [{ content: 'Default Shape' }]
     *       },
     *       {
     *           id: 'node2', width: 100, height: 100, offsetX: 300, offsetY: 100,
     *           shape: {
     *               type: 'Basic', shape: 'Ellipse'
     *           },
     *           annotations: [{ content: 'Path Element' }]
     *       }
     *       ];
     *       let connectors$: ConnectorModel[] = [{
     *           id: 'connector1',
     *           type: 'Straight',
     *           sourcePoint: { x: 100, y: 300 },
     *           targetPoint: { x: 200, y: 400 },
     *       }];
     * let diagram$: Diagram = new Diagram({
     * ...
     *       connectors: connectors, nodes: nodes,
     * 	   layout: {
     * enableAnimation: true,
     * type: 'OrganizationalChart', margin: { top: 20 },
     * getLayoutInfo: (node: Node, tree: TreeInfo) => {
     *       if (!tree.hasSubTree) {
     *           tree.orientation = 'Vertical';
     *           tree.type = 'Alternate';
     *       }
     *   }
     * },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    getLayoutInfo?: Function | string;
    /**
     * getLayoutInfo is used to configure every subtree of the organizational chart
     */
    layoutInfo?: TreeInfo;
    /**
     * Defines whether an object should be at the left/right of the mind map. Applicable only for the direct children of the root node
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    getBranch?: Function | string;
    /**
     * Aligns the layout within the given bounds
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    bounds?: Rect;
    /**
     * Enables/Disables animation option when a node is expanded/collapsed
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *           id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *           annotations: [{ content: 'Default Shape' }]
     *       },
     *       {
     *           id: 'node2', width: 100, height: 100, offsetX: 300, offsetY: 100,
     *           shape: {
     *               type: 'Basic', shape: 'Ellipse'
     *           },
     *           annotations: [{ content: 'Path Element' }]
     *       }
     *       ];
     *       let connectors$: ConnectorModel[] = [{
     *           id: 'connector1',
     *           type: 'Straight',
     *           sourcePoint: { x: 100, y: 300 },
     *           targetPoint: { x: 200, y: 400 },
     *       }];
     * let diagram$: Diagram = new Diagram({
     *     connectors: connectors, nodes: nodes,
     * ...
     * 	   layout: {
     * enableAnimation: true, orientation: 'TopToBottom',
     * type: 'OrganizationalChart', margin: { top: 20 },
     * horizontalSpacing: 30, verticalSpacing: 30,
     * },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default true
     */
    enableAnimation?: boolean;
    /**
     * Defines the root of the hierarchical tree layout
     * @default ''
     */
    root?: string;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/layout/layout-base.d.ts
/**
 * Defines the behavior of the automatic layouts
 */
export  class Layout extends base.ChildProperty<Layout> {
    /**
     * Sets the name of the node with respect to which all other nodes will be translated
     * @default ''
     */
    fixedNode: string;
    /**
     * Sets the space that has to be horizontally left between the nodes
     * @default 30
     */
    horizontalSpacing: number;
    /**
     * Sets the space that has to be Vertically left between the nodes
     * @default 30
     */
    verticalSpacing: number;
    /**
     * Sets the Maximum no of iteration of the symmetrical layout
     * @default 30
     */
    maxIteration: number;
    /**
     * Defines the Edge attraction and vertex repulsion forces, i.e., the more sibling nodes repel each other
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let diagram$: Diagram = new Diagram({
     * ...
     * layout: { type: 'SymmetricalLayout', springLength: 80, springFactor: 0.8,
     * maxIteration: 500, margin: { left: 20, top: 20 } },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default 40
     */
    springFactor: number;
    /**
     * Sets how long edges should be, ideally of the symmetrical layout
     * @default 50
     */
    springLength: number;
    /**
     * * Defines the space between the viewport and the layout
     * @default { left: 50, top: 50, right: 0, bottom: 0 }
     */
    margin: MarginModel;
    /**
     * Defines how the layout has to be horizontally aligned
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Left - Aligns the diagram element at the left of its immediate parent
     * * Right - Aligns the diagram element at the right of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Auto'
     */
    horizontalAlignment: HorizontalAlignment;
    /**
     * Defines how the layout has to be vertically aligned
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Top - Aligns the diagram element at the top of its immediate parent
     * * Bottom - Aligns the diagram element at the bottom of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Auto'
     */
    verticalAlignment: VerticalAlignment;
    /**
     * Defines the orientation of layout
     * * TopToBottom - Renders the layout from top to bottom
     * * BottomToTop - Renders the layout from bottom to top
     * * LeftToRight - Renders the layout from left to right
     * * RightToLeft - Renders the layout from right to left
     * @default 'TopToBottom'
     */
    orientation: LayoutOrientation;
    /**
     * Sets how to define the connection direction (first segment direction & last segment direction).
     * * Auto - Defines the first segment direction based on the type of the layout
     * * Orientation - Defines the first segment direction based on the orientation of the layout
     * * Custom - Defines the first segment direction dynamically by the user
     * @default 'Auto'
     */
    connectionDirection: ConnectionDirection;
    /**
     * Sets whether the segments have to be customized based on the layout or not
     *  * Default - Routes the connectors like a default diagram
     *  * Layout - Routes the connectors based on the type of the layout
     * @default 'Default'
     */
    connectorSegments: ConnectorSegments;
    /**
     * Defines the type of the layout
     * * None - None of the layouts is applied
     * * HierarchicalTree - Defines the type of the layout as Hierarchical Tree
     * * OrganizationalChart - Defines the type of the layout as Organizational Chart
     * * ComplexHierarchicalTree - Defines the type of the layout as complex HierarchicalTree
     * * RadialTree - Defines the type of the layout as Radial tree
     * @default 'None'
     */
    type: LayoutType;
    /**
     * getLayoutInfo is used to configure every subtree of the organizational chart
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *           id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *           annotations: [{ content: 'Default Shape' }]
     *       },
     *       {
     *           id: 'node2', width: 100, height: 100, offsetX: 300, offsetY: 100,
     *           shape: {
     *               type: 'Basic', shape: 'Ellipse'
     *           },
     *           annotations: [{ content: 'Path Element' }]
     *       }
     *       ];
     *       let connectors$: ConnectorModel[] = [{
     *           id: 'connector1',
     *           type: 'Straight',
     *           sourcePoint: { x: 100, y: 300 },
     *           targetPoint: { x: 200, y: 400 },
     *       }];
     * let diagram$: Diagram = new Diagram({
     * ...
     *       connectors: connectors, nodes: nodes,
     * 	   layout: {
     * enableAnimation: true,
     * type: 'OrganizationalChart', margin: { top: 20 },
     * getLayoutInfo: (node: Node, tree: TreeInfo) => {
     *       if (!tree.hasSubTree) {
     *           tree.orientation = 'Vertical';
     *           tree.type = 'Alternate';
     *       }
     *   }
     * },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    getLayoutInfo: Function | string;
    /**
     * getLayoutInfo is used to configure every subtree of the organizational chart
     */
    layoutInfo: TreeInfo;
    /**
     * Defines whether an object should be at the left/right of the mind map. Applicable only for the direct children of the root node
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    getBranch: Function | string;
    /**
     * Aligns the layout within the given bounds
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    bounds: Rect;
    /**
     * Enables/Disables animation option when a node is expanded/collapsed
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *           id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *           annotations: [{ content: 'Default Shape' }]
     *       },
     *       {
     *           id: 'node2', width: 100, height: 100, offsetX: 300, offsetY: 100,
     *           shape: {
     *               type: 'Basic', shape: 'Ellipse'
     *           },
     *           annotations: [{ content: 'Path Element' }]
     *       }
     *       ];
     *       let connectors$: ConnectorModel[] = [{
     *           id: 'connector1',
     *           type: 'Straight',
     *           sourcePoint: { x: 100, y: 300 },
     *           targetPoint: { x: 200, y: 400 },
     *       }];
     * let diagram$: Diagram = new Diagram({
     *     connectors: connectors, nodes: nodes,
     * ...
     * 	   layout: {
     * enableAnimation: true, orientation: 'TopToBottom',
     * type: 'OrganizationalChart', margin: { top: 20 },
     * horizontalSpacing: 30, verticalSpacing: 30,
     * },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default true
     */
    enableAnimation: boolean;
    /**
     * Defines the root of the hierarchical tree layout
     * @default ''
     */
    root: string;
}
/**
 * Interface for the class node
 */
export interface INode {
    /** returns ID of node */
    id: string;
    /** returns offsetX of node */
    offsetX: number;
    /** returns offsetY of node */
    offsetY: number;
    /** returns actual size of node */
    actualSize: {
        width: number;
        height: number;
    };
    /** returns InEdges of node */
    inEdges: string[];
    /** returns outEdges of node */
    outEdges: string[];
    /** returns pivot points of node */
    pivot: PointModel;
    /** returns false if the node to be arranged in layout, else it returns true */
    excludeFromLayout: boolean;
    /** returns true if the node to be expanded, else it returns false */
    isExpanded: boolean;
    /** returns data of the node */
    data: Object;
    /** returns bounds of the node */
    treeBounds?: Bounds;
    /** returns the difference between old position and new position of node */
    differenceX?: number;
    /** returns the difference between old position and new position of node */
    differenceY?: number;
    /** returns true if the node is already visited in layout, else it returns false */
    visited?: boolean;
}
/**
 * Defines the properties of the connector
 */
export interface IConnector {
    id: string;
    sourceID: string;
    targetID: string;
    visited?: boolean;
    visible?: boolean;
    points?: PointModel[];
    type?: Segments;
    segments?: OrthogonalSegmentModel[] | StraightSegmentModel[] | BezierSegmentModel[];
}
/**
 * Defines the properties of the layout bounds
 */
export interface Bounds {
    /** returns the left position, where the layout is rendered  */
    x: number;
    /** returns the top position, where layout is rendered  */
    y: number;
    /** returns the right position, where layout is rendered  */
    right: number;
    /** returns the bottom position, where layout is rendered  */
    bottom: number;
    /** returns how much distance layout is moved  */
    canMoveBy?: number;
}
/**
 * Defines the assistant details for the layout
 */
export interface AssistantsDetails {
    /** returns the root value */
    root: string;
    /** returns the assistant in the string collection  */
    assistants: string[];
}
export interface TreeInfo {
    orientation?: SubTreeOrientation;
    type?: SubTreeAlignments;
    offset?: number;
    enableRouting?: boolean;
    children?: string[];
    assistants?: string[];
    level?: number;
    hasSubTree?: boolean;
    rows?: number;
    getAssistantDetails?: AssistantsDetails;
}
/**
 * Contains the properties of the diagram layout
 */
export interface ILayout {
    anchorX?: number;
    anchorY?: number;
    maxLevel?: number;
    nameTable?: Object;
    /**
     * Provides firstLevelNodes node of the diagram layout
     * @default undefined
     */
    firstLevelNodes?: INode[];
    /**
     * Provides centerNode node of the diagram layout
     * @default undefined
     */
    centerNode?: null;
    /**
     * Provides type of the diagram layout
     * @default undefined
     */
    type?: string;
    /**
     * Provides orientation of the diagram layout
     * @default undefined
     */
    orientation?: string;
    graphNodes?: {};
    rootNode?: INode;
    updateView?: boolean;
    /**
     * Provides vertical spacing of the diagram layout
     * @default undefined
     */
    verticalSpacing?: number;
    /**
     * Provides horizontal spacing of the diagram layout
     * @default undefined
     */
    horizontalSpacing?: number;
    levels?: LevelBounds[];
    /**
     * Provides horizontal alignment of the diagram layout
     * @default undefined
     * @blazorDefaultValueIgnore
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Provides horizontal alignment of the diagram layout
     * @default undefined
     * @blazorDefaultValueIgnore
     */
    verticalAlignment?: VerticalAlignment;
    /**
     * Provides fixed of the diagram layout
     * @default undefined
     */
    fixedNode?: string;
    /**
     * Provides the layout bounds
     * @default undefined
     */
    bounds?: Rect;
    getLayoutInfo?: Function;
    layoutInfo?: TreeInfo;
    getBranch?: Function;
    getConnectorSegments?: Function;
    level?: number;
    /**
     * Defines the layout margin values
     * @default undefined
     */
    margin?: MarginModel;
    /**
     * Defines objects on the layout
     * @default undefined
     */
    objects?: INode[];
    /**
     * Defines the root of the hierarchical tree layout
     * @default undefined
     */
    root?: string;
}
export interface LevelBounds {
    rBounds: Bounds;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/layout/mind-map.d.ts
/**
 * Layout for mind-map tree
 */
export  class MindMap {
    /**
     * Constructor for the organizational chart module.
     * @private
     */
    constructor();
    /**
     * To destroy the organizational chart
     * @return {void}
     * @private
     */
    destroy(): void;
    /**
     * Defines the layout animation
     *
     */
    isAnimation: boolean;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**   @private  */
    updateLayout(nodes: INode[], nameTable: Object, layoutProp: Layout, viewPort: PointModel, uniqueId: string, root?: string): void;
    private checkRoot;
    private updateMindMapBranch;
    private getBranch;
    private excludeFromLayout;
    private findFirstLevelNodes;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/layout/radial-tree.d.ts
/**
 * Radial Tree
 */
export  class RadialTree {
    /**
     * Constructor for the organizational chart module.
     * @private
     */
    constructor();
    /**
     * To destroy the organizational chart
     * @return {void}
     * @private
     */
    destroy(): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**   @private  */
    updateLayout(nodes: INode[], nameTable: Object, layoutProp: Layout, viewport: PointModel): void;
    private doLayout;
    private updateEdges;
    private depthFirstAllignment;
    private populateLevels;
    private transformToCircleLayout;
    private updateAnchor;
    private updateNodes;
    private setUpLayoutInfo;
}
/**
 * Defines the properties of layout
 * @private
 */
export interface IRadialLayout {
    anchorX?: number;
    anchorY?: number;
    maxLevel?: number;
    nameTable?: Object;
    firstLevelNodes?: INode[];
    layoutNodes?: INodeInfo[];
    centerNode?: INode;
    type?: string;
    orientation?: string;
    graphNodes?: {};
    verticalSpacing?: number;
    horizontalSpacing?: number;
    levels?: LevelBoundary[];
    horizontalAlignment?: HorizontalAlignment;
    verticalAlignment?: VerticalAlignment;
    fixedNode?: string;
    bounds?: Rect;
    level?: number;
    margin?: MarginModel;
    objects?: INode[];
    root?: string;
}
/**
 * Defines the node arrangement in radial manner
 * @private
 */
export interface INodeInfo {
    level?: number;
    visited?: boolean;
    children?: INode[];
    x?: number;
    y?: number;
    min?: number;
    max?: number;
    width?: number;
    height?: number;
    segmentOffset?: number;
    actualCircumference?: number;
    radius?: number;
    circumference?: number;
    nodes?: INode[];
    ratio?: number;
}
/** @private */
export interface LevelBoundary {
    rBounds: Bounds;
    radius: number;
    height: number;
    nodes: INode[];
    node: INodeInfo;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/layout/symmetrical-layout.d.ts
export  class GraphForceNode {
    /**
     * @private
     */
    velocityX: number;
    /**
     * @private
     */
    velocityY: number;
    /**
     * @private
     */
    location: PointModel;
    /**
     * @private
     */
    nodes: IGraphObject[];
    /**
     * @private
     */
    graphNode: IGraphObject;
    constructor(gnNode: IGraphObject);
    /**
     * @private
     */
    applyChanges(): void;
}
/**
 * SymmetricalLayout
 */
export  class SymmetricLayout {
    private cdCOEF;
    private cfMAXVELOCITY;
    private cnMAXITERACTION;
    private cnSPRINGLENGTH;
    private mszMaxForceVelocity;
    /**
     * @private
     */
    springLength: number;
    /**
     * @private
     */
    springFactor: number;
    /**
     * @private
     */
    maxIteration: number;
    private selectedNode;
    constructor();
    /**
     * @private
     */
    destroy(): void;
    protected getModuleName(): string;
    private doGraphLayout;
    private preLayoutNodes;
    /**
     * @private
     */
    doLayout(graphLayoutManager: GraphLayoutManager): void;
    private makeSymmetricLayout;
    private appendForces;
    private resetGraphPosition;
    private convertGraphNodes;
    /**
     * @private
     */
    getForceNode(gnNode: IGraphObject): GraphForceNode;
    private updateNeigbour;
    private lineAngle;
    private pointDistance;
    private calcRelatesForce;
    /**
     * @private
     */
    updateLayout(nodeCollection: IGraphObject[], connectors: IGraphObject[], symmetricLayout: SymmetricLayout, nameTable: Object, layout: Layout, viewPort: PointModel): void;
    private calcNodesForce;
    private calcForce;
}
export  class GraphLayoutManager {
    private mhelperSelectedNode;
    private visitedStack;
    private cycleEdgesCollection;
    private nameTable;
    /**
     * @private
     */
    nodes: IGraphObject[];
    private graphObjects;
    private connectors;
    private passedNodes;
    /**
     * @private
     */
    selectedNode: IGraphObject;
    /**
     * @private
     */
    updateLayout(nodeCollection: IGraphObject[], connectors: IGraphObject[], symmetricLayout: SymmetricLayout, nameTable: Object, layout: Layout, viewPort: PointModel): boolean;
    /**
     * @private
     */
    getModelBounds(lNodes: IGraphObject[]): Rect;
    private updateLayout1;
    private getNodesToPosition;
    private selectNodes;
    private selectConnectedNodes;
    private exploreRelatives;
    private exploreRelatives1;
    private getConnectedRelatives;
    private dictionaryContains;
    private dictionaryLength;
    private getConnectedChildren;
    private getConnectedParents;
    private setNode;
    private findNode;
    private addGraphNode;
    private isConnectedToAnotherNode;
    private searchEdgeCollection;
    private exploreGraphEdge;
    private addNode;
    private detectCyclesInGraph;
    private getUnVisitedChildNodes;
}
export interface ITreeInfo extends INode, IConnector {
    graphType?: GraphObjectType;
    parents?: IGraphObject[];
    children?: IGraphObject[];
    tag?: GraphForceNode;
    center?: PointModel;
    Added?: boolean;
    isCycleEdge: boolean;
    visible?: boolean;
    GraphNodes?: {};
    LeftMargin?: number;
    TopMargin?: number;
    location?: PointModel;
    Bounds?: Rect;
}
export interface IGraphObject extends INode, IConnector {
    treeInfo?: ITreeInfo;
}
export  type GraphObjectType = 'Node' | 'Connector';
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/annotation-model.d.ts
/**
 * Interface for a class Hyperlink
 */
export interface HyperlinkModel {
    /**
     * Sets the fill color of the hyperlink
     * @default 'blue'
     */
    color?: string;
    /**
     * Defines the content for hyperlink
     * @default ''
     */
    content?: string;
    /**
     * Defines the link for hyperlink
     * @default ''
     */
    link?: string;
    /**
     * Defines how the link should be decorated. For example, with underline/over line
     * * Overline - Decorates the text with a line above the text
     * * Underline - Decorates the text with an underline
     * * LineThrough - Decorates the text by striking it with a line
     * * None - Text will not have any specific decoration
     * @default 'None'
     */
    textDecoration?: TextDecoration;
}
/**
 * Interface for a class Annotation
 */
export interface AnnotationModel {
    /**
     * Sets the textual description of the node/connector
     * @default ''
     */
    content?: string;
    /**
     * Sets the textual description of the node/connector
     * @default 'undefined'
     */
    template?: string | HTMLElement;
    /**
     * Defines the visibility of the label
     * @default true
     */
    visibility?: boolean;
    /**
     * Enables or disables the default behaviors of the label.
     * * ReadOnly - Enables/Disables the ReadOnly Constraints
     * * InheritReadOnly - Enables/Disables the InheritReadOnly Constraints
     * @default 'InheritReadOnly'
     * @aspNumberEnum
     * @blazorNumberEnum
     */
    constraints?: AnnotationConstraints;
    /**
     * Sets the hyperlink of the label
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     * id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
     * annotations: [{ id: 'label1',
     * content: 'Default Shape', style: { color: 'red' },
     * hyperlink: { link: 'https://www.google.com', color : 'blue', textDecoration : 'Overline', content : 'google' }
     * }, {content: 'text', constraints: ~AnnotationConstraints.InheritReadOnly
     * }],
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    hyperlink?: HyperlinkModel;
    /**
     * Defines the unique id of the annotation
     * @default ''
     */
    id?: string;
    /**
     * Sets the width of the text
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    width?: number;
    /**
     * Sets the height of the text
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    height?: number;
    /**
     * Sets the rotate angle of the text
     * @default 0
     */
    rotateAngle?: number;
    /**
     * Defines the appearance of the text
     * @default new TextStyle()
     */
    style?: TextStyleModel;
    /**
     * Sets the horizontal alignment of the text with respect to the parent node/connector
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Left - Aligns the diagram element at the left of its immediate parent
     * * Right - Aligns the diagram element at the right of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Center'
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Sets the vertical alignment of the text with respect to the parent node/connector
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Top - Aligns the diagram element at the top of its immediate parent
     * * Bottom - Aligns the diagram element at the bottom of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Center'
     */
    verticalAlignment?: VerticalAlignment;
    /**
     * Sets the space to be left between an annotation and its parent node/connector
     * @default new Margin(0,0,0,0)
     */
    margin?: MarginModel;
    /**
     * Sets the space to be left between an annotation and its parent node/connector
     * @default new Margin(20,20,20,20)
     */
    dragLimit?: MarginModel;
    /**
     * Sets the type of the annotation
     *  * Shape - Sets the annotation type as Shape
     *  * Path - Sets the annotation type as Path
     * @default 'Shape'
     */
    type?: AnnotationTypes;
    /**
     * Allows the user to save custom information/data about an annotation
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let addInfo: {}  = { content: 'label' };
     * let nodes$: NodeModel[] = [{
     * id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
     * annotations: [{ id: 'label1', 
     * content: 'text', constraints: ~AnnotationConstraints.InheritReadOnly, addInfo: addInfo
     * }],
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    addInfo?: Object;
}
/**
 * Interface for a class ShapeAnnotation
 */
export interface ShapeAnnotationModel extends AnnotationModel{
    /**
     * Sets the position of the annotation with respect to its parent bounds
     * @default { x: 0.5, y: 0.5 }
     */
    offset?: PointModel;
}
/**
 * Interface for a class PathAnnotation
 */
export interface PathAnnotationModel extends AnnotationModel{
    /**
     * Sets the segment offset of annotation
     * @default 0.5
     */
    offset?: number;
    /**
     * Sets the displacement of an annotation from its actual position
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    displacement?: PointModel;
    /**
     * Sets the segment alignment of annotation
     *  * Center - Aligns the annotation at the center of a connector segment
     *  * Before - Aligns the annotation before a connector segment
     *  * After - Aligns the annotation after a connector segment
     * @default Center
     */
    alignment?: AnnotationAlignment;
    /**
     * Enable/Disable the angle based on the connector segment
     * @default false
     */
    segmentAngle?: boolean;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/annotation.d.ts
/**
 * Defines the hyperlink for the annotations in the nodes/connectors
 */
export  class Hyperlink extends base.ChildProperty<Hyperlink> {
    /**
     * Sets the fill color of the hyperlink
     * @default 'blue'
     */
    color: string;
    /**
     * Defines the content for hyperlink
     * @default ''
     */
    content: string;
    /**
     * Defines the link for hyperlink
     * @default ''
     */
    link: string;
    /**
     * Defines how the link should be decorated. For example, with underline/over line
     * * Overline - Decorates the text with a line above the text
     * * Underline - Decorates the text with an underline
     * * LineThrough - Decorates the text by striking it with a line
     * * None - Text will not have any specific decoration
     * @default 'None'
     */
    textDecoration: TextDecoration;
}
/**
 * Defines the textual description of nodes/connectors
 */
export  class Annotation extends base.ChildProperty<Annotation> {
    /**
     * Sets the textual description of the node/connector
     * @default ''
     */
    content: string;
    /**
     * Sets the textual description of the node/connector
     * @default 'undefined'
     */
    template: string | HTMLElement;
    /**
     * Defines the visibility of the label
     * @default true
     */
    visibility: boolean;
    /**
     * Enables or disables the default behaviors of the label.
     * * ReadOnly - Enables/Disables the ReadOnly Constraints
     * * InheritReadOnly - Enables/Disables the InheritReadOnly Constraints
     * @default 'InheritReadOnly'
     * @aspNumberEnum
     * @blazorNumberEnum
     */
    constraints: AnnotationConstraints;
    /**
     * Sets the hyperlink of the label
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     * id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
     * annotations: [{ id: 'label1',
     * content: 'Default Shape', style: { color: 'red' },
     * hyperlink: { link: 'https://www.google.com', color : 'blue', textDecoration : 'Overline', content : 'google' }
     * }, {content: 'text', constraints: ~AnnotationConstraints.InheritReadOnly
     * }],
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    hyperlink: HyperlinkModel;
    /**
     * Defines the unique id of the annotation
     * @default ''
     */
    id: string;
    /**
     * Sets the width of the text
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    width: number;
    /**
     * Sets the height of the text
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    height: number;
    /**
     * Sets the rotate angle of the text
     * @default 0
     */
    rotateAngle: number;
    /**
     * Defines the appearance of the text
     * @default new TextStyle()
     */
    style: TextStyleModel;
    /**
     * Sets the horizontal alignment of the text with respect to the parent node/connector
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Left - Aligns the diagram element at the left of its immediate parent
     * * Right - Aligns the diagram element at the right of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Center'
     */
    horizontalAlignment: HorizontalAlignment;
    /**
     * Sets the vertical alignment of the text with respect to the parent node/connector
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Top - Aligns the diagram element at the top of its immediate parent
     * * Bottom - Aligns the diagram element at the bottom of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Center'
     */
    verticalAlignment: VerticalAlignment;
    /**
     * Sets the space to be left between an annotation and its parent node/connector
     * @default new Margin(0,0,0,0)
     */
    margin: MarginModel;
    /**
     * Sets the space to be left between an annotation and its parent node/connector
     * @default new Margin(20,20,20,20)
     */
    dragLimit: MarginModel;
    /**
     * Sets the type of the annotation
     *  * Shape - Sets the annotation type as Shape
     *  * Path - Sets the annotation type as Path
     * @default 'Shape'
     */
    type: AnnotationTypes;
    /**
     * Allows the user to save custom information/data about an annotation
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let addInfo$: {}  = { content: 'label' };
     * let nodes$: NodeModel[] = [{
     * id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
     * annotations: [{ id: 'label1',
     * content: 'text', constraints: ~AnnotationConstraints.InheritReadOnly, addInfo: addInfo
     * }],
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    addInfo: Object;
    constructor(parent: any, propName: string, defaultValue: Object, isArray?: boolean);
}
/**
 * Defines the textual description of nodes/connectors with respect to bounds
 */
export  class ShapeAnnotation extends Annotation {
    /**
     * Sets the position of the annotation with respect to its parent bounds
     * @default { x: 0.5, y: 0.5 }
     */
    offset: PointModel;
    constructor(parent: any, propName: string, defaultValue: Object, isArray?: boolean);
    /**
     * @private
     * Returns the module of class ShapeAnnotation
     */
    getClassName(): string;
}
/**
 * Defines the connector annotation
 */
export  class PathAnnotation extends Annotation {
    /**
     * Sets the segment offset of annotation
     * @default 0.5
     */
    offset: number;
    /**
     * Sets the displacement of an annotation from its actual position
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    displacement: PointModel;
    /**
     * Sets the segment alignment of annotation
     *  * Center - Aligns the annotation at the center of a connector segment
     *  * Before - Aligns the annotation before a connector segment
     *  * After - Aligns the annotation after a connector segment
     * @default Center
     */
    alignment: AnnotationAlignment;
    /**
     * Enable/Disable the angle based on the connector segment
     * @default false
     */
    segmentAngle: boolean;
    constructor(parent: any, propName: string, defaultValue: Object, isArray?: boolean);
    /**
     * @private
     * Returns the module of class PathAnnotation
     */
    getClassName(): string;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/bpmn.d.ts
/**
 * BPMN Diagrams contains the BPMN functionalities
 */
export  class BpmnDiagrams {
    /**   @private  */
    annotationObjects: {};
    /**   @private  */
    readonly textAnnotationConnectors: ConnectorModel[];
    /** @private */
    getTextAnnotationConn(obj: NodeModel | ConnectorModel): ConnectorModel[];
    /**   @private  */
    getSize(node: NodeModel, content: DiagramElement): Size;
    /** @private */
    initBPMNContent(content: DiagramElement, node: Node, diagram: Diagram): DiagramElement;
    /** @private */
    getBPMNShapes(node: Node): PathElement;
    /** @private */
    /** @private */
    getBPMNGatewayShape(node: Node): Canvas;
    /** @private */
    getBPMNDataObjectShape(node: Node): Canvas;
    /** @private */
    getBPMNTaskShape(node: Node): Canvas;
    /** @private */
    getBPMNEventShape(node: Node, subEvent: BpmnSubEventModel, sub?: boolean, id?: string): Canvas;
    private setEventVisibility;
    private setSubProcessVisibility;
    /** @private */
    getBPMNSubProcessShape(node: Node): Canvas;
    private getBPMNSubEvent;
    private getBPMNSubProcessTransaction;
    /** @private */
    getBPMNSubProcessLoopShape(node: Node): PathElement;
    /** @private */
    drag(obj: Node, tx: number, ty: number, diagram: Diagram): void;
    /** @private */
    dropBPMNchild(target: Node, source: Node, diagram: Diagram): void;
    /** @private */
    updateDocks(obj: Node, diagram: Diagram): void;
    /** @private */
    removeBpmnProcesses(currentObj: Node, diagram: Diagram): void;
    /** @private */
    removeChildFromBPMN(wrapper: Container, name: string): void;
    /** @private */
    removeProcess(id: string, diagram: Diagram): void;
    /** @private */
    addProcess(process: NodeModel, parentId: string, diagram: Diagram): void;
    /** @private */
    getChildrenBound(node: NodeModel, excludeChild: string, diagram: Diagram): Rect;
    /** @private */
    updateSubProcessess(bound: Rect, obj: NodeModel, diagram: Diagram): void;
    /** @private */
    getBPMNCompensationShape(node: Node, compensationNode: PathElement): PathElement;
    /** @private */
    getBPMNActivityShape(node: Node): Canvas;
    /** @private */
    getBPMNSubprocessEvent(node: Node, subProcessEventsShapes: Canvas, events: BpmnSubEventModel): void;
    /** @private */
    getBPMNAdhocShape(node: Node, adhocNode: PathElement, subProcess?: BpmnSubProcessModel): PathElement;
    /** @private */
    private getBPMNTextAnnotation;
    /** @private */
    private renderBPMNTextAnnotation;
    /** @private */
    getTextAnnotationWrapper(node: NodeModel, id: string): TextElement;
    /** @private */
    addAnnotation(node: NodeModel, annotation: BpmnAnnotationModel, diagram: Diagram): ConnectorModel;
    private clearAnnotations;
    /** @private */
    checkAndRemoveAnnotations(node: NodeModel, diagram: Diagram): boolean;
    private removeAnnotationObjects;
    private setAnnotationPath;
    /**   @private  */
    isBpmnTextAnnotation(activeLabel: ActiveLabel, diagram: Diagram): NodeModel;
    /** @private */
    updateTextAnnotationContent(parentNode: NodeModel, activeLabel: ActiveLabel, text: string, diagram: Diagram): void;
    /**   @private  */
    updateQuad(actualObject: Node, diagram: Diagram): void;
    /** @private */
    updateTextAnnotationProp(actualObject: Node, oldObject: Node, diagram: Diagram): void;
    /** @private */
    private getSubprocessChildCount;
    /** @private */
    private getTaskChildCount;
    /** @private */
    private setStyle;
    /** @private */
    updateBPMN(changedProp: Node, oldObject: Node, actualObject: Node, diagram: Diagram): void;
    /** @private */
    updateBPMNStyle(elementWrapper: DiagramElement, changedProp: string): void;
    /** @private */
    updateBPMNGateway(node: Node, changedProp: Node): void;
    /** @private */
    updateBPMNDataObject(node: Node, newObject: Node, oldObject: Node): void;
    /** @private */
    getEvent(node: Node, oldObject: Node, event: string, child0: DiagramElement, child1: DiagramElement, child2: DiagramElement): void;
    /** @private */
    private updateEventVisibility;
    /** @private */
    updateBPMNEvent(node: Node, newObject: Node, oldObject: Node): void;
    /** @private */
    updateBPMNEventTrigger(node: Node, newObject: Node): void;
    /** @private */
    updateBPMNActivity(node: Node, newObject: Node, oldObject: Node, diagram: Diagram): void;
    /** @private */
    updateBPMNActivityTask(node: Node, newObject: Node): void;
    /** @private */
    updateBPMNActivityTaskLoop(node: Node, newObject: Node, x: number, subChildCount: number, area: number, start: number): void;
    /** @private */
    private updateChildMargin;
    /** @private */
    updateBPMNActivitySubProcess(node: Node, newObject: Node, oldObject: Node, diagram: Diagram): void;
    /** @private */
    updateBPMNSubProcessEvent(node: Node, newObject: Node, oldObject: Node, diagram: Diagram): void;
    private updateBPMNSubEvent;
    private updateBPMNSubProcessTransaction;
    /** @private */
    getEventSize(events: BpmnSubEventModel, wrapperChild: Canvas): void;
    /** @private */
    updateBPMNSubProcessAdhoc(node: Node, oldObject: Node, subProcess: BpmnSubProcessModel, x: number, subChildCount: number, area: number): void;
    /** @private */
    updateBPMNSubProcessBoundary(node: Node, subProcess: BpmnSubProcessModel): void;
    /** @private */
    updateElementVisibility(node: Node, visible: boolean, diagram: Diagram): void;
    /** @private */
    updateBPMNSubProcessCollapsed(node: Node, oldObject: Node, subProcess: BpmnSubProcessModel, x: number, subChildCount: number, area: number, diagram: Diagram): void;
    /** @private */
    updateBPMNSubProcessCompensation(node: Node, oldObject: Node, subProcess: BpmnSubProcessModel, x: number, subChildCount: number, area: number): void;
    /** @private */
    updateBPMNSubProcessLoop(node: Node, oldObject: Node, subProcess: BpmnSubProcessModel, x: number, subChildCount: number, area: number): void;
    /** @private */
    updateBPMNConnector(actualObject: Connector, oldObject: Connector, connection: Connector, diagram: Diagram): Connector;
    /** @private */
    getSequence(actualObject: Connector, oldObject: Connector, connection: Connector, diagram: Diagram): Connector;
    /** @private */
    getAssociation(actualObject: Connector, oldObject: Connector, connection: Connector, diagram: Diagram): Connector;
    /** @private */
    getMessage(actualObject: Connector, oldObject: Connector, connection: Connector, diagram: Diagram): Connector;
    private setSizeForBPMNEvents;
    /** @private */
    updateAnnotationDrag(node: NodeModel, diagram: Diagram, tx: number, ty: number): boolean;
    private getAnnotationPathAngle;
    private setSizeForBPMNGateway;
    private setSizeForBPMNDataObjects;
    private setSizeForBPMNActivity;
    private updateDiagramContainerVisibility;
    /**
     * Constructor for the BpmnDiagrams module
     * @private
     */
    constructor();
    /**
     * To destroy the BpmnDiagrams module
     * @return {void}
     * @private
     */
    destroy(): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
}
export  function getBpmnShapePathData(shape: string): string;
export  function getBpmnTriggerShapePathData(shape: string): string;
export  function getBpmnGatewayShapePathData(shape: string): string;
export  function getBpmnTaskShapePathData(shape: string): string;
export  function getBpmnLoopShapePathData(shape: string): string;
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/connector-bridging.d.ts
/**
 * ConnectorBridging defines the bridging behavior
 */
/** @private */
export  class ConnectorBridging {
    /** @private */
    updateBridging(conn: Connector, diagram: Diagram): void;
    /** @private */
    firstBridge(bridgeList: BridgeSegment[], connector: Connector, bridgeSpacing: number): void;
    /** @private */
    createSegment(st: PointModel, end: PointModel, angle: number, direction: BridgeDirection, index: number, conn: Connector, diagram: Diagram): ArcSegment;
    /** @private */
    createBridgeSegment(startPt: PointModel, endPt: PointModel, angle: number, bridgeSpace: number, sweep: number): string;
    /** @private */
    sweepDirection(angle: number, bridgeDirection: BridgeDirection, connector: Connector, diagram: Diagram): number;
    /** @private */
    getPointAtLength(length: number, pts: PointModel[]): PointModel;
    /** @private */
    protected getPoints(connector: Connector): PointModel[];
    private intersectsRect;
    /** @private */
    intersect(points1: PointModel[], points2: PointModel[], self: boolean, bridgeDirection: BridgeDirection, zOrder: boolean): PointModel[];
    /** @private */
    inter1(startPt: PointModel, endPt: PointModel, pts: PointModel[], zOrder: boolean, bridgeDirection: BridgeDirection): PointModel[];
    private checkForHorizontalLine;
    private isEmptyPoint;
    private getLengthAtFractionPoint;
    private getSlope;
    /** @private */
    angleCalculation(startPt: PointModel, endPt: PointModel): number;
    private lengthCalculation;
    /**
     * Constructor for the bridging module
     * @private
     */
    constructor();
    /**
     * To destroy the bridging module
     * @return {void}
     * @private
     */
    destroy(): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/connector-model.d.ts
/**
 * Interface for a class Decorator
 */
export interface DecoratorModel {
    /**
     * Sets the width of the decorator
     * @default 10
     */
    width?: number;
    /**
     * Sets the height of the decorator
     * @default 10
     */
    height?: number;
    /**
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let connectors$: ConnectorModel[] = [{
     *   id: 'connector', type: 'Straight', sourcePoint: { x: 500, y: 100 }, targetPoint: { x: 600, y: 200 },
     *   sourceDecorator: {
     *    style: { fill: 'black' },
     *    shape: 'Arrow',
     *    pivot: { x: 0, y: 0.5 }},
     *   targetDecorator: {
     *    shape: 'Diamond',
     *    style: { fill: 'blue' },
     *    pivot: { x: 0, y: 0.5 }}
     *  },];
     * let diagram$: Diagram = new Diagram({
     * ...
     * connectors: connectors
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     */
    shape?: DecoratorShapes;
    /**
     * Defines the appearance of the decorator
     * @default new ShapeStyle()
     */
    style?: ShapeStyleModel;
    /**
     * Defines the position of the decorator with respect to the source/target point of the connector
     */
    pivot?: PointModel;
    /**
     * Defines the geometry of the decorator shape
     * @default ''
     */
    pathData?: string;
}
/**
 * Interface for a class Vector
 */
export interface VectorModel {
    /**
     * Defines the angle between the connector end point and control point of the bezier segment
     * @default 0
     */
    angle?: number;
    /**
     * Defines the distance between the connector end point and control point of the bezier segment
     * @default 0
     */
    distance?: number;
}
/**
 * Interface for a class ConnectorShape
 */
export interface ConnectorShapeModel {
    /**
     * Defines the application specific type of connector
     * * Bpmn - Sets the type of the connection shape as Bpmn
     * @default 'None'
     */
    type?: ConnectionShapes;
}
/**
 * Interface for a class ActivityFlow
 */
export interface ActivityFlowModel extends ConnectorShapeModel{
    /**
     * Defines the type of the UMLActivity flows
     * Object - Sets the type of the UMLActivity Flow as Object
     * Control - Sets the type of the UMLActivity Flow as Control
     * Exception - Sets the type of the UMLActivity Flow as Exception
     * @default 'Object'
     * @IgnoreSingular
     */
    flow?: UmlActivityFlows;
    /**
     * Defines the height of the exception flow.
     * @default '50'
     */
    exceptionFlowHeight?: number;
}
/**
 * Interface for a class BpmnFlow
 */
export interface BpmnFlowModel extends ConnectorShapeModel{
    /**
     * Sets the type of the Bpmn flows
     * * Sequence - Sets the type of the Bpmn Flow as Sequence
     * * Association - Sets the type of the Bpmn Flow as Association
     * * Message - Sets the type of the Bpmn Flow as Message
     * @default 'Sequence'
     */
    flow?: BpmnFlows;
    /**
     * Sets the type of the Bpmn Sequence flows
     * * Default - Sets the type of the sequence flow as Default
     * * Normal - Sets the type of the sequence flow as Normal
     * * Conditional - Sets the type of the sequence flow as Conditional
     * @default 'Normal'
     */
    sequence?: BpmnSequenceFlows;
    /**
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [
     * {
     *   id: 'node1', width: 60, height: 60, offsetX: 75, offsetY: 90,
     *   shape: { type: 'Bpmn', shape: 'Event', event: { event: 'Start', trigger: 'Message' } },
     *     },
     * {
     *   id: 'node2', width: 75, height: 70, offsetX: 210, offsetY: 90,
     *   shape: { type: 'Bpmn', shape: 'Gateway', gateway: { type: 'None' } },
     *  }];
     * let connectors$: ConnectorModel[] = [{
     *   id: 'connector', type: 'Straight', sourceID: 'node1', targetID: 'node2',
     *   shape: { type: 'Bpmn', flow: 'Message', message: 'InitiatingMessage' } as BpmnFlowModel
     *  },];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes: nodes, connectors: connectors
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     */
    message?: BpmnMessageFlows;
    /**
     * Sets the type of the Bpmn association flows
     * * Default - Sets the type of Association flow as Default
     * * Directional - Sets the type of Association flow as Directional
     * * BiDirectional - Sets the type of Association flow as BiDirectional
     * * @default 'Default'
     */
    association?: BpmnAssociationFlows;
}
/**
 * Interface for a class ConnectorSegment
 */
export interface ConnectorSegmentModel {
    /**
     * Defines the type of the segment
     * * Straight - Sets the segment type as Straight
     * * Orthogonal - Sets the segment type as Orthogonal
     * * Bezier - Sets the segment type as Bezier
     * @default 'Straight'
     */
    type?: Segments;
    /**
     * Defines the segment to be drag or not
     * @default true
     */
    allowDrag?: boolean;
}
/**
 * Interface for a class StraightSegment
 */
export interface StraightSegmentModel extends ConnectorSegmentModel{
    /**
     * Sets the end point of the connector segment
     * @default new Point(0,0)
     */
    point?: PointModel;
}
/**
 * Interface for a class BezierSegment
 */
export interface BezierSegmentModel extends StraightSegmentModel{
    /**
     * Sets the first control point of the connector
     * @default {}
     */
    point1?: PointModel;
    /**
     * Sets the second control point of the connector
     * @default {}
     */
    point2?: PointModel;
    /**
     * Defines the length and angle between the source point and the first control point of the diagram
     * @default {}
     */
    vector1?: VectorModel;
    /**
     * Defines the length and angle between the target point and the second control point of the diagram
     * @default {}
     */
    vector2?: VectorModel;
}
/**
 * Interface for a class OrthogonalSegment
 */
export interface OrthogonalSegmentModel extends ConnectorSegmentModel{
    /**
     * Defines the length of orthogonal segment
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let connectors$: ConnectorModel[] = [{
     *       id: 'link2', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 40, y: 40 }, type: 'Orthogonal',
     *       shape: {
     *           type: 'Bpmn',
     *           flow: 'Message',
     *           association: 'directional'
     *       }, style: {
     *           strokeDashArray: '2,2'
     *       },
     *       segments: [{ type: 'Orthogonal', length: 30, direction: 'Bottom' },
     *       { type: 'Orthogonal', length: 80, direction: 'Right' }]
     *   }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * connectors: connectors
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default 0
     */
    length?: number;
    /**
     * Sets the direction of orthogonal segment
     * * Left - Sets the direction type as Left
     * * Right - Sets the direction type as Right
     * * Top - Sets the direction type as Top
     * * Bottom - Sets the direction type as Bottom
     * @default null
     */
    direction?: Direction;
}
/**
 * Interface for a class MultiplicityLabel
 */
export interface MultiplicityLabelModel {
    /**
     * Defines the type of the Classifier Multiplicity
     * @default true
     * @IgnoreSingular
     */
    optional?: boolean;
    /**
     * Defines the type of the Classifier Multiplicity
     * @default ''
     * @IgnoreSingular
     */
    lowerBounds?: string;
    /**
     * Defines the type of the Classifier Multiplicity
     * @default ''
     * @IgnoreSingular
     */
    upperBounds?: string;
}
/**
 * Interface for a class ClassifierMultiplicity
 */
export interface ClassifierMultiplicityModel {
    /**
     * Defines the type of the Classifier Multiplicity
     * @default 'OneToOne'
     * @IgnoreSingular
     */
    type?: Multiplicity;
    /**
     * Defines the type of the Classifier Multiplicity
     * @default ''
     * @IgnoreSingular
     */
    target?: MultiplicityLabelModel;
    /**
     * Defines the type of the Classifier Multiplicity
     * @default ''
     * @IgnoreSingular
     */
    source?: MultiplicityLabelModel;
}
/**
 * Interface for a class RelationShip
 */
export interface RelationShipModel extends ConnectorShapeModel{
    /**
     * Defines the type of the  UMLConnector
     * @default 'None'
     * @IgnoreSingular
     */
    type?: ConnectionShapes;
    /**
     * Defines the association direction
     * @default 'Aggregation'
     * @IgnoreSingular
     */
    relationship?: ClassifierShape;
    /**
     * Defines the association direction
     * @default 'Directional'
     * @IgnoreSingular
     */
    associationType?: AssociationFlow;
    /**
     * Defines the type of the Classifier Multiplicity
     * @default ''
     * @IgnoreSingular
     */
    multiplicity?: ClassifierMultiplicityModel;
}
/**
 * Interface for a class Connector
 */
export interface ConnectorModel extends NodeBaseModel{
    /**
     * Defines the shape of the connector
     * @default 'Bpmn'
     * @aspType object
     */
    shape?: ConnectorShapeModel | BpmnFlowModel | RelationShipModel;
    /**
     * Defines the constraints of connector
     * * None - Interaction of the connectors cannot be done.
     * * Select - Selects the connector.
     * * Delete - Delete the connector.
     * * Drag - Drag the connector.
     * * DragSourceEnd - Drag the source end of the connector.
     * * DragTargetEnd - Drag the target end of the connector.
     * * DragSegmentThump - Drag the segment thumb of the connector.
     * * AllowDrop - Allow to drop a node.
     * * Bridging - Creates bridge  on intersection of two connectors.
     * * InheritBridging - Creates bridge  on intersection of two connectors.
     * * PointerEvents - Sets the pointer events.
     * * Tooltip - Displays a tooltip for the connectors.
     * * InheritToolTip - Displays a tooltip for the connectors.
     * * Interaction - Features of the connector used for interaction.
     * * ReadOnly - Enables ReadOnly
     * @default 'None'
     * @aspNumberEnum
     * @blazorNumberEnum
     */
    constraints?: ConnectorConstraints;
    /**
     * Defines the bridgeSpace of connector
     * @default 10
     */
    bridgeSpace?: number;
    /**
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let connectors$: ConnectorModel[] = [{
     *   id: 'connector', type: 'Straight', sourcePoint: { x: 500, y: 100 }, targetPoint: { x: 600, y: 200 },
     * annotations: [{ content: 'No', offset: 0, alignment: 'After' }]
     * ];
     * let diagram$: Diagram = new Diagram({
     * ...
     * connectors: connectors
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     */
    annotations?: PathAnnotationModel[];
    /**
     * Sets the beginning point of the connector
     * @default new Point(0,0)
     */
    sourcePoint?: PointModel;
    /**
     * Sets the end point of the connector
     * @default new Point(0,0)
     */
    targetPoint?: PointModel;
    /**
     * Defines the segments
     * @default []
     * @aspType object
     * @blazorType object
     */
    segments?: (OrthogonalSegmentModel | StraightSegmentModel | BezierSegmentModel)[];
    /**
     * Sets the source node/connector object of the connector
     * @default null
     */
    sourceID?: string;
    /**
     * Sets the target node/connector object of the connector
     * @default null
     */
    targetID?: string;
    /**
     * Sets the connector padding value
     * @default 10
     */
    hitPadding?: number;
    /**
     * Defines the type of the connector
     * * Straight - Sets the segment type as Straight
     * * Orthogonal - Sets the segment type as Orthogonal
     * * Bezier - Sets the segment type as Bezier
     * @default 'Straight'
     * @aspType Syncfusion.EJ2.Diagrams.Segments
     * @blazorDefaultValueIgnore
     * @blazorDefaultValue  Syncfusion.EJ2.Blazor.Diagrams.Segments.Straight
     */
    type?: Segments;
    /**
     * Sets the corner radius of the connector
     * @default 0
     */
    cornerRadius?: number;
    /**
     * Defines the source decorator of the connector
     * @default new Decorator()
     */
    sourceDecorator?: DecoratorModel;
    /**
     * Defines the target decorator of the connector
     * @default new Decorator()
     */
    targetDecorator?: DecoratorModel;
    /**
     * defines the tooltip for the connector
     * @default new DiagramToolTip();
     */
    tooltip?: DiagramTooltipModel;
    /**
     * Sets the unique id of the source port of the connector
     * @default ''
     */
    sourcePortID?: string;
    /**
     * Sets the unique id of the target port of the connector
     * @default ''
     */
    targetPortID?: string;
    /**
     * Sets the source padding of the connector
     * @default 0
     * @isBlazorNullableType true
     */
    sourcePadding?: number;
    /**
     * Sets the target padding of the connector
     * @default 0
     * @isBlazorNullableType true
     */
    targetPadding?: number;
    /**
     * Defines the appearance of the connection path
     * @default ''
     */
    style?: StrokeStyleModel;
    /**
     * Defines the UI of the connector
     * @default null
     */
    wrapper?: Container;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/connector.d.ts

/**
 * Decorators are used to decorate the end points of the connector with some predefined path geometry
 */
export  class Decorator extends base.ChildProperty<Decorator> {
    /**
     * Sets the width of the decorator
     * @default 10
     */
    width: number;
    /**
     * Sets the height of the decorator
     * @default 10
     */
    height: number;
    /**
     * Sets the shape of the decorator
     * * None - Sets the decorator shape as None
     * * Arrow - Sets the decorator shape as Arrow
     * * Diamond - Sets the decorator shape as Diamond
     * * Path - Sets the decorator shape as Path
     * * OpenArrow - Sets the decorator shape as OpenArrow
     * * Circle - Sets the decorator shape as Circle
     * * Square - Sets the decorator shape as Square
     * * Fletch - Sets the decorator shape as Fletch
     * * OpenFetch - Sets the decorator shape as OpenFetch
     * * IndentedArrow - Sets the decorator shape as Indented Arrow
     * * OutdentedArrow - Sets the decorator shape as Outdented Arrow
     * * DoubleArrow - Sets the decorator shape as DoubleArrow
     * @default 'Arrow'
     */
    /**
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let connectors$: ConnectorModel[] = [{
     *   id: 'connector', type: 'Straight', sourcePoint: { x: 500, y: 100 }, targetPoint: { x: 600, y: 200 },
     *   sourceDecorator: {
     *    style: { fill: 'black' },
     *    shape: 'Arrow',
     *    pivot: { x: 0, y: 0.5 }},
     *   targetDecorator: {
     *    shape: 'Diamond',
     *    style: { fill: 'blue' },
     *    pivot: { x: 0, y: 0.5 }}
     *  },];
     * let diagram$: Diagram = new Diagram({
     * ...
     * connectors: connectors
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     */
    shape: DecoratorShapes;
    /**
     * Defines the appearance of the decorator
     * @default new ShapeStyle()
     */
    style: ShapeStyleModel;
    /**
     * Defines the position of the decorator with respect to the source/target point of the connector
     */
    pivot: PointModel;
    /**
     * Defines the geometry of the decorator shape
     * @default ''
     */
    pathData: string;
}
/**
 * Describes the length and angle between the control point and the start point of bezier segment
 */
export  class Vector extends base.ChildProperty<Vector> {
    /**
     * Defines the angle between the connector end point and control point of the bezier segment
     * @default 0
     */
    angle: number;
    /**
     * Defines the distance between the connector end point and control point of the bezier segment
     * @default 0
     */
    distance: number;
}
/**
 * Sets the type of the connector
 */
export  class ConnectorShape extends base.ChildProperty<ConnectorShape> {
    /**
     * Defines the application specific type of connector
     * * Bpmn - Sets the type of the connection shape as Bpmn
     * @default 'None'
     */
    type: ConnectionShapes;
}
/**
 * Sets the type of the flow in a BPMN Process
 */
export  class ActivityFlow extends ConnectorShape {
    /**
     * Defines the type of the UMLActivity flows
     * Object - Sets the type of the UMLActivity Flow as Object
     * Control - Sets the type of the UMLActivity Flow as Control
     * Exception - Sets the type of the UMLActivity Flow as Exception
     * @default 'Object'
     * @IgnoreSingular
     */
    flow: UmlActivityFlows;
    /**
     * Defines the height of the exception flow.
     * @default '50'
     */
    exceptionFlowHeight: number;
}
/**
 * Sets the type of the flow in a BPMN Process
 */
export  class BpmnFlow extends ConnectorShape {
    /**
     * Sets the type of the Bpmn flows
     * * Sequence - Sets the type of the Bpmn Flow as Sequence
     * * Association - Sets the type of the Bpmn Flow as Association
     * * Message - Sets the type of the Bpmn Flow as Message
     * @default 'Sequence'
     */
    flow: BpmnFlows;
    /**
     * Sets the type of the Bpmn Sequence flows
     * * Default - Sets the type of the sequence flow as Default
     * * Normal - Sets the type of the sequence flow as Normal
     * * Conditional - Sets the type of the sequence flow as Conditional
     * @default 'Normal'
     */
    sequence: BpmnSequenceFlows;
    /**
     * Sets the type of the Bpmn message flows
     * * Default - Sets the type of the Message flow as Default
     * * InitiatingMessage - Sets the type of the Message flow as InitiatingMessage
     * * NonInitiatingMessage - Sets the type of the Message flow as NonInitiatingMessage
     * @default ''
     */
    /**
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [
     * {
     *   id: 'node1', width: 60, height: 60, offsetX: 75, offsetY: 90,
     *   shape: { type: 'Bpmn', shape: 'Event', event: { event: 'Start', trigger: 'Message' } },
     *     },
     * {
     *   id: 'node2', width: 75, height: 70, offsetX: 210, offsetY: 90,
     *   shape: { type: 'Bpmn', shape: 'Gateway', gateway: { type: 'None' } },
     *  }];
     * let connectors$: ConnectorModel[] = [{
     *   id: 'connector', type: 'Straight', sourceID: 'node1', targetID: 'node2',
     *   shape: { type: 'Bpmn', flow: 'Message', message: 'InitiatingMessage' } as BpmnFlowModel
     *  },];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes: nodes, connectors: connectors
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     */
    message: BpmnMessageFlows;
    /**
     * Sets the type of the Bpmn association flows
     * * Default - Sets the type of Association flow as Default
     * * Directional - Sets the type of Association flow as Directional
     * * BiDirectional - Sets the type of Association flow as BiDirectional
     * * @default 'Default'
     */
    association: BpmnAssociationFlows;
}
/**
 * Defines the behavior of connector segments
 */
export  class ConnectorSegment extends base.ChildProperty<ConnectorSegment> {
    /**
     * Defines the type of the segment
     * * Straight - Sets the segment type as Straight
     * * Orthogonal - Sets the segment type as Orthogonal
     * * Bezier - Sets the segment type as Bezier
     * @default 'Straight'
     */
    type: Segments;
    /**
     * Defines the segment to be drag or not
     * @default true
     */
    allowDrag: boolean;
    /**
     * @private
     */
    points: PointModel[];
    /**
     * @private
     */
    isTerminal: boolean;
    constructor(parent: any, propName: string, defaultValue: Object, isArray?: boolean);
}
/**
 * Defines the behavior of straight segments
 */
export  class StraightSegment extends ConnectorSegment {
    /**
     * Sets the end point of the connector segment
     * @default new Point(0,0)
     */
    point: PointModel;
    /**
     * @private
     * Returns the name of class StraightSegment
     */
    getClassName(): string;
}
/**
 * Defines the behavior of bezier segments
 */
export  class BezierSegment extends StraightSegment {
    /**
     * @private
     * Sets the first control point of the bezier connector
     */
    bezierPoint1: PointModel;
    /**
     * @private
     *  Sets the second control point of the bezier connector
     */
    bezierPoint2: PointModel;
    /**
     * Sets the first control point of the connector
     * @default {}
     */
    point1: PointModel;
    /**
     * Sets the second control point of the connector
     * @default {}
     */
    point2: PointModel;
    /**
     * Defines the length and angle between the source point and the first control point of the diagram
     * @default {}
     */
    vector1: VectorModel;
    /**
     * Defines the length and angle between the target point and the second control point of the diagram
     * @default {}
     */
    vector2: VectorModel;
    /**
     * @private
     * Returns the name of class BezierSegment
     */
    getClassName(): string;
}
/**
 * Defines the behavior of orthogonal segments
 */
export  class OrthogonalSegment extends ConnectorSegment {
    /**
     * Defines the length of orthogonal segment
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let connectors$: ConnectorModel[] = [{
     *       id: 'link2', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 40, y: 40 }, type: 'Orthogonal',
     *       shape: {
     *           type: 'Bpmn',
     *           flow: 'Message',
     *           association: 'directional'
     *       }, style: {
     *           strokeDashArray: '2,2'
     *       },
     *       segments: [{ type: 'Orthogonal', length: 30, direction: 'Bottom' },
     *       { type: 'Orthogonal', length: 80, direction: 'Right' }]
     *   }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * connectors: connectors
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default 0
     */
    length: number;
    /**
     * Sets the direction of orthogonal segment
     * * Left - Sets the direction type as Left
     * * Right - Sets the direction type as Right
     * * Top - Sets the direction type as Top
     * * Bottom - Sets the direction type as Bottom
     * @default null
     */
    direction: Direction;
    /**
     * @private
     * Returns the module of class OrthogonalSegment
     */
    getClassName(): string;
}
/**
 * Get the direction of the control points while the bezier is connected to the node
 */
export  function getDirection(bounds: Rect, points: PointModel, excludeBounds: boolean): string;
export  function isEmptyVector(element: VectorModel): boolean;
/**
 * Get the bezier points if control points are not given.
 */
export  function getBezierPoints(sourcePoint: PointModel, targetPoint: PointModel, direction?: string): PointModel;
/**
 * Get the bezier curve bounds.
 */
export  function getBezierBounds(startPoint: PointModel, controlPoint1: PointModel, controlPoint2: PointModel, endPoint: PointModel, connector: Connector): Rect;
/**
 * Get the intermediate bezier curve for point over connector
 */
export  function bezierPoints(connector: ConnectorModel, startPoint: PointModel, point1: PointModel, point2: PointModel, endPoint: PointModel, i: number, max: number): PointModel;
/**
 * Defines the behavior of the UMLActivity Classifier multiplicity connection defaults
 */
export  class MultiplicityLabel extends base.ChildProperty<MultiplicityLabel> {
    /**
     * Defines the type of the Classifier Multiplicity
     * @default true
     * @IgnoreSingular
     */
    optional: boolean;
    /**
     * Defines the type of the Classifier Multiplicity
     * @default ''
     * @IgnoreSingular
     */
    lowerBounds: string;
    /**
     * Defines the type of the Classifier Multiplicity
     * @default ''
     * @IgnoreSingular
     */
    upperBounds: string;
}
/**
 * Defines the behavior of the UMLActivity Classifier multiplicity connection defaults
 */
export  class ClassifierMultiplicity extends base.ChildProperty<ClassifierMultiplicity> {
    /**
     * Defines the type of the Classifier Multiplicity
     * @default 'OneToOne'
     * @IgnoreSingular
     */
    type: Multiplicity;
    /**
     * Defines the type of the Classifier Multiplicity
     * @default ''
     * @IgnoreSingular
     */
    target: MultiplicityLabelModel;
    /**
     * Defines the type of the Classifier Multiplicity
     * @default ''
     * @IgnoreSingular
     */
    source: MultiplicityLabelModel;
}
/**
 * Defines the behavior of the UMLActivity shape
 */
export  class RelationShip extends ConnectorShape {
    /**
     * Defines the type of the  UMLConnector
     * @default 'None'
     * @IgnoreSingular
     */
    type: ConnectionShapes;
    /**
     * Defines the association direction
     * @default 'Aggregation'
     * @IgnoreSingular
     */
    relationship: ClassifierShape;
    /**
     * Defines the association direction
     * @default 'Directional'
     * @IgnoreSingular
     */
    associationType: AssociationFlow;
    /**
     * Defines the type of the Classifier Multiplicity
     * @default ''
     * @IgnoreSingular
     */
    multiplicity: ClassifierMultiplicityModel;
}
/**
 * Connectors are used to create links between nodes
 */
export  class Connector extends NodeBase implements IElement {
    /**
     * Defines the shape of the connector
     * @default 'Bpmn'
     * @aspType object
     */
    shape: ConnectorShapeModel | BpmnFlowModel | RelationShipModel;
    /**
     * Defines the constraints of connector
     * * None - Interaction of the connectors cannot be done.
     * * Select - Selects the connector.
     * * Delete - Delete the connector.
     * * Drag - Drag the connector.
     * * DragSourceEnd - Drag the source end of the connector.
     * * DragTargetEnd - Drag the target end of the connector.
     * * DragSegmentThump - Drag the segment thumb of the connector.
     * * AllowDrop - Allow to drop a node.
     * * Bridging - Creates bridge  on intersection of two connectors.
     * * InheritBridging - Creates bridge  on intersection of two connectors.
     * * PointerEvents - Sets the pointer events.
     * * Tooltip - Displays a tooltip for the connectors.
     * * InheritToolTip - Displays a tooltip for the connectors.
     * * Interaction - Features of the connector used for interaction.
     * * ReadOnly - Enables ReadOnly
     * @default 'None'
     * @aspNumberEnum
     * @blazorNumberEnum
     */
    constraints: ConnectorConstraints;
    /**
     * Defines the bridgeSpace of connector
     * @default 10
     */
    bridgeSpace: number;
    /**
     * Defines the collection of textual annotations of connectors
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    /**
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let connectors$: ConnectorModel[] = [{
     *   id: 'connector', type: 'Straight', sourcePoint: { x: 500, y: 100 }, targetPoint: { x: 600, y: 200 },
     * annotations: [{ content: 'No', offset: 0, alignment: 'After' }]
     * ];
     * let diagram$: Diagram = new Diagram({
     * ...
     * connectors: connectors
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     */
    annotations: PathAnnotationModel[];
    /**
     * Sets the beginning point of the connector
     * @default new Point(0,0)
     */
    sourcePoint: PointModel;
    /**
     * Sets the end point of the connector
     * @default new Point(0,0)
     */
    targetPoint: PointModel;
    /**
     * Defines the segments
     * @default []
     * @aspType object
     * @blazorType object
     */
    segments: (OrthogonalSegmentModel | StraightSegmentModel | BezierSegmentModel)[];
    /**
     * Sets the source node/connector object of the connector
     * @default null
     */
    sourceID: string;
    /**
     * Sets the target node/connector object of the connector
     * @default null
     */
    targetID: string;
    /**
     * Sets the connector padding value
     * @default 10
     */
    hitPadding: number;
    /**
     * Defines the type of the connector
     * * Straight - Sets the segment type as Straight
     * * Orthogonal - Sets the segment type as Orthogonal
     * * Bezier - Sets the segment type as Bezier
     * @default 'Straight'
     * @aspType Syncfusion.EJ2.Diagrams.Segments
     * @blazorDefaultValueIgnore
     * @blazorDefaultValue  Syncfusion.EJ2.Blazor.Diagrams.Segments.Straight
     */
    type: Segments;
    /**
     * Sets the corner radius of the connector
     * @default 0
     */
    cornerRadius: number;
    /**
     * Defines the source decorator of the connector
     * @default new Decorator()
     */
    sourceDecorator: DecoratorModel;
    /**
     * Defines the target decorator of the connector
     * @default new Decorator()
     */
    targetDecorator: DecoratorModel;
    /**
     * defines the tooltip for the connector
     * @default new DiagramToolTip();
     */
    tooltip: DiagramTooltipModel;
    /**
     * Sets the unique id of the source port of the connector
     * @default ''
     */
    sourcePortID: string;
    /**
     * Sets the unique id of the target port of the connector
     * @default ''
     */
    targetPortID: string;
    /**
     * Sets the source padding of the connector
     * @default 0
     * @isBlazorNullableType true
     */
    sourcePadding: number;
    /**
     * Sets the target padding of the connector
     * @default 0
     * @isBlazorNullableType true
     */
    targetPadding: number;
    /**
     * Defines the appearance of the connection path
     * @default ''
     */
    style: StrokeStyleModel;
    /** @private */
    parentId: string;
    /**
     * Defines the UI of the connector
     * @default null
     */
    wrapper: Container;
    /** @private */
    bridges: Bridge[];
    /** @private */
    sourceWrapper: DiagramElement;
    /** @private */
    targetWrapper: DiagramElement;
    /** @private */
    sourcePortWrapper: DiagramElement;
    /** @private */
    targetPortWrapper: DiagramElement;
    /** @private */
    intermediatePoints: PointModel[];
    /** @private */
    status: Status;
    constructor(parent: any, propName: string, defaultValue: Object, isArray?: boolean);
    /** @private */
    init(diagram: any): Canvas;
    private getConnectorRelation;
    private getBpmnSequenceFlow;
    /** @private */
    getUMLObjectFlow(): void;
    /** @private */
    getUMLExceptionFlow(segment: PathElement): void;
    private getBpmnAssociationFlow;
    private getBpmnMessageFlow;
    /** @private */
    distance(pt1: PointModel, pt2: PointModel): number;
    /**   @private  */
    findPath(sourcePt: PointModel, targetPt: PointModel): Object;
    /** @private */
    getAnnotationElement(annotation: PathAnnotation, points: PointModel[], bounds: Rect, getDescription: Function | string, diagramId: string): TextElement | DiagramHtmlElement;
    /** @private */
    updateAnnotation(annotation: PathAnnotation, points: PointModel[], bounds: Rect, textElement: TextElement | DiagramHtmlElement, canRefresh?: number): void;
    /** @private */
    getConnectorPoints(type: Segments, points?: PointModel[], layoutOrientation?: LayoutOrientation): PointModel[];
    /** @private */
    private clipDecorator;
    /** @private */
    clipDecorators(connector: Connector, pts: PointModel[]): PointModel[];
    /** @private */
    updateSegmentElement(connector: Connector, points: PointModel[], element: PathElement): PathElement;
    /** @private */
    getSegmentElement(connector: Connector, segmentElement: PathElement, layoutOrientation?: LayoutOrientation): PathElement;
    /** @private */
    getDecoratorElement(offsetPoint: PointModel, adjacentPoint: PointModel, decorator: DecoratorModel, isSource: Boolean, getDescription?: Function): PathElement;
    private bridgePath;
    /** @private */
    updateDecoratorElement(element: DiagramElement, pt: PointModel, adjacentPoint: PointModel, decorator: DecoratorModel): void;
    /** @private */
    getSegmentPath(connector: Connector, points: PointModel[]): string;
    /** @private */
    updateShapeElement(connector: Connector): void;
    /** @private */
    updateShapePosition(connector: Connector, element: DiagramElement): void;
    /** @hidden */
    scale(sw: number, sh: number, width: number, height: number, refObject?: DiagramElement): PointModel;
    /**
     * @private
     * Returns the name of class Connector
     */
    getClassName(): string;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/context-menu.d.ts
/**
 * @private
 */
export  const menuClass: ContextMenuClassList;
/**
 * @private
 */
export interface ContextMenuClassList {
    copy: string;
    paste: string;
    content: string;
    undo: string;
    redo: string;
    cut: string;
    selectAll: string;
    grouping: string;
    group: string;
    unGroup: string;
    bringToFront: string;
    sendToBack: string;
    moveForward: string;
    sendBackward: string;
    order: string;
}
/**
 * 'ContextMenu module used to handle context menu actions.'
 * @private
 */
export  class DiagramContextMenu {
    private element;
    /**   @private  */
    contextMenu: navigations.ContextMenu;
    private defaultItems;
    /**
     * @private
     */
    disableItems: string[];
    /**
     * @private
     */
    hiddenItems: string[];
    private parent;
    private l10n;
    private serviceLocator;
    private localeText;
    private eventArgs;
    /**
     * @private
     */
    isOpen: boolean;
    constructor(parent?: Diagram, service?: ServiceLocator);
    /**
     * @hidden
     * @private
     */
    addEventListener(): void;
    /**
     * @hidden
     * @private
     */
    removeEventListener(): void;
    private render;
    private getMenuItems;
    private contextMenuOpen;
    private BeforeItemRender;
    private contextMenuItemClick;
    private contextMenuOnClose;
    private getLocaleText;
    private updateItemStatus;
    private ensureItems;
    private contextMenuBeforeOpen;
    private ensureTarget;
    /**
     * To destroy the Context menu.
     * @method destroy
     * @return {void}
     * @private
     */
    destroy(): void;
    private getModuleName;
    private generateID;
    private getKeyFromId;
    private buildDefaultItems;
    private getDefaultItems;
    private setLocaleKey;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/dictionary/basic-shapes.d.ts
/**
 * BasicShapeDictionary defines the shape of the built-in basic shapes
 */
/** @private */
export  function getBasicShape(shape: string): string;
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/dictionary/common.d.ts
/**
 * ShapeDictionary defines the shape of the default nodes and ports
 */
/** @private */
export  function getPortShape(shape: PortShapes): string;
/** @private */
export  function getDecoratorShape(shape: DecoratorShapes, decorator: DecoratorModel): string;
/**
 * @private
 * @param icon
 * sets the path data for different icon shapes
 */
export  function getIconShape(icon: IconShapeModel): string;
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/dictionary/flow-shapes.d.ts
/**
 * FlowShapeDictionary defines the shape of the built-in flow shapes
 */
/** @private */
export  function getFlowShape(shape: string): string;
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/dictionary/umlactivity-shapes.d.ts
/**
 * UMLActivityShapeDictionary defines the shape of the built-in uml activity shapes
 */
/** @private */
export  function getUMLActivityShape(shape: string): string;
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/icon-model.d.ts
/**
 * Interface for a class IconShape
 */
export interface IconShapeModel {
    /**
     * Defines the shape of the icon.
     * None
     * Minus - sets the icon shape as minus
     * Plus - sets the icon shape as Plus
     * ArrowUp - sets the icon shape as ArrowUp
     * ArrowDown - sets the icon shape as ArrowDown
     * Template - sets the icon shape based on  the given  custom template
     * Path - sets the icon shape based on the given  custom Path
     * @default 'None'
     */
    shape?: IconShapes;
    /**
     * Sets the fill color of an icon.
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *           id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *           annotations: [{ content: 'Default Shape' }],
     *           expandIcon: { height: 20, width: 20, shape: "ArrowDown", fill: 'red' },
     *           collapseIcon: { height: 20, width: 20, shape: "ArrowUp" },
     *       }];
     * let diagram$: Diagram = new Diagram({
     * ...
     *  nodes: nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default 'white'
     */
    fill?: string;
    /**
     * Defines how the Icon has to be horizontally aligned.
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Left - Aligns the diagram element at the left of its immediate parent
     * * Right - Aligns the diagram element at the right of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Auto'
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Defines how the Icon has to be Vertically aligned.
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Top - Aligns the diagram element at the top of its immediate parent
     * * Bottom - Aligns the diagram element at the bottom of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Auto'
     */
    verticalAlignment?: VerticalAlignment;
    /**
     * Defines the width of the icon.
     * @default 10
     */
    width?: number;
    /**
     * Defines the height of the icon.
     * @default 10
     */
    height?: number;
    /**
     * Defines the offset of the icon.
     * @default new Point(0.5,1)
     */
    offset?: PointModel;
    /**
     * Sets the border color of an icon.
     * @default ''
     */
    borderColor?: string;
    /**
     * Defines the border width of the icon.
     * @default 1
     */
    borderWidth?: number;
    /**
     * Defines the space that the icon has to be moved from its actual position
     * @default new Margin(0,0,0,0)
     */
    margin?: MarginModel;
    /**
     * Defines the geometry of a path
     * @default ''
     */
    pathData?: string;
    /**
     * Defines the custom content of the icon
     * @default ''
     */
    content?: string;
    /**
     * Defines the corner radius of the icon border
     * @default 0
     */
    cornerRadius?: number;
    /**
     * Defines the space that the icon has to be moved from the icon border
     * @default new Margin(2,2,2,2)
     */
    padding?: MarginModel;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/icon.d.ts
/**
 * Defines the behavior of default IconShapes
 */
export  class IconShape extends base.ChildProperty<IconShape> {
    /**
     * Defines the shape of the icon.
     * None
     * Minus - sets the icon shape as minus
     * Plus - sets the icon shape as Plus
     * ArrowUp - sets the icon shape as ArrowUp
     * ArrowDown - sets the icon shape as ArrowDown
     * Template - sets the icon shape based on  the given  custom template
     * Path - sets the icon shape based on the given  custom Path
     * @default 'None'
     */
    shape: IconShapes;
    /**
     * Sets the fill color of an icon.
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *           id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *           annotations: [{ content: 'Default Shape' }],
     *           expandIcon: { height: 20, width: 20, shape: "ArrowDown", fill: 'red' },
     *           collapseIcon: { height: 20, width: 20, shape: "ArrowUp" },
     *       }];
     * let diagram$: Diagram = new Diagram({
     * ...
     *  nodes: nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default 'white'
     */
    fill: string;
    /**
     * Defines how the Icon has to be horizontally aligned.
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Left - Aligns the diagram element at the left of its immediate parent
     * * Right - Aligns the diagram element at the right of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Auto'
     */
    horizontalAlignment: HorizontalAlignment;
    /**
     * Defines how the Icon has to be Vertically aligned.
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Top - Aligns the diagram element at the top of its immediate parent
     * * Bottom - Aligns the diagram element at the bottom of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Auto'
     */
    verticalAlignment: VerticalAlignment;
    /**
     * Defines the width of the icon.
     * @default 10
     */
    width: number;
    /**
     * Defines the height of the icon.
     * @default 10
     */
    height: number;
    /**
     * Defines the offset of the icon.
     * @default new Point(0.5,1)
     */
    offset: PointModel;
    /**
     * Sets the border color of an icon.
     * @default ''
     */
    borderColor: string;
    /**
     * Defines the border width of the icon.
     * @default 1
     */
    borderWidth: number;
    /**
     * Defines the space that the icon has to be moved from its actual position
     * @default new Margin(0,0,0,0)
     */
    margin: MarginModel;
    /**
     * Defines the geometry of a path
     * @default ''
     */
    pathData: string;
    /**
     * Defines the custom content of the icon
     * @default ''
     */
    content: string;
    /**
     * Defines the corner radius of the icon border
     * @default 0
     */
    cornerRadius: number;
    /**
     * Defines the space that the icon has to be moved from the icon border
     * @default new Margin(2,2,2,2)
     */
    padding: MarginModel;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/interface/IElement.d.ts
/**
 * IElement interface defines the base of the diagram objects (node/connector)
 */
export interface IElement {
    /** returns the wrapper of the diagram element */
    wrapper: Container;
    init(diagram: Diagram, getDescription?: Function): void;
}
/**
 * IDataLoadedEventArgs defines the event arguments after data is loaded
 */
export interface IDataLoadedEventArgs {
    /** returns the id of the diagram */
    diagram: Diagram;
}
/**
 * ISelectionChangeEventArgs notifies when the node/connector are select
 *
 */
export interface ISelectionChangeEventArgs {
    /** returns the collection of nodes and connectors that have to be removed from selection list */
    oldValue: (NodeModel | ConnectorModel)[];
    /** returns the collection of nodes and connectors that have to be added to selection list  */
    newValue: (NodeModel | ConnectorModel)[];
    /**
     * Triggers before and after adding the selection to the object
     * in the diagram which can be differentiated through `state` argument.
     * We can cancel the event only before the selection of the object
     */
    state: EventState;
    /** returns the actual cause of the event  */
    cause: DiagramAction;
    /** returns whether the item is added or removed from the selection list  */
    type: ChangeType;
    /** returns whether or not to cancel the selection change event  */
    cancel: boolean;
}
/**
 * IBlazorSelectionChangeEventArgs notifies when the node/connector are select in Blazor
 *
 */
export interface IBlazorSelectionChangeEventArgs {
    /** returns the collection of nodes and connectors that have to be removed from selection list */
    oldValue: DiagramEventObjectCollection;
    /** returns the collection of nodes and connectors that have to be added to selection list  */
    newValue: DiagramEventObjectCollection;
    /**
     * Triggers before and after adding the selection to the object
     * in the diagram which can be differentiated through `state` argument.
     * We can cancel the event only before the selection of the object
     */
    state: EventState;
    /** returns the actual cause of the event  */
    cause: DiagramAction;
    /** returns whether the item is added or removed from the selection list  */
    type: ChangeType;
    /** returns whether or not to cancel the selection change event  */
    cancel: boolean;
}
/**
 * ISizeChangeEventArgs notifies when the node are resized
 *
 */
export interface ISizeChangeEventArgs {
    /** returns the node that is selected for resizing */
    source: SelectorModel;
    /** returns the state of the event */
    state: State;
    /** returns the previous width, height, offsetX and offsetY values of the element that is being resized */
    oldValue: SelectorModel;
    /** returns the new width, height, offsetX and offsetY values of the element that is being resized */
    newValue: SelectorModel;
    /** specify whether or not to cancel the event */
    cancel: boolean;
}
/**
 * IRotationEventArgs notifies when the node/connector are rotated
 *
 */
export interface IRotationEventArgs {
    /** returns the node that is selected for rotation */
    source: SelectorModel;
    /** returns the state of the event */
    state: State;
    /** returns the previous rotation angle */
    oldValue: SelectorModel;
    /** returns the new rotation angle */
    newValue: SelectorModel;
    /** returns whether to cancel the change or not */
    cancel: boolean;
}
/**
 * DiagramCollectionObject is the interface for the diagram objects
 *
 */
export interface DiagramEventObjectCollection {
    /** returns the collection of node  */
    nodes?: NodeModel[];
    /** returns the collection of connector  */
    connectors?: ConnectorModel[];
}
/**
 * DiagramObject is the interface for the diagram object
 *
 */
export interface DiagramEventObject {
    /** returns the  node  */
    node?: NodeModel;
    /** returns the  connector  */
    connector?: ConnectorModel;
}
/**
 * ICollectionChangeEventArgs notifies while the node/connector are added or removed
 *
 */
export interface ICollectionChangeEventArgs {
    /** returns the selected element  */
    element: NodeModel | ConnectorModel;
    /** returns the action of diagram */
    cause: DiagramAction;
    /** returns the state of the event */
    state: EventState;
    /** returns the type of the collection change */
    type: ChangeType;
    /** returns whether to cancel the change or not */
    cancel: boolean;
}
/**
 * IBlazorCollectionChangeEventArgs notifies while the node/connector are added or removed in the diagram
 *
 */
export interface IBlazorCollectionChangeEventArgs {
    /** returns the action of diagram */
    cause: DiagramAction;
    /** returns the state of the event */
    state: EventState;
    /** returns the type of the collection change */
    type: ChangeType;
    /** returns whether to cancel the change or not */
    cancel: boolean;
    /** returns the selected element  */
    element?: DiagramEventObject;
}
/**
 * IBlazorSegmentCollectionChangeEventArgs notifies while the segment of the connectors changes
 *
 */
export interface IBlazorSegmentCollectionChangeEventArgs {
    /** returns the selected element  */
    element: ConnectorModel;
    /** returns the selected element  */
    removeSegments?: OrthogonalSegmentModel[];
    /** returns the action of diagram */
    addSegments?: OrthogonalSegmentModel[];
    /** returns the type of the collection change */
    type: ChangeType;
    /** returns whether to cancel the change or not */
    cancel: boolean;
}
export interface UserHandleEventsArgs {
    /** returns the user handle object */
    element: UserHandleModel;
}
/**
 * ICollectionChangeEventArgs notifies while the node/connector are added or removed
 *
 */
export interface ISegmentCollectionChangeEventArgs {
    /** returns the selected element  */
    element: ConnectorModel;
    /** returns the selected element  */
    removeSegments?: (OrthogonalSegmentModel | StraightSegmentModel | BezierSegmentModel)[];
    /** returns the action of diagram */
    addSegments?: (OrthogonalSegmentModel | StraightSegmentModel | BezierSegmentModel)[];
    /** returns the type of the collection change */
    type: ChangeType;
    /** returns whether to cancel the change or not */
    cancel: boolean;
}
/**
 * IPropertyChangeEventArgs notifies when the node/connector property changed
 *
 */
export interface IPropertyChangeEventArgs {
    /** returns the selected element */
    element: (NodeModel | ConnectorModel | Diagram);
    /** returns the action is nudge or not */
    cause: DiagramAction;
    /** returns the old value of the property that is being changed */
    oldValue: DiagramModel | NodeModel | ConnectorModel;
    /** returns the new value of the node property that is being changed */
    newValue: DiagramModel | NodeModel | ConnectorModel;
}
/**
 * PropertyChangeObject notifies whether it is node or connector
 */
export interface DiagramPropertyChangeObject {
    node?: NodeModel;
    connector?: ConnectorModel;
    diagram?: DiagramModel;
}
/**
 * IBlazorPropertyChangeEventArgs notifies when the node/connector property changed
 *
 */
export interface IBlazorPropertyChangeEventArgs {
    /** returns the selected element */
    element: DiagramPropertyChangeObject;
    /** returns the action is nudge or not */
    cause: DiagramAction;
    /** returns the old value of the property that is being changed */
    oldValue: DiagramPropertyChangeObject;
    /** returns the new value of the node property that is being changed */
    newValue: DiagramPropertyChangeObject;
}
/**
 * IDraggingEventArgs notifies when the node/connector are dragged
 *
 */
export interface IDraggingEventArgs {
    /** returns the node or connector that is being dragged */
    source: SelectorModel;
    /** returns the state of drag event (Starting, dragging, completed) */
    state: State;
    /** returns the previous node or connector that is dragged */
    oldValue: SelectorModel;
    /** returns the current node or connector that is being dragged */
    newValue: SelectorModel;
    /** returns the target node or connector that is dragged */
    target: NodeModel | ConnectorModel;
    /** returns the offset of the selected items */
    targetPosition: PointModel;
    /** returns the object that can be dropped over the element */
    allowDrop: boolean;
    /** returns whether to cancel the change or not */
    cancel: boolean;
}
export interface ConnectorTargetValue {
    nodeId: string;
    portId: string;
}
/**
 * BlazorConnectionObject interface for the connector object
 *
 */
export interface BlazorConnectionObject {
    connector?: ConnectorModel;
    connectorTargetValue?: ConnectorTargetValue;
}
/**
 * IBlazorConnectionChangeEventArgs notifies when the connector are connect or disconnect
 *
 */
export interface IBlazorConnectionChangeEventArgs {
    /** returns the new source node or target node of the connector */
    connector: ConnectorModel;
    /** returns the previous source or target node of the element */
    oldValue: BlazorConnectionObject;
    /** returns the current source or target node of the element */
    newValue: BlazorConnectionObject;
    /** returns the connector end  */
    connectorEnd: string;
    /** returns the state of connection end point dragging(starting, dragging, completed) */
    state: EventState;
    /** returns whether to cancel the change or not */
    cancel: boolean;
}
/**
 * DiagramObject notifies whether it is node or connector
 */
export interface DiagramEventObject {
    node?: NodeModel;
    connector?: ConnectorModel;
}
/**
 * IBlazorDraggingEventArgs notifies when the node/connector are dragged
 */
export interface IBlazorDraggingEventArgs {
    /** returns the node or connector that is being dragged */
    source: SelectorModel;
    /** returns the state of drag event (Starting, dragging, completed) */
    state: State;
    /** returns the previous node or connector that is dragged */
    oldValue: SelectorModel;
    /** returns the current node or connector that is being dragged */
    newValue: SelectorModel;
    /** returns the target node or connector that is dragged */
    target: DiagramEventObject;
    /** returns the offset of the selected items */
    targetPosition: PointModel;
    /** returns the object that can be dropped over the element */
    allowDrop: boolean;
    /** returns whether to cancel the change or not */
    cancel: boolean;
}
/**
 * IConnectionChangeEventArgs notifies when the connector are connect or disconnect
 *
 */
export interface IConnectionChangeEventArgs {
    /** returns the new source node or target node of the connector */
    connector: ConnectorModel;
    /** returns the previous source or target node of the element */
    oldValue: Connector | {
        nodeId: string;
        portId: string;
    };
    /** returns the current source or target node of the element */
    newValue: Connector | {
        nodeId: string;
        portId: string;
    };
    /** returns the connector end  */
    connectorEnd: string;
    /** returns the state of connection end point dragging(starting, dragging, completed) */
    state: EventState;
    /** returns whether to cancel the change or not */
    cancel: boolean;
}
/**
 * IEndChangeEventArgs notifies when the connector end point are resized
 *
 */
export interface IEndChangeEventArgs {
    /** returns the connector, the target point of which is being dragged */
    connector: ConnectorModel;
    /** returns the previous target node of the element */
    oldValue: PointModel;
    /** returns the current target node of the element */
    newValue: PointModel;
    /** returns the target node of the element */
    targetNode: string;
    /** returns the target port of the element */
    targetPort: string;
    /** returns the state of connection end point dragging(starting, dragging, completed) */
    state: State;
    /** returns whether to cancel the change or not */
    cancel: boolean;
}
/**
 * Animation notifies when the animation is take place
 *
 */
export interface Animation {
    /** returns the current animation status */
    state: State;
}
/**
 * IClickEventArgs notifies while click on the objects or diagram
 *
 */
export interface IClickEventArgs {
    /** returns the object that is clicked or id of the diagram */
    element: SelectorModel | Diagram;
    /** returns the object position that is actually clicked */
    position: PointModel;
    /** returns the number of times clicked */
    count: number;
    /** returns the actual object that is clicked or id of the diagram */
    actualObject: SelectorModel | Diagram;
}
/**
 * IBlazorClickEventArgs notifies while click on the objects or diagram
 *
 */
export interface IBlazorClickEventArgs {
    /** returns the object that is clicked or id of the diagram */
    element: DiagramClickEventObject;
    /** returns the object position that is actually clicked */
    position: PointModel;
    /** returns the number of times clicked */
    count: number;
    /** returns the actual object that is clicked or id of the diagram */
    actualObject: DiagramClickEventObject;
}
/**
 * IDoubleClickEventArgs notifies while double click on the diagram or its objects
 *
 */
export interface IDoubleClickEventArgs {
    /** returns the object that is clicked or id of the diagram */
    source: SelectorModel | Diagram;
    /** returns the object position that is actually clicked */
    position: PointModel;
    /** returns the number of times clicked */
    count: number;
}
/**
 * ClickedObject notifies whether it is node or connector
 */
export interface DiagramClickEventObject {
    selector?: SelectorModel;
    diagram?: Diagram;
}
/**
 * IDoubleClickEventArgs notifies while double click on the diagram or its objects
 *
 */
export interface IBlazorDoubleClickEventArgs {
    /** returns the object that is clicked or id of the diagram */
    source: DiagramClickEventObject;
    /** returns the object position that is actually clicked */
    position: PointModel;
    /** returns the number of times clicked */
    count: number;
}
export interface IMouseEventArgs {
    /** returns a parent node of the target node or connector */
    element: NodeModel | ConnectorModel | SelectorModel;
    /** returns when mouse hover to the target node or connector */
    actualObject: Object;
    /** returns the target object over which the selected object is dragged */
    targets: (NodeModel | ConnectorModel)[];
}
/**
 * MouseEventElement notifies whether it is node or connector or selector model
 */
export interface DiagramMouseEventObject {
    node?: NodeModel;
    connector?: ConnectorModel;
    selector?: SelectorModel;
}
/**
 * MouseEventElement notifies whether it is node or connector or selector model
 */
export interface DiagramEventObjectCollection {
    node?: NodeModel[];
    connector?: ConnectorModel[];
}
export interface IBlazorMouseEventArgs {
    /** returns a parent node of the target node or connector */
    element: DiagramMouseEventObject;
    /** returns when mouse hover to the target node or connector */
    actualObject: Object;
    /** returns the target object over which the selected object is dragged */
    targets: DiagramEventObjectCollection;
}
/**
 * scrollArgs notifies when the scroller had updated
 *
 */
export interface ScrollValues {
    /** returns the horizontaloffset of the scroller */
    HorizontalOffset: number;
    /** returns the verticalOffset of the scroller */
    VerticalOffset: number;
    /** returns the CurrentZoom of the scroller */
    CurrentZoom: number;
    /** returns the ViewportWidth of the scroller */
    ViewportWidth: number;
    /** returns the ViewportHeight of the scroller */
    ViewportHeight: number;
}
/**
 * IBlazorScrollChangeEventArgs notifies when the scroller has changed
 *
 */
export interface IBlazorScrollChangeEventArgs {
    /** returns the object that is clicked or id of the diagram */
    source: Diagram;
    /** returns the previous delay value between subsequent auto scrolls */
    oldValue: ScrollValues;
    /** returns the new delay value between subsequent auto scrolls */
    newValue: ScrollValues;
}
/**
 * IScrollChangeEventArgs notifies when the scroller has changed
 *
 */
export interface IScrollChangeEventArgs {
    /** returns the object that is clicked or id of the diagram */
    source: SelectorModel | Diagram;
    /** returns the previous delay value between subsequent auto scrolls */
    oldValue: ScrollValues;
    /** returns the new delay value between subsequent auto scrolls */
    newValue: ScrollValues;
}
/**
 * IPaletteSelectionChangeArgs notifies when the selection objects change in the symbol palette
 *
 */
export interface IPaletteSelectionChangeArgs {
    /** returns the old palette item that is selected */
    oldValue: string;
    /** returns the new palette item that is selected */
    newValue: string;
}
/**
 * IDragEnterEventArgs notifies when the element enter into the diagram from symbol palette
 *
 */
export interface IDragEnterEventArgs {
    /** returns the node or connector that is to be dragged into diagram */
    source: Object;
    /** returns the node or connector that is dragged into diagram */
    element: NodeModel | ConnectorModel;
    /** returns the id of the diagram */
    diagram: DiagramModel;
    /** parameter returns whether to add or remove the symbol from diagram */
    cancel: boolean;
}
/**
 * IBlazorDragEnterEventArgs notifies when the element enter into the diagram from symbol palette
 *
 */
export interface IBlazorDragEnterEventArgs {
    /** returns the node or connector that is to be dragged into diagram */
    source: Object;
    /** returns the node or connector that is dragged into diagram */
    element: DiagramEventObject;
    /** returns the id of the diagram */
    diagram: DiagramModel;
    /** parameter returns whether to add or remove the symbol from diagram */
    cancel: boolean;
}
/**
 * IDragLeaveEventArgs notifies when the element leaves from  the diagram
 *
 */
export interface IDragLeaveEventArgs {
    /** returns the id of the diagram */
    diagram: DiagramModel;
    /** returns the node or connector that is dragged outside of the diagram */
    element: SelectorModel;
}
/**
 * IDragOverEventArgs notifies when an element drag over another diagram element
 *
 */
export interface IDragOverEventArgs {
    /** returns the id of the diagram */
    diagram: DiagramModel;
    /** returns the node or connector that is dragged over diagram */
    element: SelectorModel;
    /** returns the node/connector over which the symbol is dragged */
    target: SelectorModel;
    /** returns the mouse position of the node/connector */
    mousePosition: PointModel;
}
/**
 * ITextEditEventArgs notifies when the label of an element under goes editing
 */
export interface ITextEditEventArgs {
    /** returns the old text value of the element */
    oldValue: string;
    /** returns the new text value of the element that is being changed */
    newValue: string;
    /** returns whether or not to cancel the event */
    cancel: boolean;
}
/**
 * IBlazorHistoryChangeArgs notifies while the node/connector are added or removed
 *
 */
export interface IBlazorHistoryChangeArgs {
    /** returns an array of objects, where each object represents the changes made in last undo/redo */
    change: SelectorModel;
    /** returns the cause of the event */
    cause: string;
    /** returns a collection of objects that are changed in the last undo/redo */
    source?: DiagramEventObjectCollection;
}
/**
 * IHistoryChangeArgs notifies when the label of an element under goes editing
 *
 */
export interface IHistoryChangeArgs {
    /** returns a collection of objects that are changed in the last undo/redo */
    source: (NodeModel | ConnectorModel)[];
    /** returns an array of objects, where each object represents the changes made in last undo/redo */
    change: SelectorModel;
    /** returns the cause of the event */
    cause: string;
}
/**
 * ICustomHistoryChangeArgs notifies when the label of an element under goes editing
 *
 */
export interface ICustomHistoryChangeArgs {
    /** returns the type of the entry that means undo or redo */
    entryType: string;
    /** returns a collection of objects that are changed in the last undo/redo */
    oldValue: NodeModel | ConnectorModel | SelectorModel | DiagramModel | ShapeAnnotation | PathAnnotation | PointPortModel;
    /** returns an array of objects, where each object represents the changes made in last undo/redo */
    newValue: NodeModel | ConnectorModel | SelectorModel | DiagramModel | ShapeAnnotation | PathAnnotation | PointPortModel;
}
/**
 * ICustomHistoryChangeArgs notifies when the label of an element under goes editing
 *
 */
export interface IBlazorCustomHistoryChangeArgs {
    /** returns the type of the entry that means undo or redo */
    entryType: string;
    /** returns a collection of objects that are changed in the last undo/redo */
    oldValue: HistoryChangeEventObject;
    /** returns an array of objects, where each object represents the changes made in last undo/redo */
    newValue: HistoryChangeEventObject;
}
export interface HistoryChangeEventObject {
    /** returns a node objects  */
    node?: Node;
    /** returns a connector objects  */
    connector?: ConnectorModel;
    /** returns a selector objects  */
    selector?: SelectorModel;
    /** returns a diagram objects  */
    diagram?: DiagramModel;
    /** returns a shape annotation objects  */
    shapeAnnotation?: ShapeAnnotation;
    /** returns a path annotation objects  */
    pathAnnotation?: PathAnnotation;
    /** returns port objects  */
    pointPortModel?: PointPortModel;
    /** returns the custom objects  */
    object?: object;
}
/**
 * DiagramDropObject notifies when the element is dropped in the diagram in blazor
 *
 */
export interface DiagramEventDropObject {
    /** returns a node objects  */
    node?: NodeModel;
    /** returns a connector objects  */
    connector?: ConnectorModel;
    /** returns a diagram objects  */
    diagram?: DiagramModel;
}
/**
 * IBlazorDropEventArgs notifies when the element is dropped in the diagram in blazor
 *
 */
export interface IBlazorDropEventArgs {
    /** returns node or connector that is being dropped */
    element: DiagramEventObject;
    /** returns the object from where the element is dragged */
    source?: Object;
    /** returns the object over which the object will be dropped */
    target: DiagramEventDropObject;
    /** returns the position of the object */
    position: PointModel;
    /** returns whether or not to cancel the drop event */
    cancel: boolean;
}
/**
 * IDropEventArgs notifies when the element is dropped in the diagram
 *
 */
export interface IDropEventArgs {
    /** returns node or connector that is being dropped */
    element: NodeModel | ConnectorModel | SelectorModel;
    /** returns the object from where the element is dragged */
    source?: Object;
    /** returns the object over which the object will be dropped */
    target: NodeModel | ConnectorModel | DiagramModel;
    /** returns the position of the object */
    position: PointModel;
    /** returns whether or not to cancel the drop event */
    cancel: boolean;
}
/**
 * Interface for command
 */
export interface ICommandExecuteEventArgs {
    gesture: KeyGestureModel;
}
/** @private */
export interface StackEntryObject {
    targetIndex?: number;
    target?: NodeModel;
    sourceIndex?: number;
    source?: NodeModel;
}
/**
 * IExpandStateChangeEventArgs notifies when the icon is changed
 */
export interface IExpandStateChangeEventArgs {
    /** returns node that is being changed the icon */
    element?: NodeModel;
    /** returns whether or not to expanded */
    state?: boolean;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/interface/interfaces.d.ts
/**
 * Defines the context menu item model.
 */
export interface ContextMenuItemModel extends navigations.MenuItemModel {
    /**
     * Define the target to show the menu item.
     */
    target?: string;
}
export interface ZoomOptions {
    /**
     * Sets the factor by which we can zoom in or zoom out
     */
    zoomFactor?: number;
    /** Allows to read the focus value of diagram */
    focusPoint?: PointModel;
    /** Defines the zoom type as zoomIn or ZoomOut */
    type?: ZoomTypes;
}
/**
 * Defines the intensity of the color as an integer between 0 and 255.
 */
export interface ColorValue {
    /**
     * Defines the intensity of the red color as an integer between 0 and 255.
     */
    r?: number;
    /**
     * Defines the intensity of the green color as an integer between 0 and 255.
     */
    g?: number;
    /**
     * Defines the intensity of the blue color as an integer between 0 and 255.
     */
    b?: number;
}
/**
 * Defines the options to export diagrams
 */
export interface IPrintOptions {
    /**
     * Sets the width of the page to be printed
     * @default null
     */
    pageWidth?: number;
    /**
     * Sets the height of the page to be printed
     * @default null
     */
    pageHeight?: number;
    /**
     * Sets the margin of the page to be printed
     * @default new Margin(0,0,0,0)
     */
    margin?: MarginModel;
    /**
     * Sets the orientation of the page to be printed
     *  * Landscape - Display with page Width is more than the page Height.
     *  * Portrait - Display with page Height is more than the page width.
     * @default 'Landscape'
     */
    pageOrientation?: PageOrientation;
    /**
     * Defines whether the diagram has to be exported as single or multiple images
     * @default false
     */
    multiplePage?: boolean;
    /**
     * Sets the region for the print settings
     * * PageSettings - The region to be exported/printed will be based on the given page settings
     * * Content - Only the content of the diagram control will be exported
     * * CustomBounds - The region to be exported will be explicitly defined
     * @default 'PageSettings'
     */
    region?: DiagramRegions;
    /**
     * Sets the aspect ratio  of the exported image
     * * None - Sets the stretch type for diagram as None
     * * Stretch - Sets the stretch type for diagram as Stretch
     * * Meet - Sets the stretch type for diagram as Meet
     * * Slice - Sets the stretch type for diagram as Slice
     * @default Stretch
     */
    stretch?: Stretch;
}
/**
 * Defines the options to export diagrams
 */
export interface IExportOptions extends IPrintOptions {
    /**
     * Sets the file name of the exported image
     * @default('')
     */
    fileName?: string;
    /**
     * Sets the file format to save the file
     * * JPG - Save the file in JPG Format
     * * PNG - Saves the file in PNG Format
     * * BMP - Save the file in BMP Format
     * * SVG - save the file in SVG format
     * @default('')
     */
    format?: FileFormats;
    /**
     * Sets the Mode for the file to be downloaded
     * * Download - Downloads the diagram as image
     * * Data - Sends the diagram as ImageUrl
     * @default('')
     */
    mode?: ExportModes;
    /**
     * Sets the region that has to be exported
     * @default (0)
     */
    bounds?: Rect;
    /**
     * Sets the printOptions that has to be printed
     * @default false
     */
    printOptions?: boolean;
}
/** Interface to cancel the diagram context menu click event */
export interface DiagramMenuEventArgs extends navigations.MenuEventArgs {
    cancel?: boolean;
    /**
     * @blazorType Syncfusion.EJ2.Blazor.Navigations.navigations.MenuItemModel
     */
    item: navigations.MenuItemModel;
}
/** Defines the event before opening the context menu */
export interface DiagramBeforeMenuOpenEventArgs extends navigations.BeforeOpenCloseMenuEventArgs {
    /** Defines the hidden items of the diagram context menu */
    hiddenItems: string[];
    /**
     * @blazorType List<Syncfusion.EJ2.Blazor.Navigations.navigations.MenuItemModel>
     */
    items: navigations.MenuItemModel[];
    /**
     * @blazorType Syncfusion.EJ2.Blazor.Navigations.navigations.MenuItemModel
     */
    parentItem: navigations.MenuItemModel;
}
/**
 * Defines how the diagram has to be fit into the viewport
 */
export interface IFitOptions {
    /**
     * Defines whether the diagram has to be horizontally/vertically fit into the viewport
     */
    mode?: FitModes;
    /**
     * Defines the region that has to be fit into the viewport
     */
    region?: DiagramRegions;
    /**
     * Defines the space to be left between the viewport and the content
     */
    margin?: MarginModel;
    /**
     * Enables/Disables zooming to fit the smaller content into larger viewport
     */
    canZoomIn?: boolean;
    /**
     * Defines the custom region that has to be fit into the viewport
     */
    customBounds?: Rect;
}
/** @private */
export interface ITouches {
    pageX?: number;
    pageY?: number;
    pointerId?: number;
}
/** @private */
export interface View {
    mode: RenderingMode;
    removeDocument: Function;
    updateView: Function;
    updateHtmlLayer: Function;
    renderDocument: Function;
    element: HTMLElement;
    contentWidth?: number;
    contentHeight?: number;
    diagramLayer: HTMLCanvasElement | SVGGElement;
    id: string;
    diagramRenderer: DiagramRenderer;
}
/** @private */
export interface ActiveLabel {
    id: string;
    parentId: string;
    isGroup: boolean;
    text: string;
}
/** @private */
export interface IDataSource {
    dataSource: object;
    isBinding: boolean;
    nodes: NodeModel[];
    connectors: ConnectorModel[];
}
/** @private */
export interface IFields {
    id: string;
    sourceID: string;
    targetID: string;
    sourcePointX: number;
    sourcePointY: number;
    targetPointX: number;
    targetPointY: number;
    crudAction: {
        customFields: string[];
    };
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/layout-animation.d.ts
/**
 * Layout Animation function to enable or disable layout animation
 */
export  class LayoutAnimation {
    private protectChange;
    /**
     * Layout expand function for animation of expand and collapse
     */
    expand(animation: boolean, objects: ILayout, node: Node, diagram: Diagram): void;
    /**
     * Setinterval and Clear interval for layout animation
     */
    /** @private */
    layoutAnimation(objValue: ILayout, layoutTimer: Object, stop: boolean, diagram: Diagram, node?: NodeModel): void;
    /**
     * update the node opacity for the node and connector once the layout animation starts
     */
    updateOpacity(source: Node, value: number, diagram: Diagram): void;
    /**
     * To destroy the  LayoutAnimate module
     * @return {void}
     * @private
     */
    destroy(): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/node-base-model.d.ts
/**
 * Interface for a class NodeBase
 */
export interface NodeBaseModel {
    /**
     * Represents the unique id of nodes/connectors
     * @default ''
     */
    id?: string;
    /**
     * Defines the visual order of the node/connector in DOM
     * @default -1
     */
    zIndex?: number;
    /**
     * Defines the space to be left between the node and its immediate parent
     * @default {}
     */
    margin?: MarginModel;
    /**
     * Sets the visibility of the node/connector
     * @default true
     */
    visible?: boolean;
    /**
     * Defines the collection of connection points of nodes/connectors
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    ports?: PointPortModel[];
    /**
     * Defines whether the node is expanded or not
     * @default true
     */
    isExpanded?: boolean;
    /**
     * defines the tooltip for the node
     * @default {}
     */
    tooltip?: DiagramTooltipModel;
    /**
     * Defines the expanded state of a node
     * @default {}
     */
    expandIcon?: IconShapeModel;
    /**
     * Defines the collapsed state of a node
     * @default {}
     */
    collapseIcon?: IconShapeModel;
    /**
     * Defines whether the node should be automatically positioned or not. Applicable, if layout option is enabled.
     * @default false
     */
    excludeFromLayout?: boolean;
    /**
     * Allows the user to save custom information/data about a node/connector
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    addInfo?: Object;
    /**
     * Flip the element in Horizontal/Vertical directions
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default None
     */
    flip?: FlipDirection;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/node-base.d.ts
/**
 * Defines the common behavior of nodes, connectors and groups
 */
export  abstract class NodeBase extends base.ChildProperty<NodeBase> {
    /**
     * Represents the unique id of nodes/connectors
     * @default ''
     */
    id: string;
    /**
     * Defines the visual order of the node/connector in DOM
     * @default -1
     */
    zIndex: number;
    /**
     * Defines the space to be left between the node and its immediate parent
     * @default {}
     */
    margin: MarginModel;
    /**
     * Sets the visibility of the node/connector
     * @default true
     */
    visible: boolean;
    /**
     * Defines the collection of connection points of nodes/connectors
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    ports: PointPortModel[];
    /**
     * Defines whether the node is expanded or not
     * @default true
     */
    isExpanded: boolean;
    /**
     * defines the tooltip for the node
     * @default {}
     */
    tooltip: DiagramTooltipModel;
    /**
     * Defines the expanded state of a node
     * @default {}
     */
    expandIcon: IconShapeModel;
    /**
     * Defines the collapsed state of a node
     * @default {}
     */
    collapseIcon: IconShapeModel;
    /**
     * Defines whether the node should be automatically positioned or not. Applicable, if layout option is enabled.
     * @default false
     */
    excludeFromLayout: boolean;
    /**
     * Allows the user to save custom information/data about a node/connector
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    addInfo: Object;
    /**
     * Flip the element in Horizontal/Vertical directions
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default None
     */
    flip: FlipDirection;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/node-model.d.ts
/**
 * Interface for a class Shape
 */
export interface ShapeModel {
    /**
     * Defines the type of node shape
     * * Path - Sets the type of the node as Path
     * * Text - Sets the type of the node as Text
     * * Image - Sets the type of the node as Image
     * * Basic - Sets the type of the node as Basic
     * * Flow - Sets the type of the node as Flow
     * * Bpmn - Sets the type of the node as Bpmn
     * * Native - Sets the type of the node as Native
     * * HTML - Sets the type of the node as HTML
     * * UMLActivity - Sets the type of the node as UMLActivity
     * @default 'Basic'
     */
    type?: Shapes;
}
/**
 * Interface for a class Path
 */
export interface PathModel extends ShapeModel{
    /**
     * Defines the type of node shape
     * @default 'Basic'
     */
    type?: Shapes;
    /**
     * Defines the geometry of a path
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     * id: 'node1', width: 100, height: 100, offsetX: 300, offsetY: 100,
     *   shape: { type: 'Path', data: 'M540.3643,137.9336L546.7973,159.7016L570.3633,159.7296'+
     *   'L550.7723,171.9366L558.9053,194.9966L540.3643,179.4996L521.8223,194.9966L529.9553,171.9366'+
     *   'L510.3633,159.7296L533.9313,159.7016L540.3643,137.9336z' }
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes: nodes
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default ''
     */
    data?: string;
}
/**
 * Interface for a class Native
 */
export interface NativeModel extends ShapeModel{
    /**
     * Defines the type of node shape.
     * @default 'Basic'
     */
    type?: Shapes;
    /**
     * Defines the geometry of a native element.
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     * id: 'node1', width: 100, height: 100,
     * shape: { scale: 'Stretch', 
     *   type: 'Native', content: '<g><path d='M90,43.841c0,24.213-19.779,43.841-44.182,43.841c-7.747,0-15.025-1.98-21.357-5.455'+
     * 'L0,90l7.975-23.522' +
     * 'c-4.023-6.606-6.34-14.354-6.34-22.637C1.635,19.628,21.416,0,45.818,0C70.223,0,90,19.628,90,43.841z M45.818,6.982' +
     * 'c-20.484,0-37.146,16.535-37.146,36.859c0,8.065,2.629,15.534,7.076,21.61L11.107,79.14l14.275-4.537' +
     * 'c5.865,3.851,12.891,6.097,20.437,6.097c20.481,0,37.146-16.533,37.146-36.857S66.301,6.982,45.818,6.982z M68.129,53.938' +
     * 'c-0.273-0.447-0.994-0.717-2.076-1.254c-1.084-0.537-6.41-3.138-7.4-3.495c-0.993-0.358-1.717-0.538-2.438,0.537' +
     * 'c-0.721,1.076-2.797,3.495-3.43,4.212c-0.632,0.719-1.263,0.809-2.347,0.271c-1.082-0.537-4.571-1.673-8.708-5.333' +
     * 'c-3.219-2.848-5.393-6.364-6.025-7.441c-0.631-1.075-0.066-1.656,0.475-2.191c0.488-0.482,1.084-1.255,1.625-1.882' +
     * 'c0.543-0.628,0.723-1.075,1.082-1.793c0.363-0.717,0.182-1.344-0.09-1.883c-0.27-0.537-2.438-5.825-3.34-7.977' +
     * 'c-0.902-2.15-1.803-1.792-2.436-1.792c-0.631,0-1.354-0.09-2.076-0.09c-0.722,0-1.896,0.269-2.889,1.344' +
     * 'c-0.992,1.076-3.789,3.676-3.789,8.963c0,5.288,3.879,10.397,4.422,11.113c0.541,0.716,7.49,11.92,18.5,16.223' +
     * 'C58.2,65.771,58.2,64.336,60.186,64.156c1.984-0.179,6.406-2.599,7.312-5.107C68.398,56.537,68.398,54.386,68.129,53.938z'>'+
     * '</path></g>',
     *        }
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes: nodes
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default ''
     */
    content?: string | SVGElement;
    /**
     * Defines the scale of the native element.
     * * None - Sets the stretch type for diagram as None
     * * Stretch - Sets the stretch type for diagram as Stretch
     * * Meet - Sets the stretch type for diagram as Meet
     * * Slice - Sets the stretch type for diagram as Slice
     * @default 'Stretch'
     */
    scale?: Stretch;
}
/**
 * Interface for a class Html
 */
export interface HtmlModel extends ShapeModel{
    /**
     * Defines the type of node shape.
     * @default 'Basic'
     */
    type?: Shapes;
    /**
     * Defines the geometry of a html element.
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     * id: 'node1', width: 100, height: 100, offsetX: 300, offsetY: 100,
     * shape: { type: 'HTML', 
     * content: '<div style='background:red;
height:100%;
width:100%;
'><input type='button' value='{{:value}}' /></div>' }
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes: nodes
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default ''
     */
    content?: string | HTMLElement;
}
/**
 * Interface for a class Image
 */
export interface ImageModel extends ShapeModel{
    /**
     * Defines the type of node shape
     * @default 'Basic'
     */
    type?: Shapes;
    /**
     * Defines the source of the image
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     * id: 'node1', width: 100, height: 100, offsetX: 300, offsetY: 100,
     * shape: { type: 'Image', source: 'https://www.w3schools.com/images/w3schools_green.jpg' }
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes: nodes
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default ''
     */
    source?: string;
    /**
     * Allows to stretch the image as you desired (either to maintain proportion or to stretch)
     * * None - Scale value will be set as None for the image
     * * Meet - Scale value Meet will be set for the image
     * * Slice - Scale value Slice will be set for the image
     * @default 'None'
     */
    scale?: Scale;
    /**
     * Defines the alignment of the image within the node boundary.
     * * None - Alignment value will be set as none
     * * XMinYMin - smallest X value of the view port and  smallest Y value of the view port
     * * XMidYMin - midpoint X value of the view port and  smallest Y value of the view port
     * * XMaxYMin - maximum X value of the view port and  smallest Y value of the view port
     * * XMinYMid - smallest X value of the view port and midpoint Y value of the view port
     * * XMidYMid - midpoint X value of the view port and midpoint Y value of the view port
     * * XMaxYMid - maximum X value of the view port and midpoint Y value of the view port
     * * XMinYMax - smallest X value of the view port and maximum Y value of the view port
     * * XMidYMax - midpoint X value of the view port and maximum Y value of the view port
     * * XMaxYMax - maximum X value of the view port and maximum Y value of the view port
     * @default 'None'
     */
    align?: ImageAlignment;
}
/**
 * Interface for a class Text
 */
export interface TextModel extends ShapeModel{
    /**
     * Defines the type of node shape
     * @default 'Basic'
     */
    type?: Shapes;
    /**
     * Defines the content of a text
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     * id: 'node1', width: 100, height: 100, offsetX: 300, offsetY: 100,
     * shape: { type: 'Text', content: 'Text Element' }
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes: nodes
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default ''
     */
    content?: string;
    /**
     * Defines the space to be let between the node and its immediate parent
     * @default 0
     */
    margin?: MarginModel;
}
/**
 * Interface for a class BasicShape
 */
export interface BasicShapeModel extends ShapeModel{
    /**
     * Defines the type of node shape
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let shape: BasicShapeModel = { type: 'Basic', shape: 'Rectangle' };
     * let nodes$: NodeModel[] = [{
     * id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100, shape: shape
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default 'Basic'
     */
    type?: Shapes;
    /**
     * Defines the type of the basic shape
     * * Rectangle - Sets the type of the basic shape as Rectangle
     * * Ellipse - Sets the type of the basic shape as Ellipse
     * * Hexagon - Sets the type of the basic shape as Hexagon
     * * Parallelogram - Sets the type of the basic shape as Parallelogram
     * * Triangle - Sets the type of the basic shape as Triangle
     * * Plus - Sets the type of the basic shape as Plus
     * * Star - Sets the type of the basic shape as Star
     * * Pentagon - Sets the type of the basic shape as Pentagon
     * * Heptagon - Sets the type of the basic shape as Heptagon
     * * Octagon - Sets the type of the basic shape as Octagon
     * * Trapezoid - Sets the type of the basic shape as Trapezoid
     * * Decagon - Sets the type of the basic shape as Decagon
     * * RightTriangle - Sets the type of the basic shape as RightTriangle
     * * Cylinder - Sets the type of the basic shape as Cylinder
     * * Diamond - Sets the type of the basic shape as Diamond
     * @default 'Rectangle'
     */
    shape?: BasicShapes;
    /**
     * Sets the corner of the node
     * @default 0
     */
    cornerRadius?: number;
    /**
     * Defines the collection of points to draw a polygon
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    points?: PointModel[];
}
/**
 * Interface for a class FlowShape
 */
export interface FlowShapeModel extends ShapeModel{
    /**
     * Defines the type of node shape
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     * id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *     shape: { type: 'Flow', shape: 'Terminator' },
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default 'Basic'
     */
    type?: Shapes;
    /**
     * Defines the type of the flow shape
     * * Process - Sets the type of the flow shape as Process
     * * Decision - Sets the type of the flow shape as Decision
     * * Document - Sets the type of the flow shape as Document
     * * PreDefinedProcess - Sets the type of the flow shape as PreDefinedProcess
     * * Terminator - Sets the type of the flow shape as Terminator
     * * PaperTap - Sets the type of the flow shape as PaperTap
     * * DirectData - Sets the type of the flow shape as DirectData
     * * SequentialData - Sets the type of the flow shape as SequentialData
     * * MultiData - Sets the type of the flow shape as MultiData
     * * Collate - Sets the type of the flow shape as Collate
     * * SummingJunction - Sets the type of the flow shape as SummingJunction
     * * Or - Sets the type of the flow shape as Or
     * * InternalStorage - Sets the type of the flow shape as InternalStorage
     * * Extract - Sets the type of the flow shape as Extract
     * * ManualOperation - Sets the type of the flow shape as ManualOperation
     * * Merge - Sets the type of the flow shape as Merge
     * * OffPageReference - Sets the type of the flow shape as OffPageReference
     * * SequentialAccessStorage - Sets the type of the flow shape as SequentialAccessStorage
     * * Annotation - Sets the type of the flow shape as Annotation
     * * Annotation2 - Sets the type of the flow shape as Annotation2
     * * Data - Sets the type of the flow shape as Data
     * * Card - Sets the type of the flow shape as Card
     * * Delay - Sets the type of the flow shape as Delay
     * * Preparation - Sets the type of the flow shape as Preparation
     * * Display - Sets the type of the flow shape as Display
     * * ManualInput - Sets the type of the flow shape as ManualInput
     * * LoopLimit - Sets the type of the flow shape as LoopLimit
     * * StoredData - Sets the type of the flow shape as StoredData
     * @default 'Terminator'
     */
    shape?: FlowShapes;
}
/**
 * Interface for a class BpmnGateway
 */
export interface BpmnGatewayModel {
    /**
     * Defines the type of the BPMN Gateway
     * * None - Sets the type of the gateway as None
     * * Exclusive - Sets the type of the gateway as Exclusive
     * * Inclusive - Sets the type of the gateway as Inclusive
     * * base.Complex - Sets the type of the gateway as base.Complex
     * * EventBased - Sets the type of the gateway as EventBased
     * * ExclusiveEventBased - Sets the type of the gateway as ExclusiveEventBased
     * * ParallelEventBased - Sets the type of the gateway as ParallelEventBased
     * @default 'None'
     */
    type?: BpmnGateways;
}
/**
 * Interface for a class BpmnDataObject
 */
export interface BpmnDataObjectModel {
    /**
     * Defines the type of the BPMN data object
     * * None - Sets the type of the data object as None
     * * Input - Sets the type of the data object as Input
     * * Output - Sets the type of the data object as Output
     * @default 'None'
     */
    type?: BpmnDataObjects;
    /**
     * Sets whether the data object is a collection or not
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *  id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *  shape: {
     *   type: 'Bpmn', shape: 'DataObject',
     *   dataObject: { collection: false, type: 'Input' }
     *         } as BpmnShapeModel,
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default false
     */
    collection?: boolean;
}
/**
 * Interface for a class BpmnTask
 */
export interface BpmnTaskModel {
    /**
     * Defines the type of the task
     * * None - Sets the type of the Bpmn Tasks as None
     * * Service - Sets the type of the Bpmn Tasks as Service
     * * Receive - Sets the type of the Bpmn Tasks as Receive
     * * Send - Sets the type of the Bpmn Tasks as Send
     * * InstantiatingReceive - Sets the type of the Bpmn Tasks as InstantiatingReceive
     * * Manual - Sets the type of the Bpmn Tasks as Manual
     * * BusinessRule - Sets the type of the Bpmn Tasks as BusinessRule
     * * User - Sets the type of the Bpmn Tasks as User
     * * Script - Sets the type of the Bpmn Tasks as Script
     * @default 'None'
     */
    type?: BpmnTasks;
    /**
     * Defines the type of the BPMN loops
     * * None - Sets the type of the Bpmn loop as None
     * * Standard - Sets the type of the Bpmn loop as Standard
     * * ParallelMultiInstance - Sets the type of the Bpmn loop as ParallelMultiInstance
     * * SequenceMultiInstance - Sets the type of the Bpmn loop as SequenceMultiInstance
     * @default 'None'
     */
    loop?: BpmnLoops;
    /**
     * Sets whether the task is global or not
     * @default false
     */
    call?: boolean;
    /**
     * Sets whether the task is triggered as a compensation of another specific activity
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *  id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *  shape: {
     *   type: 'Bpmn', shape: 'Activity', activity: {
     *       activity: 'Task',
     *       task: { call: true, compensation: false, type: 'Service', loop: 'ParallelMultiInstance' }
     *   }} as BpmnShapeModel,
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default false
     */
    compensation?: boolean;
}
/**
 * Interface for a class BpmnEvent
 */
export interface BpmnEventModel {
    /**
     * 
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *  id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *  shape: {
     *  type: 'Bpmn', shape: 'Event',
     *   event: { event: 'Start', trigger: 'None' } } as BpmnShapeModel,
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     */
    event?: BpmnEvents;
    /**
     * Defines the type of the trigger
     * * None - Sets the type of the trigger as None
     * * Message - Sets the type of the trigger as Message
     * * Escalation - Sets the type of the trigger as Escalation
     * * Link - Sets the type of the trigger as Link
     * * Error - Sets the type of the trigger as Error
     * * Compensation - Sets the type of the trigger as Compensation
     * * Signal - Sets the type of the trigger as Signal
     * * Multiple - Sets the type of the trigger as Multiple
     * * Parallel - Sets the type of the trigger as Parallel
     * * Cancel - Sets the type of the trigger as Cancel
     * * Conditional - Sets the type of the trigger as Conditional
     * * Terminate - Sets the type of the trigger as Terminate
     * @default 'None'
     */
    trigger?: BpmnTriggers;
}
/**
 * Interface for a class BpmnSubEvent
 */
export interface BpmnSubEventModel {
    /**
     * Defines the type of the trigger
     * * None - Sets the type of the trigger as None
     * * Message - Sets the type of the trigger as Message
     * * Escalation - Sets the type of the trigger as Escalation
     * * Link - Sets the type of the trigger as Link
     * * Error - Sets the type of the trigger as Error
     * * Compensation - Sets the type of the trigger as Compensation
     * * Signal - Sets the type of the trigger as Signal
     * * Multiple - Sets the type of the trigger as Multiple
     * * Parallel - Sets the type of the trigger as Parallel
     * * Cancel - Sets the type of the trigger as Cancel
     * * Conditional - Sets the type of the trigger as Conditional
     * * Terminate - Sets the type of the trigger as Terminate
     * @default 'None'
     */
    trigger?: BpmnTriggers;
    /**
     * Sets the type of the BPMN Event
     * * Start - Sets the type of the Bpmn Event as Start
     * * Intermediate - Sets the type of the Bpmn Event as Intermediate
     * * End - Sets the type of the Bpmn Event as End
     * * NonInterruptingStart - Sets the type of the Bpmn Event as NonInterruptingStart
     * * NonInterruptingIntermediate - Sets the type of the Bpmn Event as NonInterruptingIntermediate
     * * ThrowingIntermediate - Sets the type of the Bpmn Event as ThrowingIntermediate
     * @default 'Start'
     */
    event?: BpmnEvents;
    /**
     * Sets the id of the BPMN sub event
     * @default ''
     */
    id?: string;
    /**
     * Defines the position of the sub event
     * @default new Point(0.5,0.5)
     */
    offset?: PointModel;
    /**
     * Defines the collection of textual annotations of the sub events
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    annotations?: ShapeAnnotationModel[];
    /**
     * Defines the collection of connection points of the sub events
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    ports?: PointPortModel[];
    /**
     * Sets the width of the node
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    width?: number;
    /**
     * Sets the height of the node
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    height?: number;
    /**
     * Defines the space to be left between the node and its immediate parent
     * @default 0
     */
    margin?: MarginModel;
    /**
     * Sets how to horizontally align a node with respect to its immediate parent
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Left - Aligns the diagram element at the left of its immediate parent
     * * Right - Aligns the diagram element at the right of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Center'
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Sets how to vertically align a node with respect to its immediate parent
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Top - Aligns the diagram element at the top of its immediate parent
     * * Bottom - Aligns the diagram element at the bottom of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Center'
     */
    verticalAlignment?: VerticalAlignment;
    /**
     * Sets the visibility of the sub event
     * @default true
     */
    visible?: boolean;
}
/**
 * Interface for a class BpmnTransactionSubProcess
 */
export interface BpmnTransactionSubProcessModel {
    /**
     * Defines the size and position of the success port
     */
    success?: BpmnSubEventModel;
    /**
     * Defines the size and position of the failure port
     */
    failure?: BpmnSubEventModel;
    /**
     * Defines the size and position of the cancel port
     */
    cancel?: BpmnSubEventModel;
}
/**
 * Interface for a class BpmnSubProcess
 */
export interface BpmnSubProcessModel {
    /**
     * Defines the type of the sub process
     * * None - Sets the type of the Sub process as None
     * * Transaction - Sets the type of the Sub process as Transaction
     * * Event - Sets the type of the Sub process as Event
     * @default 'None'
     */
    type?: BpmnSubProcessTypes;
    /**
     * Defines whether the sub process is without any prescribed order or not
     * @default false
     */
    adhoc?: boolean;
    /**
     * 
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     * id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100,
     * shape: {
     *               type: 'Bpmn', shape: 'Activity', activity: {
     *                   activity: 'SubProcess',
     *                   subProcess: { adhoc: false, boundary: 'Default', collapsed: true }
     *               },
     *           }
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     */
    boundary?: BpmnBoundary;
    /**
     * Defines the whether the task is triggered as a compensation of another task
     * @default false
     */
    compensation?: boolean;
    /**
     * Defines the  type of the BPMNLoop
     * * None - Sets the type of the Bpmn loop as None
     * * Standard - Sets the type of the Bpmn loop as Standard
     * * ParallelMultiInstance - Sets the type of the Bpmn loop as ParallelMultiInstance
     * * SequenceMultiInstance - Sets the type of the Bpmn loop as SequenceMultiInstance
     * @default 'None'
     */
    loop?: BpmnLoops;
    /**
     * Defines the whether the shape is collapsed or not
     * @default true
     */
    collapsed?: boolean;
    /**
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let node1: NodeModel = {
     *           id: 'node1', width: 190, height: 190, offsetX: 300, offsetY: 200,
     *           shape: {
     *               type: 'Bpmn', shape: 'Activity', activity: {
     *                   activity: 'SubProcess',
     *                   subProcess: {
     *                       type: 'Event', loop: 'ParallelMultiInstance',
     *                       compensation: true, adhoc: false, boundary: 'Event', collapsed: true,
     *                       events: [{
     *                           height: 20, width: 20, offset: { x: 0, y: 0 }, margin: { left: 10, top: 10 },
     *                           horizontalAlignment: 'Left',
     *                           verticalAlignment: 'Top',
     *                           annotations: [{
     *                               id: 'label3', margin: { bottom: 10 },
     *                                horizontalAlignment: 'Center',
     *                               verticalAlignment: 'Top',
     *                               content: 'Event', offset: { x: 0.5, y: 1 },
     *                               style: {
     *                                   color: 'black', fontFamily: 'Fantasy', fontSize: 8
     *                               }
     *                           }],
     *                           event: 'Intermediate', trigger: 'Error'
     *                       }]
     *                   }
     *               }
     *           }
     *       };
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     */
    events?: BpmnSubEventModel[];
    /**
     * Defines the transaction sub process
     */
    transaction?: BpmnTransactionSubProcessModel;
    /**
     * Defines the transaction sub process
     * @default []
     */
    processes?: string[];
}
/**
 * Interface for a class BpmnActivity
 */
export interface BpmnActivityModel {
    /**
     * Defines the type of the activity
     * * None - Sets the type of the Bpmn Activity as None
     * * Task - Sets the type of the Bpmn Activity as Task
     * * SubProcess - Sets the type of the Bpmn Activity as SubProcess
     * @default 'Task'
     */
    activity?: BpmnActivities;
    /**
     * Defines the BPMN task
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *  id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *     shape: {
     *     type: 'Bpmn', shape: 'Activity', activity: {
     *     activity: 'Task', task: {
     *           type: 'Service'
     *       }
     *   }
     *  },
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default 'new BPMNTask()'
     */
    task?: BpmnTaskModel;
    /**
     * Defines the type of the SubProcesses
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *  id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *     shape: {
     *     type: 'Bpmn', shape: 'Activity', activity: {
     *     activity: 'SubProcess',
     *     subProcess: { collapsed: true } as BpmnSubProcessModel
     *   }
     *  },
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default 'None'
     */
    subProcess?: BpmnSubProcessModel;
}
/**
 * Interface for a class BpmnAnnotation
 */
export interface BpmnAnnotationModel {
    /**
     * Sets the text to annotate the bpmn shape
     * @default ''
     */
    text?: string;
    /**
     * Sets the id of the BPMN sub event
     * @default ''
     */
    id?: string;
    /**
     * Sets the angle between the bpmn shape and the annotation
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    angle?: number;
    /**
     * Sets the height of the text
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    height?: number;
    /**
     * Sets the width of the text
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    width?: number;
    /**
     * Sets the distance between the bpmn shape and the annotation
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    length?: number;
}
/**
 * Interface for a class BpmnShape
 */
export interface BpmnShapeModel extends ShapeModel{
    /**
     * Defines the type of node shape
     * @default 'Basic'
     */
    type?: Shapes;
    /**
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *  id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *  shape: {
     *   type: 'Bpmn', shape: 'Gateway',
     *   gateway: { type: 'EventBased' } as BpmnGatewayModel
     *         } as BpmnShapeModel,
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     */
    shape?: BpmnShapes;
    /**
     * Defines the type of the BPMN Event shape
     * @default 'None'
     */
    event?: BpmnEventModel;
    /**
     * Defines the type of the BPMN Gateway shape
     * @default 'None'
     */
    gateway?: BpmnGatewayModel;
    /**
     * Defines the type of the BPMN DataObject shape
     * @default 'None'
     */
    dataObject?: BpmnDataObjectModel;
    /**
     * Defines the type of the BPMN Activity shape
     * @default 'None'
     */
    activity?: BpmnActivityModel;
    /**
     * Defines the text of the bpmn annotation
     * @default 'None'
     */
    annotation?: BpmnAnnotationModel;
    /**
     * Defines the text of the bpmn annotation collection
     * @default 'None'
     */
    annotations?: BpmnAnnotationModel[];
}
/**
 * Interface for a class UmlActivityShape
 */
export interface UmlActivityShapeModel extends ShapeModel{
    /**
     * Defines the type of node shape
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let shape: UmlActivityShapeModel = { type: 'UMLActivity', shape: 'Action' };
     * let nodes$: NodeModel[] = [{
     * id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100, shape: shape
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default 'Basic'
     */
    type?: Shapes;
    /**
     * Defines the type of the UMLActivity shape
     * * Action - Sets the type of the UMLActivity Shape as Action
     * * Decision - Sets the type of the UMLActivity Shape as Decision
     * * MergeNode - Sets the type of the UMLActivity Shape as MergeNode
     * * InitialNode - Sets the type of the UMLActivity Shape as InitialNode
     * * FinalNode - Sets the type of the UMLActivity Shape as FinalNode
     * * ForkNode - Sets the type of the UMLActivity Shape as ForkNode
     * * JoinNode - Sets the type of the UMLActivity Shape as JoinNode
     * * TimeEvent - Sets the type of the UMLActivity Shape as TimeEvent
     * * AcceptingEvent - Sets the type of the UMLActivity Shape as AcceptingEvent
     * * SendSignal - Sets the type of the UMLActivity Shape as SendSignal
     * * ReceiveSignal - Sets the type of the UMLActivity Shape as ReceiveSignal
     * * StructuredNode - Sets the type of the UMLActivity Shape as StructuredNode
     * * Note - Sets the type of the UMLActivity Shape as Note
     * @default 'Action'
     * @IgnoreSingular
     */
    shape?: UmlActivityShapes;
}
/**
 * Interface for a class MethodArguments
 */
export interface MethodArgumentsModel {
    /**
     * Defines the name of the attributes
     * @default ''
     * @IgnoreSingular
     */
    name?: string;
    /**
     * Defines the type of the attributes
     * @default ''
     * @IgnoreSingular
     */
    type?: string;
    /**
     * Sets the shape style of the node
     * @default new ShapeStyle()
     * @aspType object
     */
    style?: ShapeStyleModel | TextStyleModel;
}
/**
 * Interface for a class UmlClassAttribute
 */
export interface UmlClassAttributeModel extends MethodArgumentsModel{
    /**
     * Defines the type of the attributes
     * @default 'Public'
     * @IgnoreSingular
     */
    scope?: UmlScope;
    /**
     * Defines the separator of the attributes
     * @default false
     * @IgnoreSingular
     */
    isSeparator?: boolean;
}
/**
 * Interface for a class UmlClassMethod
 */
export interface UmlClassMethodModel extends UmlClassAttributeModel{
    /**
     * Defines the type of the arguments
     * @default ''
     * @IgnoreSingular
     */
    parameters?: MethodArgumentsModel[];
}
/**
 * Interface for a class UmlClass
 */
export interface UmlClassModel {
    /**
     * Defines the name of the attributes
     * @default ''
     * @IgnoreSingular
     */
    name?: string;
    /**
     * Defines the text of the bpmn annotation collection
     * @default 'None'
     */
    attributes?: UmlClassAttributeModel[];
    /**
     * Defines the text of the bpmn annotation collection
     * @default 'None'
     */
    methods?: UmlClassMethodModel[];
    /**
     * Sets the shape style of the node
     * @default new ShapeStyle()
     * @aspType object
     */
    style?: TextStyleModel;
}
/**
 * Interface for a class UmlInterface
 */
export interface UmlInterfaceModel extends UmlClassModel{
    /**
     * Defines the separator of the attributes
     * @default false
     * @IgnoreSingular
     */
    isSeparator?: boolean;
}
/**
 * Interface for a class UmlEnumerationMember
 */
export interface UmlEnumerationMemberModel {
    /**
     * Defines the value of the member
     * @default ''
     * @IgnoreSingular
     */
    name?: string;
    /**
     * Defines the value of the member
     * @default ''
     * @IgnoreSingular
     */
    value?: string;
    /**
     * Defines the separator of the attributes
     * @default false
     * @IgnoreSingular
     */
    isSeparator?: boolean;
    /**
     * Sets the shape style of the node
     * @default new ShapeStyle()
     * @aspType object
     */
    style?: ShapeStyleModel | TextStyleModel;
}
/**
 * Interface for a class UmlEnumeration
 */
export interface UmlEnumerationModel {
    /**
     * Defines the name of the attributes
     * @default ''
     * @IgnoreSingular
     */
    name?: string;
    /**
     * Defines the text of the bpmn annotation collection
     * @default 'None'
     */
    members?: UmlEnumerationMemberModel[];
    /**
     * Sets the shape style of the node
     * @default new ShapeStyle()
     * @aspType object
     */
    style?: ShapeStyleModel | TextStyleModel;
}
/**
 * Interface for a class UmlClassifierShape
 */
export interface UmlClassifierShapeModel extends ShapeModel{
    /**
     * Defines the type of node shape
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let shape: UmlActivityShapeModel = { type: 'UMLActivity', shape: 'Action' };
     * let nodes$: NodeModel[] = [{
     * id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100, shape: shape
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default 'Basic'
     */
    type?: Shapes;
    /**
     * Defines the text of the bpmn annotation collection
     * @default 'None'
     */
    classShape?: UmlClassModel;
    /**
     * Defines the text of the bpmn annotation collection
     * @default 'None'
     */
    interfaceShape?: UmlInterfaceModel;
    /**
     * Defines the text of the bpmn annotation collection
     * @default 'None'
     */
    enumerationShape?: UmlEnumerationModel;
    /**
     * Defines the type of classifier
     * @default 'Class'
     * @IgnoreSingular
     */
    classifier?: ClassifierShape;
}
/**
 * Interface for a class Node
 */
export interface NodeModel extends NodeBaseModel{
    /**
     * Defines the collection of textual annotations of nodes/connectors
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    annotations?: ShapeAnnotationModel[];
    /**
     * Sets the x-coordinate of the position of the node
     * @default 0
     */
    offsetX?: number;
    /**
     * Sets the y-coordinate of the position of the node
     * @default 0
     */
    offsetY?: number;
    /**
     * Sets the reference point, that will act as the offset values(offsetX, offsetY) of a node
     * @default new Point(0.5,0.5)
     */
    pivot?: PointModel;
    /**
     * Sets the width of the node
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    width?: number;
    /**
     * Sets the height of the node
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    height?: number;
    /**
     * Sets the minimum width of the node
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    minWidth?: number;
    /**
     * Sets the minimum height of the node
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    minHeight?: number;
    /**
     * Sets the maximum width of the node
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    maxWidth?: number;
    /**
     * Sets the maximum height of the node
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    maxHeight?: number;
    /**
     * Sets the rotate angle of the node
     * @default 0
     */
    rotateAngle?: number;
    /**
     * Sets the shape style of the node
     * @default new ShapeStyle()
     * @aspType object
     */
    style?: ShapeStyleModel | TextStyleModel;
    /**
     * Sets the background color of the shape
     * @default 'transparent'
     */
    backgroundColor?: string;
    /**
     * Sets the border color of the node
     * @default 'none'
     */
    borderColor?: string;
    /**
     * Sets the border width of the node
     * @default 0
     * @isBlazorNullableType true
     */
    borderWidth?: number;
    /**
     * Sets the data source of the node
     */
    data?: Object;
    /**
     * Defines the shape of a node
     * @default Basic Shape
     * @aspType object
     */
    shape?: ShapeModel | FlowShapeModel | BasicShapeModel | ImageModel | PathModel | TextModel | BpmnShapeModel | NativeModel | HtmlModel | UmlActivityShapeModel | UmlClassifierShapeModel | SwimLaneModel;
    /**
     * Sets or gets the UI of a node
     * @default null
     */
    wrapper?: Container;
    /**
     * Enables/Disables certain features of nodes
     * * None - Disable all node Constraints
     * * Select - Enables node to be selected
     * * Drag - Enables node to be Dragged
     * * Rotate - Enables node to be Rotate
     * * Shadow - Enables node to display shadow
     * * PointerEvents - Enables node to provide pointer  option
     * * Delete - Enables node to delete
     * * InConnect - Enables node to provide in connect option
     * * OutConnect - Enables node to provide out connect option
     * * Individual - Enables node to provide individual resize option
     * * Expandable - Enables node to provide Expandable option
     * * AllowDrop - Enables node to provide allow to drop option
     * * Inherit - Enables node to inherit the interaction option
     * * ResizeNorthEast - Enable ResizeNorthEast of the node
     * * ResizeEast - Enable ResizeEast of the node
     * * ResizeSouthEast - Enable ResizeSouthEast of the node
     * * ResizeSouth - Enable ResizeSouthWest of the node
     * * ResizeSouthWest - Enable ResizeSouthWest of the node
     * * ResizeSouth - Enable ResizeSouth of the node
     * * ResizeSouthWest - Enable ResizeSouthWest of the node
     * * ResizeWest - Enable ResizeWest of the node
     * * ResizeNorth - Enable ResizeNorth of the node
     * * Resize - Enables the Aspect ratio fo the node
     * * AspectRatio - Enables the Aspect ratio fo the node
     * * Tooltip - Enables or disables tool tip for the Nodes
     * * InheritTooltip - Enables or disables tool tip for the Nodes
     * * ReadOnly - Enables the  ReadOnly support for Annotation
     * @default 'Default'
     * @aspNumberEnum
     * @blazorNumberEnum
     */
    constraints?: NodeConstraints;
    /**
     * Defines the shadow of a shape/path
     * @default null
     */
    shadow?: ShadowModel;
    /**
     * Defines the children of group element
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    children?: string[];
    /**
     * Defines the type of the container
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default null
     */
    container?: ChildContainerModel;
    /**
     * Sets the horizontalAlignment of the node
     * @default 'Stretch'
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Sets the verticalAlignment of the node
     * @default 'Stretch'
     */
    verticalAlignment?: VerticalAlignment;
    /**
     * Used to define the rows for the grid container
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    rows?: RowDefinition[];
    /**
     * Used to define the column for the grid container
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    columns?: ColumnDefinition[];
    /**
     * Used to define a index of row in the grid
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    rowIndex?: number;
    /**
     * Used to define a index of column in the grid
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    columnIndex?: number;
    /**
     * Merge the row use the property in the grid container
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    rowSpan?: number;
    /**
     * Merge the column use the property in the grid container
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    columnSpan?: number;
    /**
     * Set the branch for the mind map
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default ''
     */
    branch?: BranchTypes;
}
/**
 * Interface for a class Header
 */
export interface HeaderModel {
    /**
     * Sets the id of the header
     * @default ''
     */
    id?: string;
    /**
     * Sets the content of the header
     * @default ''
     */
    annotation?: Annotation;
    /**
     * Sets the style of the header
     * @default ''
     */
    style?: ShapeStyleModel;
    /**
     * Sets the height of the header
     * @default 50
     */
    height?: number;
    /**
     * Sets the width of the header
     * @default 50
     */
    width?: number;
}
/**
 * Interface for a class Lane
 */
export interface LaneModel {
    /**
     * Sets the id of the lane
     * @default ''
     */
    id?: string;
    /**
     * Sets style of the lane
     * @default ''
     */
    style?: ShapeStyleModel;
    /**
     * Defines the collection of child nodes
     * @default []
     */
    children?: NodeModel[];
    /**
     * Defines the height of the phase
     * @default 100
     */
    height?: number;
    /**
     * Defines the height of the phase
     * @default 100
     */
    width?: number;
    /**
     * Defines the collection of header in the phase.
     * @default new Header()
     */
    header?: HeaderModel;
}
/**
 * Interface for a class Phase
 */
export interface PhaseModel {
    /**
     * Sets the id of the phase
     * @default ''
     */
    id?: string;
    /**
     * Sets the style of the lane
     * @default ''
     */
    style?: ShapeStyleModel;
    /**
     * Sets the header collection of the phase
     * @default  new Header()
     */
    header?: HeaderModel;
    /**
     * Sets the offset of the lane
     * @default 100
     */
    offset?: number;
}
/**
 * Interface for a class SwimLane
 */
export interface SwimLaneModel extends ShapeModel{
    /**
     * Defines the type of node shape.
     * @default 'Basic'
     */
    type?: Shapes;
    /**
     * Defines the size of phase.
     * @default 20
     */
    phaseSize?: number;
    /**
     * Defines the collection of phases.
     * @default 'undefined'
     */
    phases?: PhaseModel[];
    /**
     * Defines the orientation of the swimLane
     * @default 'Horizontal'
     */
    orientation?: Orientation;
    /**
     * Defines the collection of lanes
     * @default 'undefined'
     */
    lanes?: LaneModel[];
    /**
     * Defines the collection of header
     * @default 'undefined'
     */
    header?: HeaderModel;
    /**
     * Defines the whether the shape is a lane or not
     * @default false
     */
    isLane?: boolean;
    /**
     * Defines the whether the shape is a phase or not
     * @default false
     */
    isPhase?: boolean;
}
/**
 * Interface for a class ChildContainer
 */
export interface ChildContainerModel {
    /**
     * Defines the type of the container
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default Canvas
     */
    type?: ContainerTypes;
    /**
     * Defines the type of the swimLane orientation.
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    orientation?: Orientation;
}
/**
 * Interface for a class Selector
 */
export interface SelectorModel {
    /**
     * Defines the size and position of the container
     * @default null
     */
    wrapper?: Container;
    /**
     * Defines the collection of selected nodes
     * @blazorType List<DiagramNode>
     */
    nodes?: NodeModel[];
    /**
     * Defines the collection of selected connectors
     * @blazorType List<DiagramConnector>
     */
    connectors?: ConnectorModel[];
    /**
     * Sets/Gets the width of the container
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    width?: number;
    /**
     * Sets/Gets the height of the container
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    height?: number;
    /**
     * Sets the rotate angle of the container
     * @default 0
     * @isBlazorNullableType true
     */
    rotateAngle?: number;
    /**
     * Sets the positionX of the container
     * @default 0
     * @isBlazorNullableType true
     */
    offsetX?: number;
    /**
     * Sets the positionY of the container
     * @default 0
     * @isBlazorNullableType true
     */
    offsetY?: number;
    /**
     * Sets the pivot of the selector
     * @default { x: 0.5, y: 0.5 }
     */
    pivot?: PointModel;
    /**
     * Defines how to pick the objects to be selected using rubber band selection
     * * CompleteIntersect - Selects the objects that are contained within the selected region
     * * PartialIntersect - Selects the objects that are partially intersected with the selected region
     * @default 'CompleteIntersect'
     */
    rubberBandSelectionMode?: RubberBandSelectionMode;
    /**
     * Defines the collection of user handle
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *           id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *           annotations: [{ content: 'Default Shape' }]
     *       },
     *       {
     *           id: 'node2', width: 100, height: 100, offsetX: 300, offsetY: 100,
     *           shape: {
     *               type: 'Basic', shape: 'Ellipse'
     *           },
     *           annotations: [{ content: 'Path Element' }]
     *       }
     *       ];
     *       let connectors$: ConnectorModel[] = [{
     *           id: 'connector1',
     *           type: 'Straight',
     *           sourcePoint: { x: 100, y: 300 },
     *           targetPoint: { x: 200, y: 400 },
     *       }];
     * let handle$: UserHandleModel[] = [
     * { name: 'handle', margin: { top: 0, bottom: 0, left: 0, right: 0 }, offset: 0,
     * pathData: 'M 376.892,225.284L 371.279,211.95L 376.892,198.617L 350.225,211.95L 376.892,225.284 Z',
     * side: 'Top', horizontalAlignment: 'Center', verticalAlignment: 'Center', 
     * pathColor: 'yellow' }];
     * let diagram$: Diagram = new Diagram({
     * ...
     *     connectors: connectors, nodes: nodes,
     *     selectedItems: { constraints: SelectorConstraints.All, userHandles: handle },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default []
     */
    userHandles?: UserHandleModel[];
    /**
     * Controls the visibility of selector.
     * * None - Hides all the selector elements
     * * ConnectorSourceThumb - Shows/hides the source thumb of the connector
     * * ConnectorTargetThumb - Shows/hides the target thumb of the connector
     * * ResizeSouthEast - Shows/hides the bottom right resize handle of the selector
     * * ResizeSouthWest - Shows/hides the bottom left resize handle of the selector
     * * ResizeNorthEast - Shows/hides the top right resize handle of the selector
     * * ResizeNorthWest - Shows/hides the top left resize handle of the selector
     * * ResizeEast - Shows/hides the middle right resize handle of the selector
     * * ResizeWest - Shows/hides the middle left resize handle of the selector
     * * ResizeSouth - Shows/hides the bottom center resize handle of the selector
     * * ResizeNorth - Shows/hides the top center resize handle of the selector
     * * Rotate - Shows/hides the rotate handle of the selector
     * * UserHandles - Shows/hides the user handles of the selector
     * * Resize - Shows/hides all resize handles of the selector
     * @default 'All'
     * @aspNumberEnum
     * @blazorNumberEnum
     */
    constraints?: SelectorConstraints;
    /**
     * setTooltipTemplate helps to customize the content of a tooltip
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    setTooltipTemplate?: Function | string;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/node.d.ts

/**
 * Defines the behavior of default shape
 */
export  class Shape extends base.ChildProperty<Shape> {
    /**
     * Defines the type of node shape
     * * Path - Sets the type of the node as Path
     * * Text - Sets the type of the node as Text
     * * Image - Sets the type of the node as Image
     * * Basic - Sets the type of the node as Basic
     * * Flow - Sets the type of the node as Flow
     * * Bpmn - Sets the type of the node as Bpmn
     * * Native - Sets the type of the node as Native
     * * HTML - Sets the type of the node as HTML
     * * UMLActivity - Sets the type of the node as UMLActivity
     * @default 'Basic'
     */
    type: Shapes;
}
/**
 * Defines the behavior of path shape
 */
export  class Path extends Shape {
    /**
     * Defines the type of node shape
     * @default 'Basic'
     */
    type: Shapes;
    /**
     * Defines the geometry of a path
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     * id: 'node1', width: 100, height: 100, offsetX: 300, offsetY: 100,
     *   shape: { type: 'Path', data: 'M540.3643,137.9336L546.7973,159.7016L570.3633,159.7296'+
     *   'L550.7723,171.9366L558.9053,194.9966L540.3643,179.4996L521.8223,194.9966L529.9553,171.9366'+
     *   'L510.3633,159.7296L533.9313,159.7016L540.3643,137.9336z' }
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes: nodes
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default ''
     */
    data: string;
    /**
     * @private
     * Returns the name of class Path
     */
    getClassName(): string;
}
/**
 * Defines the behavior of Native shape
 */
export  class Native extends Shape {
    /**
     * Defines the type of node shape.
     * @default 'Basic'
     */
    type: Shapes;
    /**
     * Defines the geometry of a native element.
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     * id: 'node1', width: 100, height: 100,
     * shape: { scale: 'Stretch',
     *   type: 'Native', content: '<g><path d='M90,43.841c0,24.213-19.779,43.841-44.182,43.841c-7.747,0-15.025-1.98-21.357-5.455'+
     * 'L0,90l7.975-23.522' +
     * 'c-4.023-6.606-6.34-14.354-6.34-22.637C1.635,19.628,21.416,0,45.818,0C70.223,0,90,19.628,90,43.841z M45.818,6.982' +
     * 'c-20.484,0-37.146,16.535-37.146,36.859c0,8.065,2.629,15.534,7.076,21.61L11.107,79.14l14.275-4.537' +
     * 'c5.865,3.851,12.891,6.097,20.437,6.097c20.481,0,37.146-16.533,37.146-36.857S66.301,6.982,45.818,6.982z M68.129,53.938' +
     * 'c-0.273-0.447-0.994-0.717-2.076-1.254c-1.084-0.537-6.41-3.138-7.4-3.495c-0.993-0.358-1.717-0.538-2.438,0.537' +
     * 'c-0.721,1.076-2.797,3.495-3.43,4.212c-0.632,0.719-1.263,0.809-2.347,0.271c-1.082-0.537-4.571-1.673-8.708-5.333' +
     * 'c-3.219-2.848-5.393-6.364-6.025-7.441c-0.631-1.075-0.066-1.656,0.475-2.191c0.488-0.482,1.084-1.255,1.625-1.882' +
     * 'c0.543-0.628,0.723-1.075,1.082-1.793c0.363-0.717,0.182-1.344-0.09-1.883c-0.27-0.537-2.438-5.825-3.34-7.977' +
     * 'c-0.902-2.15-1.803-1.792-2.436-1.792c-0.631,0-1.354-0.09-2.076-0.09c-0.722,0-1.896,0.269-2.889,1.344' +
     * 'c-0.992,1.076-3.789,3.676-3.789,8.963c0,5.288,3.879,10.397,4.422,11.113c0.541,0.716,7.49,11.92,18.5,16.223' +
     * 'C58.2,65.771,58.2,64.336,60.186,64.156c1.984-0.179,6.406-2.599,7.312-5.107C68.398,56.537,68.398,54.386,68.129,53.938z'>'+
     * '</path></g>',
     *        }
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes: nodes
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default ''
     */
    content: string | SVGElement;
    /**
     * Defines the scale of the native element.
     * * None - Sets the stretch type for diagram as None
     * * Stretch - Sets the stretch type for diagram as Stretch
     * * Meet - Sets the stretch type for diagram as Meet
     * * Slice - Sets the stretch type for diagram as Slice
     * @default 'Stretch'
     */
    scale: Stretch;
    /**
     * @private
     * Returns the name of class Native
     */
    getClassName(): string;
}
/**
 * Defines the behavior of html shape
 */
export  class Html extends Shape {
    /**
     * Defines the type of node shape.
     * @default 'Basic'
     */
    type: Shapes;
    /**
     * Defines the geometry of a html element.
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     * id: 'node1', width: 100, height: 100, offsetX: 300, offsetY: 100,
     * shape: { type: 'HTML',
     * content: '<div style='background:red;
height:100%;
width:100%;
'><input type='button' value='{{:value}}' /></div>' }
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes: nodes
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default ''
     */
    content: string | HTMLElement;
    /**
     * @private
     * Returns the name of class Html
     */
    getClassName(): string;
}
/**
 * Defines the behavior of image shape
 */
export  class Image extends Shape {
    /**
     * Defines the type of node shape
     * @default 'Basic'
     */
    type: Shapes;
    /**
     * Defines the source of the image
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     * id: 'node1', width: 100, height: 100, offsetX: 300, offsetY: 100,
     * shape: { type: 'Image', source: 'https://www.w3schools.com/images/w3schools_green.jpg' }
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes: nodes
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default ''
     */
    source: string;
    /**
     * Allows to stretch the image as you desired (either to maintain proportion or to stretch)
     * * None - Scale value will be set as None for the image
     * * Meet - Scale value Meet will be set for the image
     * * Slice - Scale value Slice will be set for the image
     * @default 'None'
     */
    scale: Scale;
    /**
     * Defines the alignment of the image within the node boundary.
     * * None - Alignment value will be set as none
     * * XMinYMin - smallest X value of the view port and  smallest Y value of the view port
     * * XMidYMin - midpoint X value of the view port and  smallest Y value of the view port
     * * XMaxYMin - maximum X value of the view port and  smallest Y value of the view port
     * * XMinYMid - smallest X value of the view port and midpoint Y value of the view port
     * * XMidYMid - midpoint X value of the view port and midpoint Y value of the view port
     * * XMaxYMid - maximum X value of the view port and midpoint Y value of the view port
     * * XMinYMax - smallest X value of the view port and maximum Y value of the view port
     * * XMidYMax - midpoint X value of the view port and maximum Y value of the view port
     * * XMaxYMax - maximum X value of the view port and maximum Y value of the view port
     * @default 'None'
     */
    align: ImageAlignment;
    /**
     * @private
     * Returns the name of class Image
     */
    getClassName(): string;
}
/**
 * Defines the behavior of the text shape
 */
export  class Text extends Shape {
    /**
     * Defines the type of node shape
     * @default 'Basic'
     */
    type: Shapes;
    /**
     * Defines the content of a text
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     * id: 'node1', width: 100, height: 100, offsetX: 300, offsetY: 100,
     * shape: { type: 'Text', content: 'Text Element' }
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes: nodes
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default ''
     */
    content: string;
    /**
     * Defines the space to be let between$ the node and its immediate parent
     * @default 0
     */
    margin: MarginModel;
    /**
     * @private
     * Returns the name of class Text
     */
    getClassName(): string;
}
/**
 * Defines the behavior of the basic shape
 */
export  class BasicShape extends Shape {
    /**
     * Defines the type of node shape
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let shape$: BasicShapeModel = { type: 'Basic', shape: 'Rectangle' };
     * let nodes$: NodeModel[] = [{
     * id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100, shape: shape
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default 'Basic'
     */
    type: Shapes;
    /**
     * Defines the type of the basic shape
     * * Rectangle - Sets the type of the basic shape as Rectangle
     * * Ellipse - Sets the type of the basic shape as Ellipse
     * * Hexagon - Sets the type of the basic shape as Hexagon
     * * Parallelogram - Sets the type of the basic shape as Parallelogram
     * * Triangle - Sets the type of the basic shape as Triangle
     * * Plus - Sets the type of the basic shape as Plus
     * * Star - Sets the type of the basic shape as Star
     * * Pentagon - Sets the type of the basic shape as Pentagon
     * * Heptagon - Sets the type of the basic shape as Heptagon
     * * Octagon - Sets the type of the basic shape as Octagon
     * * Trapezoid - Sets the type of the basic shape as Trapezoid
     * * Decagon - Sets the type of the basic shape as Decagon
     * * RightTriangle - Sets the type of the basic shape as RightTriangle
     * * Cylinder - Sets the type of the basic shape as Cylinder
     * * Diamond - Sets the type of the basic shape as Diamond
     * @default 'Rectangle'
     */
    shape: BasicShapes;
    /**
     * Sets the corner of the node
     * @default 0
     */
    cornerRadius: number;
    /**
     * Defines the collection of points to draw a polygon
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    points: PointModel[];
    /**
     * @private
     * Returns the name of class BasicShape
     */
    getClassName(): string;
}
/**
 * Defines the behavior of the flow shape
 */
export  class FlowShape extends Shape {
    /**
     * Defines the type of node shape
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     * id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *     shape: { type: 'Flow', shape: 'Terminator' },
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default 'Basic'
     */
    type: Shapes;
    /**
     * Defines the type of the flow shape
     * * Process - Sets the type of the flow shape as Process
     * * Decision - Sets the type of the flow shape as Decision
     * * Document - Sets the type of the flow shape as Document
     * * PreDefinedProcess - Sets the type of the flow shape as PreDefinedProcess
     * * Terminator - Sets the type of the flow shape as Terminator
     * * PaperTap - Sets the type of the flow shape as PaperTap
     * * DirectData - Sets the type of the flow shape as DirectData
     * * SequentialData - Sets the type of the flow shape as SequentialData
     * * MultiData - Sets the type of the flow shape as MultiData
     * * Collate - Sets the type of the flow shape as Collate
     * * SummingJunction - Sets the type of the flow shape as SummingJunction
     * * Or - Sets the type of the flow shape as Or
     * * InternalStorage - Sets the type of the flow shape as InternalStorage
     * * Extract - Sets the type of the flow shape as Extract
     * * ManualOperation - Sets the type of the flow shape as ManualOperation
     * * Merge - Sets the type of the flow shape as Merge
     * * OffPageReference - Sets the type of the flow shape as OffPageReference
     * * SequentialAccessStorage - Sets the type of the flow shape as SequentialAccessStorage
     * * Annotation - Sets the type of the flow shape as Annotation
     * * Annotation2 - Sets the type of the flow shape as Annotation2
     * * Data - Sets the type of the flow shape as Data
     * * Card - Sets the type of the flow shape as Card
     * * Delay - Sets the type of the flow shape as Delay
     * * Preparation - Sets the type of the flow shape as Preparation
     * * Display - Sets the type of the flow shape as Display
     * * ManualInput - Sets the type of the flow shape as ManualInput
     * * LoopLimit - Sets the type of the flow shape as LoopLimit
     * * StoredData - Sets the type of the flow shape as StoredData
     * @default 'Terminator'
     */
    shape: FlowShapes;
    /**
     * @private
     * Returns the name of class FlowShape
     */
    getClassName(): string;
}
/**
 * Defines the behavior of the bpmn gateway shape
 */
export  class BpmnGateway extends base.ChildProperty<BpmnGateway> {
    /**
     * Defines the type of the BPMN Gateway
     * * None - Sets the type of the gateway as None
     * * Exclusive - Sets the type of the gateway as Exclusive
     * * Inclusive - Sets the type of the gateway as Inclusive
     * * Complex - Sets the type of the gateway as Complex
     * * EventBased - Sets the type of the gateway as EventBased
     * * ExclusiveEventBased - Sets the type of the gateway as ExclusiveEventBased
     * * ParallelEventBased - Sets the type of the gateway as ParallelEventBased
     * @default 'None'
     */
    type: BpmnGateways;
    /**
     * @private
     * Returns the name of class BpmnGateway
     */
    getClassName(): string;
}
/**
 * Defines the behavior of the bpmn data object
 */
export  class BpmnDataObject extends base.ChildProperty<BpmnDataObject> {
    /**
     * Defines the type of the BPMN data object
     * * None - Sets the type of the data object as None
     * * Input - Sets the type of the data object as Input
     * * Output - Sets the type of the data object as Output
     * @default 'None'
     */
    type: BpmnDataObjects;
    /**
     * Sets whether the data object is a collection or not
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *  id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *  shape: {
     *   type: 'Bpmn', shape: 'DataObject',
     *   dataObject: { collection: false, type: 'Input' }
     *         } as BpmnShapeModel,
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default false
     */
    collection: boolean;
    /**
     * @private
     * Returns the name of class BpmnDataObject
     */
    getClassName(): string;
}
/**
 * Defines the behavior of the bpmn task shape
 */
export  class BpmnTask extends base.ChildProperty<BpmnTask> {
    /**
     * Defines the type of the task
     * * None - Sets the type of the Bpmn Tasks as None
     * * Service - Sets the type of the Bpmn Tasks as Service
     * * Receive - Sets the type of the Bpmn Tasks as Receive
     * * Send - Sets the type of the Bpmn Tasks as Send
     * * InstantiatingReceive - Sets the type of the Bpmn Tasks as InstantiatingReceive
     * * Manual - Sets the type of the Bpmn Tasks as Manual
     * * BusinessRule - Sets the type of the Bpmn Tasks as BusinessRule
     * * User - Sets the type of the Bpmn Tasks as User
     * * Script - Sets the type of the Bpmn Tasks as Script
     * @default 'None'
     */
    type: BpmnTasks;
    /**
     * Defines the type of the BPMN loops
     * * None - Sets the type of the Bpmn loop as None
     * * Standard - Sets the type of the Bpmn loop as Standard
     * * ParallelMultiInstance - Sets the type of the Bpmn loop as ParallelMultiInstance
     * * SequenceMultiInstance - Sets the type of the Bpmn loop as SequenceMultiInstance
     * @default 'None'
     */
    loop: BpmnLoops;
    /**
     * Sets whether the task is global or not
     * @default false
     */
    call: boolean;
    /**
     * Sets whether the task is triggered as a compensation of another specific activity
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *  id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *  shape: {
     *   type: 'Bpmn', shape: 'Activity', activity: {
     *       activity: 'Task',
     *       task: { call: true, compensation: false, type: 'Service', loop: 'ParallelMultiInstance' }
     *   }} as BpmnShapeModel,
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default false
     */
    compensation: boolean;
}
/**
 * Defines the behavior of the bpmn Event shape
 */
export  class BpmnEvent extends base.ChildProperty<BpmnEvent> {
    /**
     * Sets the type of the BPMN Event
     * * Start - Sets the type of the Bpmn Event as Start
     * * Intermediate - Sets the type of the Bpmn Event as Intermediate
     * * End - Sets the type of the Bpmn Event as End
     * * NonInterruptingStart - Sets the type of the Bpmn Event as NonInterruptingStart
     * * NonInterruptingIntermediate - Sets the type of the Bpmn Event as NonInterruptingIntermediate
     * * ThrowingIntermediate - Sets the type of the Bpmn Event as ThrowingIntermediate
     * @default 'Start'
     */
    /**
     *
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *  id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *  shape: {
     *  type: 'Bpmn', shape: 'Event',
     *   event: { event: 'Start', trigger: 'None' } } as BpmnShapeModel,
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     */
    event: BpmnEvents;
    /**
     * Defines the type of the trigger
     * * None - Sets the type of the trigger as None
     * * Message - Sets the type of the trigger as Message
     * * Escalation - Sets the type of the trigger as Escalation
     * * Link - Sets the type of the trigger as Link
     * * Error - Sets the type of the trigger as Error
     * * Compensation - Sets the type of the trigger as Compensation
     * * Signal - Sets the type of the trigger as Signal
     * * Multiple - Sets the type of the trigger as Multiple
     * * Parallel - Sets the type of the trigger as Parallel
     * * Cancel - Sets the type of the trigger as Cancel
     * * Conditional - Sets the type of the trigger as Conditional
     * * Terminate - Sets the type of the trigger as Terminate
     * @default 'None'
     */
    trigger: BpmnTriggers;
    /**
     * @private
     * Returns the name of class BpmnEvent
     */
    getClassName(): string;
}
/**
 * Defines the behavior of the bpmn sub event
 */
export  class BpmnSubEvent extends base.ChildProperty<BpmnSubEvent> {
    /**
     * Defines the type of the trigger
     * * None - Sets the type of the trigger as None
     * * Message - Sets the type of the trigger as Message
     * * Escalation - Sets the type of the trigger as Escalation
     * * Link - Sets the type of the trigger as Link
     * * Error - Sets the type of the trigger as Error
     * * Compensation - Sets the type of the trigger as Compensation
     * * Signal - Sets the type of the trigger as Signal
     * * Multiple - Sets the type of the trigger as Multiple
     * * Parallel - Sets the type of the trigger as Parallel
     * * Cancel - Sets the type of the trigger as Cancel
     * * Conditional - Sets the type of the trigger as Conditional
     * * Terminate - Sets the type of the trigger as Terminate
     * @default 'None'
     */
    trigger: BpmnTriggers;
    /**
     * Sets the type of the BPMN Event
     * * Start - Sets the type of the Bpmn Event as Start
     * * Intermediate - Sets the type of the Bpmn Event as Intermediate
     * * End - Sets the type of the Bpmn Event as End
     * * NonInterruptingStart - Sets the type of the Bpmn Event as NonInterruptingStart
     * * NonInterruptingIntermediate - Sets the type of the Bpmn Event as NonInterruptingIntermediate
     * * ThrowingIntermediate - Sets the type of the Bpmn Event as ThrowingIntermediate
     * @default 'Start'
     */
    event: BpmnEvents;
    /**
     * Sets the id of the BPMN sub event
     * @default ''
     */
    id: string;
    /**
     * Defines the position of the sub event
     * @default new Point(0.5,0.5)
     */
    offset: PointModel;
    /**
     * Defines the collection of textual annotations of the sub events
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    annotations: ShapeAnnotationModel[];
    /**
     * Defines the collection of connection points of the sub events
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    ports: PointPortModel[];
    /**
     * Sets the width of the node
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    width: number;
    /**
     * Sets the height of the node
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    height: number;
    /**
     * Defines the space to be left between the node and its immediate parent
     * @default 0
     */
    margin: MarginModel;
    /**
     * Sets how to horizontally align a node with respect to its immediate parent
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Left - Aligns the diagram element at the left of its immediate parent
     * * Right - Aligns the diagram element at the right of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Center'
     */
    horizontalAlignment: HorizontalAlignment;
    /**
     * Sets how to vertically align a node with respect to its immediate parent
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Top - Aligns the diagram element at the top of its immediate parent
     * * Bottom - Aligns the diagram element at the bottom of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Center'
     */
    verticalAlignment: VerticalAlignment;
    /**
     * Sets the visibility of the sub event
     * @default true
     */
    visible: boolean;
    /**
     * @private
     * Returns the name of class BpmnSubEvent
     */
    getClassName(): string;
}
/**
 * Defines the behavior of the BpmnTransactionSubProcess
 */
export  class BpmnTransactionSubProcess extends base.ChildProperty<BpmnTransactionSubProcess> {
    /**
     * Defines the size and position of the success port
     */
    success: BpmnSubEventModel;
    /**
     * Defines the size and position of the failure port
     */
    failure: BpmnSubEventModel;
    /**
     * Defines the size and position of the cancel port
     */
    cancel: BpmnSubEventModel;
}
/**
 * Defines the behavior of the BPMNSubProcess
 */
export  class BpmnSubProcess extends base.ChildProperty<BpmnSubProcess> {
    /**
     * Defines the type of the sub process
     * * None - Sets the type of the Sub process as None
     * * Transaction - Sets the type of the Sub process as Transaction
     * * Event - Sets the type of the Sub process as Event
     * @default 'None'
     */
    type: BpmnSubProcessTypes;
    /**
     * Defines whether the sub process is without any prescribed order or not
     * @default false
     */
    adhoc: boolean;
    /**
     * Defines the boundary type of the BPMN process
     * * Default - Sets the type of the boundary as Default
     * * Call - Sets the type of the boundary as Call
     * * Event - Sets the type of the boundary as Event
     * @default 'Default'
     */
    /**
     *
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     * id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100,
     * shape: {
     *               type: 'Bpmn', shape: 'Activity', activity: {
     *                   activity: 'SubProcess',
     *                   subProcess: { adhoc: false, boundary: 'Default', collapsed: true }
     *               },
     *           }
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     */
    boundary: BpmnBoundary;
    /**
     * Defines the whether the task is triggered as a compensation of another task
     * @default false
     */
    compensation: boolean;
    /**
     * Defines the  type of the BPMNLoop
     * * None - Sets the type of the Bpmn loop as None
     * * Standard - Sets the type of the Bpmn loop as Standard
     * * ParallelMultiInstance - Sets the type of the Bpmn loop as ParallelMultiInstance
     * * SequenceMultiInstance - Sets the type of the Bpmn loop as SequenceMultiInstance
     * @default 'None'
     */
    loop: BpmnLoops;
    /**
     * Defines the whether the shape is collapsed or not
     * @default true
     */
    collapsed: boolean;
    /**
     * Defines the collection of events of the BPMN sub event
     * @default 'undefined'
     */
    /**
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let node1$: NodeModel = {
     *           id: 'node1', width: 190, height: 190, offsetX: 300, offsetY: 200,
     *           shape: {
     *               type: 'Bpmn', shape: 'Activity', activity: {
     *                   activity: 'SubProcess',
     *                   subProcess: {
     *                       type: 'Event', loop: 'ParallelMultiInstance',
     *                       compensation: true, adhoc: false, boundary: 'Event', collapsed: true,
     *                       events: [{
     *                           height: 20, width: 20, offset: { x: 0, y: 0 }, margin: { left: 10, top: 10 },
     *                           horizontalAlignment: 'Left',
     *                           verticalAlignment: 'Top',
     *                           annotations: [{
     *                               id: 'label3', margin: { bottom: 10 },
     *                                horizontalAlignment: 'Center',
     *                               verticalAlignment: 'Top',
     *                               content: 'Event', offset: { x: 0.5, y: 1 },
     *                               style: {
     *                                   color: 'black', fontFamily: 'Fantasy', fontSize: 8
     *                               }
     *                           }],
     *                           event: 'Intermediate', trigger: 'Error'
     *                       }]
     *                   }
     *               }
     *           }
     *       };
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     */
    events: BpmnSubEventModel[];
    /**
     * Defines the transaction sub process
     */
    transaction: BpmnTransactionSubProcessModel;
    /**
     * Defines the transaction sub process
     * @default []
     */
    processes: string[];
}
/**
 * Defines the behavior of the bpmn activity shape
 */
export  class BpmnActivity extends base.ChildProperty<BpmnActivity> {
    /**
     * Defines the type of the activity
     * * None - Sets the type of the Bpmn Activity as None
     * * Task - Sets the type of the Bpmn Activity as Task
     * * SubProcess - Sets the type of the Bpmn Activity as SubProcess
     * @default 'Task'
     */
    activity: BpmnActivities;
    /**
     * Defines the BPMN task
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *  id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *     shape: {
     *     type: 'Bpmn', shape: 'Activity', activity: {
     *     activity: 'Task', task: {
     *           type: 'Service'
     *       }
     *   }
     *  },
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default 'new BPMNTask()'
     */
    task: BpmnTaskModel;
    /**
     * Defines the type of the SubProcesses
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *  id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *     shape: {
     *     type: 'Bpmn', shape: 'Activity', activity: {
     *     activity: 'SubProcess',
     *     subProcess: { collapsed: true } as BpmnSubProcessModel
     *   }
     *  },
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default 'None'
     */
    subProcess: BpmnSubProcessModel;
    /**
     * @private
     * Returns the name of class BpmnActivity
     */
    getClassName(): string;
}
/**
 * Defines the behavior of the bpmn annotation
 */
export  class BpmnAnnotation extends base.ChildProperty<BpmnAnnotation> {
    constructor(parent: any, propName: string, defaultValue: Object, isArray?: boolean);
    /**
     * Sets the text to annotate the bpmn shape
     * @default ''
     */
    text: string;
    /**
     * Sets the id of the BPMN sub event
     * @default ''
     */
    id: string;
    /**
     * Sets the angle between the bpmn shape and the annotation
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    angle: number;
    /**
     * Sets the height of the text
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    height: number;
    /**
     * Sets the width of the text
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    width: number;
    /**
     * Sets the distance between the bpmn shape and the annotation
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    length: number;
    /** @private */
    nodeId: string;
    /**
     * @private
     * Returns the name of class BpmnAnnotation
     */
    getClassName(): string;
}
/**
 * Defines the behavior of the bpmn shape
 */
export  class BpmnShape extends Shape {
    /**
     * Defines the type of node shape
     * @default 'Basic'
     */
    type: Shapes;
    /**
     * Defines the type of the BPMN shape
     * * Event - Sets the type of the Bpmn Shape as Event
     * * Gateway - Sets the type of the Bpmn Shape as Gateway
     * * Message - Sets the type of the Bpmn Shape as Message
     * * DataObject - Sets the type of the Bpmn Shape as DataObject
     * * DataSource - Sets the type of the Bpmn Shape as DataSource
     * * Activity - Sets the type of the Bpmn Shape as Activity
     * * Group - Sets the type of the Bpmn Shape as Group
     * * TextAnnotation - Represents the shape as Text Annotation
     * @default 'Event'
     */
    /**
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *  id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *  shape: {
     *   type: 'Bpmn', shape: 'Gateway',
     *   gateway: { type: 'EventBased' } as BpmnGatewayModel
     *         } as BpmnShapeModel,
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     */
    shape: BpmnShapes;
    /**
     * Defines the type of the BPMN Event shape
     * @default 'None'
     */
    event: BpmnEventModel;
    /**
     * Defines the type of the BPMN Gateway shape
     * @default 'None'
     */
    gateway: BpmnGatewayModel;
    /**
     * Defines the type of the BPMN DataObject shape
     * @default 'None'
     */
    dataObject: BpmnDataObjectModel;
    /**
     * Defines the type of the BPMN Activity shape
     * @default 'None'
     */
    activity: BpmnActivityModel;
    /**
     * Defines the text of the bpmn annotation
     * @default 'None'
     */
    annotation: BpmnAnnotationModel;
    /**
     * Defines the text of the bpmn annotation collection
     * @default 'None'
     */
    annotations: BpmnAnnotationModel[];
    /**
     * @private
     * Returns the name of class BpmnShape
     */
    getClassName(): string;
}
/**
 * Defines the behavior of the UMLActivity shape
 */
export  class UmlActivityShape extends Shape {
    /**
     * Defines the type of node shape
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let shape$: UmlActivityShapeModel = { type: 'UMLActivity', shape: 'Action' };
     * let nodes$: NodeModel[] = [{
     * id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100, shape: shape
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default 'Basic'
     */
    type: Shapes;
    /**
     * Defines the type of the UMLActivity shape
     * * Action - Sets the type of the UMLActivity Shape as Action
     * * Decision - Sets the type of the UMLActivity Shape as Decision
     * * MergeNode - Sets the type of the UMLActivity Shape as MergeNode
     * * InitialNode - Sets the type of the UMLActivity Shape as InitialNode
     * * FinalNode - Sets the type of the UMLActivity Shape as FinalNode
     * * ForkNode - Sets the type of the UMLActivity Shape as ForkNode
     * * JoinNode - Sets the type of the UMLActivity Shape as JoinNode
     * * TimeEvent - Sets the type of the UMLActivity Shape as TimeEvent
     * * AcceptingEvent - Sets the type of the UMLActivity Shape as AcceptingEvent
     * * SendSignal - Sets the type of the UMLActivity Shape as SendSignal
     * * ReceiveSignal - Sets the type of the UMLActivity Shape as ReceiveSignal
     * * StructuredNode - Sets the type of the UMLActivity Shape as StructuredNode
     * * Note - Sets the type of the UMLActivity Shape as Note
     * @default 'Action'
     * @IgnoreSingular
     */
    shape: UmlActivityShapes;
    /**
     * @private
     * Returns the name of class UmlActivityShape
     */
    getClassName(): string;
}
/**
 * Defines the behavior of the uml class method
 */
export  class MethodArguments extends base.ChildProperty<MethodArguments> {
    /**
     * Defines the name of the attributes
     * @default ''
     * @IgnoreSingular
     */
    name: string;
    /**
     * Defines the type of the attributes
     * @default ''
     * @IgnoreSingular
     */
    type: string;
    /**
     * Sets the shape style of the node
     * @default new ShapeStyle()
     * @aspType object
     */
    style: ShapeStyleModel | TextStyleModel;
    /**
     * @private
     * Returns the name of class MethodArguments
     */
    getClassName(): string;
}
/**
 * Defines the behavior of the uml class attributes
 */
export  class UmlClassAttribute extends MethodArguments {
    /**
     * Defines the type of the attributes
     * @default 'Public'
     * @IgnoreSingular
     */
    scope: UmlScope;
    /**
     * Defines the separator of the attributes
     * @default false
     * @IgnoreSingular
     */
    isSeparator: boolean;
    /**
     * @private
     * Returns the name of class UmlClassAttribute
     */
    getClassName(): string;
}
/**
 * Defines the behavior of the uml class method
 */
export  class UmlClassMethod extends UmlClassAttribute {
    /**
     * Defines the type of the arguments
     * @default ''
     * @IgnoreSingular
     */
    parameters: MethodArgumentsModel[];
    /**
     * @private
     * Returns the name of class UmlClassMethod
     */
    getClassName(): string;
}
/**
 * Defines the behavior of the uml class shapes
 */
export  class UmlClass extends base.ChildProperty<UmlClass> {
    /**
     * Defines the name of the attributes
     * @default ''
     * @IgnoreSingular
     */
    name: string;
    /**
     * Defines the text of the bpmn annotation collection
     * @default 'None'
     */
    attributes: UmlClassAttributeModel[];
    /**
     * Defines the text of the bpmn annotation collection
     * @default 'None'
     */
    methods: UmlClassMethodModel[];
    /**
     * Sets the shape style of the node
     * @default new ShapeStyle()
     * @aspType object
     */
    style: TextStyleModel;
    /**
     * @private
     * Returns the name of class UmlClass
     */
    getClassName(): string;
}
/**
 * Defines the behavior of the uml interface shapes
 */
export  class UmlInterface extends UmlClass {
    /**
     * Defines the separator of the attributes
     * @default false
     * @IgnoreSingular
     */
    isSeparator: boolean;
    /**
     * @private
     * Returns the name of class UmlInterface
     */
    getClassName(): string;
}
/**
 * Defines the behavior of the uml interface shapes
 */
export  class UmlEnumerationMember extends base.ChildProperty<UmlEnumerationMember> {
    /**
     * Defines the value of the member
     * @default ''
     * @IgnoreSingular
     */
    name: string;
    /**
     * Defines the value of the member
     * @default ''
     * @IgnoreSingular
     */
    value: string;
    /**
     * Defines the separator of the attributes
     * @default false
     * @IgnoreSingular
     */
    isSeparator: boolean;
    /**
     * Sets the shape style of the node
     * @default new ShapeStyle()
     * @aspType object
     */
    style: ShapeStyleModel | TextStyleModel;
    /**
     * @private
     * Returns the name of class UmlEnumerationMember
     */
    getClassName(): string;
}
/**
 * Defines the behavior of the uml interface shapes
 */
export  class UmlEnumeration extends base.ChildProperty<UmlEnumeration> {
    /**
     * Defines the name of the attributes
     * @default ''
     * @IgnoreSingular
     */
    name: string;
    /**
     * Defines the text of the bpmn annotation collection
     * @default 'None'
     */
    members: UmlEnumerationMemberModel[];
    /**
     * Sets the shape style of the node
     * @default new ShapeStyle()
     * @aspType object
     */
    style: ShapeStyleModel | TextStyleModel;
    /**
     * @private
     * Returns the name of class UmlEnumeration
     */
    getClassName(): string;
}
/**
 * Defines the behavior of the UMLActivity shape
 */
export  class UmlClassifierShape extends Shape {
    /**
     * Defines the type of node shape
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let shape$: UmlActivityShapeModel = { type: 'UMLActivity', shape: 'Action' };
     * let nodes$: NodeModel[] = [{
     * id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100, shape: shape
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default 'Basic'
     */
    type: Shapes;
    /**
     * Defines the text of the bpmn annotation collection
     * @default 'None'
     */
    classShape: UmlClassModel;
    /**
     * Defines the text of the bpmn annotation collection
     * @default 'None'
     */
    interfaceShape: UmlInterfaceModel;
    /**
     * Defines the text of the bpmn annotation collection
     * @default 'None'
     */
    enumerationShape: UmlEnumerationModel;
    /**
     * Defines the type of classifier
     * @default 'Class'
     * @IgnoreSingular
     */
    classifier: ClassifierShape;
    /**
     * @private
     * Returns the name of class UmlClassifierShape
     */
    getClassName(): string;
}
/**
 * Defines the behavior of nodes
 */
export  class Node extends NodeBase implements IElement {
    /**
     * Defines the collection of textual annotations of nodes/connectors
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    annotations: ShapeAnnotationModel[];
    /**
     * Sets the x-coordinate of the position of the node
     * @default 0
     */
    offsetX: number;
    /**
     * Sets the y-coordinate of the position of the node
     * @default 0
     */
    offsetY: number;
    /**
     * Sets the reference point, that will act as the offset values(offsetX, offsetY) of a node
     * @default new Point(0.5,0.5)
     */
    pivot: PointModel;
    /**
     * Sets the width of the node
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    width: number;
    /**
     * Sets the height of the node
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    height: number;
    /**
     * Sets the minimum width of the node
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    minWidth: number;
    /**
     * Sets the minimum height of the node
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    minHeight: number;
    /**
     * Sets the maximum width of the node
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    maxWidth: number;
    /**
     * Sets the maximum height of the node
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    maxHeight: number;
    /**
     * Sets the rotate angle of the node
     * @default 0
     */
    rotateAngle: number;
    /**
     * Sets the shape style of the node
     * @default new ShapeStyle()
     * @aspType object
     */
    style: ShapeStyleModel | TextStyleModel;
    /**
     * Sets the background color of the shape
     * @default 'transparent'
     */
    backgroundColor: string;
    /**
     * Sets the border color of the node
     * @default 'none'
     */
    borderColor: string;
    /**
     * Sets the border width of the node
     * @default 0
     * @isBlazorNullableType true
     */
    borderWidth: number;
    /**
     * Sets the data source of the node
     */
    data: Object;
    /**
     * Defines the shape of a node
     * @default Basic Shape
     * @aspType object
     */
    shape: ShapeModel | FlowShapeModel | BasicShapeModel | ImageModel | PathModel | TextModel | BpmnShapeModel | NativeModel | HtmlModel | UmlActivityShapeModel | UmlClassifierShapeModel | SwimLaneModel;
    /**
     * Sets or gets the UI of a node
     * @default null
     */
    wrapper: Container;
    /**
     * Enables/Disables certain features of nodes
     * * None - Disable all node Constraints
     * * Select - Enables node to be selected
     * * Drag - Enables node to be Dragged
     * * Rotate - Enables node to be Rotate
     * * Shadow - Enables node to display shadow
     * * PointerEvents - Enables node to provide pointer  option
     * * Delete - Enables node to delete
     * * InConnect - Enables node to provide in connect option
     * * OutConnect - Enables node to provide out connect option
     * * Individual - Enables node to provide individual resize option
     * * Expandable - Enables node to provide Expandable option
     * * AllowDrop - Enables node to provide allow to drop option
     * * Inherit - Enables node to inherit the interaction option
     * * ResizeNorthEast - Enable ResizeNorthEast of the node
     * * ResizeEast - Enable ResizeEast of the node
     * * ResizeSouthEast - Enable ResizeSouthEast of the node
     * * ResizeSouth - Enable ResizeSouthWest of the node
     * * ResizeSouthWest - Enable ResizeSouthWest of the node
     * * ResizeSouth - Enable ResizeSouth of the node
     * * ResizeSouthWest - Enable ResizeSouthWest of the node
     * * ResizeWest - Enable ResizeWest of the node
     * * ResizeNorth - Enable ResizeNorth of the node
     * * Resize - Enables the Aspect ratio fo the node
     * * AspectRatio - Enables the Aspect ratio fo the node
     * * Tooltip - Enables or disables tool tip for the Nodes
     * * InheritTooltip - Enables or disables tool tip for the Nodes
     * * ReadOnly - Enables the  ReadOnly support for Annotation
     * @default 'Default'
     * @aspNumberEnum
     * @blazorNumberEnum
     */
    constraints: NodeConstraints;
    /**
     * Defines the shadow of a shape/path
     * @default null
     */
    shadow: ShadowModel;
    /**
     * Defines the children of group element
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    children: string[];
    /**
     * Defines the type of the container
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default null
     */
    container: ChildContainerModel;
    /**
     * Sets the horizontalAlignment of the node
     * @default 'Stretch'
     */
    horizontalAlignment: HorizontalAlignment;
    /**
     * Sets the verticalAlignment of the node
     * @default 'Stretch'
     */
    verticalAlignment: VerticalAlignment;
    /**
     * Used to define the rows for the grid container
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    rows: RowDefinition[];
    /**
     * Used to define the column for the grid container
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    columns: ColumnDefinition[];
    /**
     * Used to define a index of row in the grid
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    rowIndex: number;
    /**
     * Used to define a index of column in the grid
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    columnIndex: number;
    /**
     * Merge the row use the property in the grid container
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    rowSpan: number;
    /**
     * Merge the column use the property in the grid container
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    columnSpan: number;
    /**
     * Set the branch for the mind map
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default ''
     */
    branch: BranchTypes;
    /** @private */
    isCanvasUpdate: boolean;
    /** @private */
    status: Status;
    /** @private */
    parentId: string;
    /** @private */
    processId: string;
    /** @private */
    umlIndex: number;
    /** @private */
    outEdges: string[];
    /** @private */
    inEdges: string[];
    /** @private */
    isHeader: boolean;
    /** @private */
    isLane: boolean;
    /** @private */
    isPhase: boolean;
    /** @private */
    readonly actualSize: Size;
    constructor(parent: any, propName: string, defaultValue: Object, isArray?: boolean);
    /**
     * Allows to initialize the UI of a node
     */
    /** @private */
    init(diagram: any): DiagramElement;
    /** @private */
    initContainer(): Container;
    /** @private */
    initPorts(accessibilityContent: Function | string, container: Container): void;
    private getIconOffet;
    /** @private */
    initIcons(accessibilityContent: Function | string, layout: LayoutModel, container: Container, diagramId: string): void;
    /** @private */
    initAnnotations(accessibilityContent: Function | string, container: Container, diagramId: string, virtualize?: boolean): void;
    /** @private */
    initPortWrapper(ports: Port): DiagramElement;
    /** @private */
    initAnnotationWrapper(annotation: Annotation, diagramId?: string, virtualize?: boolean, value?: number): DiagramElement;
    private initIconContainer;
    private initIconSymbol;
    /**
     * @private
     * Returns the name of class Node
     */
    getClassName(): string;
}
/**
 * Defines the behavior of header in swimLane
 */
export  class Header extends base.ChildProperty<Shape> {
    /**
     * Sets the id of the header
     * @default ''
     */
    id: string;
    /**
     * Sets the content of the header
     * @default ''
     */
    annotation: Annotation;
    /**
     * Sets the style of the header
     * @default ''
     */
    style: ShapeStyleModel;
    /**
     * Sets the height of the header
     * @default 50
     */
    height: number;
    /**
     * Sets the width of the header
     * @default 50
     */
    width: number;
}
/**
 * Defines the behavior of lane in swimLane
 */
export  class Lane extends base.ChildProperty<Shape> {
    /**
     * Sets the id of the lane
     * @default ''
     */
    id: string;
    /**
     * Sets style of the lane
     * @default ''
     */
    style: ShapeStyleModel;
    /**
     * Defines the collection of child nodes
     * @default []
     */
    children: NodeModel[];
    /**
     * Defines the height of the phase
     * @default 100
     */
    height: number;
    /**
     * Defines the height of the phase
     * @default 100
     */
    width: number;
    /**
     * Defines the collection of header in the phase.
     * @default new Header()
     */
    header: HeaderModel;
    /**
     * @private
     * Returns the name of class Lane
     */
    getClassName(): string;
}
/**
 * Defines the behavior of phase in swimLane
 */
export  class Phase extends base.ChildProperty<Shape> {
    /**
     * Sets the id of the phase
     * @default ''
     */
    id: string;
    /**
     * Sets the style of the lane
     * @default ''
     */
    style: ShapeStyleModel;
    /**
     * Sets the header collection of the phase
     * @default  new Header()
     */
    header: HeaderModel;
    /**
     * Sets the offset of the lane
     * @default 100
     */
    offset: number;
    /**
     * @private
     * Returns the name of class Phase
     */
    getClassName(): string;
}
/**
 * Defines the behavior of swimLane shape
 */
export  class SwimLane extends Shape {
    /**
     * Defines the type of node shape.
     * @default 'Basic'
     */
    type: Shapes;
    /**
     * Defines the size of phase.
     * @default 20
     */
    phaseSize: number;
    /**
     * Defines the collection of phases.
     * @default 'undefined'
     */
    phases: PhaseModel[];
    /**
     * Defines the orientation of the swimLane
     * @default 'Horizontal'
     */
    orientation: Orientation;
    /**
     * Defines the collection of lanes
     * @default 'undefined'
     */
    lanes: LaneModel[];
    /**
     * Defines the collection of header
     * @default 'undefined'
     */
    header: HeaderModel;
    /**
     * Defines the whether the shape is a lane or not
     * @default false
     */
    isLane: boolean;
    /**
     * Defines the whether the shape is a phase or not
     * @default false
     */
    isPhase: boolean;
    /**
     * @private
     * Defines space between children and lane
     */
    padding: number;
    /**
     * @private
     * Defines header by user or not
     */
    hasHeader: boolean;
    /**
     * @private
     * Returns the name of class Phase
     */
    getClassName(): string;
}
/**
 * Defines the behavior of container
 */
export  class ChildContainer {
    /**
     * Defines the type of the container
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default Canvas
     */
    type: ContainerTypes;
    /**
     * Defines the type of the swimLane orientation.
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    orientation: Orientation;
    /**
     * @private
     * Returns the name of class ChildContainer
     */
    getClassName(): string;
}
/**
 * Defines the size and position of selected items and defines the appearance of selector
 */
export  class Selector extends base.ChildProperty<Selector> implements IElement {
    /**
     * Defines the size and position of the container
     * @default null
     */
    wrapper: Container;
    /**
     * Defines the collection of selected nodes
     * @blazorType List<DiagramNode>
     */
    nodes: NodeModel[];
    /**
     * Defines the collection of selected connectors
     * @blazorType List<DiagramConnector>
     */
    connectors: ConnectorModel[];
    /**
     * @private
     */
    annotation: ShapeAnnotationModel | PathAnnotationModel;
    /**
     * Sets/Gets the width of the container
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    width: number;
    /**
     * Sets/Gets the height of the container
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    height: number;
    /**
     * Sets the rotate angle of the container
     * @default 0
     * @isBlazorNullableType true
     */
    rotateAngle: number;
    /**
     * Sets the positionX of the container
     * @default 0
     * @isBlazorNullableType true
     */
    offsetX: number;
    /**
     * Sets the positionY of the container
     * @default 0
     * @isBlazorNullableType true
     */
    offsetY: number;
    /**
     * Sets the pivot of the selector
     * @default { x: 0.5, y: 0.5 }
     */
    pivot: PointModel;
    /**
     * Defines how to pick the objects to be selected using rubber band selection
     * * CompleteIntersect - Selects the objects that are contained within the selected region
     * * PartialIntersect - Selects the objects that are partially intersected with the selected region
     * @default 'CompleteIntersect'
     */
    rubberBandSelectionMode: RubberBandSelectionMode;
    /**
     * Defines the collection of user handle
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let nodes$: NodeModel[] = [{
     *           id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
     *           annotations: [{ content: 'Default Shape' }]
     *       },
     *       {
     *           id: 'node2', width: 100, height: 100, offsetX: 300, offsetY: 100,
     *           shape: {
     *               type: 'Basic', shape: 'Ellipse'
     *           },
     *           annotations: [{ content: 'Path Element' }]
     *       }
     *       ];
     *       let connectors$: ConnectorModel[] = [{
     *           id: 'connector1',
     *           type: 'Straight',
     *           sourcePoint: { x: 100, y: 300 },
     *           targetPoint: { x: 200, y: 400 },
     *       }];
     * let handle$: UserHandleModel[] = [
     * { name: 'handle', margin: { top: 0, bottom: 0, left: 0, right: 0 }, offset: 0,
     * pathData: 'M 376.892,225.284L 371.279,211.95L 376.892,198.617L 350.225,211.95L 376.892,225.284 Z',
     * side: 'Top', horizontalAlignment: 'Center', verticalAlignment: 'Center',
     * pathColor: 'yellow' }];
     * let diagram$: Diagram = new Diagram({
     * ...
     *     connectors: connectors, nodes: nodes,
     *     selectedItems: { constraints: SelectorConstraints.All, userHandles: handle },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default []
     */
    userHandles: UserHandleModel[];
    /**
     * Controls the visibility of selector.
     * * None - Hides all the selector elements
     * * ConnectorSourceThumb - Shows/hides the source thumb of the connector
     * * ConnectorTargetThumb - Shows/hides the target thumb of the connector
     * * ResizeSouthEast - Shows/hides the bottom right resize handle of the selector
     * * ResizeSouthWest - Shows/hides the bottom left resize handle of the selector
     * * ResizeNorthEast - Shows/hides the top right resize handle of the selector
     * * ResizeNorthWest - Shows/hides the top left resize handle of the selector
     * * ResizeEast - Shows/hides the middle right resize handle of the selector
     * * ResizeWest - Shows/hides the middle left resize handle of the selector
     * * ResizeSouth - Shows/hides the bottom center resize handle of the selector
     * * ResizeNorth - Shows/hides the top center resize handle of the selector
     * * Rotate - Shows/hides the rotate handle of the selector
     * * UserHandles - Shows/hides the user handles of the selector
     * * Resize - Shows/hides all resize handles of the selector
     * @default 'All'
     * @aspNumberEnum
     * @blazorNumberEnum
     */
    constraints: SelectorConstraints;
    /**
     * set the constraint of the container
     * * Rotate - Enable Rotate Thumb
     * * ConnectorSource - Enable Connector source point
     * * ConnectorTarget - Enable Connector target point
     * * ResizeNorthEast - Enable ResizeNorthEast Resize
     * * ResizeEast - Enable ResizeEast Resize
     * * ResizeSouthEast - Enable ResizeSouthEast Resize
     * * ResizeSouth - Enable ResizeSouth Resize
     * * ResizeSouthWest - Enable ResizeSouthWest Resize
     * * ResizeWest - Enable ResizeWest Resize
     * * ResizeNorthWest - Enable ResizeNorthWest Resize
     * * ResizeNorth - Enable ResizeNorth Resize
     * @private
     * @aspNumberEnum
     * @blazorNumberEnum
     */
    thumbsConstraints: ThumbsConstraints;
    /**
     * setTooltipTemplate helps to customize the content of a tooltip
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    setTooltipTemplate: Function | string;
    /**
     * Initializes the UI of the container
     */
    init(diagram: Diagram): Container;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/port-model.d.ts
/**
 * Interface for a class Port
 */
export interface PortModel {
    /**
     * Defines the unique id of the port
     * @default ''
     */
    id?: string;
    /**
     * Sets the horizontal alignment of the port with respect to its immediate parent(node/connector)
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Left - Aligns the diagram element at the left of its immediate parent
     * * Right - Aligns the diagram element at the right of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Center'
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Sets the vertical alignment of the port with respect to its immediate parent(node/connector)
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Top - Aligns the diagram element at the top of its immediate parent
     * * Bottom - Aligns the diagram element at the bottom of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Center'
     */
    verticalAlignment?: VerticalAlignment;
    /**
     * Defines the space that the port has to be moved from its actual position
     * @default new Margin(0,0,0,0)
     */
    margin?: MarginModel;
    /**
     * Sets the width of the port
     * @default 12
     */
    width?: number;
    /**
     * Sets the height of the port
     * @default 12
     */
    height?: number;
    /**
     * Defines the appearance of the port
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     *   let port: PointPortModel[] =
     * [{ id: 'port1', visibility: PortVisibility.Visible, shape: 'Circle', offset: { x: 0, y: 0 } },];
     * let nodes$: NodeModel[] = [{
     * id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
     * }];
     * nodes.ports = port;
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default {}
     */
    style?: ShapeStyleModel;
    /**
     * Defines the type of the port shape
     * * X - Sets the decorator shape as X
     * * Circle - Sets the decorator shape as Circle
     * * Square - Sets the decorator shape as Square
     * * Custom - Sets the decorator shape as Custom
     * @default 'Square'
     */
    shape?: PortShapes;
    /**
     * Defines the type of the port visibility
     * * Visible - Always shows the port
     * * Hidden - Always hides the port
     * * Hover - Shows the port when the mouse hovers over a node
     * * Connect - Shows the port when a connection end point is dragged over a node
     * @default 'Connect'
     * @aspNumberEnum
     * @blazorNumberEnum
     */
    visibility?: PortVisibility;
    /**
     * Defines the geometry of the port
     * @default ''
     */
    pathData?: string;
    /**
     * Defines the constraints of port
     * @default 'Default'
     * @aspNumberEnum
     * @blazorNumberEnum
     */
    constraints?: PortConstraints;
    /**
     * Allows the user to save custom information/data about a port
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    addInfo?: Object;
}
/**
 * Interface for a class PointPort
 */
export interface PointPortModel extends PortModel{
    /**
     * Defines the position of the port with respect to the boundaries of nodes/connector
     * @default new Point(0.5,0.5)
     */
    offset?: PointModel;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/port.d.ts
/**
 * Defines the behavior of connection ports
 */
export  abstract class Port extends base.ChildProperty<Port> {
    /**
     * Defines the unique id of the port
     * @default ''
     */
    id: string;
    /**
     * Sets the horizontal alignment of the port with respect to its immediate parent(node/connector)
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Left - Aligns the diagram element at the left of its immediate parent
     * * Right - Aligns the diagram element at the right of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Center'
     */
    horizontalAlignment: HorizontalAlignment;
    /**
     * Sets the vertical alignment of the port with respect to its immediate parent(node/connector)
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Top - Aligns the diagram element at the top of its immediate parent
     * * Bottom - Aligns the diagram element at the bottom of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Center'
     */
    verticalAlignment: VerticalAlignment;
    /**
     * Defines the space that the port has to be moved from its actual position
     * @default new Margin(0,0,0,0)
     */
    margin: MarginModel;
    /**
     * Sets the width of the port
     * @default 12
     */
    width: number;
    /**
     * Sets the height of the port
     * @default 12
     */
    height: number;
    /**
     * Defines the appearance of the port
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     *   let port$: PointPortModel[] =
     * [{ id: 'port1', visibility: PortVisibility.Visible, shape: 'Circle', offset: { x: 0, y: 0 } },];
     * let nodes$: NodeModel[] = [{
     * id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
     * }];
     * nodes.ports = port;
     * let diagram$: Diagram = new Diagram({
     * ...
     * nodes : nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default {}
     */
    style: ShapeStyleModel;
    /**
     * Defines the type of the port shape
     * * X - Sets the decorator shape as X
     * * Circle - Sets the decorator shape as Circle
     * * Square - Sets the decorator shape as Square
     * * Custom - Sets the decorator shape as Custom
     * @default 'Square'
     */
    shape: PortShapes;
    /**
     * Defines the type of the port visibility
     * * Visible - Always shows the port
     * * Hidden - Always hides the port
     * * Hover - Shows the port when the mouse hovers over a node
     * * Connect - Shows the port when a connection end point is dragged over a node
     * @default 'Connect'
     * @aspNumberEnum
     * @blazorNumberEnum
     */
    visibility: PortVisibility;
    /**
     * Defines the geometry of the port
     * @default ''
     */
    pathData: string;
    /**
     * Defines the constraints of port
     * @default 'Default'
     * @aspNumberEnum
     * @blazorNumberEnum
     */
    constraints: PortConstraints;
    /**
     * Allows the user to save custom information/data about a port
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    addInfo: Object;
}
/**
 * Defines the behavior of a port, that sticks to a point
 */
export  class PointPort extends Port {
    /**
     * Defines the position of the port with respect to the boundaries of nodes/connector
     * @default new Point(0.5,0.5)
     */
    offset: PointModel;
    constructor(parent: any, propName: string, defaultValue: Object, isArray?: boolean);
    /**
     * @private
     * Returns the name of class PointPort
     */
    getClassName(): string;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/service.d.ts
/**
 * ServiceLocator
 * @hidden
 */
export  class ServiceLocator {
    private services;
    register<T>(name: string, type: T): void;
    getService<T>(name: string): T;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/snapping.d.ts
/**
 * Snapping
 */
export  class Snapping {
    private line;
    private diagram;
    private render;
    constructor(diagram: Diagram);
    /** @private */
    canSnap(): boolean;
    /**
     * Snap to object
     * @private
     */
    snapPoint(diagram: Diagram, selectedObject: SelectorModel, towardsLeft: boolean, towardsTop: boolean, delta: PointModel, startPoint: PointModel, endPoint: PointModel): PointModel;
    /**
     * @private
     */
    round(value: number, snapIntervals: number[], scale: number): number;
    /**
     * Snap to Object
     */
    private snapObject;
    /**
     * @private
     */
    snapConnectorEnd(point: PointModel): PointModel;
    private canBeTarget;
    private snapSize;
    /**
     * Snap to object on top
     * @private
     */
    snapTop(horizontalSnap: Snap, verticalSnap: Snap, snapLine: SVGElement, deltaX: number, deltaY: number, shape: SelectorModel, ended: boolean, initialBoundsT: Rect): number;
    /**
     * Snap to object on right
     * @private
     */
    snapRight(horizontalSnap: Snap, verticalSnap: Snap, snapLine: SVGElement, deltaX: number, deltaY: number, shape: SelectorModel, ended: boolean, initialBound: Rect): number;
    /**
     * Snap to object on left
     * @private
     */
    snapLeft(horizontalSnap: Snap, verticalSnap: Snap, snapLine: SVGElement, deltaX: number, deltaY: number, shape: SelectorModel, ended: boolean, initialBoundsB: Rect): number;
    /**
     * Snap to object on bottom
     * @private
     */
    snapBottom(horizontalSnap: Snap, verticalSnap: Snap, snapLine: SVGElement, deltaX: number, deltaY: number, shape: SelectorModel | DiagramElement, ended: boolean, initialRect: Rect): number;
    /**
     * To create the same width and same size lines
     */
    private createGuidelines;
    /**
     * To create the alignment lines
     */
    private renderAlignmentLines;
    /**
     * To create Horizontal spacing lines
     */
    private createHSpacingLines;
    /**
     * To create vertical spacing lines
     */
    private createVSpacingLines;
    /**
     * Add the Horizontal spacing lines
     */
    private addHSpacingLines;
    /**
     * Add the vertical spacing lines
     */
    private addVSpacingLines;
    /**
     * To add same width lines
     */
    private addSameWidthLines;
    /**
     * To add same height lines
     */
    private addSameHeightLines;
    /**
     * Render spacing lines
     */
    private renderSpacingLines;
    /**
     * To Create Snap object with position, initial bounds, and final bounds
     * @private
     */
    createSnapObject(targetBounds: Rect, bounds: Rect, snap: string): SnapObject;
    /**
     * Calculate the snap angle
     * @private
     */
    snapAngle(diagram: Diagram, angle: number): number;
    /**
     * Check whether the node to be snapped or not.
     */
    private canConsider;
    /**
     * Find the total number of nodes in diagram using SpatialSearch
     */
    private findNodes;
    private intersectsRect;
    private getAdornerLayerSvg;
    /**
     * To remove grid lines on mouse move and mouse up
     * @private
     */
    removeGuidelines(diagram: Diagram): void;
    /**
     * Sort the objects by its distance
     */
    private sortByDistance;
    /**
     * To find nodes that are equally placed at left of the selected node
     */
    private findEquallySpacedNodesAtLeft;
    /**
     * To find nodes that are equally placed at right of the selected node
     */
    private findEquallySpacedNodesAtRight;
    private findEquallySpacedNodesAtTop;
    /**
     * To find nodes that are equally placed at bottom of the selected node
     */
    private findEquallySpacedNodesAtBottom;
    /**
     * To get Adoner layer to draw snapLine
     * @private
     */
    getLayer(): SVGElement;
    /**
     * Constructor for the snapping module
     * @private
     */
    /**
     * To destroy the snapping module
     * @return {void}
     * @private
     */
    destroy(): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
}
export interface Snap {
    snapped: boolean;
    offset: number;
    left?: boolean;
    bottom?: boolean;
    right?: boolean;
    top?: boolean;
}
/**
 * @private
 */
export interface SnapObject {
    start: PointModel;
    end: PointModel;
    offsetX: number;
    offsetY: number;
    type: string;
}
/**
 * @private
 */
export interface Objects {
    obj: DiagramElement;
    distance: number;
}
/**
 * @private
 */
export interface SnapSize {
    source: NodeModel;
    difference: number;
    offset: number;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/swim-lane.d.ts
/**
 * Swim lanes are used to visualize cross functional flow charts
 */ 
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/tooltip-model.d.ts
/**
 * Interface for a class DiagramTooltip
 */
export interface DiagramTooltipModel {
    /**
     * Defines the content of the popups.Tooltip
     * @default ''
     */
    content?: string | HTMLElement;
    /**
     * Defines the position of the popups.Tooltip
     * @default 'TopLeft'
     */
    position?: popups.Position;
    /**
     * Defines the relative mode of the popups.Tooltip
     * * Object - sets the tooltip position relative to the node
     * * Mouse - sets the tooltip position relative to the mouse
     * @default 'Mouse'
     */
    relativeMode?: TooltipRelativeMode;
    /**
     * Defines if the popups.Tooltip has tip pointer or not
     * @default true
     */
    showTipPointer?: boolean;
    /**
     * Sets the width of the popups.Tooltip
     * @default 'auto'
     */
    width?: number | string;
    /**
     * Sets the height of the popups.Tooltip
     * @default 'auto'
     */
    height?: number | string;
    /**
     * Sets how to open the popups.Tooltip
     * @default 'Auto'
     */
    openOn?: TooltipMode;
    /**
     * Allows to set the same or different animation option for the popups.Tooltip, when it is opened or closed.
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let diagram$: Diagram = new Diagram({
     * ...
     * constraints: DiagramConstraints.Default | DiagramConstraints.popups.Tooltip,
     * tooltip: { content: getcontent(), position: 'TopLeft', relativeMode: 'Object',
     * animation: { open: { effect: 'FadeZoomIn', delay: 0 },
     * close: { effect: 'FadeZoomOut', delay: 0 } } },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * function getcontent(): => {
     * ...
     * }
     * ```
     * @aspDefaultValueIgnore
     * @blazorType Syncfusion.EJ2.Blazor.Popups.popups.AnimationModel
     * @default { open: { effect: 'FadeIn', duration: 150, delay: 0 }, close: { effect: 'FadeOut', duration: 150, delay: 0 } }
     */
    animation?: popups.AnimationModel;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/tooltip.d.ts
/**
 * Defines the tooltip that should be shown when the mouse hovers over node.
 * An object that defines the description, appearance and alignments of tooltip
 */
export  abstract class DiagramTooltip extends base.ChildProperty<DiagramTooltip> {
    /**
     * Defines the content of the popups.Tooltip
     * @default ''
     */
    content: string | HTMLElement;
    /**
     * Defines the position of the popups.Tooltip
     * @default 'TopLeft'
     */
    position: popups.Position;
    /**
     * Defines the relative mode of the popups.Tooltip
     * * Object - sets the tooltip position relative to the node
     * * Mouse - sets the tooltip position relative to the mouse
     * @default 'Mouse'
     */
    relativeMode: TooltipRelativeMode;
    /**
     * Defines if the popups.Tooltip has tip pointer or not
     * @default true
     */
    showTipPointer: boolean;
    /**
     * Sets the width of the popups.Tooltip
     * @default 'auto'
     */
    width: number | string;
    /**
     * Sets the height of the popups.Tooltip
     * @default 'auto'
     */
    height: number | string;
    /**
     * Sets how to open the popups.Tooltip
     * @default 'Auto'
     */
    openOn: TooltipMode;
    /**
     * Allows to set the same or different animation option for the popups.Tooltip, when it is opened or closed.
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let diagram$: Diagram = new Diagram({
     * ...
     * constraints: DiagramConstraints.Default | DiagramConstraints.popups.Tooltip,
     * tooltip: { content: getcontent(), position: 'TopLeft', relativeMode: 'Object',
     * animation: { open: { effect: 'FadeZoomIn', delay: 0 },
     * close: { effect: 'FadeZoomOut', delay: 0 } } },
     * ...
     * });
     * diagram.appendTo('#diagram');
     * function getcontent(): => {
     * ...
     * }
     * ```
     * @aspDefaultValueIgnore
     * @blazorType Syncfusion.EJ2.Blazor.Popups.popups.AnimationModel
     * @default { open: { effect: 'FadeIn', duration: 150, delay: 0 }, close: { effect: 'FadeOut', duration: 150, delay: 0 } }
     */
    animation: popups.AnimationModel;
}
/**
 * @private
 * defines the popups.Tooltip.
 * @param diagram
 */
export  function initTooltip(diagram: Diagram): popups.Tooltip;
/**
 * @private
 * updates the contents of the tooltip.
 * @param diagram
 * @param node
 */
export  function updateTooltip(diagram: Diagram, node?: NodeModel | ConnectorModel): popups.Tooltip;
//node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/undo-redo.d.ts
/**
 * Undo redo function used for revert and restore the changes
 */
export  class UndoRedo {
    private groupUndo;
    private childTable;
    private historyCount;
    private hasGroup;
    private groupCount;
    /** @private */
    initHistory(diagram: Diagram): void;
    /** @private */
    addHistoryEntry(entry: HistoryEntry, diagram: Diagram): void;
    /** @private */
    applyLimit(list: HistoryEntry, stackLimit: number, diagram: Diagram, limitHistory?: boolean): void;
    /** @private */
    clearHistory(diagram: Diagram): void;
    private setEntryLimit;
    private limitHistoryStack;
    private removeFromStack;
    /** @private */
    undo(diagram: Diagram): void;
    private getHistoryChangeEvent;
    private getHistoryList;
    private getHistroyObject;
    private undoGroupAction;
    private undoEntry;
    private checkNodeObject;
    private group;
    private unGroup;
    private ignoreProperty;
    private getProperty;
    private recordLaneOrPhaseCollectionChanged;
    private recordAnnotationChanged;
    private recordChildCollectionChanged;
    private recordStackPositionChanged;
    private recordGridSizeChanged;
    private recordLanePositionChanged;
    private recordPortChanged;
    private recordPropertyChanged;
    private recordSegmentChanged;
    private segmentChanged;
    private recordPositionChanged;
    private positionChanged;
    private recordSizeChanged;
    private sizeChanged;
    private recordRotationChanged;
    private rotationChanged;
    private recordConnectionChanged;
    private connectionChanged;
    private recordCollectionChanged;
    private recordLabelCollectionChanged;
    private recordPortCollectionChanged;
    /** @private */
    redo(diagram: Diagram): void;
    private redoGroupAction;
    private redoEntry;
    private getUndoEntry;
    private getRedoEntry;
    /**
     * Constructor for the undo redo module
     * @private
     */
    constructor();
    /**
     * To destroy the undo redo module
     * @return {void}
     * @private
     */
    destroy(): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/matrix.d.ts
/**
 * Matrix module is used to transform points based on offsets, angle
 */
/** @private */
export  enum MatrixTypes {
    Identity = 0,
    Translation = 1,
    Scaling = 2,
    Unknown = 4
}
/** @private */
export  class Matrix {
    /**   @private  */
    m11: number;
    /**   @private  */
    m12: number;
    /**   @private  */
    m21: number;
    /**   @private  */
    m22: number;
    /**   @private  */
    offsetX: number;
    /**   @private  */
    offsetY: number;
    /**   @private  */
    type: MatrixTypes;
    constructor(m11: number, m12: number, m21: number, m22: number, offsetX: number, offsetY: number, type?: MatrixTypes);
}
/** @private */
export  function identityMatrix(): Matrix;
/** @private */
export  function transformPointByMatrix(matrix: Matrix, point: PointModel): PointModel;
/** @private */
export  function transformPointsByMatrix(matrix: Matrix, points: PointModel[]): PointModel[];
/** @private */
export  function rotateMatrix(matrix: Matrix, angle: number, centerX: number, centerY: number): void;
/** @private */
export  function scaleMatrix(matrix: Matrix, scaleX: number, scaleY: number, centerX?: number, centerY?: number): void;
/** @private */
export  function translateMatrix(matrix: Matrix, offsetX: number, offsetY: number): void;
/** @private */
export  function multiplyMatrix(matrix1: Matrix, matrix2: Matrix): void;
//node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/point-model.d.ts
/**
 * Interface for a class Point
 */
export interface PointModel {
    /**
     * Sets the x-coordinate of a position
     * @default 0
     * @isBlazorNullableType true
     */
    x?: number;
    /**
     * Sets the y-coordinate of a position
     * @default 0
     * @isBlazorNullableType true
     */
    y?: number;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/point.d.ts
/**
 * Defines and processes coordinates
 */
export  class Point extends base.ChildProperty<Point> {
    /**
     * Sets the x-coordinate of a position
     * @default 0
     * @isBlazorNullableType true
     */
    x: number;
    /**
     * Sets the y-coordinate of a position
     * @default 0
     * @isBlazorNullableType true
     */
    y: number;
    /**   @private  */
    static equals(point1: PointModel, point2: PointModel): boolean;
    /**
     * check whether the points are given
     */
    static isEmptyPoint(point: PointModel): boolean;
    /**   @private  */
    static transform(point: PointModel, angle: number, length: number): PointModel;
    /**   @private  */
    static findLength(s: PointModel, e: PointModel): number;
    /**   @private  */
    static findAngle(point1: PointModel, point2: PointModel): number;
    /**   @private  */
    static distancePoints(pt1: PointModel, pt2: PointModel): number;
    /**   @private  */
    static getLengthFromListOfPoints(points: PointModel[]): number;
    /**   @private  */
    static adjustPoint(source: PointModel, target: PointModel, isStart: boolean, length: number): PointModel;
    /**   @private  */
    static direction(pt1: PointModel, pt2: PointModel): string;
    /**
     * @private
     * Returns the name of class Point
     */
    getClassName(): string;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/rect.d.ts
/**
 * Rect defines and processes rectangular regions
 */
export  class Rect {
    /**
     * Sets the x-coordinate of the starting point of a rectangular region
     * @default 0
     */
    x: number;
    /**
     * Sets the y-coordinate of the starting point of a rectangular region
     * @default 0
     */
    y: number;
    /**
     * Sets the width of a rectangular region
     * @default 0
     */
    width: number;
    /**
     * Sets the height of a rectangular region
     * @default 0
     */
    height: number;
    constructor(x?: number, y?: number, width?: number, height?: number);
    /**   @private  */
    static empty: Rect;
    /**   @private  */
    readonly left: number;
    /**   @private  */
    readonly right: number;
    /**   @private  */
    readonly top: number;
    /**   @private  */
    readonly bottom: number;
    /**   @private  */
    readonly topLeft: PointModel;
    /**   @private  */
    readonly topRight: PointModel;
    /**   @private  */
    readonly bottomLeft: PointModel;
    /**   @private  */
    readonly bottomRight: PointModel;
    /**   @private  */
    readonly middleLeft: PointModel;
    /**   @private  */
    readonly middleRight: PointModel;
    /**   @private  */
    readonly topCenter: PointModel;
    /**   @private  */
    readonly bottomCenter: PointModel;
    /**   @private  */
    readonly center: PointModel;
    /**   @private  */
    equals(rect1: Rect, rect2: Rect): boolean;
    /**   @private  */
    uniteRect(rect: Rect): Rect;
    /**   @private  */
    unitePoint(point: PointModel): void;
    /**   @private  */
    Inflate(padding: number): Rect;
    /**   @private  */
    intersects(rect: Rect): boolean;
    /**   @private  */
    containsRect(rect: Rect): boolean;
    /**   @private  */
    containsPoint(point: PointModel, padding?: number): boolean;
    /**   @private  */
    static toBounds(points: PointModel[]): Rect;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/size.d.ts
/**
 * Size defines and processes the size(width/height) of the objects
 */
export  class Size {
    /**
     * Sets the height of an object
     * @default 0
     */
    height: number;
    /**
     * Sets the width of an object
     * @default 0
     */
    width: number;
    constructor(width?: number, height?: number);
    /**   @private  */
    isEmpty(): boolean;
    /**   @private  */
    clone(): Size;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/print-settings.d.ts
/**
 * Print and Export Settings
 */
export  class PrintAndExport {
    private diagram;
    constructor(diagram: Diagram);
    /**
     * To Export the diagram
     * @private
     */
    exportDiagram(options: IExportOptions): string | SVGElement;
    private setCanvas;
    private canvasMultiplePage;
    private exportImage;
    /**   @private  */
    getObjectsBound(options?: IExportOptions): Rect;
    /**   @private  */
    getDiagramBounds(mode?: string, options?: IExportOptions): Rect;
    private setScaleValueforCanvas;
    private diagramAsSvg;
    private setTransform;
    private diagramAsCanvas;
    private updateWrapper;
    private updateObjectValue;
    private isImageExportable;
    private getPrintCanvasStyle;
    private getMultipleImage;
    private printImage;
    /**
     * To print the image
     * @private
     */
    print(options: IExportOptions): void;
    private printImages;
    /** @private */
    getDiagramContent(styleSheets?: StyleSheetList): string;
    /** @private */
    exportImages(image: string, options: IExportOptions): void;
    /**
     * To destroy the Print and Export module
     * @return {void}
     * @private
     */
    destroy(): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/rendering/canvas-interface.d.ts
/**
 * canvas interface
 */
/** @private */
export interface StyleAttributes {
    fill: string;
    stroke: string;
    strokeWidth: number;
    dashArray: string;
    opacity: number;
    shadow?: ShadowModel;
    gradient?: GradientModel;
    class?: string;
}
/** @private */
export interface BaseAttributes extends StyleAttributes {
    id: string;
    x: number;
    y: number;
    width: number;
    height: number;
    angle: number;
    pivotX: number;
    pivotY: number;
    visible: boolean;
    description?: string;
    canApplyStyle?: boolean;
    flip?: FlipDirection;
}
/** @private */
export interface LineAttributes extends BaseAttributes {
    startPoint: PointModel;
    endPoint: PointModel;
}
/** @private */
export interface CircleAttributes extends BaseAttributes {
    centerX: number;
    centerY: number;
    radius: number;
    id: string;
}
/** @private */
export interface Alignment {
    vAlign?: string;
    hAlign?: string;
}
/** @private */
export interface SegmentInfo {
    point?: PointModel;
    index?: number;
    angle?: number;
}
/** @private */
export interface RectAttributes extends BaseAttributes {
    cornerRadius?: number;
}
/** @private */
export interface PathAttributes extends BaseAttributes {
    data: string;
}
/** @private */
export interface ImageAttributes extends BaseAttributes {
    source: string;
    sourceX: number;
    sourceY: number;
    sourceWidth: number;
    sourceHeight: number;
    scale: Scale;
    alignment: ImageAlignment;
}
/** @private */
export interface NativeAttributes extends BaseAttributes {
    content: SVGElement;
    scale: Stretch;
}
/** @private */
export interface TextAttributes extends BaseAttributes {
    whiteSpace: string;
    content: string;
    breakWord: string;
    fontSize: number;
    textWrapping: TextWrap;
    fontFamily: string;
    bold: boolean;
    italic: boolean;
    textAlign: string;
    color: string;
    textOverflow: TextOverflow;
    textDecoration: string;
    doWrap: boolean;
    wrapBounds: TextBounds;
    childNodes: SubTextElement[];
}
/**
 * Defines the properties of sub text element
 */
export interface SubTextElement {
    /** returns the text from sub text element */
    text: string;
    /** returns the start position, where the text element to be rendered */
    x: number;
    /** returns the left position, where text to be rendered  */
    dy: number;
    /** returns the width of the sub text element  */
    width: number;
}
/**
 * Defines the properties of text bounds
 */
export interface TextBounds {
    /** returns the start position, where the text element is rendered  */
    x: number;
    /** returns the width of the sub text element  */
    width: number;
}
/** @private */
export interface PathSegment {
    command?: string;
    angle?: number;
    largeArc?: boolean;
    x2?: number;
    sweep?: boolean;
    x1?: number;
    y1?: number;
    y2?: number;
    x0?: number;
    y0?: number;
    x?: number;
    y?: number;
    r1?: number;
    r2?: number;
    centp?: {
        x?: number;
        y?: number;
    };
    xAxisRotation?: number;
    rx?: number;
    ry?: number;
    a1?: number;
    ad?: number;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/rendering/canvas-renderer.d.ts
/**
 * Canvas Renderer
 */
/** @private */
export  class CanvasRenderer implements IRenderer {
    /**   @private  */
    static getContext(canvas: HTMLCanvasElement): CanvasRenderingContext2D;
    private static setCanvasSize;
    /**   @private  */
    renderGradient(options: StyleAttributes, ctx: CanvasRenderingContext2D, x?: number, y?: number): CanvasRenderingContext2D;
    /**   @private  */
    renderShadow(options: BaseAttributes, canvas: HTMLCanvasElement, collection?: Object[]): void;
    /**   @private  */
    static createCanvas(id: string, width: number, height: number): HTMLCanvasElement;
    private setStyle;
    private rotateContext;
    private setFontStyle;
    /**   @private  */
    parseDashArray(dashArray: string): number[];
    /**   @private  */
    drawRectangle(canvas: HTMLCanvasElement, options: RectAttributes): void;
    /**   @private  */
    drawPath(canvas: HTMLCanvasElement, options: PathAttributes): void;
    /**   @private  */
    renderPath(canvas: HTMLCanvasElement, options: PathAttributes, collection: Object[]): void;
    /**   @private  */
    drawText(canvas: HTMLCanvasElement, options: TextAttributes, parentSvg?: SVGSVGElement, ariaLabel?: Object, diagramId?: string, scaleValue?: number, parentNode?: Container): void;
    private loadImage;
    /**   @private  */
    drawImage(canvas: HTMLCanvasElement, obj: ImageAttributes, parentSvg?: SVGSVGElement, fromPalette?: boolean): void;
    private image;
    private getSliceOffset;
    private getMeetOffset;
    private m;
    private r;
    private a;
    /**   @private  */
    labelAlign(text: TextAttributes, wrapBounds: TextBounds, childNodes: SubTextElement[]): PointModel;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/rendering/IRenderer.d.ts
/**
 * IRenderer interface defines the base of the SVG and Canvas renderer.
 */
/** @private */
export interface IRenderer {
    renderShadow(options: BaseAttributes, canvas: HTMLCanvasElement | SVGElement, collection: Object[]): void;
    parseDashArray(dashArray: string): number[];
    drawRectangle(canvas: HTMLCanvasElement | SVGElement, options: RectAttributes, diagramId: string, onlyRect?: boolean, isSelector?: boolean, parentSvg?: SVGSVGElement, ariaLabel?: Object): void;
    drawPath(canvas: HTMLCanvasElement | SVGElement, options: PathAttributes, diagramId: string, isSelector?: boolean, parentSvg?: SVGSVGElement, ariaLabel?: Object): void;
    renderPath(canvas: HTMLCanvasElement | SVGElement, options: PathAttributes, collection: Object[]): void;
    drawText(canvas: HTMLCanvasElement | SVGElement, options: TextAttributes, parentSvg?: SVGSVGElement, ariaLabel?: Object, diagramId?: string, scaleValue?: number, parentNode?: Container): void;
    drawImage(canvas: HTMLCanvasElement | SVGElement | ImageElement, obj: ImageAttributes, parentSvg?: SVGSVGElement, fromPalette?: boolean): void;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/rendering/renderer.d.ts
/**
 * Renderer module is used to render basic diagram elements
 */
/** @private */
export  class DiagramRenderer {
    /**   @private  */
    renderer: IRenderer;
    private diagramId;
    /** @private */
    isSvgMode: Boolean;
    private svgRenderer;
    private nativeSvgLayer;
    private diagramSvgLayer;
    private iconSvgLayer;
    /** @private */
    adornerSvgLayer: SVGSVGElement;
    /** @private */
    rendererActions: RendererAction;
    private groupElement;
    private element;
    private transform;
    constructor(name: string, svgRender: IRenderer, isSvgMode: Boolean);
    /**   @private  */
    setCursor(canvas: HTMLElement, cursor: string): void;
    /** @private */
    setLayers(): void;
    private getAdornerLayer;
    private getParentSvg;
    private getParentElement;
    private getGroupElement;
    /**   @private  */
    renderElement(element: DiagramElement, canvas: HTMLCanvasElement | SVGElement, htmlLayer: HTMLElement, transform?: TransformFactor, parentSvg?: SVGSVGElement, createParent?: boolean, fromPalette?: boolean, indexValue?: number): void;
    /**   @private  */
    drawSelectionRectangle(x: number, y: number, w: number, h: number, canvas: HTMLCanvasElement | SVGElement, t: TransformFactor): void;
    /**
     * @private
     */
    renderHighlighter(element: DiagramElement, canvas: SVGElement, transform: TransformFactor): void;
    /**
     * @private
     */
    renderStackHighlighter(element: DiagramElement, canvas: SVGElement, transform: TransformFactor, isVertical: Boolean, position: PointModel, isUml?: boolean, isSwimlane?: boolean): void;
    /**   @private  */
    drawLine(canvas: SVGElement, options: LineAttributes): void;
    /**   @private  */
    drawPath(canvas: SVGElement, options: PathAttributes): void;
    /**   @private  */
    renderResizeHandle(element: DiagramElement, canvas: HTMLCanvasElement | SVGElement, constraints: ThumbsConstraints, currentZoom: number, selectorConstraints?: SelectorConstraints, transform?: TransformFactor, canMask?: boolean, enableNode?: number, nodeConstraints?: boolean, isSwimlane?: boolean): void;
    /**   @private  */
    renderEndPointHandle(selector: ConnectorModel, canvas: HTMLCanvasElement | SVGElement, constraints: ThumbsConstraints, selectorConstraints: SelectorConstraints, transform: TransformFactor, connectedSource: boolean, connectedTarget?: boolean, isSegmentEditing?: boolean): void;
    /**   @private  */
    renderOrthogonalThumbs(id: string, selector: DiagramElement, segment: OrthogonalSegment, canvas: HTMLCanvasElement | SVGElement, visibility: boolean, t: TransformFactor): void;
    /**   @private  */
    renderOrthogonalThumb(id: string, selector: DiagramElement, x: number, y: number, canvas: HTMLCanvasElement | SVGElement, visible: boolean, orientation: string, t: TransformFactor): void;
    /**   @private  */
    renderPivotLine(element: DiagramElement, canvas: HTMLCanvasElement | SVGElement, transform?: TransformFactor, selectorConstraints?: SelectorConstraints, canMask?: boolean): void;
    /**   @private  */
    renderBezierLine(id: string, wrapper: DiagramElement, canvas: HTMLCanvasElement | SVGElement, start: PointModel, end: PointModel, transform?: TransformFactor): void;
    /**   @private  */
    renderCircularHandle(id: string, selector: DiagramElement, cx: number, cy: number, canvas: HTMLCanvasElement | SVGElement, visible: boolean, enableSelector?: number, t?: TransformFactor, connected?: boolean, canMask?: boolean, ariaLabel?: Object, count?: number, className?: string): void;
    /**   @private  */
    renderBorder(selector: DiagramElement, canvas: HTMLCanvasElement | SVGElement, transform?: TransformFactor, enableNode?: number, isBorderTickness?: boolean, isSwimlane?: boolean): void;
    /**   @private  */
    renderUserHandler(selectorItem: SelectorModel, canvas: HTMLCanvasElement | SVGElement, transform?: TransformFactor): void;
    /**   @private  */
    renderRotateThumb(wrapper: DiagramElement, canvas: HTMLCanvasElement | SVGElement, transform?: TransformFactor, selectorConstraints?: SelectorConstraints, canMask?: boolean): void;
    /**   @private  */
    renderPathElement(element: PathElement, canvas: HTMLCanvasElement | SVGElement, transform?: TransformFactor, parentSvg?: SVGSVGElement, fromPalette?: boolean): void;
    /**   @private  */
    renderSvgGridlines(snapSettings: SnapSettingsModel, gridSvg: SVGElement, t: TransformFactor, rulerSettings: RulerSettingsModel, hRuler: RulerModel, vRuler: RulerModel): void;
    private horizontalSvgGridlines;
    private verticalSvgGridlines;
    /**   @private  */
    updateGrid(snapSettings: SnapSettingsModel, svgGrid: SVGSVGElement, transform: TransformFactor, rulerSettings: RulerSettingsModel, hRuler: RulerModel, vRuler: RulerModel): void;
    private updateLineIntervals;
    private scaleSnapInterval;
    /**   @private  */
    renderTextElement(element: TextElement, canvas: HTMLCanvasElement | SVGElement, transform?: TransformFactor, parentSvg?: SVGSVGElement, fromPalette?: boolean): void;
    private renderNativeElement;
    private renderHTMLElement;
    /**   @private  */
    renderImageElement(element: ImageElement, canvas: HTMLCanvasElement | SVGElement, transform?: TransformFactor, parentSvg?: SVGSVGElement, fromPalette?: boolean): void;
    /**   @private  */
    renderContainer(group: Container, canvas: HTMLCanvasElement | SVGElement, htmlLayer: HTMLElement, transform?: TransformFactor, parentSvg?: SVGSVGElement, createParent?: boolean, fromPalette?: boolean, indexValue?: number): void;
    renderFlipElement(element: DiagramElement, canvas: SVGElement | HTMLCanvasElement, flip: FlipDirection): void;
    /**   @private  */
    hasNativeParent(children: DiagramElement[], count?: number): DiagramElement;
    /**   @private  */
    renderRect(element: DiagramElement, canvas: HTMLCanvasElement | SVGElement, transform?: TransformFactor, parentSvg?: SVGSVGElement): void;
    /**   @private  */
    drawRect(canvas: SVGElement, options: RectAttributes): void;
    /**   @private  */
    getBaseAttributes(element: DiagramElement, transform?: TransformFactor): BaseAttributes;
    /**   @private  */
    static renderSvgBackGroundImage(background: BackgroundModel, diagramElement: HTMLElement, x: number, y: number, width: number, height: number): void;
    /**   @private  */
    transformLayers(transform: TransformFactor, svgMode: boolean): boolean;
    /** @private */
    updateNode(element: DiagramElement, diagramElementsLayer: HTMLCanvasElement, htmlLayer: HTMLElement, transform?: TransformFactor, insertIndex?: number): void;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/rendering/svg-renderer.d.ts
/**
 * SVG Renderer
 */
/** @private */
export  class SvgRenderer implements IRenderer {
    /**   @private  */
    renderShadow(options: BaseAttributes, canvas: SVGElement, collection?: Object[], parentSvg?: SVGSVGElement): void;
    /**   @private  */
    parseDashArray(dashArray: string): number[];
    /**   @private  */
    drawRectangle(svg: SVGElement, options: RectAttributes, diagramId: string, onlyRect?: boolean, isSelector?: Boolean, parentSvg?: SVGSVGElement, ariaLabel?: Object): void;
    /**   @private  */
    updateSelectionRegion(gElement: SVGElement, options: RectAttributes): void;
    /**   @private  */
    createGElement(elementType: string, attribute: Object): SVGGElement;
    /** @private */
    drawLine(gElement: SVGElement, options: LineAttributes): void;
    /** @private */
    drawCircle(gElement: SVGElement, options: CircleAttributes, enableSelector?: number, ariaLabel?: Object): void;
    /**   @private  */
    drawPath(svg: SVGElement, options: PathAttributes, diagramId: string, isSelector?: Boolean, parentSvg?: SVGSVGElement, ariaLabel?: Object): void;
    /**   @private  */
    renderPath(svg: SVGElement, options: PathAttributes, collection: Object[]): void;
    private setSvgFontStyle;
    /**   @private  */
    drawText(canvas: SVGElement, options: TextAttributes, parentSvg?: SVGSVGElement, ariaLabel?: Object, diagramId?: string, scaleValue?: number, parentNode?: Container): void;
    private setText;
    /**   @private  */
    drawImage(canvas: SVGElement | HTMLCanvasElement, obj: ImageAttributes, parentSvg?: SVGSVGElement, fromPalette?: boolean): void;
    /** @private */
    drawHTMLContent(element: DiagramHtmlElement, canvas: HTMLElement, transform?: TransformFactor, value?: boolean, indexValue?: number): void;
    /** @private */
    drawNativeContent(element: DiagramNativeElement, canvas: HTMLCanvasElement | SVGElement, height: number, width: number, parentSvg: SVGSVGElement): void;
    private setNativTransform;
    /**
     * used to crop the given native element into a rectangle of the given size
     * @private
     * @param node
     * @param group
     * @param height
     * @param width
     * @param parentSvg
     */
    drawClipPath(node: DiagramNativeElement, group: SVGElement, height: number, width: number, parentSvg: SVGSVGElement): SVGElement;
    /**   @private  */
    renderGradient(options: StyleAttributes, svg: SVGElement, diagramId?: string): SVGElement;
    /**   @private  */
    createLinearGradient(linear: LinearGradientModel): SVGElement;
    /**   @private  */
    createRadialGradient(radial: RadialGradientModel): SVGElement;
    /**   @private  */
    setSvgStyle(svg: SVGElement, style: StyleAttributes, diagramId?: string): void;
    /**   @private  */
    svgLabelAlign(text: TextAttributes, wrapBound: TextBounds, childNodes: SubTextElement[]): PointModel;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/ruler/ruler.d.ts
/**
 * defines the helper methods for the ruler
 */
/**
 * @private
 */
export  function renderOverlapElement(diagram: Diagram): void;
/**
 * @private
 */
export  function renderRuler(diagram: Diagram, isHorizontal: Boolean): void;
/**
 * @private
 */
export  function updateRuler(diagram: Diagram): void;
/**
 * @private
 */
export  function removeRulerElements(diagram: Diagram): void;
/** @private */
export  function getRulerSize(diagram: Diagram): Size;
/** @private */
export  function getRulerGeometry(diagram: Diagram): Size;
/**
 * @private
 */
export  function removeRulerMarkers(): void;
export  function drawRulerMarkers(diagram: Diagram, currentPoint: PointModel): void;
//node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/base-util.d.ts
/**
 * Implements the basic functionalities
 */
/** @private */
export  function randomId(): string;
/** @private */
export  function cornersPointsBeforeRotation(ele: DiagramElement): Rect;
/** @private */
export  function getBounds(element: DiagramElement): Rect;
/** @private */
export  function cloneObject(obj: Object, additionalProp?: Function | string, key?: string): Object;
/** @private */
export  function getInternalProperties(propName: string): string[];
/** @private */
export  function cloneArray(sourceArray: Object[], additionalProp?: Function | string, key?: string): Object[];
/** @private */
export  function extendObject(options: Object, childObject: Object): Object;
/** @private */
export  function extendArray(sourceArray: Object[], childArray: Object[]): Object[];
/** @private */
export  function textAlignToString(value: TextAlign): string;
/** @private */
export  function wordBreakToString(value: TextWrap | TextDecoration): string;
export  function bBoxText(textContent: string, options: TextAttributes): number;
/** @private */
export  function middleElement(i: number, j: number): number;
/** @private */
export  function overFlow(text: string, options: TextAttributes): string;
/** @private */
export  function whiteSpaceToString(value: WhiteSpace, wrap: TextWrap): string;
/** @private */
export  function rotateSize(size: Size, angle: number): Size;
/** @private */
export  function rotatePoint(angle: number, pivotX: number, pivotY: number, point: PointModel): PointModel;
/** @private */
export  function getOffset(topLeft: PointModel, obj: DiagramElement): PointModel;
/**
 * Get function
 */
export  function getFunction(value: Function | string): Function;
//node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/connector.d.ts
/**
 * Connector modules are used to dock and update the connectors
 */
/** @private */
export  function findConnectorPoints(element: Connector, layoutOrientation?: LayoutOrientation): PointModel[];
/** @private */
export  function swapBounds(object: DiagramElement, bounds: Corners, outerBounds: Rect): Corners;
/** @private */
export  function findAngle(s: PointModel, e: PointModel): number;
/** @private */
export  function findPoint(cor: Corners, direction: string): PointModel;
/** @private */
export  function getIntersection(ele: Connector, bounds: DiagramElement, sPt: PointModel, tPt: PointModel, isTar: boolean): PointModel;
/** @private */
export  function getIntersectionPoints(thisSegment: Segment, pts: Object[], minimal: boolean, point: PointModel): PointModel;
/** @private */
export  function orthoConnection2Segment(source: End, target: End): PointModel[];
export  function getPortDirection(point: PointModel, corner: Corners, bounds: Rect, closeEdge: boolean): Direction;
/** @private */
export  function getOuterBounds(obj: Connector): Rect;
export  function getOppositeDirection(direction: string): string;
/** @private */
export interface Intersection {
    enabled: boolean;
    intersectPt: PointModel;
}
/** @private */
export interface LengthFraction {
    lengthFractionIndex: number;
    fullLength: number;
    segmentIndex: number;
    pointIndex: number;
}
/** @private */
export interface BridgeSegment {
    bridgeStartPoint: PointModel[];
    bridges: Bridge[];
    segmentIndex: number;
}
/** @private */
export interface ArcSegment {
    angle: number;
    endPoint: PointModel;
    path: string;
    segmentPointIndex: number;
    startPoint: PointModel;
    sweep: number;
    target: string;
    rendered: boolean;
}
/** @private */
export interface Bridge {
    angle: number;
    endPoint: PointModel;
    path: string;
    segmentPointIndex: number;
    startPoint: PointModel;
    sweep: number;
    target: string;
    rendered: boolean;
}
/** @private */
export interface End {
    corners: Corners;
    point: PointModel;
    direction: Direction;
    margin: MarginModel;
}
//node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/constraints-util.d.ts
/**
 * constraints-util module contains the common constraints
 */
/** @private */
export  function canSelect(node: ConnectorModel | NodeModel | PathAnnotationModel | ShapeAnnotationModel): number;
/** @private */
export  function canMove(node: ConnectorModel | NodeModel | SelectorModel | ShapeAnnotationModel | PathAnnotationModel): number;
/** @private */
export  function canEnablePointerEvents(node: ConnectorModel | NodeModel, diagram: Diagram): number;
/** @private */
export  function canDelete(node: ConnectorModel | NodeModel): number;
/** @private */
export  function canBridge(connector: Connector, diagram: Diagram): number;
/** @private */
export  function canEnableRouting(connector: Connector, diagram: Diagram): number;
/** @private */
export  function canDragSourceEnd(connector: Connector): number;
/** @private */
export  function canDragTargetEnd(connector: Connector): number;
/** @private */
export  function canDragSegmentThumb(connector: Connector): number;
/** @private */
export  function canRotate(node: NodeModel | ShapeAnnotationModel | PathAnnotationModel): number;
/** @private */
export  function canShadow(node: NodeModel): number;
/** @private */
export  function canInConnect(node: NodeModel): number;
/** @private */
export  function canPortInConnect(port: PointPortModel): number;
/** @private */
export  function canOutConnect(node: NodeModel): number;
/** @private */
export  function canPortOutConnect(port: PointPortModel): number;
/** @private */
export  function canResize(node: NodeModel | ShapeAnnotationModel | PathAnnotationModel, direction?: string): number;
/** @private */
export  function canAllowDrop(node: ConnectorModel | NodeModel): number;
/** @private */
export  function canVitualize(diagram: Diagram): number;
/** @private */
export  function canEnableToolTip(node: ConnectorModel | NodeModel, diagram: Diagram): number;
/** @private */
export  function canSingleSelect(model: Diagram): number;
/** @private */
export  function canMultiSelect(model: Diagram): number;
/** @private */
export  function canZoomPan(model: Diagram): number;
/** @private */
export  function canContinuousDraw(model: Diagram): number;
/** @private */
export  function canDrawOnce(model: Diagram): number;
/** @private */
export  function defaultTool(model: Diagram): number;
/** @private */
export  function canZoom(model: Diagram): number;
/** @private */
export  function canPan(model: Diagram): number;
/** @private */
export  function canUserInteract(model: Diagram): number;
/** @private */
export  function canApiInteract(model: Diagram): number;
/** @private */
export  function canPanX(model: Diagram): number;
/** @private */
export  function canPanY(model: Diagram): number;
/** @private */
export  function canZoomTextEdit(diagram: Diagram): number;
/** @private */
export  function canPageEditable(model: Diagram): number;
/** @private */
export  function enableReadOnly(annotation: AnnotationModel, node: NodeModel | ConnectorModel): number;
/** @private */
export  function canDraw(port: PointPortModel | NodeModel, diagram: Diagram): number;
/** @private */
export  function canDrag(port: PointPortModel | NodeModel, diagram: Diagram): number;
/** @private */
export  function canPreventClearSelection(diagramActions: DiagramAction): boolean;
/** @private */
export  function canDrawThumbs(rendererActions: RendererAction): boolean;
/** @private */
export  function avoidDrawSelector(rendererActions: RendererAction): boolean;
//node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/diagram-util.d.ts
/** @private */
export  function completeRegion(region: Rect, selectedObjects: (NodeModel | ConnectorModel)[]): (NodeModel | ConnectorModel)[];
/** @private */
export  function findNodeByName(nodes: (NodeModel | ConnectorModel)[], name: string): boolean;
/**
 * @private
 */
export  function findObjectType(drawingObject: NodeModel | ConnectorModel): string;
/**
 * @private
 */
export  function setSwimLaneDefaults(child: NodeModel | ConnectorModel, node: NodeModel | ConnectorModel): void;
/**
 * @private
 */
export  function setUMLActivityDefaults(child: NodeModel | ConnectorModel, node: NodeModel | ConnectorModel): void;
/**
 * @private
 */
export  function setConnectorDefaults(child: ConnectorModel, node: ConnectorModel): void;
/** @private */
export  function findNearestPoint(reference: PointModel, start: PointModel, end: PointModel): PointModel;
/** @private */
export  function isDiagramChild(htmlLayer: HTMLElement): boolean;
/** @private */
export  function groupHasType(node: NodeModel, type: Shapes, nameTable: {}): boolean;
/** @private */
export  function updateDefaultValues(actualNode: NodeModel | ConnectorModel, plainValue: NodeModel | ConnectorModel, defaultValue: object, property?: NodeModel | ConnectorModel, oldKey?: string): void;
/** @private */
export  function updateLayoutValue(actualNode: TreeInfo, defaultValue: object, nodes?: INode[], node?: INode): void;
/** @private */
export  function isPointOverConnector(connector: ConnectorModel, reference: PointModel): boolean;
/** @private */
export  function intersect3(lineUtil1: Segment, lineUtil2: Segment): Intersection;
/** @private */
export  function intersect2(start1: PointModel, end1: PointModel, start2: PointModel, end2: PointModel): PointModel;
/** @private */
export  function getLineSegment(x1: number, y1: number, x2: number, y2: number): Segment;
/** @private */
export  function getPoints(element: DiagramElement, corners: Corners, padding?: number): PointModel[];
/**
 * @private
 * sets the offset of the tooltip.
 * @param diagram
 * @param mousePosition
 * @param node
 */
export  function getTooltipOffset(diagram: Diagram, mousePosition: PointModel, node: NodeModel | ConnectorModel): PointModel;
/** @private */
export  function sort(objects: (NodeModel | ConnectorModel)[], option: DistributeOptions): (NodeModel | ConnectorModel)[];
/** @private */
export  function getAnnotationPosition(pts: PointModel[], annotation: PathAnnotation, bound: Rect): SegmentInfo;
/** @private */
export  function getOffsetOfConnector(points: PointModel[], annotation: PathAnnotation, bounds: Rect): SegmentInfo;
/** @private */
export  function getAlignedPosition(annotation: PathAnnotation): number;
/** @private */
export  function alignLabelOnSegments(obj: PathAnnotation, ang: number, pts: PointModel[]): Alignment;
/** @private */
export  function getBezierDirection(src: PointModel, tar: PointModel): string;
/** @private */
export  function removeChildNodes(node: NodeModel, diagram: Diagram): void;
/** @private */
export  function serialize(model: Diagram): string;
/** @private */
export  function deserialize(model: string, diagram: Diagram): Object;
/** @private */
export  function upgrade(dataObj: Diagram): Diagram;
/** @private */
export  function updateStyle(changedObject: TextStyleModel, target: DiagramElement): void;
/** @private */
export  function updateHyperlink(changedObject: HyperlinkModel, target: DiagramElement, actualAnnotation: AnnotationModel): void;
/** @private */
export  function updateShapeContent(content: DiagramElement, actualObject: Node, diagram: Diagram): void;
/** @private */
export  function updateShape(node: Node, actualObject: Node, oldObject: Node, diagram: Diagram): void;
/** @private */
export  function updateContent(newValues: Node, actualObject: Node, diagram: Diagram): void;
/** @private */
export  function updateUmlActivityNode(actualObject: Node, newValues: Node): void;
/** @private */
export  function getUMLFinalNode(node: Node): Canvas;
/** @private */
export  function getUMLActivityShapes(umlActivityShape: PathElement, content: DiagramElement, node: Node): DiagramElement;
/**   @private  */
export  function removeGradient(svgId: string): void;
/** @private */
export  function removeItem(array: String[], item: string): void;
/** @private */
export  function updateConnector(connector: Connector, points: PointModel[]): void;
/** @private */
export  function getUserHandlePosition(selectorItem: SelectorModel, handle: UserHandleModel, transform?: TransformFactor): PointModel;
/** @private */
export  function canResizeCorner(selectorConstraints: SelectorConstraints, action: string, thumbsConstraints: ThumbsConstraints, selectedItems: Selector): boolean;
/** @private */
export  function canShowCorner(selectorConstraints: SelectorConstraints, action: string): boolean;
/** @private */
export  function checkPortRestriction(port: PointPortModel, portVisibility: PortVisibility): number;
/** @private */
export  function findAnnotation(node: NodeModel | ConnectorModel, id: string): ShapeAnnotationModel | PathAnnotationModel | TextModel;
/** @private */
export  function findPort(node: NodeModel | ConnectorModel, id: string): PointPortModel;
/** @private */
export  function getInOutConnectPorts(node: NodeModel, isInConnect: boolean): PointPortModel;
/** @private */
export  function findObjectIndex(node: NodeModel | ConnectorModel, id: string, annotation?: boolean): string;
/** @private */
export  function getObjectFromCollection(obj: (NodeModel | ConnectorModel)[], id: string): boolean;
/** @private */
export  function scaleElement(element: DiagramElement, sw: number, sh: number, refObject: DiagramElement): void;
/** @private */
export  function arrangeChild(obj: Node, x: number, y: number, nameTable: {}, drop: boolean, diagram: Diagram | SymbolPalette): void;
/** @private */
export  function insertObject(obj: NodeModel | ConnectorModel, key: string, collection: Object[]): void;
/** @private */
export  function getElement(element: DiagramHtmlElement | DiagramNativeElement): Object;
/** @private */
export  function getCollectionChangeEventArguements(args1: IBlazorCollectionChangeEventArgs, obj: NodeModel | ConnectorModel, state: EventState, type: ChangeType): IBlazorCollectionChangeEventArgs;
/** @private */
export  function getDropEventArguements(args: MouseEventArgs, arg: IBlazorDropEventArgs): IBlazorDropEventArgs;
/** @private */
export  function getPoint(x: number, y: number, w: number, h: number, angle: number, offsetX: number, offsetY: number, cornerPoint: PointModel): PointModel;
/**
 * Get the object as Node | Connector
 * @param obj
 */
export  let getObjectType: Function;
/** @private */
export  let flipConnector: Function;
/** @private */
export  let updatePortEdges: Function;
/** @private */
export  let alignElement: Function;
/** @private */
export  let updatePathElement: Function;
/** @private */
export  let findPath: Function;
/** @private */
export  let findDistance: Function;
/** @private */
export  function cloneBlazorObject(args: object): Object;
//node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/dom-util.d.ts
/**
 * Defines the functionalities that need to access DOM
 */
/** @private */
export  function removeElementsByClass(className: string, id?: string): void;
/** @private */
export  function findSegmentPoints(element: PathElement): PointModel[];
export  function getChildNode(node: SVGElement): SVGElement[] | HTMLCollection;
export  function translatePoints(element: PathElement, points: PointModel[]): PointModel[];
/** @private */
export  function measurePath(data: string): Rect;
export  function measureHtmlText(style: TextStyleModel, content: string, width: number, height: number, maxWidth?: number): Size;
/** @private */
export  function measureText(text: TextElement, style: TextStyleModel, content: string, maxWidth?: number, textValue?: string): Size;
/** @private */
export  function measureImage(source: string, contentSize: Size): Size;
/** @private */
export  function measureNativeContent(nativeContent: SVGElement): Rect;
/**
 * @private
 */
export  function measureNativeSvg(nativeContent: SVGElement): Rect;
/** @private */
export  function updatePath(element: PathElement, bounds: Rect, child: PathElement, options?: BaseAttributes): string;
/** @private */
export  function getDiagramLayerSvg(diagramId: string): SVGSVGElement;
/** @private */
export  function getDiagramElement(elementId: string, contentId?: string): HTMLElement;
/** @private */
export  function getDomIndex(viewId: string, elementId: string, layer: string): number;
/**
 * @private
 */
export  function getAdornerLayerSvg(diagramId: string): SVGSVGElement;
/** @private */
export  function getSelectorElement(diagramId: string): SVGElement;
/**
 * @private
 */
export  function getAdornerLayer(diagramId: string): SVGElement;
/** @private */
export  function getDiagramLayer(diagramId: string): SVGElement;
/** @private */
export  function getPortLayerSvg(diagramId: string): SVGSVGElement;
/** @private */
export  function getNativeLayerSvg(diagramId: string): SVGSVGElement;
/** @private */
export  function getGridLayerSvg(diagramId: string): SVGSVGElement;
/** @private */
export  function getBackgroundLayerSvg(diagramId: string): SVGSVGElement;
/** @private */
export  function getBackgroundImageLayer(diagramId: string): SVGSVGElement;
/** @private */
export  function getBackgroundLayer(diagramId: string): SVGSVGElement;
/** @private */
export  function getGridLayer(diagramId: string): SVGElement;
/** @private */
export  function getNativeLayer(diagramId: string): SVGElement;
/** @private */
export  function getHTMLLayer(diagramId: string): HTMLElement;
/** @private */
export  function createHtmlElement(elementType: string, attribute: Object): HTMLElement;
/** @private */
export  function createSvgElement(elementType: string, attribute: Object): SVGElement;
/** @hidden */
export  function parentsUntil(elem: Element, selector: string, isID?: boolean): Element;
export  function hasClass(element: HTMLElement, className: string): boolean;
/** @hidden */
export  function getScrollerWidth(): number;
/**
 * Handles the touch pointer.
 * @return {boolean}
 * @private
 */
export  function addTouchPointer(touchList: ITouches[], e: PointerEvent, touches: TouchList): ITouches[];
/**
 * removes the element from dom
 * @param elementId
 */
export  function removeElement(elementId: string, contentId?: string): void;
export  function getContent(element: DiagramHtmlElement | DiagramNativeElement, isHtml: boolean): HTMLElement | SVGElement;
/** @private */
export  function setAttributeSvg(svg: SVGElement, attributes: Object): void;
/** @private */
export  function setAttributeHtml(element: HTMLElement, attributes: Object): void;
/** @private */
export  function createMeasureElements(): void;
/** @private */
export  function setChildPosition(temp: SubTextElement, childNodes: SubTextElement[], i: number, options: TextAttributes): number;
//node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/path-util.d.ts
/**
 * These utility methods help to process the data and to convert it to desired dimensions
 */
/** @private */
export  function processPathData(data: string): Object[];
/** @private */
export  function parsePathData(data: string): Object[];
/**
 * Used to find the path for rounded rect
 */
export  function getRectanglePath(cornerRadius: number, height: number, width: number): string;
/**
 * Used to find the path for polygon shapes
 */
export  function getPolygonPath(collection: PointModel[]): string;
/** @private */
export  function pathSegmentCollection(collection: Object[]): Object[];
/** @private */
export  function transformPath(arr: Object[], sX: number, sY: number, s: boolean, bX: number, bY: number, iX: number, iY: number): string;
/** @private */
export  function updatedSegment(segment: PathSegment, char: string, obj: PathSegment, isScale: boolean, sX: number, sY: number): Object;
/** @private */
export  function scalePathData(val: number, scaleFactor: number, oldOffset: number, newOffset: number): number;
/** @private */
export  function splitArrayCollection(arrayCollection: Object[]): Object[];
/** @private */
export  function getPathString(arrayCollection: Object[]): string;
/** @private */
export  function getString(obj: PathSegment): string;
//node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/swim-lane-util.d.ts
/**
 * SwimLane modules are used to rendering and interaction.
 */
/** @private */
export  function initSwimLane(grid: GridPanel, diagram: Diagram, node: NodeModel): void;
/** @private */
export  function addObjectToGrid(diagram: Diagram, grid: GridPanel, parent: NodeModel, object: NodeModel, isHeader?: boolean, isPhase?: boolean, isLane?: boolean, canvas?: string): Container;
/** @private */
export  function headerDefine(grid: GridPanel, diagram: Diagram, object: NodeModel): void;
/** @private */
export  function phaseDefine(grid: GridPanel, diagram: Diagram, object: NodeModel, indexValue: number, orientation: boolean, phaseIndex: number): void;
/** @private */
export  function laneCollection(grid: GridPanel, diagram: Diagram, object: NodeModel, indexValue: number, laneIndex: number, orientation: boolean): void;
/** @private */
export  function createRow(row: RowDefinition[], height: number): void;
/** @private */
export  function createColumn(width: number): ColumnDefinition;
/** @private */
export  function initGridRow(row: RowDefinition[], orientation: boolean, object: NodeModel): void;
/** @private */
export  function initGridColumns(columns: ColumnDefinition[], orientation: boolean, object: NodeModel): void;
/** @private */
export  function getConnectors(diagram: Diagram, grid: GridPanel, rowIndex: number, isRowUpdate: boolean): string[];
/** @private */
export  function swimLaneMeasureAndArrange(obj: NodeModel): void;
/** @private */
export  function ChangeLaneIndex(diagram: Diagram, obj: NodeModel, startRowIndex: number): void;
/** @private */
export  function arrangeChildNodesInSwimLane(diagram: Diagram, obj: NodeModel): void;
/** @private */
export  function updateChildOuterBounds(grid: GridPanel, obj: NodeModel): void;
/** @private */
export  function checkLaneSize(obj: NodeModel): void;
/** @private */
export  function checkPhaseOffset(obj: NodeModel, diagram: Diagram): void;
/** @private */
export  function updateConnectorsProperties(connectors: string[], diagram: Diagram): void;
/** @private */
export  function laneInterChanged(diagram: Diagram, obj: NodeModel, target: NodeModel, position?: PointModel): void;
/** @private */
export  function updateSwimLaneObject(diagram: Diagram, obj: Node, swimLane: NodeModel, helperObject: NodeModel): void;
/** @private */
export  function findLaneIndex(swimLane: NodeModel, laneObj: NodeModel): number;
/** @private */
export  function findPhaseIndex(phase: NodeModel, swimLane: NodeModel): number;
/** @private */
export  function findStartLaneIndex(swimLane: NodeModel): number;
/** @private */
export  function updatePhaseMaxWidth(parent: NodeModel, diagram: Diagram, wrapper: Canvas, columnIndex: number): void;
/** @private */
export  function updateHeaderMaxWidth(diagram: Diagram, swimLane: NodeModel): void;
/** @private */
export  function addLane(diagram: Diagram, parent: NodeModel, lane: LaneModel, count?: number): void;
export  function addPhase(diagram: Diagram, parent: NodeModel, newPhase: PhaseModel): void;
export  function addLastPhase(phaseIndex: number, parent: NodeModel, entry: HistoryEntry, grid: GridPanel, orientation: boolean, newPhase: PhaseModel): void;
export  function addHorizontalPhase(diagram: Diagram, node: NodeModel, grid: GridPanel, index: number, orientation: boolean): void;
export  function addVerticalPhase(diagram: Diagram, node: NodeModel, grid: GridPanel, rowIndex: number, orientation: boolean): void;
export  function arrangeChildInGrid(diagram: Diagram, nextCell: GridCell, gridCell: GridCell, rect: Rect, parentWrapper: Container, orientation: boolean, prevCell?: GridCell): void;
export  function swimLaneSelection(diagram: Diagram, node: NodeModel, corner: string): void;
export  function pasteSwimLane(swimLane: NodeModel, diagram: Diagram, clipboardData?: ClipBoardObject, laneNode?: NodeModel, isLane?: boolean, isUndo?: boolean): NodeModel;
export  function gridSelection(diagram: Diagram, selectorModel: SelectorModel, id?: string, isSymbolDrag?: boolean): Canvas;
export  function removeLaneChildNode(diagram: Diagram, swimLaneNode: NodeModel, currentObj: NodeModel, isChildNode?: NodeModel, laneIndex?: number): void;
export  function getGridChildren(obj: DiagramElement): DiagramElement;
export  function removeSwimLane(diagram: Diagram, obj: NodeModel): void;
export  function removeLane(diagram: Diagram, lane: NodeModel, swimLane: NodeModel, lanes?: LaneModel): void;
export  function removeChildren(diagram: Diagram, canvas: Canvas): void;
export  function removePhase(diagram: Diagram, phase: NodeModel, swimLane: NodeModel, swimLanePhases?: PhaseModel): void;
export  function removeHorizontalPhase(diagram: Diagram, grid: GridPanel, phase: NodeModel, phaseIndex?: number): void;
export  function removeVerticalPhase(diagram: Diagram, grid: GridPanel, phase: NodeModel, phaseIndex: number, swimLane: NodeModel): void;
/**
 * @private
 */
export  function considerSwimLanePadding(diagram: Diagram, node: NodeModel, padding: number): void;
/**
 * @private
 */
export  function checkLaneChildrenOffset(swimLane: NodeModel): void;
//node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/uml-util.d.ts
/**
 * These utility methods help to process the data and to convert it to desired dimensions
 */
/** @private */
export  function getULMClassifierShapes(content: DiagramElement, node: NodeModel, diagram: Diagram): DiagramElement;
/** @private */
export  function getClassNodes(node: Node, diagram: Diagram, classifier: UmlClassModel, textWrap: TextWrap): void;
/** @private */
export  function getClassMembers(node: Node, diagram: Diagram, classifier: UmlClassModel, textWrap: TextWrap): void;
/** @private */
export  function addSeparator(stack: Node, diagram: Diagram): void;
/** @private */
export  function getStyle(stack: Node, node: UmlClassModel): TextStyleModel;
//node_modules/@syncfusion/ej2-diagrams/src/index.d.ts
/**
 * Diagram component exported items
 */
//node_modules/@syncfusion/ej2-diagrams/src/overview/index.d.ts
/**
 * Overview Components
 */
//node_modules/@syncfusion/ej2-diagrams/src/overview/overview-model.d.ts
/**
 * Interface for a class Overview
 */
export interface OverviewModel extends base.ComponentModel{
    /**
     * Defines the width of the overview
     * @default '100%'
     */
    width?: string | number;
    /**
     * Defines the height of the overview
     * @default '100%'
     */
    height?: string | number;
    /**
     * Defines the ID of the overview
     * @default ''
     */
    sourceID?: string;
    /**
     * Triggers after render the diagram elements
     * @event
     * @blazorProperty 'Created'
     */
    created?: base.EmitType<Object>;
}
//node_modules/@syncfusion/ej2-diagrams/src/overview/overview.d.ts
/**
 * Overview control allows you to see a preview or an overall view of the entire content of a Diagram.
 * This helps you to look at the overall picture of a large Diagram
 * To navigate, pan, or zoom, on a particular position of the page.
 * ```html
 * <div id='diagram'/>
 * <div id="overview"></div>
 * ```
 * ```typescript
 * let overview: Overview;
 * let diagram$: Diagram = new Diagram({
 * width:'1000px', height:'500px' });
 * diagram.appendTo('#diagram');
 * let options: OverviewModel = {};
 * options.sourceID = 'diagram';
 * options.width = '250px';
 * options.height = '500px';
 * overview = new Overview(options);
 * overview.appendTo('#overview');
 * ```
 */
export  class Overview extends base.Component<HTMLElement> implements base.INotifyPropertyChanged {
    /**
     * Defines the width of the overview
     * @default '100%'
     */
    width: string | number;
    /**
     * Defines the height of the overview
     * @default '100%'
     */
    height: string | number;
    /**
     * Defines the ID of the overview
     * @default ''
     */
    sourceID: string;
    /**
     * Triggers after render the diagram elements
     * @event
     * @blazorProperty 'Created'
     */
    created: base.EmitType<Object>;
    private parent;
    private canvas;
    private svg;
    /** @private */
    mode: RenderingMode;
    /** @private */
    id: string;
    private actionName;
    private startPoint;
    private currentPoint;
    private prevPoint;
    private resizeDirection;
    private scale;
    private inAction;
    private viewPortRatio;
    private horizontalOffset;
    private verticalOffset;
    /** @private */
    contentWidth: number;
    /** @private */
    contentHeight: number;
    /** @private */
    diagramLayer: HTMLCanvasElement | SVGGElement;
    private diagramLayerDiv;
    private model;
    private helper;
    private resizeTo;
    private event;
    /**   @private  */
    diagramRenderer: DiagramRenderer;
    constructor(options?: OverviewModel, element?: HTMLElement | string);
    /**
     * Updates the overview control when the objects are changed
     * @param newProp Lists the new values of the changed properties
     * @param oldProp Lists the old values of the changed properties
     */
    onPropertyChanged(newProp: OverviewModel, oldProp: OverviewModel): void;
    /**
     * Get the properties to be maintained in the persisted state.
     * @return {string}
     */
    getPersistData(): string;
    /**
     * Initialize nodes, connectors and renderer
     */
    protected preRender(): void;
    protected render(): void;
    private getSizeValue;
    private renderCanvas;
    private setParent;
    private getDiagram;
    private unWireEvents;
    private wireEvents;
    /**
     * @private
     */
    /**
     * @private
     */
    renderDocument(view: Overview): void;
    /** @private */
    removeDocument(view: Overview): void;
    private renderHtmlLayer;
    private renderNativeLayer;
    private addOverviewRectPanel;
    private renderOverviewCorner;
    private updateOverviewRectangle;
    private updateHelper;
    private updateOverviewrect;
    private updateOverviewCorner;
    private translateOverviewRectangle;
    private renderOverviewRect;
    private scrollOverviewRect;
    private updateParentView;
    updateHtmlLayer(view: Overview): void;
    /** @private */
    updateView(view: Overview): void;
    private scrolled;
    private updateCursor;
    private mouseMove;
    private documentMouseUp;
    private windowResize;
    /** @private */
    mouseDown(evt: PointerEvent | TouchEvent): void;
    private mouseUp;
    private initHelper;
    private mousePosition;
    /**
     * To destroy the Overview
     * @return {void}
     * @private
     */
    destroy(): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
}
//node_modules/@syncfusion/ej2-diagrams/src/ruler/index.d.ts
/**
 * Exported Ruler files
 */
//node_modules/@syncfusion/ej2-diagrams/src/ruler/objects/interface/interfaces.d.ts
/**
 * defines the interface for the rulers
 */
/** @private */
export interface IArrangeTickOptions {
    ruler?: Ruler;
    tickLength?: number;
    tickInterval?: number;
}
//node_modules/@syncfusion/ej2-diagrams/src/ruler/ruler-model.d.ts
/**
 * Interface for a class Ruler
 */
export interface RulerModel extends base.ComponentModel{
    /**
     * Defines the unique interval of the ruler.
     * @default 5
     */
    interval?: number;
    /**
     * Sets the segment width of the ruler.
     * @default 100
     */
    segmentWidth?: number;
    /**
     * Defines the orientation of the ruler.
     * @default 'Horizontal'
     */
    orientation?: RulerOrientation;
    /**
     * Defines the alignment of the tick in the ruler.
     * @default 'RightOrBottom'
     */
    tickAlignment?: TickAlignment;
    /**
     * Defines the color of the marker.
     * @default 'red'
     */
    markerColor?: string;
    /**
     * Defines the thickness of the ruler.
     * @default 25
     */
    thickness?: number;
    /**
     * Sets the segment width of the ruler.
     * @default null
     * @deprecated
     */
    arrangeTick?: Function | string;
    /**
     * Defines the length of the ruler.
     * @default 400
     */
    length?: number;
}
//node_modules/@syncfusion/ej2-diagrams/src/ruler/ruler.d.ts
/**
 * Set of TickAlignment available for Ruler.
 */
export  type TickAlignment = 'LeftOrTop' | 'RightOrBottom';
/**
 * Set of orientations available for Ruler.
 */
export  type RulerOrientation = 'Horizontal' | 'Vertical';
/**
 * Represents the Ruler component that measures the Diagram objects, indicate positions, and align Diagram elements.
 * ```html
 * <div id='ruler'>Show Ruler</div>
 * ```
 * ```typescript
 * <script>
 *   var rulerObj = new Ruler({ showRuler: true });
 *   rulerObj.appendTo('#ruler');
 * </script>
 * ```
 */
export  class Ruler extends base.Component<HTMLElement> implements base.INotifyPropertyChanged {
    /**
     * Defines the unique interval of the ruler.
     * @default 5
     */
    interval: number;
    /**
     * Sets the segment width of the ruler.
     * @default 100
     */
    segmentWidth: number;
    /**
     * Defines the orientation of the ruler.
     * @default 'Horizontal'
     */
    orientation: RulerOrientation;
    /**
     * Defines the alignment of the tick in the ruler.
     * @default 'RightOrBottom'
     */
    tickAlignment: TickAlignment;
    /**
     * Defines the color of the marker.
     * @default 'red'
     */
    markerColor: string;
    /**
     * Defines the thickness of the ruler.
     * @default 25
     */
    thickness: number;
    /**
     * Sets the segment width of the ruler.
     * @default null
     * @deprecated
     */
    arrangeTick: Function | string;
    /**
     * Defines the length of the ruler.
     * @default 400
     */
    length: number;
    /**   @private  */
    offset: number;
    /**   @private  */
    scale: number;
    /**   @private  */
    startValue: number;
    /**   @private  */
    defStartValue: number;
    /**   @private  */
    hRulerOffset: number;
    /**   @private  */
    vRulerOffset: number;
    /**
     * Constructor for creating the Ruler base.Component
     */
    constructor(options?: RulerModel, element?: string | HTMLElement);
    /**
     * Initializes the values of private members.
     * @private
     */
    protected preRender(): void;
    /**
     * Renders the rulers.
     * @private
     */
    render(): void;
    /**
     * Core method to return the component name.
     * @private
     */
    getModuleName(): string;
    /**
     * To destroy the ruler
     * @return {void}
     */
    destroy(): void;
    /**
     * Get the properties to be maintained in the persisted state.
     * @return {string}
     */
    getPersistData(): string;
    /**
     * Refreshes the ruler when the Ruler properties are updated
     * @param options
     */
    onPropertyChanged(newProp: RulerModel, oldProp: RulerModel): void;
    private updateRulerGeometry;
    private renderRulerSpace;
    private updateRuler;
    private updateSegments;
    private updateSegment;
    private updateTickLabel;
    private getNewSegment;
    private createNewTicks;
    private getLinePoint;
    private createTick;
    private createTickLabel;
    /**
     * @private
     * @param scale
     */
    updateSegmentWidth(scale: number): number;
    private createMarkerLine;
    /**
     * @private
     * @param rulerObj
     * @param currentPoint
     */
    drawRulerMarker(rulerObj: HTMLElement, currentPoint: PointModel, offset: number): void;
    private getRulerGeometry;
    private getRulerSize;
    private getRulerSVG;
    /**
     * Method to bind events for the ruler
     */
    private wireEvents;
    /**
     * Method to unbind events for the ruler
     */
    private unWireEvents;
}
export interface RulerSegment {
    segment: SVGElement;
    label: SVGTextElement;
}
export interface SegmentTranslation {
    trans: number;
}
//node_modules/@syncfusion/ej2-diagrams/src/symbol-palette/index.d.ts
/**
 * Exported symbol palette files
 */
//node_modules/@syncfusion/ej2-diagrams/src/symbol-palette/symbol-palette-model.d.ts
/**
 * Interface for a class Palette
 */
export interface PaletteModel {
    /**
     * Defines the unique id of a symbol group
     * @default ''
     */
    id?: string;
    /**
     * Sets the height of the symbol group
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    height?: number;
    /**
     * Sets whether the palette items to be expanded or not
     * @default true
     */
    expanded?: boolean;
    /**
     * Defines the content of the symbol group
     * @default ''
     */
    iconCss?: string;
    /**
     * Defines the title of the symbol group
     * @default ''
     */
    title?: string;
    /**
     * Defines the collection of predefined symbols
     * @aspType object
     */
    symbols?: (NodeModel | ConnectorModel)[];
}
/**
 * Interface for a class SymbolPreview
 */
export interface SymbolPreviewModel {
    /**
     * Sets the preview width of the symbols
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    width?: number;
    /**
     * Sets the preview height of the symbols
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    height?: number;
    /**
     * Defines the distance to be left between the cursor and symbol
     * @default {}
     */
    offset?: PointModel;
}
/**
 * Interface for a class SymbolPalette
 */
export interface SymbolPaletteModel extends base.ComponentModel{
    /**
     * Configures the key, when it pressed the symbol palette will be focused
     * @default 'S'
     */
    accessKey?: string;
    /**
     * Defines the width of the symbol palette
     * @default '100%'
     */
    width?: string | number;
    /**
     * Defines the height of the symbol palette
     * @default '100%'
     */
    height?: string | number;
    /**
     * Defines the collection of symbol groups
     * @default []
     */
    palettes?: PaletteModel[];
    /**
     * ```html
     * <div id="symbolpalette"></div>
     *  ```
     * ```typescript
     * let palette: SymbolPalette = new SymbolPalette({
     *   expandMode: 'Multiple',
     *   palettes: [
     *       { id: 'flow', expanded: false, symbols: getFlowShapes(), title: 'Flow Shapes' },
     *   ],
     *   width: '100%', height: '100%', symbolHeight: 50, symbolWidth: 50,
     *   symbolPreview: { height: 100, width: 100 },
     *   enableSearch: true,
     *   getNodeDefaults: setPaletteNodeDefaults,
     *   symbolMargin: { left: 12, right: 12, top: 12, bottom: 12 },
     *   getSymbolInfo: (symbol: NodeModel): SymbolInfo => {
     *       return { fit: true };
     *   }
     * });
     * palette.appendTo('#symbolpalette');
     * export function getFlowShapes(): NodeModel[] {
     *   let flowShapes: NodeModel[] = [
     *       { id: 'Terminator', shape: { type: 'Flow', shape: 'Terminator' }, style: { strokeWidth: 2 } },
     *       { id: 'Process', shape: { type: 'Flow', shape: 'Process' }, style: { strokeWidth: 2 } },
     *       { id: 'Decision', shape: { type: 'Flow', shape: 'Decision' }, style: { strokeWidth: 2 } }
     *   ];
     *   return flowShapes;
     * }
     * function setPaletteNodeDefaults(node: NodeModel): void {
     * if (node.id === 'Terminator' || node.id === 'Process') {
     *   node.width = 130;
     *   node.height = 65;
     * } else {
     *   node.width = 50;
     *   node.height = 50;
     * }
     * node.style.strokeColor = '#3A3A3A';
     * }
     * ```
     * @deprecated
     */
    getSymbolInfo?: Function | string;
    /**
     * Defines the size, appearance and description of a symbol
     */
    symbolInfo?: SymbolInfo;
    /**
     * Defines the symbols to be added in search palette
     * @aspDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    filterSymbols?: Function | string;
    /**
     * Defines the symbols to be added in search palette
     */
    ignoreSymbolsOnSearch?: string[];
    /**
     * Defines the content of a symbol
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    getSymbolTemplate?: Function | string;
    /**
     * Defines the width of the symbol
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    symbolWidth?: number;
    /**
     * Defines the height of the symbol
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    symbolHeight?: number;
    /**
     * Defines the space to be left around a symbol
     * @default {left:10,right:10,top:10,bottom:10}
     */
    symbolMargin?: MarginModel;
    /**
     * Defines whether the symbols can be dragged from palette or not
     * @default true
     */
    allowDrag?: boolean;
    /**
     * Defines the size and position of the symbol preview
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    symbolPreview?: SymbolPreviewModel;
    /**
     * Enables/Disables search option in symbol palette
     * @default false
     */
    enableSearch?: boolean;
    /**
     * Enables/Disables animation when the palette header is expanded/collapsed
     */
    enableAnimation?: boolean;
    /**
     * Defines how many palettes can be at expanded mode at a time
     * @default 'Multiple'
     */
    expandMode?: navigations.ExpandMode;
    /**
     * Triggers after the selection changes in the symbol palette
     * @event
     * @blazorProperty 'OnPaletteSelectionChange'
     */
    paletteSelectionChange?: base.EmitType<IPaletteSelectionChangeArgs>;
    /**
     * Helps to return the default properties of node
     * @deprecated
     */
    getNodeDefaults?: Function | string;
    /**
     * Helps to return the default properties of node
     * @blazorType DiagramNode
     */
    nodeDefaults?: NodeModel;
    /**
     * Helps to return the default properties of connector
     * @deprecated
     */
    getConnectorDefaults?: Function | string;
    /**
     * Helps to return the default properties of connectors
     * @blazorType DiagramConnector
     */
    connectorDefaults?: ConnectorModel;
}
//node_modules/@syncfusion/ej2-diagrams/src/symbol-palette/symbol-palette.d.ts
/**
 * A palette allows to display a group of related symbols and it textually annotates the group with its header.
 */
export  class Palette extends base.ChildProperty<Palette> {
    /**
     * Defines the unique id of a symbol group
     * @default ''
     */
    id: string;
    /**
     * Sets the height of the symbol group
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    height: number;
    /**
     * Sets whether the palette items to be expanded or not
     * @default true
     */
    expanded: boolean;
    /**
     * Defines the content of the symbol group
     * @default ''
     */
    iconCss: string;
    /**
     * Defines the title of the symbol group
     * @default ''
     */
    title: string;
    /**
     * Defines the collection of predefined symbols
     * @aspType object
     */
    symbols: (NodeModel | ConnectorModel)[];
    /** @private */
    isInteraction: boolean;
}
/**
 * customize the preview size and position of the individual palette items.
 */
export  class SymbolPreview extends base.ChildProperty<SymbolPreview> {
    /**
     * Sets the preview width of the symbols
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    width: number;
    /**
     * Sets the preview height of the symbols
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    height: number;
    /**
     * Defines the distance to be left between the cursor and symbol
     * @default {}
     */
    offset: PointModel;
}
/**
 * Represents the Symbol Palette base.Component.
 * ```html
 * <div id="symbolpalette"></div>
 * <script>
 *  var palette = new SymbolPalatte({ allowDrag:true });
 *  palette.appendTo("#symbolpalette");
 * </script>
 * ```
 */
/**
 * The symbol palette control allows to predefine the frequently used nodes and connectors
 * and to drag and drop those nodes/connectors to drawing area
 */
export  class SymbolPalette extends base.Component<HTMLElement> implements base.INotifyPropertyChanged {
    /**
     * Configures the key, when it pressed the symbol palette will be focused
     * @default 'S'
     */
    accessKey: string;
    /**
     * Defines the width of the symbol palette
     * @default '100%'
     */
    width: string | number;
    /**
     * Defines the height of the symbol palette
     * @default '100%'
     */
    height: string | number;
    /**
     * Defines the collection of symbol groups
     * @default []
     */
    palettes: PaletteModel[];
    /**
     * Defines the size, appearance and description of a symbol
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    /**
     * ```html
     * <div id="symbolpalette"></div>
     *  ```
     * ```typescript
     * let palette$: SymbolPalette = new SymbolPalette({
     *   expandMode: 'Multiple',
     *   palettes: [
     *       { id: 'flow', expanded: false, symbols: getFlowShapes(), title: 'Flow Shapes' },
     *   ],
     *   width: '100%', height: '100%', symbolHeight: 50, symbolWidth: 50,
     *   symbolPreview: { height: 100, width: 100 },
     *   enableSearch: true,
     *   getNodeDefaults: setPaletteNodeDefaults,
     *   symbolMargin: { left: 12, right: 12, top: 12, bottom: 12 },
     *   getSymbolInfo: (symbol: NodeModel): SymbolInfo => {
     *       return { fit: true };
     *   }
     * });
     * palette.appendTo('#symbolpalette');
     * export function getFlowShapes(): NodeModel[] {
     *   let flowShapes$: NodeModel[] = [
     *       { id: 'Terminator', shape: { type: 'Flow', shape: 'Terminator' }, style: { strokeWidth: 2 } },
     *       { id: 'Process', shape: { type: 'Flow', shape: 'Process' }, style: { strokeWidth: 2 } },
     *       { id: 'Decision', shape: { type: 'Flow', shape: 'Decision' }, style: { strokeWidth: 2 } }
     *   ];
     *   return flowShapes;
     * }
     * function setPaletteNodeDefaults(node: NodeModel): void {
     * if (node.id === 'Terminator' || node.id === 'Process') {
     *   node.width = 130;
     *   node.height = 65;
     * } else {
     *   node.width = 50;
     *   node.height = 50;
     * }
     * node.style.strokeColor = '#3A3A3A';
     * }
     * ```
     * @deprecated
     */
    getSymbolInfo: Function | string;
    /**
     * Defines the size, appearance and description of a symbol
     */
    symbolInfo: SymbolInfo;
    /**
     * Defines the symbols to be added in search palette
     * @aspDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    filterSymbols: Function | string;
    /**
     * Defines the symbols to be added in search palette
     */
    ignoreSymbolsOnSearch: string[];
    /**
     * Defines the content of a symbol
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     * @deprecated
     */
    getSymbolTemplate: Function | string;
    /**
     * Defines the width of the symbol
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    symbolWidth: number;
    /**
     * Defines the height of the symbol
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    symbolHeight: number;
    /**
     * Defines the space to be left around a symbol
     * @default {left:10,right:10,top:10,bottom:10}
     */
    symbolMargin: MarginModel;
    /**
     * Defines whether the symbols can be dragged from palette or not
     * @default true
     */
    allowDrag: boolean;
    /**
     * Defines the size and position of the symbol preview
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    symbolPreview: SymbolPreviewModel;
    /**
     * Enables/Disables search option in symbol palette
     * @default false
     */
    enableSearch: boolean;
    /**
     * Enables/Disables animation when the palette header is expanded/collapsed
     */
    enableAnimation: boolean;
    /**
     * Defines how many palettes can be at expanded mode at a time
     * @default 'Multiple'
     */
    expandMode: navigations.ExpandMode;
    /**
     * Triggers after the selection changes in the symbol palette
     * @event
     * @blazorProperty 'OnPaletteSelectionChange'
     */
    paletteSelectionChange: base.EmitType<IPaletteSelectionChangeArgs>;
    /**
     * `bpmnModule` is used to add built-in BPMN Shapes to diagrams
     * @private
     */
    bpmnModule: BpmnDiagrams;
    /**
     * Helps to return the default properties of node
     * @deprecated
     */
    getNodeDefaults: Function | string;
    /**
     * Helps to return the default properties of node
     * @blazorType DiagramNode
     */
    nodeDefaults: NodeModel;
    /**
     * Helps to return the default properties of connector
     * @deprecated
     */
    getConnectorDefaults: Function | string;
    /**
     * Helps to return the default properties of connectors
     * @blazorType DiagramConnector
     */
    connectorDefaults: ConnectorModel;
    /** @private */
    selectedSymbols: NodeModel | ConnectorModel;
    /**   @private  */
    symbolTable: {};
    /**   @private  */
    childTable: {};
    private diagramRenderer;
    private svgRenderer;
    private accordionElement;
    private highlightedSymbol;
    private selectedSymbol;
    private info;
    private timer;
    private draggable;
    private laneTable;
    private isExpand;
    private isExpandMode;
    private isMethod;
    /**
     * Constructor for creating the component
     * @hidden
     */
    constructor(options?: SymbolPaletteModel, element?: Element);
    /**
     * Refreshes the panel when the symbol palette properties are updated
     * @param newProp Defines the new values of the changed properties
     * @param oldProp Defines the old values of the changed properties
     */
    onPropertyChanged(newProp: SymbolPaletteModel, oldProp: SymbolPaletteModel): void;
    /**
     * Get the properties to be maintained in the persisted state.
     * @return {string}
     */
    getPersistData(): string;
    /**
     * Initialize nodes, connectors and renderer
     */
    protected preRender(): void;
    /**
     * Renders nodes and connectors in the symbol palette
     */
    render(): void;
    /**
     * To get Module name
     *  @private
     */
    getModuleName(): string;
    /**
     * To provide the array of modules needed for control rendering
     * @return {base.ModuleDeclaration[]}
     * @private
     */
    requiredModules(): base.ModuleDeclaration[];
    /**
     * To destroy the symbol palette
     * @return {void}
     */
    destroy(): void;
    /**
     * Method to initialize the items in the symbols
     */
    private initSymbols;
    /**
     * Method to create the palette
     */
    private renderPalette;
    /**
     * Used to add the palette item as nodes or connectors in palettes
     */
    addPaletteItem(paletteName: string, paletteSymbol: NodeModel | ConnectorModel): void;
    /**
     * Used to remove the palette item as nodes or connectors in palettes
     */
    removePaletteItem(paletteName: string, symbolId: string): void;
    /**
     * Method to create the symbols in canvas
     */
    private prepareSymbol;
    private getContainer;
    /**
     * Method to get the symbol text description
     * @return {void}
     * @private
     */
    private getSymbolDescription;
    /**
     * Method to renders the symbols
     * @return {void}
     * @private
     */
    private renderSymbols;
    /**
     * Method to clone the symbol for previewing the symbols
     * @return {void}
     * @private
     */
    private getSymbolPreview;
    private measureAndArrangeSymbol;
    private updateSymbolSize;
    /**
     * Method to create canvas and render the symbol
     * @return {void}
     * @private
     */
    private getSymbolContainer;
    private getGroupParent;
    private getHtmlSymbol;
    private getSymbolSize;
    private getMousePosition;
    private mouseMove;
    private mouseUp;
    private keyUp;
    private mouseDown;
    private keyDown;
    private initDraggable;
    /**
     * helper method for draggable
     * @return {void}
     * @private
     */
    private helper;
    private dragStart;
    private dragStop;
    private scaleSymbol;
    private scaleChildren;
    private measureChild;
    private scaleGroup;
    private refreshPalettes;
    private updatePalettes;
    private createTextbox;
    private getFilterSymbol;
    private searchPalette;
    private createSearchPalette;
    /**
     * Method to bind events for the symbol palette
     */
    private wireEvents;
    /**
     * Method to unbind events for the symbol palette
     */
    private unWireEvents;
}
/**
 * Defines the size and description of a symbol
 */
export interface SymbolInfo {
    /**
     * Defines the width of the symbol to be drawn over the palette
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    width?: number;
    /**
     * Defines the height of the symbol to be drawn over the palette
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    height?: number;
    /**
     * Defines whether the symbol has to be fit inside the size, that is defined by the symbol palette
     * @default true
     */
    fit?: boolean;
    /**
     * Define the template of the symbol that is to be drawn over the palette
     * @default null
     */
    template?: DiagramElement;
    /**
     * Define the text to be displayed and how that is to be handled.
     * @default null
     */
    description?: SymbolDescription;
    /**
     * Define the text to be displayed when mouse hover on the shape.
     * @default ''
     */
    tooltip?: string;
}
/**
 * Defines the textual description of a symbol
 */
export interface SymbolDescription {
    /**
     * Defines the symbol description
     * @aspDefaultValueIgnore
     * @blazorDefaultValueIgnore
     * @default undefined
     */
    text?: string;
    /**
     * Defines how to handle the text when its size exceeds the given symbol size
     * * Wrap - Wraps the text to next line, when it exceeds its bounds
     * * Ellipsis - It truncates the overflown text and represents the clipping with an ellipsis
     * * Clip - It clips the overflow text
     * @default ellipsis
     */
    overflow?: TextOverflow;
    /**
     * Defines how to wrap the text
     * * WrapWithOverflow - Wraps the text so that no word is broken
     * * Wrap - Wraps the text and breaks the word, if necessary
     * * NoWrap - Text will no be wrapped
     * @default Wrap
     */
    wrap?: TextWrap;
}
 }
export namespace documenteditor { 

//node_modules/@syncfusion/ej2-documenteditor/src/document-editor-container/document-editor-container-model.d.ts
/**
 * Interface for a class DocumentEditorContainer
 */
export interface DocumentEditorContainerModel extends base.ComponentModel{
    /**
     * Show or hide properties pane.
     * @default true
     */
    showPropertiesPane?: boolean;
    /**
     * Enable or disable toolbar in document editor container.
     * @default true
     */
    enableToolbar?: boolean;
    /**
     * Restrict editing operation.
     * @default false
     */
    restrictEditing?: boolean;
    /**
     * Enable or disable spell checker in document editor container.
     * @default false
     */
    enableSpellCheck?: boolean;
    /**
     * Enable local paste
     * @default true
     */
    enableLocalPaste?: boolean;
    /**
     * Sfdt service URL.
     * @default ''
     */
    serviceUrl?: string;
    /**
     * Triggers when the component is created
     * @event
     * @blazorproperty 'Created'
     */
    created?: base.EmitType<Object>;
    /**
     * Triggers when the component is destroyed.
     * @event
     * @blazorproperty 'Destroyed'
     */
    destroyed?: base.EmitType<Object>;
    /**
     * Triggers whenever the content changes in the document editor container.
     * @event
     * @blazorproperty 'ContentChanged'
     */
    contentChange?: base.EmitType<ContainerContentChangeEventArgs>;
    /**
     * Triggers whenever selection changes in the document editor container.
     * @event
     * @blazorproperty 'SelectionChanged'
     */
    selectionChange?: base.EmitType<ContainerSelectionChangeEventArgs>;
    /**
     * Triggers whenever document changes in the document editor container.
     * @event
     * @blazorproperty 'DocumentChanged'
     */
    documentChange?: base.EmitType<ContainerDocumentChangeEventArgs>;
    /**
     * Triggers while selecting the custom context-menu option.
     * @event
     * @blazorproperty 'ContextMenuItemSelected'
     */
    customContextMenuSelect?: base.EmitType<CustomContentMenuEventArgs>;
    /**
     * Triggers before opening the custom context-menu option.
     * @event
     * @blazorproperty 'OnContextMenuOpen'
     */
    customContextMenuBeforeOpen?: base.EmitType<BeforeOpenCloseCustomContentMenuEventArgs>;
    /**
     * Defines the settings of the DocumentEditorContainer service.
     */
    // tslint:disable-next-line:max-line-length
    serverActionSettings?: ContainerServerActionSettingsModel;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor-container/document-editor-container.d.ts
/**
 * Document Editor container component.
 */
export  class DocumentEditorContainer extends base.Component<HTMLElement> implements base.INotifyPropertyChanged {
    /**
     * Show or hide properties pane.
     * @default true
     */
    showPropertiesPane: boolean;
    /**
     * Enable or disable toolbar in document editor container.
     * @default true
     */
    enableToolbar: boolean;
    /**
     * Restrict editing operation.
     * @default false
     */
    restrictEditing: boolean;
    /**
     * Enable or disable spell checker in document editor container.
     * @default false
     */
    enableSpellCheck: boolean;
    /**
     * Enable local paste
     * @default true
     */
    enableLocalPaste: boolean;
    /**
     * Sfdt service URL.
     * @default ''
     */
    serviceUrl: string;
    /**
     * Triggers when the component is created
     * @event
     * @blazorproperty 'Created'
     */
    created: base.EmitType<Object>;
    /**
     * Triggers when the component is destroyed.
     * @event
     * @blazorproperty 'Destroyed'
     */
    destroyed: base.EmitType<Object>;
    /**
     * Triggers whenever the content changes in the document editor container.
     * @event
     * @blazorproperty 'ContentChanged'
     */
    contentChange: base.EmitType<ContainerContentChangeEventArgs>;
    /**
     * Triggers whenever selection changes in the document editor container.
     * @event
     * @blazorproperty 'SelectionChanged'
     */
    selectionChange: base.EmitType<ContainerSelectionChangeEventArgs>;
    /**
     * Triggers whenever document changes in the document editor container.
     * @event
     * @blazorproperty 'DocumentChanged'
     */
    documentChange: base.EmitType<ContainerDocumentChangeEventArgs>;
    /**
     * Triggers while selecting the custom context-menu option.
     * @event
     * @blazorproperty 'ContextMenuItemSelected'
     */
    customContextMenuSelect: base.EmitType<CustomContentMenuEventArgs>;
    /**
     * Triggers before opening the custom context-menu option.
     * @event
     * @blazorproperty 'OnContextMenuOpen'
     */
    customContextMenuBeforeOpen: base.EmitType<BeforeOpenCloseCustomContentMenuEventArgs>;
    /**
     * Document editor container's toolbar module
     * @private
     */
    toolbarModule: Toolbar;
    /**
     * @private
     */
    localObj: base.L10n;
    /**
     * Document Editor instance
     */
    private documentEditorInternal;
    /**
     * @private
     */
    toolbarContainer: HTMLElement;
    /**
     * @private
     */
    editorContainer: HTMLElement;
    /**
     * @private
     */
    propertiesPaneContainer: HTMLElement;
    /**
     * @private
     */
    statusBarElement: HTMLElement;
    /**
     * Text Properties
     * @private
     */
    textProperties: TextProperties;
    /**
     * Header footer Properties
     * @private
     */
    headerFooterProperties: HeaderFooterProperties;
    /**
     * Image Properties Pane
     * @private
     */
    imageProperties: ImageProperties;
    /**
     * @private
     */
    tocProperties: TocProperties;
    /**
     * @private
     */
    tableProperties: TableProperties;
    /**
     * @private
     */
    statusBar: StatusBar;
    /**
     * @private
     */
    containerTarget: HTMLElement;
    /**
     * @private
     */
    previousContext: string;
    /**
     * Defines the settings of the DocumentEditorContainer service.
     */
    serverActionSettings: ContainerServerActionSettingsModel;
    /**
     * Gets DocumentEditor instance.
     * @aspType DocumentEditor
     * @blazorType DocumentEditor
     */
    readonly documentEditor: DocumentEditor;
    /**
     * Initialize the constructor of DocumentEditorContainer
     */
    constructor(options?: DocumentEditorContainerModel, element?: string | HTMLElement);
    /**
     * default locale
     * @private
     */
    defaultLocale: Object;
    /**
     * @private
     */
    getModuleName(): string;
    /**
     * @private
     */
    onPropertyChanged(newModel: DocumentEditorContainerModel, oldModel: DocumentEditorContainerModel): void;
    /**
     * @private
     */
    protected preRender(): void;
    /**
     * @private
     */
    protected render(): void;
    private setserverActionSettings;
    /**
     * @private
     */
    getPersistData(): string;
    protected requiredModules(): base.ModuleDeclaration[];
    private initContainerElement;
    private initializeDocumentEditor;
    /**
     * @private
     */
    showHidePropertiesPane(show: boolean): void;
    /**
     * @private
     */
    onContentChange(): void;
    /**
     * @private
     */
    onDocumentChange(): void;
    /**
     * @private
     */
    onSelectionChange(): void;
    /**
     * @private
     */
    private onZoomFactorChange;
    /**
     * @private
     */
    private onRequestNavigate;
    /**
     * @private
     */
    private onViewChange;
    /**
     * @private
     */
    private onCustomContextMenuSelect;
    /**
     * @private
     */
    private onCustomContextMenuBeforeOpen;
    /**
     * @private
     */
    showPropertiesPaneOnSelection(): void;
    /**
     * @private
     * @param property
     */
    showProperties(property: string): void;
    /**
     * Destroys all managed resources used by this object.
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor-container/index.d.ts
/**
 * export document editor container
 */
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor-container/properties-pane/header-footer-pane.d.ts
/**
 * Represents document editor header and footer.
 */
/**
 * @private
 */
export  class HeaderFooterProperties {
    element: HTMLElement;
    private container;
    private firstPage;
    private oddOrEven;
    private pageNumber;
    private pageCount;
    private headerFromTop;
    private footerFromTop;
    private isHeaderTopApply;
    private isFooterTopApply;
    private isRtl;
    /**
     * @private
     */
    readonly documentEditor: DocumentEditor;
    readonly toolbar: Toolbar;
    /**
     * @private
     */
    enableDisableElements(enable: boolean): void;
    constructor(container: DocumentEditorContainer, isRtl?: boolean);
    initHeaderFooterPane(): void;
    showHeaderFooterPane(isShow: boolean): void;
    private initializeHeaderFooter;
    private createDivTemplate;
    private wireEvents;
    private onClose;
    private changeFirstPageOptions;
    private changeoddOrEvenOptions;
    private changeHeaderValue;
    private onHeaderValue;
    private onFooterValue;
    private changeFooterValue;
    onSelectionChange(): void;
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor-container/properties-pane/image-properties-pane.d.ts
/**
 * Image Property pane
 * @private
 */
export  class ImageProperties {
    private container;
    private elementId;
    element: HTMLElement;
    private widthElement;
    private heightElement;
    private widthNumericBox;
    private heightNumericBox;
    private aspectRatioBtn;
    private isMaintainAspectRatio;
    private isWidthApply;
    private isHeightApply;
    private isRtl;
    readonly documentEditor: DocumentEditor;
    constructor(container: DocumentEditorContainer, isRtl?: boolean);
    /**
     * @private
     */
    enableDisableElements(enable: boolean): void;
    private initializeImageProperties;
    private initImageProp;
    private createImagePropertiesDiv;
    wireEvents: () => void;
    private onImageWidth;
    private onImageHeight;
    private applyImageWidth;
    private applyImageHeight;
    private onAspectRatioBtnClick;
    showImageProperties(isShow: boolean): void;
    updateImageProperties(): void;
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor-container/properties-pane/paragraph-properties.d.ts
/**
 * Paragraph Properties
 * @private
 */
export  class Paragraph {
    private container;
    private textProperties;
    private leftAlignment;
    private rightAlignment;
    private centerAlignment;
    private justify;
    private increaseIndent;
    private decreaseIndent;
    private lineSpacing;
    private style;
    private isRetrieving;
    private styleName;
    appliedBulletStyle: string;
    appliedNumberingStyle: string;
    appliedLineSpacing: string;
    private noneNumberTag;
    private numberList;
    private lowLetter;
    private upLetter;
    private lowRoman;
    private upRoman;
    private noneBulletTag;
    private dotBullet;
    private circleBullet;
    private squareBullet;
    private flowerBullet;
    private arrowBullet;
    private tickBullet;
    localObj: base.L10n;
    private isRtl;
    private splitButtonClass;
    readonly documentEditor: DocumentEditor;
    constructor(container: DocumentEditorContainer);
    initializeParagraphPropertiesDiv(wholeDiv: HTMLElement, isRtl?: boolean): void;
    private createSeperator;
    private createDivElement;
    private createButtonTemplate;
    private createLineSpacingDropdown;
    private createNumberListDropButton;
    private updateSelectedBulletListType;
    private updateSelectedNumberedListType;
    private removeSelectedList;
    private applyLastAppliedNumbering;
    private applyLastAppliedBullet;
    private createBulletListDropButton;
    private createNumberListTag;
    private createNumberNoneListTag;
    private createBulletListTag;
    private createStyleDropDownList;
    private updateOptions;
    updateStyleNames(): void;
    private closeStyleValue;
    private createStyle;
    private constructStyleDropItems;
    private parseStyle;
    wireEvent(): void;
    unwireEvents(): void;
    private leftAlignmentAction;
    private lineSpacingAction;
    private setLineSpacing;
    private selectStyleValue;
    private applyStyleValue;
    private rightAlignmentAction;
    private centerAlignmentAction;
    private justifyAction;
    private increaseIndentAction;
    private decreaseIndentAction;
    private numberedNoneClick;
    private numberedNumberDotClick;
    private numberedUpRomanClick;
    private numberedUpLetterClick;
    private numberedLowLetterClick;
    private numberedLowRomanClick;
    private bulletDotClick;
    private bulletCircleClick;
    private bulletSquareClick;
    private bulletFlowerClick;
    private bulletArrowClick;
    private bulletTickClick;
    onSelectionChange(): void;
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor-container/properties-pane/status-bar.d.ts
/**
 * Represents document editor status bar.
 * @private
 */
export  class StatusBar {
    private container;
    private statusBarDiv;
    private pageCount;
    private zoom;
    private pageNumberLabel;
    private editablePageNumber;
    startPage: number;
    localObj: base.L10n;
    private spellCheckButton;
    private currentLanguage;
    private allowSuggestion;
    readonly documentEditor: DocumentEditor;
    readonly editorPageCount: number;
    constructor(parentElement: HTMLElement, docEditor: DocumentEditorContainer);
    private initializeStatusBar;
    private addSpellCheckElement;
    private onZoom;
    private onSpellCheck;
    updateZoomContent: () => void;
    private setSpellCheckValue;
    private setZoomValue;
    /**
     * Updates page count.
     */
    updatePageCount: () => void;
    /**
     * Updates page number.
     */
    updatePageNumber: () => void;
    updatePageNumberOnViewChange: (args: ViewChangeEventArgs) => void;
    private wireEvents;
    private updateDocumentEditorPageNumber;
    private destroy;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor-container/properties-pane/table-of-content-pane.d.ts
/**
 * TOC Properties pane
 * @private
 */
export  class TocProperties {
    private container;
    element: HTMLElement;
    private elementId;
    private template1Div;
    private showPageNumber;
    private rightalignPageNumber;
    private hyperlink;
    private borderBtn;
    private updateBtn;
    private cancelBtn;
    private borderLevelStyle;
    headerDiv: HTMLElement;
    private closeButton;
    private prevContext;
    localObj: base.L10n;
    private isRtl;
    /**
     * @private
     */
    readonly documentEditor: DocumentEditor;
    /**
     * @private
     */
    readonly toolbar: Toolbar;
    constructor(container: DocumentEditorContainer, isRtl?: boolean);
    /**
     * @private
     */
    enableDisableElements(enable: boolean): void;
    private initializeTocPane;
    private updateTocProperties;
    private wireEvents;
    private onClose;
    private tocHeaderDiv;
    private initTemplates;
    private template1;
    private tocOptionsDiv;
    private createDropdownOption;
    createDropDownButton(id: string, parentDiv: HTMLElement, iconCss: string, content: string[], selectedIndex: number): dropdowns.DropDownList;
    private contentStylesDropdown;
    private checkboxContent;
    private buttonDiv;
    showTocPane: (isShow: boolean, previousContextType?: ContextType) => void;
    private onInsertToc;
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor-container/properties-pane/table-properties-pane.d.ts
/**
 * Represents table properties
 * @private
 */
export  class TableProperties {
    private container;
    private tableProperties;
    propertiesTab: navigations.Tab;
    private elementId;
    tableTextProperties: TextProperties;
    imageProperty: ImageProperties;
    private shadingBtn;
    private borderBtn;
    private borderSize;
    private tableOutlineBorder;
    private tableAllBorder;
    private tableCenterBorder;
    private tableLeftBorder;
    private tableCenterVerticalBorder;
    private tableRightBorder;
    private tableTopBorder;
    private tableCenterHorizontalBorder;
    private tableBottomBorder;
    private horizontalMerge;
    private insertRowAbove;
    private insertRowBelow;
    private insertColumnLeft;
    private insertColumnRight;
    private deleteRow;
    private deleteColumn;
    private topMargin;
    private bottomMargin;
    private leftMargin;
    private rightMargin;
    private alignBottom;
    private alignCenterHorizontal;
    private alignTop;
    private borderSizeColorElement;
    element: HTMLElement;
    private prevContext;
    private textProperties;
    private isTopMarginApply;
    private isRightMarginApply;
    private isBottomMarginApply;
    private isLeftMarginApply;
    private borderColor;
    private parentElement;
    localObj: base.L10n;
    private isRtl;
    private groupButtonClass;
    readonly documentEditor: DocumentEditor;
    constructor(container: DocumentEditorContainer, imageProperty: ImageProperties, textProperties: TextProperties, isRtl?: boolean);
    private initializeTablePropPane;
    /**
     * @private
     */
    enableDisableElements(enable: boolean): void;
    private addTablePropertyTab;
    private onTabSelection;
    private wireEvent;
    private getBorder;
    private onOutlineBorder;
    private onAllBorder;
    private onInsideBorder;
    private onLeftBorder;
    private onVerticalBorder;
    private onRightBorder;
    private onTopBorder;
    private onHorizontalBorder;
    private onBottomBorder;
    private onTopMargin;
    private onBottomMargin;
    private onLeftMargin;
    private onRightMargin;
    private applyTopMargin;
    private applyBottomMargin;
    private applyLeftMargin;
    private applyRightMargin;
    private applyAlignTop;
    private applyAlignBottom;
    private applyAlignCenterHorizontal;
    private onMergeCell;
    private onInsertRowAbove;
    private onInsertRowBelow;
    private onInsertColumnLeft;
    private onInsertColumnRight;
    private onDeleteRow;
    private onDeleteColumn;
    onSelectionChange: () => void;
    private changeBackgroundColor;
    private initFillColorDiv;
    private initBorderStylesDiv;
    private initCellDiv;
    private initInsertOrDelCell;
    private initCellMargin;
    private initAlignText;
    private createCellMarginTextBox;
    private createBorderSizeDropDown;
    private onBorderSizeChange;
    private createDropdownOption;
    createDropDownButton: (id: string, styles: string, parentDiv: HTMLElement, iconCss: string, content: string, items?: splitbuttons.ItemModel[], target?: HTMLElement) => splitbuttons.DropDownButton;
    private createButtonTemplate;
    private createColorPickerTemplate;
    showTableProperties: (isShow: boolean) => void;
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor-container/properties-pane/text-properties-pane.d.ts
/**
 * Text Properties pane
 * @private
 */
export  class TextProperties {
    element: HTMLElement;
    private container;
    private text;
    private paragraph;
    private isInitial;
    readonly documentEditor: DocumentEditor;
    constructor(container: DocumentEditorContainer, id: string, isTableProperties: boolean, isRtl?: boolean);
    enableDisableElements(enable: boolean): void;
    updateStyles(): void;
    appliedHighlightColor: string;
    appliedBulletStyle: string;
    appliedNumberingStyle: string;
    showTextProperties: (isShow: boolean) => void;
    private initializeTextProperties;
    private generateUniqueID;
    wireEvents(): void;
    onSelectionChange(): void;
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor-container/properties-pane/text-properties.d.ts
/**
 * Text Properties
 * @private
 */
export  class Text {
    private container;
    private textProperties;
    private bold;
    private italic;
    private underline;
    private strikethrough;
    private subscript;
    private superscript;
    private fontColor;
    private highlightColor;
    private highlightColorElement;
    private fontColorInputElement;
    private highlightColorInputElement;
    private clearFormat;
    private fontSize;
    private fontFamily;
    private isRetrieving;
    appliedHighlightColor: string;
    localObj: base.L10n;
    private isRtl;
    readonly documentEditor: DocumentEditor;
    constructor(container: DocumentEditorContainer, isRtl?: boolean);
    initializeTextPropertiesDiv(wholeDiv: HTMLElement, isRtl?: boolean): void;
    private createHighlightColorSplitButton;
    private openPopup;
    private closePopup;
    private initializeHighlightColorElement;
    private createHightlighColorPickerDiv;
    private onHighLightColor;
    private applyHighlightColorAsBackground;
    private removeSelectedColorDiv;
    private applyHighlightColor;
    private getHighLightColor;
    private createDiv;
    private createButtonTemplate;
    private createFontColorPicker;
    /**
     * Adds file colot elements to parent div.
     */
    private createColorTypeInput;
    private createDropDownListForSize;
    private createDropDownListForFamily;
    wireEvent(): void;
    unwireEvents(): void;
    private boldAction;
    private italicAction;
    private underlineAction;
    private strikethroughAction;
    private clearFormatAction;
    private subscriptAction;
    private superscriptAction;
    private changeFontColor;
    private changeFontFamily;
    private changeFontSize;
    onSelectionChange(): void;
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor-container/tool-bar/index.d.ts
/**
 * Export toolbar module
 */
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor-container/tool-bar/tool-bar.d.ts
/**
 * Toolbar Module
 */
export  class Toolbar {
    /**
     * @private
     */
    toolbar: navigations.Toolbar;
    /**
     * @private
     */
    container: DocumentEditorContainer;
    /**
     * @private
     */
    filePicker: HTMLInputElement;
    /**
     * @private
     */
    imagePicker: HTMLInputElement;
    /**
     * @private
     */
    propertiesPaneButton: buttons.Button;
    /**
     * @private
     */
    /**
     * @private
     */
    readonly documentEditor: DocumentEditor;
    /**
     * @private
     */
    constructor(container: DocumentEditorContainer);
    private getModuleName;
    /**
     * @private
     */
    initToolBar(): void;
    private renderToolBar;
    private showHidePropertiesPane;
    private onWrapText;
    private wireEvent;
    private initToolbarItems;
    private clickHandler;
    private toggleLocalPaste;
    private toggleEditing;
    private toggleButton;
    private togglePropertiesPane;
    private onDropDownButtonSelect;
    private onFileChange;
    private convertToSfdt;
    private failureHandler;
    private successHandler;
    private onImageChange;
    private insertImage;
    /**
     * @private
     */
    enableDisableToolBarItem(enable: boolean, isProtectedContent: boolean): void;
    /**
     * @private
     */
    enableDisableUndoRedo(): void;
    private onToc;
    /**
     * @private
     */
    enableDisablePropertyPaneButton(isShow: boolean): void;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/base/ajax-helper.d.ts
/**
 * @private
 */
export  class XmlHttpRequestHandler {
    /**
     * Specifies the URL to which request to be sent.
     * @default null
     */
    url: string;
    /**
     * @private
     */
    contentType: string;
    /**
     * Specifies the responseType to which request response.
     * @default null
     */
    responseType: XMLHttpRequestResponseType;
    /**
     * A boolean value indicating whether the request should be sent asynchronous or not.
     * @default true
     */
    mode: boolean;
    private xmlHttpRequest;
    /**
     * Send the request to server
     * @param  {object} jsonObject - To send to service
     */
    send(jsonObject: object): void;
    private sendRequest;
    private stateChange;
    private error;
    /**
     * Specifies callback function to be triggered after XmlHttpRequest is succeeded.
     * The callback will contain server response as the parameter.
     * @event
     */
    onSuccess: Function;
    /**
     * Specifies callback function to be triggered after XmlHttpRequest is got failed.
     * The callback will contain server response as the parameter.
     * @event
     */
    onFailure: Function;
    /**
     * Specifies callback function to be triggered after XmlHttpRequest is got error.
     * The callback will contain server response as the parameter.
     * @event
     */
    onError: Function;
    private successHandler;
    private failureHandler;
    private errorHandler;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/base/dictionary.d.ts
/**
 * @private
 */
export interface DictionaryInfo<K, V> {
}
/**
 * @private
 */
export  class Dictionary<K, V> implements DictionaryInfo<K, V> {
    private keysInternal;
    private valuesInternal;
    /**
     * @private
     */
    readonly length: number;
    /**
     * @private
     */
    readonly keys: K[];
    /**
     * @private
     */
    add(key: K, value: V): number;
    /**
     * @private
     */
    get(key: K): V;
    /**
     * @private
     */
    set(key: K, value: V): void;
    /**
     * @private
     */
    remove(key: K): boolean;
    /**
     * @private
     */
    containsKey(key: K): boolean;
    /**
     * @private
     */
    clear(): void;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/base/events-helper.d.ts
/**
 * This event arguments provides the necessary information about documentChange event.
 */
export interface DocumentChangeEventArgs {
    /**
     * Specifies the source DocumentEditor instance which triggers this documentChange event.
     * @deprecated
     */
    source: DocumentEditor;
}
/**
 * This event arguments provides the necessary information about viewChange event.
 */
export interface ViewChangeEventArgs {
    /**
     * Specifies the page number that starts in the view port.
     */
    startPage: number;
    /**
     * Specifies the page number that ends in the view port.
     */
    endPage: number;
    /**
     * Specifies the source DocumentEditor instance which triggers this viewChange event.
     * @deprecated
     */
    source: DocumentEditor;
}
/**
 * This event arguments provides the necessary information about zoomFactorChange event.
 */
export interface ZoomFactorChangeEventArgs {
    /**
     * Specifies the source DocumentEditor instance which triggers this zoomFactorChange event.
     * @deprecated
     */
    source: DocumentEditor;
}
/**
 * This event arguments provides the necessary information about selectionChange event.
 */
export interface SelectionChangeEventArgs {
    /**
     * Specifies the source DocumentEditor instance which triggers this selectionChange event.
     * @deprecated
     */
    source: DocumentEditor;
}
/**
 * This event arguments provides the necessary information about requestNavigate event.
 */
export interface RequestNavigateEventArgs {
    /**
     * Specifies the navigation link.
     */
    navigationLink: string;
    /**
     * Specifies the link type.
     */
    linkType: HyperlinkType;
    /**
     * Specifies the local reference if any.
     */
    localReference: string;
    /**
     * Specifies whether the event is handled or not.
     */
    isHandled: boolean;
    /**
     * Specifies the source DocumentEditor instance which triggers this requestNavigate event.
     * @deprecated
     */
    source: DocumentEditor;
}
/**
 * This event arguments provides the necessary information about contentChange event.
 */
export interface ContentChangeEventArgs {
    /**
     * Specifies the source DocumentEditor instance which triggers this contentChange event.
     * @deprecated
     */
    source: DocumentEditor;
}
/**
 * This event arguments provides the necessary information about key down event.
 */
export interface DocumentEditorKeyDownEventArgs {
    /**
     * Key down event argument
     */
    event: KeyboardEvent;
    /**
     * Specifies whether the event is handled or not
     */
    isHandled: boolean;
    /**
     * Specifies the source DocumentEditor instance which triggers this key down event.
     * @deprecated
     */
    source: DocumentEditor;
}
/**
 * This event arguments provides the necessary information about searchResultsChange event.
 */
export interface SearchResultsChangeEventArgs {
    /**
     * Specifies the source DocumentEditor instance which triggers this searchResultsChange event.
     * @deprecated
     */
    source: DocumentEditor;
}
/**
 * This event arguments provides the necessary information about customContentMenu event.
 */
export interface CustomContentMenuEventArgs {
    /**
     * Specifies the id of selected custom context menu item.
     */
    id: string;
}
/**
 * This event arguments provides the necessary information about BeforeOpenCloseCustomContentMenu event.
 */
export interface BeforeOpenCloseCustomContentMenuEventArgs {
    /**
     * Specifies the array of added custom context menu item ids.
     */
    ids: string[];
}
/**
 * This event arguments provides the necessary information about DocumentEditorContainer's contentChange event.
 */
export interface ContainerContentChangeEventArgs {
    /**
     * Specifies the source DocumentEditorContainer instance which triggers this contentChange event.
     * @deprecated
     */
    source: DocumentEditorContainer;
}
/**
 * This event arguments provides the necessary information about DocumentEditorContainer's selectionChange event.
 */
export interface ContainerSelectionChangeEventArgs {
    /**
     * Specifies the source DocumentEditorContainer instance which triggers this selectionChange event.
     * @deprecated
     */
    source: DocumentEditorContainer;
}
/**
 * This event arguments provides the necessary information about DocumentEditorContainer's documentChange event.
 */
export interface ContainerDocumentChangeEventArgs {
    /**
     * Specifies the source DocumentEditorContainer instance which triggers this documentChange event.
     * @deprecated
     */
    source: DocumentEditorContainer;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/base/index.d.ts
/**
 * export types
 */
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/base/types.d.ts
/**
 * Specified the hyperlink type.
 */
export  type HyperlinkType = 
/**
 * Specifies the link to a file. The link that starts with "file:///".
 */
'File' | 
/**
 * Specifies the link to a web page. The link that starts with "http://", "https://", "www." etc.
 */
'WebPage' | 
/**
 * Specifies the link to an e-mail. The link that starts with "mailto:".
 */
'Email' | 
/**
 * Specifies the link to a bookmark. The link that refers to a bookmark.
 */
'Bookmark';
/**
 * Enum underline for character format
 */
export  type Underline = 'None' | 'Single' | 'Words' | 'Double' | 'Dotted' | 'Thick' | 'Dash' | 'DashLong' | 'DotDash' | 'DotDotDash' | 'Wavy' | 'DottedHeavy' | 'DashHeavy' | 'DashLongHeavy' | 'DotDashHeavy' | 'DotDotDashHeavy' | 'WavyHeavy' | 'WavyDouble';
/**
 * enum strikethrough for character format
 */
export  type Strikethrough = 'None' | 'SingleStrike' | 'DoubleStrike';
/**
 * enum baseline alignment for character format
 */
export  type BaselineAlignment = 'Normal' | 'Superscript' | 'Subscript';
/**
 * enum highlight color for character format
 */
export  type HighlightColor = 'NoColor' | 'Yellow' | 'BrightGreen' | 'Turquoise' | 'Pink' | 'Blue' | 'Red' | 'DarkBlue' | 'Teal' | 'Green' | 'Violet' | 'DarkRed' | 'DarkYellow' | 'Gray50' | 'Gray25' | 'Black';
/**
 * Enum LineSpacingType For Paragraph Format Preservation
 */
export  type LineSpacingType = 
/**
 * The line spacing can be greater than or equal to, but never less than,
 * the value specified in the LineSpacing property.
 */
'AtLeast' | 
/**
 * The line spacing never changes from the value specified in the LineSpacing property,
 * even if a larger font is used within the paragraph.
 */
'Exactly' | 
/**
 * The line spacing is specified in the LineSpacing property as the number of lines.
 * Single line spacing equals 12 points.
 */
'Multiple';
/**
 * Enum TextAlignment For Paragraph Format Preservation
 */
export  type TextAlignment = 
/**
 * Text is centered within the container.
 */
'Center' | 
/**
 * Text is aligned to the left edge of the container.
 */
'Left' | 
/**
 * Text is aligned to the right edge of the container.
 */
'Right' | 
/**
 * Text is justified within the container.
 */
'Justify';
/**
 * Enum for Header Footer
 */
export  type HeaderFooterType = 'EvenHeader' | 'OddHeader' | 'EvenFooter' | 'OddFooter' | 'FirstPageHeader' | 'FirstPageFooter';
/**
 * Enum for List type
 */
export  type ListType = 'None' | 'Bullet' | 'Numbering' | 'OutlineNumbering';
/**
 * Enum for List Level Pattern
 */
export  type ListLevelPattern = 'Arabic' | 'UpRoman' | 'LowRoman' | 'UpLetter' | 'LowLetter' | 'Ordinal' | 'Number' | 'OrdinalText' | 'LeadingZero' | 'Bullet' | 'FarEast' | 'Special' | 'None';
/**
 * Enum for follow character type
 */
export  type FollowCharacterType = 'Tab' | 'Space' | 'None';
export  type TableAlignment = 'Left' | 'Center' | 'Right';
export  type WidthType = 'Auto' | 'Percent' | 'Point';
export  type CellVerticalAlignment = 'Top' | 'Center' | 'Bottom';
export  type HeightType = 'Auto' | 'AtLeast' | 'Exactly';
export  type LineStyle = 'None' | 'Single' | 'Dot' | 'DashSmallGap' | 'DashLargeGap' | //dashed
'DashDot' | //dotDash
'DashDotDot' | //dotDotDash
'Double' | 'Triple' | 'ThinThickSmallGap' | 'ThickThinSmallGap' | 'ThinThickThinSmallGap' | 'ThinThickMediumGap' | 'ThickThinMediumGap' | 'ThinThickThinMediumGap' | 'ThinThickLargeGap' | 'ThickThinLargeGap' | 'ThinThickThinLargeGap' | 'SingleWavy' | //wave.
'DoubleWavy' | //doubleWave.
'DashDotStroked' | 'Emboss3D' | 'Engrave3D' | 'Outset' | 'Inset' | 'Thick' | 'Cleared';
export  type TextureStyle = 'TextureNone' | 'Texture2Pt5Percent' | 'Texture5Percent' | 'Texture7Pt5Percent' | 'Texture10Percent' | 'Texture12Pt5Percent' | 'Texture15Percent' | 'Texture17Pt5Percent' | 'Texture20Percent' | 'Texture22Pt5Percent' | 'Texture25Percent' | 'Texture27Pt5Percent' | 'Texture30Percent' | 'Texture32Pt5Percent' | 'Texture35Percent' | 'Texture37Pt5Percent' | 'Texture40Percent' | 'Texture42Pt5Percent' | 'Texture45Percent' | 'Texture47Pt5Percent' | 'Texture50Percent' | 'Texture52Pt5Percent' | 'Texture55Percent' | 'Texture57Pt5Percent' | 'Texture60Percent' | 'Texture62Pt5Percent' | 'Texture65Percent' | 'Texture67Pt5Percent' | 'Texture70Percent' | 'Texture72Pt5Percent' | 'Texture75Percent' | 'Texture77Pt5Percent' | 'Texture80Percent' | 'Texture82Pt5Percent' | 'Texture85Percent' | 'Texture87Pt5Percent' | 'Texture90Percent' | 'Texture92Pt5Percent' | 'Texture95Percent' | 'Texture97Pt5Percent' | 'TextureSolid' | 'TextureDarkHorizontal' | 'TextureDarkVertical' | 'TextureDarkDiagonalDown' | 'TextureDarkDiagonalUp' | 'TextureDarkCross' | 'TextureDarkDiagonalCross' | 'TextureHorizontal' | 'TextureVertical' | 'TextureDiagonalDown' | 'TextureDiagonalUp' | 'TextureCross' | 'TextureDiagonalCross';
/**
 * Format type.
 */
export  type FormatType = 
/**
 * Microsoft Word Open XML Format.
 */
'Docx' | 
/**
 * HTML Format.
 */
'Html' | 
/**
 * Plain Text Format.
 */
'Txt' | 
/**
 * Syncfusion Document Text Format.
 */
'Sfdt';
/**
 * Enum for find option
 */
export  type FindOption = 'None' | 'WholeWord' | 'CaseSensitive' | 'CaseSensitiveWholeWord';
/**
 * WColor interface
 * @private
 */
export interface WColor {
    r: number;
    g: number;
    b: number;
}
export  type OutlineLevel = 'Level1' | 'Level2' | 'Level3' | 'Level4' | 'Level5' | 'Level6' | 'Level7' | 'Level8' | 'Level9' | 'BodyText';
/**
 * Specifies style type.
 */
export  type StyleType = 
/**
 * Paragraph style.
 */
'Paragraph' | 
/**
 * Character style.
 */
'Character';
/**
 * Specifies table row placement.
 * @private
 */
export  type RowPlacement = 'Above' | 'Below';
/**
 * Specifies table column placement.
 * @private
 */
export  type ColumnPlacement = 'Left' | 'Right';
/**
 * Specifies the tab justification.
 */
export  type TabJustification = 
/**
 * Bar
 */
'Bar' | 
/**
 * Center
 */
'Center' | 
/**
 * Decimal
 */
'Decimal' | 
/**
 * Left
 */
'Left' | 
/**
 * List
 */
'List' | 
/**
 * Right
 */
'Right';
/**
 * Specifies the tab leader.
 */
export  type TabLeader = 
/**
 * None
 */
'None' | 
/**
 * Dotted
 */
'Dot' | 
/**
 * Hyphenated
 */
'Hyphen' | 
/**
 * Underscore
 */
'Underscore';
/**
 * Specifies the page fit type.
 */
export  type PageFitType = 
/**
 * Fits the page to 100%.
 */
'None' | 
/**
 * Fits atleast one page in view.
 */
'FitOnePage' | 
/**
 * Fits the page to its width in view.
 */
'FitPageWidth';
/**
 * Specifies the context type at selection.
 */
export  type ContextType = 'Text' | 'Image' | 'List' | 'TableText' | 'TableImage' | 'HeaderText' | 'HeaderImage' | 'HeaderTableText' | 'HeaderTableImage' | 'FooterText' | 'FooterImage' | 'FooterTableText' | 'FooterTableImage' | 'TableOfContents';
/**
 * Specifies the border type to be applied.
 */
export  type BorderType = 
/**
 * Outside border.
 */
'OutsideBorders' | 
/**
 * All border.
 */
'AllBorders' | 
/**
 * Insider borders.
 */
'InsideBorders' | 
/**
 * Left border.
 */
'LeftBorder' | 
/**
 * Inside vertical border.
 */
'InsideVerticalBorder' | 
/**
 * Right border.
 */
'RightBorder' | 
/**
 * Top border.
 */
'TopBorder' | 
/**
 * Insider horizontal border.
 */
'InsideHorizontalBorder' | 
/**
 * Bottom border.
 */
'BottomBorder' | 
/**
 * No border.
 */
'NoBorder';
/**
 * Specifies the dialog type.
 */
export  type DialogType = 
/**
 * Specifies hyperlink dialog.
 */
'Hyperlink' | 
/**
 * Specifies table dialog.
 */
'Table' | 
/**
 * Specifies bookmark dialog.
 */
'Bookmark' | 
/**
 * Specifies table of contents dialog.
 */
'TableOfContents' | 
/**
 * Specifies page setup dialog.
 */
'PageSetup' | 
/**
 * Specifies list dialog.
 */
'List' | 
/**
 * Specifies style dialog.
 */
'Style' | 
/**
 * Specifies styles dialog.
 */
'Styles' | 
/**
 * Specifies paragraph dialog.
 */
'Paragraph' | 
/**
 * Specifies font dialog.
 */
'Font' | 
/**
 * Specifies table properties dialog.
 */
'TableProperties' | 
/**
 * Specifies borders and shading dialog.
 */
'BordersAndShading' | 
/**
 * Specifies table options dialog.
 */
'TableOptions';
/**
 * @private
 * Action type
 */
export  type Action = 'Insert' | 'Delete' | 'BackSpace' | 'Selection' | 'MultiSelection' | 'Enter' | 'ImageResizing' | 'ReplaceAll' | 'Cut' | 'CharacterFormat' | 'Bold' | 'Italic' | 'FontSize' | 'FontFamily' | 'HighlightColor' | 'BaselineAlignment' | 'Strikethrough' | 'Underline' | 'InsertHyperlink' | 'InsertBookmark' | 'InsertElements' | 'DeleteBookmark' | 'FontColor' | 'InsertInline' | 'RemoveHyperlink' | 'AutoFormatHyperlink' | 'TextAlignment' | 'LeftIndent' | 'AfterSpacing' | 'BeforeSpacing' | 'RightIndent' | 'FirstLineIndent' | 'LineSpacing' | 'LineSpacingType' | 'ListFormat' | 'ParagraphFormat' | 'SectionFormat' | 'List' | 'InsertRowAbove' | 'InsertRowBelow' | 'DeleteTable' | 'DeleteRow' | 'DeleteColumn' | 'InsertColumnLeft' | 'InsertColumnRight' | 'TableFormat' | 'RowFormat' | 'CellFormat' | 'TableProperties' | 'Paste' | 'DeleteCells' | 'ClearCells' | 'InsertTable' | 'RowResizing' | 'CellResizing' | 'MergeCells' | 'ClearFormat' | 'ClearCharacterFormat' | 'ClearParagraphFormat' | 'AutoList' | 'BordersAndShading' | 'TableMarginsSelection' | 'CellMarginsSelection' | 'CellOptions' | 'TableOptions' | 'TableAlignment' | 'TableLeftIndent' | 'CellSpacing' | 'DefaultCellLeftMargin' | 'DefaultCellRightMargin' | 'TablePreferredWidthType' | 'TablePreferredWidth' | 'CellPreferredWidthType' | 'CellPreferredWidth' | 'DefaultCellTopMargin' | 'DefaultCellBottomMargin' | 'CellContentVerticalAlignment' | 'CellLeftMargin' | 'CellRightMargin' | 'CellTopMargin' | 'CellBottomMargin' | 'RowHeight' | 'RowHeightType' | 'RowHeader' | 'AllowBreakAcrossPages' | 'PageHeight' | 'PageWidth' | 'LeftMargin' | 'RightMargin' | 'TopMargin' | 'BottomMargin' | 'DefaultCellSpacing' | 'ListCharacterFormat' | 'ContinueNumbering' | 'RestartNumbering' | 'ListSelect' | 'Shading' | 'Borders' | 'TOC' | 'StyleName' | 'ApplyStyle' | 'SectionBreak' | 'PageBreak' | 'IMEInput' | 'TableAutoFitToContents' | 'TableAutoFitToWindow' | 'TableFixedColumnWidth' | 'ParagraphBidi' | 'TableBidi' | 'ContextualSpacing' | 'RestrictEditing' | 'RemoveEditRange';
export  type BiDirectionalOverride = 'None' | 'LTR' | 'RTL';
export  type AutoFitType = 'FitToContents' | 'FitToWindow' | 'FixedColumnWidth';
/**
 * Specifies the type of protection
 * @private
 */
export  type ProtectionType = 'NoProtection' | 'ReadOnly';
export  type PasteOptions = 'KeepSourceFormatting' | 'MergeWithExistingFormatting' | 'KeepTextOnly';
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/base/unique-format.d.ts
/**
 * @private
 */
export  class WUniqueFormat {
    propertiesHash: Dictionary<number, object>;
    referenceCount: number;
    uniqueFormatType: number;
    constructor(type: number);
    /**
     * @private
     */
    isEqual(source: Dictionary<number, object>, property: string, modifiedValue: object): boolean;
    private isNotEqual;
    /**
     * @private
     */
    static getPropertyType(uniqueFormatType: number, property: string): number;
    private static getRowFormatType;
    private static getListFormatType;
    private static getTableFormatType;
    private static getListLevelType;
    private static getShadingPropertyType;
    private static getCellFormatPropertyType;
    private static getBorderPropertyType;
    private static getCharacterFormatPropertyType;
    private static getParaFormatPropertyType;
    private static getSectionFormatType;
    /**
     * @private
     */
    isBorderEqual(source: Dictionary<number, object>, modifiedProperty: string, modifiedValue: Object): boolean;
    /**
     * @private
     */
    isCharacterFormatEqual(source: Dictionary<number, object>, modifiedProperty: string, modifiedValue: object): boolean;
    private isParagraphFormatEqual;
    /**
     * @private
     */
    isCellFormatEqual(source: Dictionary<number, object>, modifiedProperty: string, modifiedValue: Object): boolean;
    /**
     * @private
     */
    isShadingEqual(source: Dictionary<number, object>, modifiedProperty: string, modifiedValue: Object): boolean;
    /**
     * @private
     */
    isRowFormatEqual(source: Dictionary<number, object>, modifiedProperty: string, modifiedValue: Object): boolean;
    /**
     * @private
     */
    isListFormatEqual(source: Dictionary<number, object>, modifiedProperty: string, modifiedValue: Object): boolean;
    /**
     * @private
     */
    isTableFormatEqual(source: Dictionary<number, object>, modifiedProperty: string, modifiedValue: Object): boolean;
    /**
     * @private
     */
    isListLevelEqual(source: Dictionary<number, object>, modifiedProperty: string, modifiedValue: Object): boolean;
    /**
     * @private
     */
    isSectionFormatEqual(source: Dictionary<number, object>, modifiedProperty: string, modifiedValue: Object): boolean;
    /**
     * @private
     */
    cloneItems(format: WUniqueFormat, property: string, value: object, uniqueFormatType: number): void;
    /**
     * @private
     */
    mergeProperties(format: WUniqueFormat): Dictionary<number, object>;
    /**
     * @private
     */
    cloneProperties(): Dictionary<number, object>;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/base/unique-formats.d.ts
/**
 * @private
 */
export  class WUniqueFormats {
    /**
     * @private
     */
    items: WUniqueFormat[];
    constructor();
    /**
     * @private
     */
    addUniqueFormat(format: Dictionary<number, object>, type: number): WUniqueFormat;
    /**
     * @private
     */
    updateUniqueFormat(uniqueFormat: WUniqueFormat, property: string, value: object): WUniqueFormat;
    /**
     * @private
     */
    remove(uniqueFormat: WUniqueFormat): void;
    /**
     * @private
     */
    clear(): void;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/document-editor-model.d.ts
/**
 * Interface for a class DocumentEditor
 */
export interface DocumentEditorModel extends base.ComponentModel{
    /**
     * Default Paste Formatting Options
     * @default KeepSourceFormatting
     */
    defaultPasteOption?: PasteOptions;
    /**
     * Current User
     * @default ''
     */
    currentUser?: string;
    /**
     * User Selection Highlight Color
     * @default '#FFFF00'
     */
    userColor?: string;
    /**
     * Gets or sets the page gap value in document editor
     * @default 20
     */
    pageGap?: number;
    /**
     * Gets or sets the name of the document.
     * @default ''
     */
    documentName?: string;
    /**
     * Sfdt Service URL
     * @default ''
     */
    serviceUrl?: string;
    /**
     * Gets or sets the zoom factor in document editor.
     * @default 1
     */
    zoomFactor?: number;
    /**
     * Gets or sets a value indicating whether the document editor is in read only state or not.
     * @default true
     */
    isReadOnly?: boolean;
    /**
     * Gets or sets a value indicating whether print needs to be enabled or not.
     * @default false
     */
    enablePrint?: boolean;
    /**
     * Gets or sets a value indicating whether selection needs to be enabled or not.
     * @default false
     */
    enableSelection?: boolean;
    /**
     * Gets or sets a value indicating whether editor needs to be enabled or not.
     * @default false
     */
    enableEditor?: boolean;
    /**
     * Gets or sets a value indicating whether editor history needs to be enabled or not.
     * @default false
     */
    enableEditorHistory?: boolean;
    /**
     * Gets or sets a value indicating whether Sfdt export needs to be enabled or not.
     * @default false
     */
    enableSfdtExport?: boolean;
    /**
     * Gets or sets a value indicating whether word export needs to be enabled or not.
     * @default false
     */
    enableWordExport?: boolean;
    /**
     * Gets or sets a value indicating whether text export needs to be enabled or not.
     * @default false
     */
    enableTextExport?: boolean;
    /**
     * Gets or sets a value indicating whether options pane is enabled or not.
     * @default false
     */
    enableOptionsPane?: boolean;
    /**
     * Gets or sets a value indicating whether context menu is enabled or not.
     * @default false
     */
    enableContextMenu?: boolean;
    /**
     * Gets or sets a value indicating whether hyperlink dialog is enabled or not.
     * @default false
     */
    enableHyperlinkDialog?: boolean;
    /**
     * Gets or sets a value indicating whether bookmark dialog is enabled or not.
     * @default false
     */
    enableBookmarkDialog?: boolean;
    /**
     * Gets or sets a value indicating whether table of contents dialog is enabled or not.
     * @default false
     */
    enableTableOfContentsDialog?: boolean;
    /**
     * Gets or sets a value indicating whether search module is enabled or not.
     * @default false
     */
    enableSearch?: boolean;
    /**
     * Gets or sets a value indicating whether paragraph dialog is enabled or not.
     * @default false
     */
    enableParagraphDialog?: boolean;
    /**
     * Gets or sets a value indicating whether list dialog is enabled or not.
     * @default false
     */
    enableListDialog?: boolean;
    /**
     * Gets or sets a value indicating whether table properties dialog is enabled or not.
     * @default false
     */
    enableTablePropertiesDialog?: boolean;
    /**
     * Gets or sets a value indicating whether borders and shading dialog is enabled or not.
     * @default false
     */
    enableBordersAndShadingDialog?: boolean;
    /**
     * Gets or sets a value indicating whether margin dialog is enabled or not.
     * @default false
     */
    enablePageSetupDialog?: boolean;
    /**
     * Gets or sets a value indicating whether font dialog is enabled or not.
     * @default false
     */
    enableStyleDialog?: boolean;
    /**
     * Gets or sets a value indicating whether font dialog is enabled or not.
     * @default false
     */
    enableFontDialog?: boolean;
    /**
     * Gets or sets a value indicating whether table options dialog is enabled or not.
     * @default false
     */
    enableTableOptionsDialog?: boolean;
    /**
     * Gets or sets a value indicating whether table dialog is enabled or not.
     * @default false
     */
    enableTableDialog?: boolean;
    /**
     * Gets or sets a value indicating whether image resizer is enabled or not.
     * @default false
     */
    enableImageResizer?: boolean;
    /**
     * Gets or sets a value indicating whether editor need to be spell checked.
     * @default false
     */
    enableSpellCheck?: boolean;
    /**
     * Gets or Sets a value indicating whether tab key can be accepted as input or not.
     * @default false
     */
    acceptTab?: boolean;
    /**
     * Gets or Sets a value indicating whether holding Ctrl key is required to follow hyperlink on click. The default value is true.
     * @default true
     */
    useCtrlClickToFollowHyperlink?: boolean;
    /**
     * Gets or sets the page outline color.
     * @default '#000000'
     */
    pageOutline?: string;
    /**
     * Gets or sets a value indicating whether to enable cursor in document editor on read only state or not. The default value is false.
     * @default false
     */
    enableCursorOnReadOnly?: boolean;
    /**
     * Gets or sets a value indicating whether local paste needs to be enabled or not.
     * @default false
     */
    enableLocalPaste?: boolean;
    /**
     * Defines the settings of the DocumentEditor services
     */
    // tslint:disable-next-line:max-line-length
    serverActionSettings?: ServerActionSettingsModel;
    /**
     * Triggers whenever document changes in the document editor.
     * @event
     * @blazorproperty 'DocumentChanged'
     */
    documentChange?: base.EmitType<DocumentChangeEventArgs>;
    /**
     * Triggers whenever container view changes in the document editor.
     * @event
     * @blazorproperty 'ViewChanged'
     */
    viewChange?: base.EmitType<ViewChangeEventArgs>;
    /**
     * Triggers whenever zoom factor changes in the document editor.
     * @event
     * @blazorproperty 'ZoomFactorChanged'
     */
    zoomFactorChange?: base.EmitType<ZoomFactorChangeEventArgs>;
    /**
     * Triggers whenever selection changes in the document editor.
     * @event
     * @blazorproperty 'SelectionChanged'
     */
    selectionChange?: base.EmitType<SelectionChangeEventArgs>;
    /**
     * Triggers whenever hyperlink is clicked or tapped in the document editor.
     * @event
     * @blazorproperty 'OnRequestNavigate'
     */
    requestNavigate?: base.EmitType<RequestNavigateEventArgs>;
    /**
     * Triggers whenever content changes in the document editor.
     * @event
     * @blazorproperty 'ContentChanged'
     */
    contentChange?: base.EmitType<ContentChangeEventArgs>;
    /**
     * Triggers whenever key is pressed in the document editor.
     * @event
     * @blazorproperty 'OnKeyDown'
     */
    keyDown?: base.EmitType<DocumentEditorKeyDownEventArgs>;
    /**
     * Triggers whenever search results changes in the document editor.
     * @event
     * @blazorproperty 'SearchResultsChanged'
     */
    searchResultsChange?: base.EmitType<SearchResultsChangeEventArgs>;
    /**
     * Triggers when the component is created
     * @event
     * @blazorproperty 'Created'
     */
    created?: base.EmitType<Object>;
    /**
     * Triggers when the component is destroyed.
     * @event
     * @blazorproperty 'Destroyed'
     */
    destroyed?: base.EmitType<Object>;
    /**
     * Triggers while selecting the custom context-menu option.
     * @event
     * @blazorproperty 'ContextMenuItemSelected'
     */
    customContextMenuSelect?: base.EmitType<CustomContentMenuEventArgs>;
    /**
     * Triggers before opening the custom context-menu option.
     * @event
     * @blazorproperty 'OnContextMenuOpen'
     */
    customContextMenuBeforeOpen?: base.EmitType<BeforeOpenCloseCustomContentMenuEventArgs>;
}
/**
 * Interface for a class ServerActionSettings
 */
export interface ServerActionSettingsModel {
    /**
     * Specifies the system clipboard action of Document Editor.
     * @default 'SystemClipboard'
     */
    systemClipboard?: string;
    /**
     * Specifies the spell check action of Document Editor.
     * @default 'SpellCheck'
     */
    spellCheck?: string;
    /**
     * Specifies the restrict editing encryption/decryption action of Document Editor.
     * @default 'RestrictEditing'
     */
    restrictEditing?: string;
}
/**
 * Interface for a class ContainerServerActionSettings
 */
export interface ContainerServerActionSettingsModel extends ServerActionSettingsModel{
    /**
     * Specifies the load action of Document Editor.
     * @default 'Import'
     */
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/document-editor.d.ts
/**
 * The Document editor component is used to draft, save or print rich text contents as page by page.
 */
export  class DocumentEditor extends base.Component<HTMLElement> implements base.INotifyPropertyChanged {
    private enableHeaderFooterIn;
    /**
     * @private
     */
    enableHeaderAndFooter: boolean;
    /**
     * @private
     */
    viewer: LayoutViewer;
    /**
     * @private
     */
    isShiftingEnabled: boolean;
    /**
     * @private
     */
    isLayoutEnabled: boolean;
    /**
     * @private
     */
    isPastingContent: boolean;
    /**
     * @private
     */
    parser: SfdtReader;
    private isDocumentLoadedIn;
    private disableHistoryIn;
    /**
     * @private
     */
    findResultsList: string[];
    /**
     * @private
     */
    printModule: Print;
    /**
     * @private
     */
    sfdtExportModule: SfdtExport;
    /**
     * @private
     */
    selectionModule: Selection;
    /**
     * @private
     */
    editorModule: Editor;
    /**
     * @private
     */
    wordExportModule: WordExport;
    /**
     * @private
     */
    textExportModule: TextExport;
    /**
     * @private
     */
    editorHistoryModule: EditorHistory;
    /**
     * @private
     */
    tableOfContentsDialogModule: TableOfContentsDialog;
    /**
     * @private
     */
    tablePropertiesDialogModule: TablePropertiesDialog;
    /**
     * @private
     */
    bordersAndShadingDialogModule: BordersAndShadingDialog;
    /**
     * @private
     */
    listDialogModule: ListDialog;
    /**
     * @private
     */
    styleDialogModule: StyleDialog;
    /**
     * @private
     */
    cellOptionsDialogModule: CellOptionsDialog;
    /**
     * @private
     */
    tableOptionsDialogModule: TableOptionsDialog;
    /**
     * @private
     */
    tableDialogModule: TableDialog;
    /**
     * @private
     */
    spellCheckDialogModule: SpellCheckDialog;
    /**
     * @private
     */
    pageSetupDialogModule: PageSetupDialog;
    /**
     * @private
     */
    paragraphDialogModule: ParagraphDialog;
    /**
     * @private
     */
    optionsPaneModule: OptionsPane;
    /**
     * @private
     */
    hyperlinkDialogModule: HyperlinkDialog;
    /**
     * @private
     */
    bookmarkDialogModule: BookmarkDialog;
    /**
     * @private
     */
    stylesDialogModule: StylesDialog;
    /**
     * @private
     */
    contextMenuModule: ContextMenu;
    /**
     * @private
     */
    imageResizerModule: ImageResizer;
    /**
     * @private
     */
    searchModule: Search;
    /**
     * Default Paste Formatting Options
     * @default KeepSourceFormatting
     */
    defaultPasteOption: PasteOptions;
    /**
     * Current User
     * @default ''
     */
    currentUser: string;
    /**
     * User Selection Highlight Color
     * @default '#FFFF00'
     */
    userColor: string;
    /**
     * Gets or sets the page gap value in document editor
     * @default 20
     */
    pageGap: number;
    /**
     * Gets or sets the name of the document.
     * @default ''
     */
    documentName: string;
    /**
     * @private
     */
    spellCheckerModule: SpellChecker;
    /**
     * Sfdt Service URL
     * @default ''
     */
    serviceUrl: string;
    /**
     * Gets or sets the zoom factor in document editor.
     * @default 1
     */
    zoomFactor: number;
    /**
     * Gets or sets a value indicating whether the document editor is in read only state or not.
     * @default true
     */
    isReadOnly: boolean;
    /**
     * Gets or sets a value indicating whether print needs to be enabled or not.
     * @default false
     */
    enablePrint: boolean;
    /**
     * Gets or sets a value indicating whether selection needs to be enabled or not.
     * @default false
     */
    enableSelection: boolean;
    /**
     * Gets or sets a value indicating whether editor needs to be enabled or not.
     * @default false
     */
    enableEditor: boolean;
    /**
     * Gets or sets a value indicating whether editor history needs to be enabled or not.
     * @default false
     */
    enableEditorHistory: boolean;
    /**
     * Gets or sets a value indicating whether Sfdt export needs to be enabled or not.
     * @default false
     */
    enableSfdtExport: boolean;
    /**
     * Gets or sets a value indicating whether word export needs to be enabled or not.
     * @default false
     */
    enableWordExport: boolean;
    /**
     * Gets or sets a value indicating whether text export needs to be enabled or not.
     * @default false
     */
    enableTextExport: boolean;
    /**
     * Gets or sets a value indicating whether options pane is enabled or not.
     * @default false
     */
    enableOptionsPane: boolean;
    /**
     * Gets or sets a value indicating whether context menu is enabled or not.
     * @default false
     */
    enableContextMenu: boolean;
    /**
     * Gets or sets a value indicating whether hyperlink dialog is enabled or not.
     * @default false
     */
    enableHyperlinkDialog: boolean;
    /**
     * Gets or sets a value indicating whether bookmark dialog is enabled or not.
     * @default false
     */
    enableBookmarkDialog: boolean;
    /**
     * Gets or sets a value indicating whether table of contents dialog is enabled or not.
     * @default false
     */
    enableTableOfContentsDialog: boolean;
    /**
     * Gets or sets a value indicating whether search module is enabled or not.
     * @default false
     */
    enableSearch: boolean;
    /**
     * Gets or sets a value indicating whether paragraph dialog is enabled or not.
     * @default false
     */
    enableParagraphDialog: boolean;
    /**
     * Gets or sets a value indicating whether list dialog is enabled or not.
     * @default false
     */
    enableListDialog: boolean;
    /**
     * Gets or sets a value indicating whether table properties dialog is enabled or not.
     * @default false
     */
    enableTablePropertiesDialog: boolean;
    /**
     * Gets or sets a value indicating whether borders and shading dialog is enabled or not.
     * @default false
     */
    enableBordersAndShadingDialog: boolean;
    /**
     * Gets or sets a value indicating whether margin dialog is enabled or not.
     * @default false
     */
    enablePageSetupDialog: boolean;
    /**
     * Gets or sets a value indicating whether font dialog is enabled or not.
     * @default false
     */
    enableStyleDialog: boolean;
    /**
     * Gets or sets a value indicating whether font dialog is enabled or not.
     * @default false
     */
    enableFontDialog: boolean;
    /**
     * @private
     */
    fontDialogModule: FontDialog;
    /**
     * Gets or sets a value indicating whether table options dialog is enabled or not.
     * @default false
     */
    enableTableOptionsDialog: boolean;
    /**
     * Gets or sets a value indicating whether table dialog is enabled or not.
     * @default false
     */
    enableTableDialog: boolean;
    /**
     * Gets or sets a value indicating whether image resizer is enabled or not.
     * @default false
     */
    enableImageResizer: boolean;
    /**
     * Gets or sets a value indicating whether editor need to be spell checked.
     * @default false
     */
    enableSpellCheck: boolean;
    /**
     * Gets or Sets a value indicating whether tab key can be accepted as input or not.
     * @default false
     */
    acceptTab: boolean;
    /**
     * Gets or Sets a value indicating whether holding Ctrl key is required to follow hyperlink on click. The default value is true.
     * @default true
     */
    useCtrlClickToFollowHyperlink: boolean;
    /**
     * Gets or sets the page outline color.
     * @default '#000000'
     */
    pageOutline: string;
    /**
     * Gets or sets a value indicating whether to enable cursor in document editor on read only state or not. The default value is false.
     * @default false
     */
    enableCursorOnReadOnly: boolean;
    /**
     * Gets or sets a value indicating whether local paste needs to be enabled or not.
     * @default false
     */
    enableLocalPaste: boolean;
    /**
     * Defines the settings of the DocumentEditor services
     */
    serverActionSettings: ServerActionSettingsModel;
    /**
     * Triggers whenever document changes in the document editor.
     * @event
     * @blazorproperty 'DocumentChanged'
     */
    documentChange: base.EmitType<DocumentChangeEventArgs>;
    /**
     * Triggers whenever container view changes in the document editor.
     * @event
     * @blazorproperty 'ViewChanged'
     */
    viewChange: base.EmitType<ViewChangeEventArgs>;
    /**
     * Triggers whenever zoom factor changes in the document editor.
     * @event
     * @blazorproperty 'ZoomFactorChanged'
     */
    zoomFactorChange: base.EmitType<ZoomFactorChangeEventArgs>;
    /**
     * Triggers whenever selection changes in the document editor.
     * @event
     * @blazorproperty 'SelectionChanged'
     */
    selectionChange: base.EmitType<SelectionChangeEventArgs>;
    /**
     * Triggers whenever hyperlink is clicked or tapped in the document editor.
     * @event
     * @blazorproperty 'OnRequestNavigate'
     */
    requestNavigate: base.EmitType<RequestNavigateEventArgs>;
    /**
     * Triggers whenever content changes in the document editor.
     * @event
     * @blazorproperty 'ContentChanged'
     */
    contentChange: base.EmitType<ContentChangeEventArgs>;
    /**
     * Triggers whenever key is pressed in the document editor.
     * @event
     * @blazorproperty 'OnKeyDown'
     */
    keyDown: base.EmitType<DocumentEditorKeyDownEventArgs>;
    /**
     * Triggers whenever search results changes in the document editor.
     * @event
     * @blazorproperty 'SearchResultsChanged'
     */
    searchResultsChange: base.EmitType<SearchResultsChangeEventArgs>;
    /**
     * Triggers when the component is created
     * @event
     * @blazorproperty 'Created'
     */
    created: base.EmitType<Object>;
    /**
     * Triggers when the component is destroyed.
     * @event
     * @blazorproperty 'Destroyed'
     */
    destroyed: base.EmitType<Object>;
    /**
     * Triggers while selecting the custom context-menu option.
     * @event
     * @blazorproperty 'ContextMenuItemSelected'
     */
    customContextMenuSelect: base.EmitType<CustomContentMenuEventArgs>;
    /**
     * Triggers before opening the custom context-menu option.
     * @event
     * @blazorproperty 'OnContextMenuOpen'
     */
    customContextMenuBeforeOpen: base.EmitType<BeforeOpenCloseCustomContentMenuEventArgs>;
    /**
     * @private
     */
    characterFormat: CharacterFormatProperties;
    /**
     * @private
     */
    paragraphFormat: ParagraphFormatProperties;
    /**
     * Gets the total number of pages.
     * @returns {number}
     */
    readonly pageCount: number;
    /**
     *  Gets the selection object of the document editor.
     * @aspType Selection
     * @blazorType Selection
     * @returns {Selection}
     * @default undefined
     */
    readonly selection: Selection;
    /**
     *  Gets the editor object of the document editor.
     * @aspType Editor
     * @blazorType Editor
     * @returns {Editor}
     * @default undefined
     */
    readonly editor: Editor;
    /**
     * Gets the editor history object of the document editor.
     * @aspType EditorHistory
     * @blazorType EditorHistory
     * @returns {EditorHistory}
     */
    readonly editorHistory: EditorHistory;
    /**
     * Gets the search object of the document editor.
     * @aspType Search
     * @blazorType Search
     * @returns { Search }
     */
    readonly search: Search;
    /**
     * Gets the context menu object of the document editor.
     * @aspType ContextMenu
     * @blazorType ContextMenu
     * @returns {ContextMenu}
     */
    readonly contextMenu: ContextMenu;
    /**
     * Gets the spell check dialog object of the document editor.
     * @returns SpellCheckDialog
     */
    readonly spellCheckDialog: SpellCheckDialog;
    /**
     * Gets the spell check object of the document editor.
     * @aspType SpellChecker
     * @blazorType SpellChecker
     * @returns SpellChecker
     */
    readonly spellChecker: SpellChecker;
    /**
     * @private
     */
    readonly containerId: string;
    /**
     * @private
     */
    isDocumentLoaded: boolean;
    /**
     * Determines whether history needs to be enabled or not.
     * @default - false
     * @private
     */
    readonly enableHistoryMode: boolean;
    /**
     * Gets the start text position in the document.
     * @default undefined
     * @private
     */
    readonly documentStart: TextPosition;
    /**
     * Gets the end text position in the document.
     * @default undefined
     * @private
     */
    readonly documentEnd: TextPosition;
    /**
     * @private
     */
    readonly isReadOnlyMode: boolean;
    /**
     * Specifies to enable image resizer option
     * default - false
     * @private
     */
    readonly enableImageResizerMode: boolean;
    /**
     * Initialize the constructor of DocumentEditor
     */
    constructor(options?: DocumentEditorModel, element?: string | HTMLElement);
    protected preRender(): void;
    protected render(): void;
    /**
     * Get component name
     * @private
     */
    getModuleName(): string;
    /**
     * Called internally if any of the property value changed.
     * @private
     */
    onPropertyChanged(model: DocumentEditorModel, oldProp: DocumentEditorModel): void;
    private localizeDialogs;
    /**
     * Set the default character format for document editor
     * @param characterFormat
     */
    setDefaultCharacterFormat(characterFormat: CharacterFormatProperties): void;
    /**
     * Set the default paragraph format for document editor
     * @param paragraphFormat
     */
    setDefaultParagraphFormat(paragraphFormat: ParagraphFormatProperties): void;
    /**
     * Get the properties to be maintained in the persisted state.
     * @private
     */
    getPersistData(): string;
    private clearPreservedCollectionsInViewer;
    /**
     * @private
     */
    getDocumentEditorElement(): HTMLElement;
    /**
     * @private
     */
    fireContentChange(): void;
    /**
     * @private
     */
    fireDocumentChange(): void;
    /**
     * @private
     */
    fireSelectionChange(): void;
    /**
     * @private
     */
    fireZoomFactorChange(): void;
    /**
     * @private
     */
    fireViewChange(): void;
    /**
     * @private
     */
    fireCustomContextMenuSelect(item: string): void;
    /**
     * @private
     */
    fireCustomContextMenuBeforeOpen(item: string[]): void;
    /**
     * Shows the Paragraph dialog
     * @private
     */
    showParagraphDialog(paragraphFormat?: WParagraphFormat): void;
    /**
     * Shows the margin dialog
     * @private
     */
    showPageSetupDialog(): void;
    /**
     * Shows the font dialog
     * @private
     */
    showFontDialog(characterFormat?: WCharacterFormat): void;
    /**
     * Shows the cell option dialog
     * @private
     */
    showCellOptionsDialog(): void;
    /**
     * Shows the table options dialog.
     * @private
     */
    showTableOptionsDialog(): void;
    /**
     * Shows insert table dialog
     * @private
     */
    showTableDialog(): void;
    /**
     * Shows the table of content dialog
     * @private
     */
    showTableOfContentsDialog(): void;
    /**
     * Shows the style dialog
     * @private
     */
    showStyleDialog(): void;
    /**
     * Shows the hyperlink dialog
     * @private
     */
    showHyperlinkDialog(): void;
    /**
     * Shows the bookmark dialog.
     * @private
     */
    showBookmarkDialog(): void;
    /**
     * Shows the styles dialog.
     * @private
     */
    showStylesDialog(): void;
    /**
     * Shows the List dialog
     * @private
     */
    showListDialog(): void;
    /**
     * Shows the table properties dialog
     * @private
     */
    showTablePropertiesDialog(): void;
    /**
     * Shows the borders and shading dialog
     * @private
     */
    showBordersAndShadingDialog(): void;
    protected requiredModules(): base.ModuleDeclaration[];
    /**
     * @private
     */
    defaultLocale: Object;
    /**
     * Opens the given Sfdt text.
     * @param {string} sfdtText.
     */
    open(sfdtText: string): void;
    /**
     * Scrolls view to start of the given page number if exists.
     * @param  {number} pageNumber.
     * @returns void
     */
    scrollToPage(pageNumber: number): boolean;
    /**
     * Enables all the modules.
     * @returns void
     */
    enableAllModules(): void;
    /**
     * Resizes the component and its sub elements based on given size or container size.
     * @param width
     * @param height
     */
    resize(width?: number, height?: number): void;
    /**
     * Shifts the focus to the document.
     */
    focusIn(): void;
    /**
     * Fits the page based on given fit type.
     * @param  {PageFitType} pageFitType? - Default value of ‘pageFitType’ parameter is 'None'
     * @returns void
     */
    fitPage(pageFitType?: PageFitType): void;
    /**
     * Prints the document.
     * @param  {Window} printWindow? - Default value of 'printWindow' parameter is undefined.
     */
    print(printWindow?: Window): void;
    /**
     * Serialize the data to JSON string.
     */
    serialize(): string;
    /**
     * Saves the document.
     * @param {string} fileName
     * @param {FormatType} formatType
     */
    save(fileName: string, formatType?: FormatType): void;
    /**
     * Saves the document as blob.
     * @param {FormatType} formatType
     */
    saveAsBlob(formatType?: FormatType): Promise<Blob>;
    /**
     * Opens a blank document.
     */
    openBlank(): void;
    /**
     * Gets the style names based on given style type.
     * @param styleType
     */
    getStyleNames(styleType?: StyleType): string[];
    /**
     * Gets the style objects on given style type.
     * @param styleType
     */
    getStyles(styleType?: StyleType): Object[];
    /**
     * Gets the bookmarks.
     */
    getBookmarks(): string[];
    /**
     * Shows the dialog.
     * @param {DialogType} dialogType
     * @returns void
     */
    showDialog(dialogType: DialogType): void;
    /**
     * Shows the options pane.
     */
    showOptionsPane(): void;
    /**
     * Destroys all managed resources used by this object.
     */
    destroy(): void;
    private destroyDependentModules;
}
/**
 * The `ServerActionSettings` module is used to provide the server action methods of Document Editor.
 */
export  class ServerActionSettings extends base.ChildProperty<ServerActionSettings> {
    /**
     * Specifies the system clipboard action of Document Editor.
     * @default 'SystemClipboard'
     */
    systemClipboard: string;
    /**
     * Specifies the spell check action of Document Editor.
     * @default 'SpellCheck'
     */
    spellCheck: string;
    /**
     * Specifies the restrict editing encryption/decryption action of Document Editor.
     * @default 'RestrictEditing'
     */
    restrictEditing: string;
}
/**
 * The `ServerActionSettings` module is used to provide the server action methods of Document Editor Container.
 */
export  class ContainerServerActionSettings extends ServerActionSettings {
    /**
     * Specifies the load action of Document Editor.
     * @default 'Import'
     */
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/context-menu.d.ts
/**
 * Context navigations.ContextMenu class
 */
export  class ContextMenu {
    private viewer;
    /**
     * @private
     */
    contextMenuInstance: navigations.ContextMenu;
    /**
     * @private
     */
    contextMenu: HTMLElement;
    /**
     * @private
     */
    menuItems: navigations.MenuItemModel[];
    /**
     * @private
     */
    customMenuItems: navigations.MenuItemModel[];
    /**
     * @private
     */
    locale: base.L10n;
    /**
     * @private
     */
    ids: string[];
    /**
     * @private
     */
    enableCustomContextMenu: boolean;
    /**
     * @private
     */
    enableCustomContextMenuBottom: boolean;
    private currentContextInfo;
    private noSuggestion;
    private spellContextItems;
    private customItems;
    /**
     * @private
     */
    constructor(viewer: LayoutViewer);
    /**
     * Gets the spell checker
     * @private
     */
    readonly spellChecker: SpellChecker;
    /**
     * Gets module name.
     */
    private getModuleName;
    /**
     * Initialize context menu.
     * @param localValue Localize value.
     * @private
     */
    initContextMenu(localValue: base.L10n, isRtl?: boolean): void;
    /**
     * Disable browser context menu.
     */
    private disableBrowserContextmenu;
    /**
     * Handles context menu items.
     * @param  {string} item Specifies which item is selected.
     * @private
     */
    handleContextMenuItem(item: string): void;
    /**
     * Method to call the selected item
     * @param {string} content
     */
    private callSelectedOption;
    /**
     * To add and customize custom context menu
     * @param {navigations.MenuItemModel[]} items - To add custom menu item
     * @param {boolean} isEnable - To hide existing menu item and show custom menu item alone
     * @param {boolean} isBottom - To show the custom menu item in bottom of the existing item
     */
    addCustomMenu(items: navigations.MenuItemModel[], isEnable?: boolean, isBottom?: boolean): void;
    /**
     * Context navigations.ContextMenu Items.
     * @param {navigations.MenuItemModel[]} menuItems - To add MenuItem to context menu
     * @private
     */
    addMenuItems(menuItems: navigations.MenuItemModel[]): navigations.MenuItemModel[];
    /**
     * Handles on context menu key pressed.
     * @param  {PointerEvent} event
     * @private
     */
    onContextMenuInternal: (event: PointerEvent) => void;
    /**
     * Method to hide spell context items
     */
    hideSpellContextItems(): void;
    /**
     * Method to process suggestions to add in context menu
     * @param {any} allSuggestions
     * @param {string[]} splittedSuggestion
     * @param {PointerEvent} event
     * @private
     */
    processSuggestions(allSuggestions: any, splittedSuggestion: string[], event: PointerEvent): void;
    /**
     * Method to add inline menu
     * @private
     */
    constructContextmenu(allSuggestion: any[], splittedSuggestion: any): any[];
    private showHideElements;
    /**
     * Disposes the internal objects which are maintained.
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/dialogs/bookmark-dialog.d.ts
/**
 * The Bookmark dialog is used to add, navigate or delete bookmarks.
 */
export  class BookmarkDialog {
    /**
     * @private
     */
    owner: LayoutViewer;
    private target;
    private listviewInstance;
    private textBoxInput;
    private addButton;
    private deleteButton;
    private gotoButton;
    /**
     * @private
     */
    constructor(viewer: LayoutViewer);
    /**
     * @private
     */
    getModuleName(): string;
    /**
     * @private
     */
    initBookmarkDialog(localValue: base.L10n, bookmarks: string[], isRtl?: boolean): void;
    /**
     * @private
     */
    show(): void;
    /**
     * @private
     */
    onKeyUpOnTextBox: (event: KeyboardEvent) => void;
    private enableOrDisableButton;
    private addBookmark;
    private selectHandler;
    private focusTextBox;
    private removeObjects;
    private gotoBookmark;
    private deleteBookmark;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/dialogs/borders-and-shading-dialog.d.ts
/**
 * The Borders and Shading dialog is used to modify borders and shading options for selected table or cells.
 */
export  class BordersAndShadingDialog {
    private owner;
    private dialog;
    private target;
    private tableFormatIn;
    private cellFormatIn;
    private applyTo;
    private cellFormat;
    private tableFormat;
    private borderStyle;
    private borderColorPicker;
    private noneDiv;
    private boxDiv;
    private allDiv;
    private customDiv;
    private noneDivTransparent;
    private boxDivTransparent;
    private allDivTransparent;
    private customDivTransparent;
    private previewDiv;
    private previewRightDiagonalDiv;
    private previewLeftDiagonalDiv;
    private previewVerticalDiv;
    private previewHorizontalDiv;
    private previewDivTopTopContainer;
    private previewDivTopTop;
    private previewDivTopCenterContainer;
    private previewDivTopCenter;
    private previewDivTopBottomContainer;
    private previewDivTopBottom;
    private previewDivLeftDiagonalContainer;
    private previewDivLeftDiagonal;
    private previewDivBottomLeftContainer;
    private previewDivBottomLeft;
    private previewDivBottomcenterContainer;
    private previewDivBottomcenter;
    private previewDivBottomRightContainer;
    private previewDivBottomRight;
    private previewDivDiagonalRightContainer;
    private previewDivDiagonalRight;
    private previewDivTopTopTransParent;
    private previewDivTopCenterTransParent;
    private previewDivTopBottomTransParent;
    private previewDivLeftDiagonalTransParent;
    private previewDivBottomLeftTransparent;
    private previewDivBottomcenterTransparent;
    private previewDivBottomRightTransparent;
    private previewDivDiagonalRightTransparent;
    private shadingContiner;
    private shadingColorPicker;
    private ulelementShading;
    private borderWidth;
    private isShadingChanged;
    /**
     * @private
     */
    constructor(viewer: LayoutViewer);
    private getModuleName;
    /**
     * @private
     */
    initBordersAndShadingsDialog(localeValue: base.L10n, isRtl?: boolean): void;
    private applyBordersShadingsProperties;
    private applyFormat;
    private getBorder;
    private checkClassName;
    /**
     * @private
     */
    closeDialog: () => void;
    private closeBordersShadingsDialog;
    /**
     * @private
     */
    show(): void;
    private handleSettingCheckBoxAction;
    private updateClassForSettingDivElements;
    private setSettingPreviewDivElement;
    private isShowHidePreviewTableElements;
    private handlePreviewCheckBoxAction;
    private handlePreviewCheckBoxShowHide;
    private showHidePreviewDivElements;
    private setPropertyPreviewDivElement;
    private applyTableCellPreviewBoxes;
    private applyPreviewTableBackgroundColor;
    private applyPreviewTableBorderColor;
    private loadBordersShadingsPropertiesDialog;
    private cloneBorders;
    private getLineStyle;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/dialogs/bullets-and-numbering-dialog.d.ts
/**
 * The Bullets and Numbering dialog is used to apply list format for a paragraph style.
 */
export  class BulletsAndNumberingDialog {
    private owner;
    private target;
    private isBullet;
    private symbol;
    private fontFamily;
    private numberFormat;
    private listLevelPattern;
    private listFormat;
    private abstractList;
    private tabObj;
    /**
     * @private
     */
    constructor(layoutViewer: LayoutViewer);
    /**
     * @private
     */
    getModuleName(): string;
    /**
     * @private
     */
    initNumberingBulletDialog(locale: base.L10n): void;
    private createNumberList;
    private createNumberListTag;
    private createNumberNoneListTag;
    private createBulletListTag;
    private createBulletList;
    /**
     * @private
     */
    showNumberBulletDialog(listFormat: WListFormat, abstractList: WAbstractList): void;
    /**
     * @private
     */
    numberListClick: (args: any) => void;
    private setActiveElement;
    /**
     * @private
     */
    bulletListClick: (args: any) => void;
    /**
     * @private
     */
    loadNumberingBulletDialog: () => void;
    /**
     * @private
     */
    closeNumberingBulletDialog: () => void;
    /**
     * @private
     */
    onCancelButtonClick: () => void;
    /**
     * @private
     */
    onOkButtonClick: () => void;
    /**
     * @private
     */
    unWireEventsAndBindings(): void;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/dialogs/cell-options-dialog.d.ts
/**
 * The Cell options dialog is used to modify margins of selected cells.
 */
export  class CellOptionsDialog {
    /**
     * @private
     */
    owner: LayoutViewer;
    /**
     * @private
     */
    dialog: popups.Dialog;
    /**
     * @private
     */
    target: HTMLElement;
    private sameAsTableCheckBox;
    /**
     * @private
     */
    sameAsTable: boolean;
    /**
     * @private
     */
    topMarginBox: inputs.NumericTextBox;
    /**
     * @private
     */
    leftMarginBox: inputs.NumericTextBox;
    /**
     * @private
     */
    bottomMarginBox: inputs.NumericTextBox;
    /**
     * @private
     */
    rightMarginBox: inputs.NumericTextBox;
    /**
     * @private
     */
    cellFormatIn: WCellFormat;
    /**
     * @private
     */
    constructor(viewer: LayoutViewer);
    /**
     * @private
     */
    readonly cellFormat: WCellFormat;
    /**
     * @private
     */
    getModuleName(): string;
    /**
     * @private
     */
    initCellMarginsDialog(localValue: base.L10n, isRtl?: boolean): void;
    /**
     * @private
     */
    show(): void;
    /**
     * @private
     */
    removeEvents: () => void;
    /**
     * @private
     */
    changeSameAsTable: () => void;
    /**
     * @private
     */
    loadCellMarginsDialog(): void;
    private loadCellProperties;
    /**
     * @private
     */
    applyTableCellProperties: () => void;
    /**
     * @private
     */
    applySubCellOptions(cellFormat: WCellFormat): void;
    /**
     * @private
     */
    applyCellmarginsValue(row: TableRowWidget, start: TextPosition, end: TextPosition, cellFormat: WCellFormat): void;
    private applyCellMarginsInternal;
    /**
     * @private
     */
    applyCellMarginsForCells(row: TableRowWidget, cellFormat: WCellFormat): void;
    /**
     * @private
     */
    iterateCells(cells: TableCellWidget[], cellFormat: WCellFormat): void;
    /**
     * @private
     */
    applySubCellMargins(sourceFormat: WCellFormat, cellFormat: WCellFormat): void;
    /**
     * @private
     */
    applyTableOptions(cellFormat: WCellFormat): void;
    /**
     * @private
     */
    closeCellMarginsDialog: () => void;
    /**
     * @private
     */
    destroy(): void;
    /**
     * @private
     */
    static getCellMarginDialogElements(dialog: CellOptionsDialog | TableOptionsDialog, div: HTMLDivElement, locale: base.L10n): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/dialogs/font-dialog.d.ts
/**
 * The Font dialog is used to modify formatting of selected text.
 */
export  class FontDialog {
    private fontStyleInternal;
    private owner;
    private target;
    private fontNameList;
    private fontStyleText;
    private fontSizeText;
    private colorPicker;
    private fontColorDiv;
    private underlineDrop;
    private strikethroughBox;
    private doublestrikethrough;
    private superscript;
    private subscript;
    private bold;
    private italic;
    private underline;
    private strikethrough;
    private baselineAlignment;
    private fontSize;
    private fontFamily;
    private fontColor;
    /**
     * @private
     */
    characterFormat: WCharacterFormat;
    /**
     * @private
     */
    /**
    * @private
    */
    fontStyle: string;
    /**
     * @private
     */
    constructor(layoutViewer: LayoutViewer);
    /**
     * @private
     */
    getModuleName(): string;
    private createInputElement;
    /**
     * @private
     */
    initFontDialog(locale: base.L10n, isRtl?: boolean): void;
    private getFontSizeDiv;
    private getFontDiv;
    /**
     * @private
     */
    showFontDialog(characterFormat?: WCharacterFormat): void;
    /**
     * @private
     */
    loadFontDialog: () => void;
    /**
     * @private
     */
    closeFontDialog: () => void;
    /**
     * @private
     */
    onCancelButtonClick: () => void;
    /**
     * @private
     */
    onInsertFontFormat: () => void;
    /**
     * Applies character format
     * @param  {Selection} selection
     * @param  {WCharacterFormat} format
     * @private
     */
    onCharacterFormat(selection: Selection, format: WCharacterFormat): void;
    /**
     * @private
     */
    enableCheckBoxProperty(args: any): void;
    private fontSizeUpdate;
    private fontStyleUpdate;
    private fontFamilyUpdate;
    private underlineUpdate;
    private fontColorUpdate;
    private singleStrikeUpdate;
    private doubleStrikeUpdate;
    private superscriptUpdate;
    private subscriptUpdate;
    /**
     * @private
     */
    unWireEventsAndBindings(): void;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/dialogs/hyperlink-dialog.d.ts
/**
 * The Hyperlink dialog is used to insert or edit hyperlink at selection.
 */
export  class HyperlinkDialog {
    private displayText;
    private navigationUrl;
    private displayTextBox;
    private addressText;
    private urlTextBox;
    private insertButton;
    private bookmarkDropdown;
    private bookmarkCheckbox;
    private bookmarkDiv;
    private target;
    /**
     * @private
     */
    owner: LayoutViewer;
    private bookmarks;
    private localObj;
    /**
     * @private
     */
    constructor(viewer: LayoutViewer);
    /**
     * @private
     */
    getModuleName(): string;
    /**
     * @private
     */
    initHyperlinkDialog(localValue: base.L10n, isRtl?: boolean): void;
    /**
     * @private
     */
    show(): void;
    /**
     * @private
     */
    hide(): void;
    /**
     * @private
     */
    onKeyUpOnUrlBox: (event: KeyboardEvent) => void;
    /**
     * @private
     */
    onKeyUpOnDisplayBox: () => void;
    private enableOrDisableInsertButton;
    /**
     * @private
     */
    onInsertButtonClick: () => void;
    /**
     * @private
     */
    onCancelButtonClick: () => void;
    /**
     * @private
     */
    loadHyperlinkDialog: () => void;
    /**
     * @private
     */
    closeHyperlinkDialog: () => void;
    /**
     * @private
     */
    onInsertHyperlink(): void;
    private onUseBookmarkChange;
    private onBookmarkchange;
    /**
     * @private
     */
    clearValue(): void;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/dialogs/index.d.ts
/**
 * Export dialogs
 */
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/dialogs/list-dialog.d.ts
/**
 * The List dialog is used to create or modify lists.
 */
export  class ListDialog {
    /**
     * @private
     */
    dialog: popups.Dialog;
    private target;
    /**
     * @private
     */
    owner: LayoutViewer;
    private viewModel;
    private startAt;
    private textIndent;
    private alignedAt;
    private listLevelElement;
    private followNumberWith;
    private numberStyle;
    private numberFormat;
    private restartBy;
    private formatInfoToolTip;
    private numberFormatDiv;
    /**
     * @private
     */
    isListCharacterFormat: boolean;
    /**
     * @private
     */
    readonly listLevel: WListLevel;
    /**
     * @private
     */
    readonly list: WList;
    /**
     * @private
     */
    readonly levelNumber: number;
    /**
     * @private
     */
    constructor(viewer: LayoutViewer);
    /**
     * @private
     */
    getModuleName(): string;
    /**
     * @private
     */
    showListDialog(): void;
    /**
     * Shows the table properties dialog
     * @private
     */
    initListDialog(locale: base.L10n, isRtl?: boolean): void;
    private wireAndBindEvent;
    private onTextIndentChanged;
    private onStartValueChanged;
    private onListLevelValueChanged;
    private onNumberFormatChanged;
    private onAlignedAtValueChanged;
    private updateRestartLevelBox;
    private onFollowCharacterValueChanged;
    private onLevelPatternValueChanged;
    private listPatternConverter;
    private followCharacterConverter;
    private loadListDialog;
    private updateDialogValues;
    private showFontDialog;
    private onApplyList;
    private onCancelButtonClick;
    private closeListDialog;
    private disposeBindingForListUI;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/dialogs/list-view-model.d.ts
/**
 * List view model implementation
 * @private
 */
export  class ListViewModel {
    private listIn;
    private levelNumberIn;
    /**
     * @private
     */
    dialog: ListDialog;
    /**
     * @private
     */
    /**
    * @private
    */
    levelNumber: number;
    /**
     * @private
     */
    /**
    * @private
    */
    list: WList;
    /**
     * @private
     */
    readonly listLevel: WListLevel;
    /**
     * @private
     */
    /**
    * @private
    */
    listLevelPattern: ListLevelPattern;
    /**
     * @private
     */
    /**
    * @private
    */
    followCharacter: FollowCharacterType;
    /**
     * @private
     */
    constructor();
    private createList;
    private addListLevels;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/dialogs/page-setup-dialog.d.ts
/**
 * The Page setup dialog is used to modify formatting of selected sections.
 */
export  class PageSetupDialog {
    private target;
    /**
     * @private
     */
    owner: LayoutViewer;
    /**
     * @private
     */
    topMarginBox: inputs.NumericTextBox;
    /**
     * @private
     */
    bottomMarginBox: inputs.NumericTextBox;
    /**
     * @private
     */
    leftMarginBox: inputs.NumericTextBox;
    /**
     * @private
     */
    rightMarginBox: inputs.NumericTextBox;
    /**
     * @private
     */
    widthBox: inputs.NumericTextBox;
    /**
     * @private
     */
    heightBox: inputs.NumericTextBox;
    /**
     * @private
     */
    headerBox: inputs.NumericTextBox;
    /**
     * @private
     */
    footerBox: inputs.NumericTextBox;
    private paperSize;
    private checkBox1;
    private checkBox2;
    private landscape;
    private portrait;
    private isPortrait;
    private marginTab;
    private paperTab;
    private layoutTab;
    /**
     * @private
     */
    constructor(viewer: LayoutViewer);
    private getModuleName;
    /**
     * @private
     */
    initPageSetupDialog(locale: base.L10n, isRtl?: boolean): void;
    /**
     * @private
     */
    initMarginProperties(element: HTMLDivElement, locale: base.L10n, isRtl?: boolean): void;
    /**
     * @private
     */
    initPaperSizeProperties(element: HTMLDivElement, locale: base.L10n, isRtl?: boolean): void;
    /**
     * @private
     */
    initLayoutProperties(element: HTMLDivElement, locale: base.L10n, isRtl?: boolean): void;
    /**
     * @private
     */
    show(): void;
    /**
     * @private
     */
    loadPageSetupDialog: () => void;
    /**
     * @private
     */
    closePageSetupDialog: () => void;
    /**
     * @private
     */
    onCancelButtonClick: () => void;
    /**
     * @private
     */
    keyUpInsertPageSettings: (event: KeyboardEvent) => void;
    /**
     * @private
     */
    applyPageSetupProperties: () => void;
    /**
     * @private
     */
    changeByPaperSize: (event: dropdowns.ChangeEventArgs) => void;
    /**
     * @private
     */
    onPortrait: (event: buttons.ChangeArgs) => void;
    /**
     * @private
     */
    onLandscape: (event: buttons.ChangeArgs) => void;
    /**
     * @private
     */
    unWireEventsAndBindings: () => void;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/dialogs/paragraph-dialog.d.ts
/**
 * The Paragraph dialog is used to modify formatting of selected paragraphs.
 */
export  class ParagraphDialog {
    /**
     * @private
     */
    owner: LayoutViewer;
    private target;
    private alignment;
    private lineSpacing;
    private special;
    private leftIndentIn;
    private rightIndentIn;
    private byIn;
    private beforeSpacingIn;
    private afterSpacingIn;
    private atIn;
    private rtlButton;
    private ltrButton;
    private contextSpacing;
    private leftIndent;
    private rightIndent;
    private beforeSpacing;
    private afterSpacing;
    private textAlignment;
    private firstLineIndent;
    private lineSpacingIn;
    private lineSpacingType;
    private paragraphFormat;
    private bidi;
    private contextualSpacing;
    isStyleDialog: boolean;
    private directionDiv;
    /**
     * @private
     */
    constructor(viewer: LayoutViewer);
    /**
     * @private
     */
    getModuleName(): string;
    /**
     * @private
     */
    initParagraphDialog(locale: base.L10n): void;
    /**
     * @private
     */
    keyUpParagraphSettings: (event: KeyboardEvent) => void;
    private changeBeforeSpacing;
    private changeAfterSpacing;
    private changeLeftIndent;
    private changeRightIndent;
    private changeLineSpacingValue;
    private changeFirstLineIndent;
    private changeByTextAlignment;
    private changeBidirectional;
    private changeContextualSpacing;
    private changeAlignmentByBidi;
    /**
     * @private
     */
    changeByValue: (event: dropdowns.ChangeEventArgs) => void;
    /**
     * @private
     */
    changeBySpacing: (event: dropdowns.ChangeEventArgs) => void;
    /**
     * @private
     */
    loadParagraphDialog: () => void;
    private getAlignmentValue;
    /**
     * @private
     */
    applyParagraphFormat: () => void;
    /**
     * Applies Paragraph Format
     * @param  {WParagraphFormat} paragraphFormat
     * @private
     */
    onParagraphFormat(paragraphFormat: WParagraphFormat): void;
    /**
     * @private
     */
    closeParagraphDialog: () => void;
    /**
     * @private
     */
    show(paragraphFormat?: WParagraphFormat): void;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/dialogs/spellCheck-dialog.d.ts
/**
 * Spell check dialog
 */
export  class SpellCheckDialog {
    private target;
    private elementBox;
    /**
     * @private
     */
    localValue: base.L10n;
    private errorText;
    private spellingListView;
    private suggestionListView;
    private selectedText;
    owner: LayoutViewer;
    private isSpellChecking;
    constructor(viewer: LayoutViewer);
    /**
     * Gets the spell checker
     * @private
     */
    readonly parent: DocumentEditor;
    private getModuleName;
    private selectHandler;
    /**
     * @private
     */
    onCancelButtonClick: () => void;
    /**
     * @private
     */
    onIgnoreClicked: () => void;
    /**
     * Method to remove errors
     */
    private removeErrors;
    /**
     * @private
     */
    onIgnoreAllClicked: () => void;
    /**
     * @private
     */
    addToDictClicked: () => void;
    /**
     * @private
     */
    changeButtonClicked: () => void;
    /**
     * @private
     */
    changeAllButtonClicked: () => void;
    /**
     * @private
     */
    show(error?: string, elementbox?: ElementBox, callSpellChecker?: boolean): void;
    /**
     * @private
     */
    updateSuggestionDialog(error: string, elementBox: ElementBox, callSpellChecker?: boolean): void;
    /**
     * Method to handle retrieved suggestions from server side
     * @param {string} error
     * @param {any} jsonObject
     */
    private handleRetrievedSuggestion;
    /**
     * @private
     */
    initSpellCheckDialog(localValue: base.L10n, error?: string, suggestion?: string[]): void;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/dialogs/style-dialog.d.ts
/**
 * The Style dialog is used to create or modify styles.
 */
export  class StyleDialog {
    private owner;
    private target;
    private styleType;
    private styleBasedOn;
    private styleParagraph;
    private onlyThisDocument;
    private template;
    private isEdit;
    private editStyleName;
    private style;
    private abstractList;
    private numberingBulletDialog;
    private okButton;
    private styleNameElement;
    private isUserNextParaUpdated;
    private fontFamily;
    private fontSize;
    private characterFormat;
    private paragraphFormat;
    private localObj;
    private bold;
    private italic;
    private underline;
    private fontColor;
    private leftAlign;
    private rightAlign;
    private centerAlign;
    private justify;
    private singleLineSpacing;
    private doubleLineSpacing;
    private onePointFiveLineSpacing;
    /**
     * @private
     */
    constructor(viewer: LayoutViewer);
    /**
     * @private
     */
    getModuleName(): string;
    /**
     * @private
     */
    initStyleDialog(localValue: base.L10n, isRtl?: boolean): void;
    private createFormatDropdown;
    private openDialog;
    private createFontOptions;
    private setBoldProperty;
    private setItalicProperty;
    private setUnderlineProperty;
    private fontButtonClicked;
    private fontSizeUpdate;
    private fontFamilyChanged;
    private fontColorUpdate;
    private createParagraphOptions;
    private setLeftAlignment;
    private setRightAlignment;
    private setCenterAlignment;
    private setJustifyAlignment;
    private createButtonElement;
    private increaseBeforeAfterSpacing;
    private decreaseBeforeAfterSpacing;
    private toggleDisable;
    /**
     * @private
     */
    updateNextStyle: (args: FocusEvent) => void;
    /**
     * @private
     */
    updateOkButton: () => void;
    /**
     * @private
     */
    styleTypeChange: (args: any) => void;
    private styleBasedOnChange;
    /**
     * @private
     */
    styleParagraphChange: (args: any) => void;
    /**
     * @private
     */
    showFontDialog: () => void;
    /**
     * @private
     */
    showParagraphDialog: () => void;
    /**
     * @private
     */
    showNumberingBulletDialog: () => void;
    /**
     * @private
     */
    show(styleName?: string, header?: string): void;
    /**
     * @private
     */
    onOkButtonClick: () => void;
    private updateList;
    private createLinkStyle;
    private loadStyleDialog;
    /**
     * @private
     */
    updateCharacterFormat(characterFormat?: WCharacterFormat): void;
    /**
     * @private
     */
    updateParagraphFormat(paragraphFOrmat?: WParagraphFormat): void;
    private enableOrDisableOkButton;
    private getTypeValue;
    private updateStyleNames;
    private getStyle;
    /**
     * @private
     */
    onCancelButtonClick: () => void;
    /**
     * @private
     */
    closeStyleDialog: () => void;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/dialogs/styles-dialog.d.ts
/**
 * The Styles dialog is used to create or modify styles.
 */
export  class StylesDialog {
    /**
     * @private
     */
    owner: LayoutViewer;
    private target;
    private listviewInstance;
    private styleName;
    private localValue;
    /**
     * @private
     */
    constructor(viewer: LayoutViewer);
    /**
     * @private
     */
    getModuleName(): string;
    /**
     * @private
     */
    initStylesDialog(localValue: base.L10n, styles: string[], isRtl?: boolean): void;
    /**
     * @private
     */
    show(): void;
    private updateStyleNames;
    private defaultStyleName;
    private modifyStyles;
    private selectHandler;
    private hideObjects;
    private addNewStyles;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/dialogs/table-dialog.d.ts
/**
 * The Table dialog is used to insert table at selection.
 */
export  class TableDialog {
    private columnsCountBox;
    private rowsCountBox;
    private target;
    /**
     * @private
     */
    owner: LayoutViewer;
    private columnValueTexBox;
    private rowValueTextBox;
    /**
     * @private
     */
    constructor(viewer: LayoutViewer);
    private getModuleName;
    /**
     * @private
     */
    initTableDialog(localValue: base.L10n): void;
    /**
     * @private
     */
    show(): void;
    /**
     * @private
     */
    keyUpInsertTable: (event: KeyboardEvent) => void;
    /**
     * @private
     */
    onCancelButtonClick: () => void;
    /**
     * @private
     */
    onInsertTableClick: () => void;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/dialogs/table-of-contents-dialog.d.ts
/**
 * The Table of contents dialog is used to insert or edit table of contents at selection.
 */
export  class TableOfContentsDialog {
    private target;
    /**
     * @private
     */
    owner: LayoutViewer;
    private pageNumber;
    private rightAlign;
    private tabLeader;
    private showLevel;
    private hyperlink;
    private style;
    private heading1;
    private heading2;
    private heading3;
    private heading4;
    private heading5;
    private heading6;
    private heading7;
    private heading8;
    private heading9;
    private normal;
    private outline;
    private textBoxInput;
    private listViewInstance;
    /**
     * @private
     */
    constructor(viewer: LayoutViewer);
    private getModuleName;
    /**
     * @private
     */
    initTableOfContentDialog(locale: base.L10n, isRtl?: boolean): void;
    private styleLocaleValue;
    /**
     * @private
     */
    show(): void;
    /**
     * @private
     */
    loadTableofContentDialog: () => void;
    /**
     * @private
     */
    closeTableOfContentDialog: () => void;
    /**
     * @private
     */
    onCancelButtonClick: () => void;
    private selectHandler;
    private showStyleDialog;
    private changeShowLevelValue;
    private changeByValue;
    private reset;
    private changeStyle;
    private checkLevel;
    private getElementValue;
    private changeHeadingStyle;
    /**
     * @private
     */
    changePageNumberValue: (args: any) => void;
    /**
     * @private
     */
    changeRightAlignValue: (args: any) => void;
    /**
     * @private
     */
    changeStyleValue: (args: any) => void;
    private getHeadingLevel;
    private applyLevelSetting;
    /**
     * @private
     */
    applyTableOfContentProperties: () => void;
    /**
     * @private
     */
    unWireEventsAndBindings: () => void;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/dialogs/table-options-dialog.d.ts
/**
 * The Table options dialog is used to modify default cell margins and cell spacing of selected table.
 */
export  class TableOptionsDialog {
    /**
     * @private
     */
    owner: LayoutViewer;
    /**
     * @private
     */
    dialog: popups.Dialog;
    /**
     * @private
     */
    target: HTMLElement;
    private cellspacingTextBox;
    private allowSpaceCheckBox;
    private cellSpaceTextBox;
    /**
     * @private
     */
    leftMarginBox: inputs.NumericTextBox;
    /**
     * @private
     */
    topMarginBox: inputs.NumericTextBox;
    /**
     * @private
     */
    rightMarginBox: inputs.NumericTextBox;
    /**
     * @private
     */
    bottomMarginBox: inputs.NumericTextBox;
    /**
     * @private
     */
    tableFormatIn: WTableFormat;
    /**
     * @private
     */
    constructor(viewer: LayoutViewer);
    /**
     * @private
     */
    readonly tableFormat: WTableFormat;
    /**
     * @private
     */
    getModuleName(): string;
    /**
     * @private
     */
    initTableOptionsDialog(localValue: base.L10n, isRtl?: boolean): void;
    /**
     * @private
     */
    loadCellMarginsDialog(): void;
    /**
     * @private
     */
    applyTableCellProperties: () => void;
    /**
     * @private
     */
    applySubTableOptions(tableFormat: WTableFormat): void;
    /**
     * @private
     */
    applyTableOptionsHelper(tableFormat: WTableFormat): void;
    /**
     * @private
     */
    applyTableOptionsHistory(tableFormat: WTableFormat): void;
    /**
     * @private
     */
    applySubTableOptionsHelper(tableFormat: WTableFormat): void;
    /**
     * @private
     */
    applyTableOptions(tableFormat: WTableFormat): void;
    /**
     * @private
     */
    closeCellMarginsDialog: () => void;
    /**
     * @private
     */
    show(): void;
    /**
     * @private
     */
    changeAllowSpaceCheckBox: () => void;
    /**
     * @private
     */
    removeEvents: () => void;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/dialogs/table-properties-dialog.d.ts
/**
 * The Table properties dialog is used to modify properties of selected table.
 */
export  class TablePropertiesDialog {
    private dialog;
    private target;
    private cellAlignment;
    private tableAlignment;
    private owner;
    private preferCheckBox;
    private tableWidthType;
    private preferredWidth;
    private rowHeightType;
    private rowHeightCheckBox;
    private rowHeight;
    private cellWidthType;
    private preferredCellWidthCheckBox;
    private preferredCellWidth;
    private tableTab;
    private rowTab;
    private cellTab;
    private left;
    private center;
    private right;
    private leftIndent;
    private allowRowBreak;
    private repeatHeader;
    private cellTopAlign;
    private cellCenterAlign;
    private cellBottomAlign;
    private indentingLabel;
    private hasTableWidth;
    private hasCellWidth;
    private bidi;
    /**
     * @private
     */
    isTableBordersAndShadingUpdated: boolean;
    /**
     * @private
     */
    isCellBordersAndShadingUpdated: boolean;
    private tableFormatIn;
    private rowFormatInternal;
    private cellFormatIn;
    private tableWidthBox;
    private rowHeightBox;
    private cellWidthBox;
    private leftIndentBox;
    private bordersAndShadingButton;
    private tableOptionButton;
    private cellOptionButton;
    private rowHeightValue;
    private tabObj;
    private rtlButton;
    private ltrButton;
    private localValue;
    /**
     * @private
     */
    isCellOptionsUpdated: Boolean;
    /**
     * @private
     */
    isTableOptionsUpdated: Boolean;
    /**
     * @private
     */
    /**
    * @private
    */
    cellFormat: WCellFormat;
    /**
     * @private
     */
    /**
    * @private
    */
    tableFormat: WTableFormat;
    /**
     * @private
     */
    readonly rowFormat: WRowFormat;
    /**
     * @private
     */
    constructor(viewer: LayoutViewer);
    private getModuleName;
    /**
     * @private
     */
    initTablePropertyDialog(localValue: base.L10n, isRtl?: boolean): void;
    /**
     * @private
     */
    show(): void;
    private onBeforeOpen;
    /**
     * @private
     */
    onCloseTablePropertyDialog: () => void;
    /**
     * @private
     */
    applyTableProperties: () => void;
    /**
     * @private
     */
    calculateGridValue(table: TableWidget): void;
    /**
     * @private
     */
    applyTableSubProperties: () => void;
    /**
     * @private
     */
    loadTableProperties(): void;
    /**
     * @private
     */
    unWireEvent: () => void;
    /**
     * @private
     */
    wireEvent(): void;
    /**
     * @private
     */
    closeTablePropertiesDialog: () => void;
    /**
     * @private
     */
    initTableProperties(element: HTMLDivElement, localValue: base.L10n, isRtl?: boolean): void;
    private changeBidirectional;
    /**
     * @private
     */
    onTableWidthChange(): void;
    /**
     * @private
     */
    onTableWidthTypeChange(): void;
    /**
     * @private
     */
    onLeftIndentChange(): void;
    private setTableProperties;
    private activeTableAlignment;
    /**
     * @private
     */
    changeTableCheckBox: () => void;
    /**
     * @private
     */
    changeTableAlignment: (event: Event) => void;
    /**
     * @private
     */
    getTableAlignment(): string;
    /**
     * @private
     */
    updateClassForAlignmentProperties(element: HTMLElement): void;
    /**
     * @private
     */
    initTableRowProperties(element: HTMLDivElement, localValue: base.L10n, isRtl?: boolean): void;
    private setTableRowProperties;
    /**
     * @private
     */
    onRowHeightChange(): void;
    /**
     * @private
     */
    onRowHeightTypeChange(): void;
    /**
     * @private
     */
    changeTableRowCheckBox: () => void;
    /**
     * @private
     */
    onAllowBreakAcrossPage(): void;
    /**
     * @private
     */
    onRepeatHeader(): void;
    /**
     * @private
     */
    /**
     * @private
     */
    initTableCellProperties(element: HTMLDivElement, localValue: base.L10n, isRtl?: boolean): void;
    private setTableCellProperties;
    /**
     * @private
     */
    updateClassForCellAlignment(element: HTMLElement): void;
    /**
     * @private
     */
    formatNumericTextBox(textBox: inputs.NumericTextBox, format: WidthType, value: number): void;
    /**
     * @private
     */
    getCellAlignment(): string;
    /**
     * @private
     */
    changeTableCellCheckBox: () => void;
    /**
     * @private
     */
    onCellWidthChange(): void;
    /**
     * @private
     */
    onCellWidthTypeChange(): void;
    /**
     * @private
     */
    changeCellAlignment: (event: Event) => void;
    /**
     * @private
     */
    showTableOptionsDialog: () => void;
    /**
     * @private
     */
    showBordersShadingsPropertiesDialog: () => void;
    /**
     * @private
     */
    showCellOptionsDialog: () => void;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor-history/base-history-info.d.ts
/**
 * @private
 */
export  class BaseHistoryInfo {
    private ownerIn;
    private actionIn;
    private removedNodesIn;
    private modifiedPropertiesIn;
    private modifiedNodeLength;
    private selectionStartIn;
    private selectionEndIn;
    private insertPositionIn;
    private endPositionIn;
    private currentPropertyIndex;
    private ignoredWord;
    private viewer;
    /**
     * gets the owner control
     * @private
     */
    readonly owner: DocumentEditor;
    /**
     * gets or sets action
     * @private
     */
    readonly editorHistory: EditorHistory;
    /**
     * gets or sets action
     * @private
     */
    action: Action;
    /**
     * gets modified properties
     * @returns Object
     * @private
     */
    readonly modifiedProperties: Object[];
    /**
     * @private
     */
    readonly removedNodes: IWidget[];
    /**
     * Gets or Sets the selection start
     * @private
     */
    selectionStart: string;
    /**
     * Gets or Sets the selection end
     * @private
     */
    selectionEnd: string;
    /**
     * Gets or sets the insert position
     * @private
     */
    insertPosition: string;
    /**
     * Gets or sets end position
     * @private
     */
    endPosition: string;
    constructor(node: DocumentEditor);
    /**
     * Update the selection
     * @param selection
     * @private
     */
    updateSelection(): void;
    setBookmarkInfo(bookmark: BookmarkElementBox): void;
    setEditRangeInfo(editStart: EditRangeStartElementBox): void;
    private revertBookmark;
    private revertEditRangeRegion;
    /**
     * Reverts this instance
     * @private
     */
    revert(): void;
    private highlightListText;
    private removeContent;
    private revertModifiedProperties;
    private redoAction;
    /**
     * Revert the modified nodes
     * @param  {WNode[]} deletedNodes
     * @param  {boolean} isRedoAction
     * @param  {string} start
     * @param  {boolean} isEmptySelection
     */
    private revertModifiedNodes;
    private insertRemovedNodes;
    private revertResizing;
    private revertTableDialogProperties;
    getTextPosition(hierarchicalIndex: string): TextPosition;
    /**
     * Add modified properties for section format
     * @param  {WSectionFormat} format
     * @param  {string} property
     * @param  {Object} value
     * @private
     */
    addModifiedPropertiesForSection(format: WSectionFormat, property: string, value: Object): Object;
    /**
     * Add the modified properties for character format
     * @param  {WCharacterFormat} format
     * @param  {string} property
     * @param  {Object} value
     * @private
     */
    addModifiedProperties(format: WCharacterFormat, property: string, value: Object): Object;
    /**
     * Add the modified properties for paragraph format
     * @param  {WParagraphFormat} format
     * @param  {string} property
     * @param  {Object} value
     * @private
     */
    addModifiedPropertiesForParagraphFormat(format: WParagraphFormat, property: string, value: Object): Object;
    /**
     * @private
     */
    addModifiedPropertiesForContinueNumbering(paragraphFormat: WParagraphFormat, value: Object): Object;
    /**
     * @param listFormat
     * @param value
     * @private
     */
    addModifiedPropertiesForRestartNumbering(listFormat: WListFormat, value: Object): Object;
    /**
     * Add modified properties for list format
     * @param  {WListLevel} listLevel
     * @private
     */
    addModifiedPropertiesForList(listLevel: WListLevel): Object;
    /**
     * Revert the properties
     * @param  {SelectionRange} selectionRange
     */
    private revertProperties;
    /**
     * Add modified properties for cell options dialog
     * @param  {WCellFormat} format
     * @param  {WTable} table
     * @private
     */
    addModifiedCellOptions(applyFormat: WCellFormat, format: WCellFormat, table: TableWidget): WCellFormat;
    private copyCellOptions;
    /**
     * Add modified properties for cell options dialog
     * @param  {WTableFormat} format
     * @private
     */
    addModifiedTableOptions(format: WTableFormat): void;
    private copyTableOptions;
    private getProperty;
    private getCharacterPropertyValue;
    /**
     * Add modified properties for table format
     * @param  {WTableFormat} format
     * @param  {string} property
     * @param  {Object} value
     * @private
     */
    addModifiedTableProperties(format: WTableFormat, property: string, value: Object): Object;
    /**
     * Add modified properties for row format
     * @param  {WRowFormat} rowFormat
     * @param  {string} property
     * @param  {Object} value
     * @private
     */
    addModifiedRowProperties(rowFormat: WRowFormat, property: string, value: Object): Object;
    /**
     * Add modified properties for cell format
     * @param  {WCellFormat} cellFormat
     * @param  {string} property
     * @param  {Object} value
     * @private
     */
    addModifiedCellProperties(cellFormat: WCellFormat, property: string, value: Object): Object;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor-history/editor-history.d.ts
/**
 *  `EditorHistory` Module class is used to handle history preservation
 */
export  class EditorHistory {
    private undoLimitIn;
    private redoLimitIn;
    private undoStackIn;
    private redoStackIn;
    private historyInfoStack;
    private owner;
    /**
     * @private
     */
    isUndoing: boolean;
    /**
     * @private
     */
    isRedoing: boolean;
    /**
     * @private
     */
    currentBaseHistoryInfo: BaseHistoryInfo;
    /**
     * @private
     */
    currentHistoryInfo: HistoryInfo;
    /**
     * @private
     */
    modifiedParaFormats: Dictionary<BaseHistoryInfo, ModifiedParagraphFormat[]>;
    private viewer;
    /**
     * gets undo stack
     * @private
     */
    readonly undoStack: BaseHistoryInfo[];
    /**
     * gets redo stack
     * @private
     */
    readonly redoStack: BaseHistoryInfo[];
    /**
     * Gets or Sets the limit of undo operations can be done.
     * @aspType int
     * @blazorType int
     */
    /**
    * Sets the limit of undo operations can be done.
    * @aspType int
    * @blazorType int
    */
    undoLimit: number;
    /**
     * Gets or Sets the limit of redo operations can be done.
     * @aspType int
     * @blazorType int
     */
    /**
    * Gets or Sets the limit of redo operations can be done.
    * @aspType int
    * @blazorType int
    */
    redoLimit: number;
    /**
     * @private
     */
    constructor(node: DocumentEditor);
    /**
     * @private
     */
    getModuleName(): string;
    /**
     * Determines whether undo operation can be done.
     * @returns boolean
     */
    canUndo(): boolean;
    /**
     * Determines whether redo operation can be done.
     * @returns boolean
     */
    canRedo(): boolean;
    /**
     * initialize EditorHistory
     * @param  {Selection} selection
     * @param  {Action} action
     * @param  {SelectionRange} selectionRange
     * @private
     */
    initializeHistory(action: Action): void;
    /**
     * Initialize complex history
     * @param  {Selection} selection
     * @param  {Action} action
     * @private
     */
    initComplexHistory(selection: Selection, action: Action): void;
    /**
     * @private
     */
    initResizingHistory(startingPoint: Point, tableResize: TableResizer): void;
    /**
     * Update resizing history
     * @param  {Point} point
     * @param  {Selection} selection
     * @private
     */
    updateResizingHistory(point: Point, tableResize: TableResizer): void;
    /**
     * Record the changes
     * @param  {BaseHistoryInfo} baseHistoryInfo
     * @private
     */
    recordChanges(baseHistoryInfo: BaseHistoryInfo): void;
    /**
     * update EditorHistory
     * @private
     */
    updateHistory(): void;
    /**
     * @private
     */
    isHandledComplexHistory(): boolean;
    /**
     * Update complex history
     * @private
     */
    updateComplexHistory(): void;
    /**
     * @private
     */
    updateComplexHistoryInternal(): void;
    /**
     * update list changes for history preservation
     * @param  {Selection} selection
     * @param  {WAbstractList} currentAbstractList
     * @param  {WList} list
     * @private
     */
    updateListChangesInHistory(currentAbstractList: WAbstractList, list: WList): Dictionary<number, ModifiedLevel>;
    /**
     * Apply list changes
     * @param  {Selection} selection
     * @param  {Dictionary<number, ModifiedLevel>} modifiedLevelsInternal
     * @private
     */
    applyListChanges(selection: Selection, modifiedLevelsInternal: Dictionary<number, ModifiedLevel>): void;
    /**
     * Update list changes
     * @param  {Dictionary<number, ModifiedLevel>} modifiedCollection
     * @param  {Selection} selection
     * @private
     */
    updateListChanges(modifiedCollection: Dictionary<number, ModifiedLevel>): void;
    /**
     * Revert list changes
     * @param  {Selection} selection
     */
    private revertListChanges;
    /**
     * Reverts the last editing action.
     */
    undo(): void;
    /**
     * Performs the last reverted action.
     */
    redo(): void;
    /**
     * @private
     */
    destroy(): void;
    private clearHistory;
    private clearUndoStack;
    private clearRedoStack;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor-history/history-helper.d.ts
/**
 * @private
 */
export interface BookmarkInfo extends IWidget {
    bookmark: BookmarkElementBox;
    startIndex: number;
    endIndex: number;
}
/**
 * @private
 */
export interface EditRangeInfo extends IWidget {
    editStart: EditRangeStartElementBox;
    startIndex: number;
    endIndex: number;
}
/**
 * @private
 */
export  class ModifiedLevel {
    private ownerListLevelIn;
    private modifiedListLevelIn;
    /**
     * @private
     */
    /**
    * @private
    */
    ownerListLevel: WListLevel;
    /**
     * @private
     */
    /**
    * @private
    */
    modifiedListLevel: WListLevel;
    constructor(owner: WListLevel, modified: WListLevel);
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class ModifiedParagraphFormat {
    private ownerFormatIn;
    private modifiedFormatIn;
    /**
     * @private
     */
    /**
    * @private
    */
    ownerFormat: WParagraphFormat;
    /**
     * hidden
     */
    /**
    * @private
    */
    modifiedFormat: WParagraphFormat;
    constructor(ownerFormat: WParagraphFormat, modifiedFormat: WParagraphFormat);
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class RowHistoryFormat {
    startingPoint: Point;
    rowFormat: WRowFormat;
    rowHeightType: HeightType;
    displacement: number;
    constructor(startingPoint: Point, rowFormat: WRowFormat);
    revertChanges(isRedo: boolean, owner: DocumentEditor): void;
}
/**
 * @private
 */
export  class TableHistoryInfo {
    tableHolder: WTableHolder;
    tableFormat: TableFormatHistoryInfo;
    rows: RowFormatHistoryInfo[];
    tableHierarchicalIndex: string;
    startingPoint: Point;
    owner: DocumentEditor;
    constructor(table: TableWidget, owner: DocumentEditor);
    copyProperties(table: TableWidget): void;
    destroy(): void;
}
/**
 * @private
 */
export  class TableFormatHistoryInfo {
    leftIndent: number;
    preferredWidth: number;
    preferredWidthType: WidthType;
    allowAutoFit: boolean;
    constructor();
}
/**
 * @private
 */
export  class RowFormatHistoryInfo {
    gridBefore: number;
    gridAfter: number;
    gridBeforeWidth: number;
    gridBeforeWidthType: WidthType;
    gridAfterWidth: number;
    gridAfterWidthType: WidthType;
    cells: CellFormatHistoryInfo[];
    constructor();
}
/**
 * @private
 */
export  class CellFormatHistoryInfo {
    columnSpan: number;
    columnIndex: number;
    preferredWidth: number;
    preferredWidthType: WidthType;
    constructor();
}
/**
 * @private
 */
export  class CellHistoryFormat {
    /**
     * @private
     */
    startingPoint: Point;
    /**
     * @private
     */
    startIndex: number;
    /**
     * @private
     */
    endIndex: number;
    /**
     * @private
     */
    tableHierarchicalIndex: string;
    /**
     * @private
     */
    startX: number;
    /**
     * @private
     */
    startY: number;
    /**
     * @private
     */
    displacement: number;
    constructor(point: Point);
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor-history/history-info.d.ts
/**
 * EditorHistory preservation class
 */
/**
 * @private
 */
export  class HistoryInfo extends BaseHistoryInfo {
    /**
     * @private
     */
    modifiedActions: BaseHistoryInfo[];
    private isChildHistoryInfo;
    editRangeStart: EditRangeStartElementBox;
    /**
     * @private
     */
    readonly hasAction: boolean;
    constructor(node: DocumentEditor, isChild: boolean);
    /**
     * Adds the modified actions
     * @param  {BaseHistoryInfo} baseHistoryInfo
     * @private
     */
    addModifiedAction(baseHistoryInfo: BaseHistoryInfo): void;
    /**
     * Reverts this instance
     * @private
     */
    revert(): void;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor-history/index.d.ts
/**
 * EditorHistory implementation
 */
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor/editor-helper.d.ts
/**
 * @private
 */
export  class HelperMethods {
    /**
     * @private
     */
    static wordBefore: string;
    /**
     * @private
     */
    static wordAfter: string;
    /**
     * @private
     */
    static wordSplitCharacters: string[];
    /**
     * Inserts text at specified index in string.
     * @param {string} spanText
     * @param {number} index
     * @param {string} text
     * @private
     */
    static insert(spanText: string, index: number, text: string): string;
    /**
     * Removes text from specified index in string.
     * @param {string} text
     * @param {number} index
     * @param {number} length
     * @private
     */
    static remove(text: string, index: number, length: number): string;
    /**
     * Returns the index of word split character in a string.
     * @param {string} text
     * @param {string[]} wordSplitCharacter
     * @private
     */
    static indexOfAny(text: string, wordSplitCharacter: string[]): any;
    /**
     * Returns the last index of word split character in a string.
     * @param {string} text
     * @param {string[]} wordSplitCharacter
     * @private
     */
    static lastIndexOfAny(text: string, wordSplitCharacter: string[]): number;
    /**
     * Adds css styles to document header.
     * @param {string} css
     * @private
     */
    static addCssStyle(css: string): void;
    /**
     * Gets highlight color code.
     * @param {HighlightColor} highlightColor
     * @private
     */
    static getHighlightColorCode(highlightColor: HighlightColor): string;
    /**
     * Converts point to pixel.
     * @param {number} point
     * @private
     */
    static convertPointToPixel(point: number): number;
    /**
     * Converts pixel to point.
     * @param {number} pixel
     * @private
     */
    static convertPixelToPoint(pixel: number): number;
    /**
     * Return true if field linked
     * @private
     */
    static isLinkedFieldCharacter(inline: ElementBox): boolean;
    /**
     * Removes white space in a string.
     * @param {string} text
     * @private
     */
    static removeSpace(text: string): string;
    /**
     * Trims white space at start of the string.
     * @param {string} text
     * @private
     */
    static trimStart(text: string): string;
    /**
     * Trims white space at end of the string.
     * @param {string} text
     * @private
     */
    static trimEnd(text: string): string;
    /**
     * Checks whether string ends with whitespace.
     * @param {string} text
     * @private
     */
    static endsWith(text: string): boolean;
    /**
     * Return specified number of string count
     * @private
     */
    static addSpace(length: number): string;
    /**
     * @private
     * Write Characterformat
     * @param {any} characterFormat
     * @param {boolean} isInline
     * @param {WCharacterFormat} format
     */
    static writeCharacterFormat(characterFormat: any, isInline: boolean, format: WCharacterFormat): void;
    /**
     * Rounds the values with specified decimal digits.
     * @param {number} value
     * @param {number} decimalDigits
     * @private
     */
    static round(value: number, decimalDigits: number): number;
    static ReverseString(text: string): string;
    /**
     * @private
     */
    static formatClippedString(base64ImageString: string): ImageInfo;
    private static startsWith;
}
/**
 * @private
 */
export  class Point {
    private xIn;
    private yIn;
    /**
     * Gets or sets x value.
     * @private
     */
    x: number;
    /**
     * Gets or sets y value.
     * @private
     */
    y: number;
    constructor(xPosition: number, yPosition: number);
    /**
     * @private
     */
    copy(point: Point): void;
    /**
     * Destroys the internal objects maintained.
     * @returns void
     */
    destroy(): void;
}
/**
 * @private
 */
export  class Base64 {
    private keyStr;
    encodeString(input: string): string;
    private unicodeEncode;
    /**
     * @private
     */
    decodeString(input: string): Uint8Array;
}
/**
 * @private
 */
export interface SubWidthInfo {
    subWidth: number;
    spaceCount: number;
}
/**
 * @private
 */
export interface LineElementInfo {
    topMargin: number;
    bottomMargin: number;
    addSubWidth: boolean;
    whiteSpaceCount: number;
}
/**
 * @private
 */
export interface Color {
    r: number;
    g: number;
    b: number;
}
/**
 * @private
 */
export interface CaretHeightInfo {
    height: number;
    topMargin: number;
    isItalic?: boolean;
}
/**
 * @private
 */
export interface SizeInfo {
    width: number;
    height: number;
    topMargin: number;
    bottomMargin: number;
}
/**
 * @private
 */
export interface FirstElementInfo {
    element: ElementBox;
    left: number;
}
/**
 * @private
 */
export interface IndexInfo {
    index: string;
}
/**
 * @private
 */
export interface ImagePointInfo {
    selectedElement: HTMLElement;
    resizePosition: string;
}
/**
 * @private
 */
export interface HyperlinkTextInfo {
    displayText: string;
    isNestedField: boolean;
    format: WCharacterFormat;
}
/**
 * @private
 */
export interface BodyWidgetInfo {
    bodyWidget: BodyWidget;
    index: number;
}
/**
 * @private
 */
export interface ParagraphInfo {
    paragraph: ParagraphWidget;
    offset: number;
}
/**
 * @private
 */
export interface ErrorInfo {
    errorFound: boolean;
    elements: any[];
}
/**
 * @private
 */
export interface SpaceCharacterInfo {
    width: number;
    wordLength: number;
    isBeginning: boolean;
}
/**
 * @private
 */
export interface SpecialCharacterInfo {
    beginningWidth: number;
    endWidth: number;
    wordLength: number;
}
/**
 * @private
 */
export interface ContextElementInfo {
    element: ElementBox;
    text: string;
}
/**
 * @private
 */
export interface TextInLineInfo {
    elementsWithOffset: Dictionary<TextElementBox, number>;
    fullText: string;
}
/**
 * @private
 */
export interface CellInfo {
    start: number;
    end: number;
}
/**
 * @private
 */
export interface FieldCodeInfo {
    isNested: boolean;
    isParsed: boolean;
}
/**
 * @private
 */
export interface LineInfo {
    line: LineWidget;
    offset: number;
}
/**
 * @private
 */
export interface ElementInfo {
    element: ElementBox;
    index: number;
}
/**
 * @private
 */
export interface MatchResults {
    matches: RegExpExecArray[];
    elementInfo: Dictionary<TextElementBox, number>;
    textResults: TextSearchResults;
}
/**
 * @private
 */
export interface TextPositionInfo {
    element: ElementBox;
    index: number;
    caretPosition: Point;
    isImageSelected: boolean;
}
/**
 * @private
 */
export interface CellCountInfo {
    count: number;
    cellFormats: WCellFormat[];
}
/**
 * @private
 */
export interface BlockInfo {
    node: Widget;
    position: IndexInfo;
}
/**
 * @private
 */
export interface WidthInfo {
    minimumWordWidth: number;
    maximumWordWidth: number;
}
/**
 * @private
 */
export interface RtlInfo {
    isRtl: boolean;
    id: number;
}
/**
 * @private
 */
export interface ImageInfo {
    extension: string;
    formatClippedString: string;
}
/**
 * @private
 */
export interface PositionInfo {
    startPosition: TextPosition;
    endPosition: TextPosition;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor/editor.d.ts
/**
 * Editor module
 */
export  class Editor {
    /**
     * @private
     */
    viewer: LayoutViewer;
    private nodes;
    private editHyperlinkInternal;
    private startOffset;
    private startParagraph;
    private endOffset;
    private pasteRequestHandler;
    private endParagraph;
    private removeEditRange;
    /**
     * @private
     */
    isHandledComplex: boolean;
    /**
     * @private
     */
    tableResize: TableResizer;
    /**
     * @private
     */
    tocStyles: TocLevelSettings;
    private refListNumber;
    private incrementListNumber;
    private removedBookmarkElements;
    /**
     * @private
     */
    tocBookmarkId: number;
    /**
     * @private
     */
    copiedData: string;
    private animationTimer;
    private pageRefFields;
    /**
     * @private
     */
    isInsertingTOC: boolean;
    private editStartRangeCollection;
    /**
     * @private
     */
    readonly restrictFormatting: boolean;
    /**
     * @private
     */
    readonly restrictEditing: boolean;
    copiedContent: any;
    private copiedTextContent;
    private currentPasteOptions;
    private pasteTextPosition;
    isSkipHistory: boolean;
    isPaste: boolean;
    /**
     * Initialize the editor module
     * @param  {LayoutViewer} viewer
     * @private
     */
    constructor(viewer: LayoutViewer);
    private readonly editorHistory;
    /**
     * @private
     */
    isBordersAndShadingDialog: boolean;
    private readonly selection;
    private readonly owner;
    private getModuleName;
    /**
     * Inserts the specified field at cursor position
     * @param code
     * @param result
     */
    insertField(code: string, result?: string): void;
    /**
     * To update style for paragraph
     * @param style - style name
     * @param clearDirectFormatting - Removes manual formatting (formatting not applied using a style)
     * from the selected text, to match the formatting of the applied style. Default value is false.
     */
    applyStyle(style: string, clearDirectFormatting?: boolean): void;
    /**
     * Moves the selected content in the document editor control to clipboard.
     */
    cut(): void;
    /**
     * Notify content change event
     * @private
     */
    fireContentChange(): void;
    /**
     * Update physical location for text position
     * @private
     */
    updateSelectionTextPosition(isSelectionChanged: boolean): void;
    /**
     * @private
     */
    onTextInputInternal: (event: KeyboardEvent) => void;
    /**
     * Predict text
     * @private
     */
    predictText(): void;
    /**
     * Gets prefix and suffix.
     * @private
     */
    getPrefixAndSuffix(): void;
    /**
     * Fired on paste.
     * @param {ClipboardEvent} event
     * @private
     */
    onPaste: (event: ClipboardEvent) => void;
    /**
     * key action
     * @private
     */
    onKeyDownInternal(event: KeyboardEvent, ctrl: boolean, shift: boolean, alt: boolean): void;
    /**
     * @private
     */
    handleShiftEnter(): void;
    /**
     * Handles back key.
     * @private
     */
    handleBackKey(): void;
    /**
     * Handles delete
     * @private
     */
    handleDelete(): void;
    /**
     * Handles enter key.
     * @private
     */
    handleEnterKey(): void;
    /**
     * @private
     */
    handleTextInput(text: string): void;
    /**
     * Copies to format.
     * @param  {WCharacterFormat} format
     * @private
     */
    copyInsertFormat(format: WCharacterFormat, copy: boolean): WCharacterFormat;
    /**
     * Inserts the specified text at cursor position
     * @param  {string} text - text to insert
     */
    insertText(text: string): void;
    /**
     * @private
     */
    insertTextInternal(text: string, isReplace: boolean): void;
    /**
     * @private
     */
    insertIMEText(text: string, isUpdate: boolean): void;
    /**
     * Insert Section break at cursor position
     */
    insertSectionBreak(): void;
    /**
     * @private
     */
    insertSection(selection: Selection, selectFirstBlock: boolean): BlockWidget;
    private splitBodyWidget;
    private insertRemoveHeaderFooter;
    private updateBlockIndex;
    private updateSectionIndex;
    private checkAndConvertList;
    private getListLevelPattern;
    private autoConvertList;
    private checkNumberFormat;
    private checkLeadingZero;
    private getPageFromBlockWidget;
    /**
     * @private
     */
    insertTextInline(element: ElementBox, selection: Selection, text: string, index: number): void;
    private insertFieldBeginText;
    private insertBookMarkText;
    private insertFieldSeparatorText;
    private insertFieldEndText;
    private insertImageText;
    /**
     * @private
     */
    private isListTextSelected;
    private checkAndConvertToHyperlink;
    private autoFormatHyperlink;
    private appylingHyperlinkFormat;
    private createHyperlinkElement;
    private insertHyperlinkfield;
    private unLinkFieldCharacter;
    private getCharacterFormat;
    /**
     * Insert Hyperlink
     * @param  {string} address - Hyperlink URL
     * @param  {string} displayText - Display text for the hyperlink
     */
    insertHyperlink(address: string, displayText?: string): void;
    /**
     * @private
     */
    insertHyperlinkInternal(url: string, displayText: string, remove: boolean, isBookmark?: boolean): void;
    private insertHyperlinkInternalInternal;
    private insertHyperlinkByFormat;
    private initInsertInline;
    /**
     * @private
     */
    insertElementInCurrentLine(selection: Selection, inline: ElementBox, isReLayout: boolean): void;
    /**
     * Edit Hyperlink
     * @param  {Selection} selection
     * @param  {string} url
     * @param  {string} displayText
     * @private
     */
    editHyperlink(selection: Selection, url: string, displayText: string, isBookmark?: boolean): boolean;
    private insertClonedFieldResult;
    private getClonedFieldResultWithSel;
    private getClonedFieldResult;
    /**
     * Removes the hyperlink if selection is within hyperlink.
     */
    removeHyperlink(): void;
    /**
     * Paste copied clipboard content on Paste event
     * @param  {ClipboardEvent} event
     * @param  {any} pasteWindow?
     * @private
     */
    pasteInternal(event: ClipboardEvent, pasteWindow?: any): void;
    /**
     * @private
     */
    pasteAjax(content: string, type: string): void;
    private pasteFormattedContent;
    private onPasteFailure;
    /**
     * Pastes provided sfdt content or the data present in local clipboard if any .
     * @param {string} sfdt? insert the specified sfdt content at current position
     */
    paste(sfdt?: string, defaultPasteOption?: PasteOptions): void;
    private getBlocks;
    private applyMergeFormat;
    private applyFormatInternal;
    applyPasteOptions(options: PasteOptions): void;
    private pasteContents;
    private pasteContentsInternal;
    private pasteContent;
    private pasteCopiedData;
    /**
     * Insert Table on undo
     * @param  {WTable} table
     * @param  {WTable} newTable
     * @param  {boolean} moveRows
     * @private
     */
    insertTableInternal(table: TableWidget, newTable: TableWidget, moveRows: boolean): void;
    /**
     * Insert Table on undo
     * @param  {Selection} selection
     * @param  {WBlock} block
     * @param  {WTable} table
     * @private
     */
    insertBlockTable(selection: Selection, block: BlockWidget, table: TableWidget): void;
    /**
     * On cut handle selected content remove and relayout
     * @param  {Selection} selection
     * @param  {TextPosition} startPosition
     * @param  {TextPosition} endPosition
     * @private
     */
    handleCut(selection: Selection): void;
    private insertInlineInternal;
    private insertElement;
    private insertElementInternal;
    /**
     * Insert Block on undo
     * @param  {Selection} selection
     * @param  {WBlock} block
     * @private
     */
    insertBlock(block: BlockWidget): void;
    /**
     * Insert new Block on specific index
     * @param  {Selection} selection
     * @param  {BlockWidget} block
     * @private
     */
    insertBlockInternal(block: BlockWidget): void;
    /**
     * Inserts the image with specified size at cursor position in the document editor.
     * @param {string} imageString  Base64 string, web URL or file URL.
     * @param {number} width? Image width
     * @param {number} height? Image height
     */
    insertImage(imageString: string, width?: number, height?: number): void;
    /**
     * Inserts a table of specified size at cursor position
     *  in the document editor.
     * @param {number} rows Default value of ‘rows’ parameter is 1.
     * @param {number} columns Default value of ‘columns’ parameter is 1.
     */
    insertTable(rows?: number, columns?: number): void;
    /**
     * Inserts the specified number of rows to the table above or below to the row at cursor position.
     * @param {boolean} above The above parameter is optional and if omitted,
     * it takes the value as false and inserts below the row at cursor position.
     * @param {number} count The count parameter is optional and if omitted, it takes the value as 1.
     */
    insertRow(above?: boolean, count?: number): void;
    /**
     * Fits the table based on AutoFitType.
     * @param {AutoFitType} - auto fit type
     */
    autoFitTable(fitType: AutoFitType): void;
    private updateCellFormatForInsertedRow;
    private updateRowspan;
    private insertTableRows;
    /**
     * Inserts the specified number of columns to the table left or right to the column at cursor position.
     * @param {number} left The left parameter is optional and if omitted, it takes the value as false and
     * inserts to the right of column at cursor position.
     * @param {number} count The count parameter is optional and if omitted, it takes the value as 1.
     */
    insertColumn(left?: boolean, count?: number): void;
    /**
     * Creates table with specified rows and columns.
     * @private
     */
    createTable(rows: number, columns: number): TableWidget;
    private createRowAndColumn;
    private createColumn;
    private getColumnCountToInsert;
    private getRowCountToInsert;
    private getOwnerCell;
    private getOwnerRow;
    private getOwnerTable;
    /**
     * Merge Selected cells
     * @private
     */
    mergeSelectedCellsInTable(): void;
    private mergeSelectedCells;
    private mergeBorders;
    private updateBlockIndexAfterMerge;
    /**
     * Determines whether merge cell operation can be done.
     */
    canMergeCells(): boolean;
    private canMergeSelectedCellsInTable;
    private checkCellWidth;
    private checkCellWithInSelection;
    private checkPrevOrNextCellIsWithinSel;
    private checkCurrentCell;
    private checkRowSpannedCells;
    /**
     * @private
     */
    insertNewParagraphWidget(newParagraph: ParagraphWidget, insertAfter: boolean): void;
    private insertParagraph;
    private moveInlines;
    /**
     * @private
     */
    moveContent(lineWidget: LineWidget, startOffset: number, endOffset: number, insertIndex: number, paragraph: ParagraphWidget): number;
    /**
     * update complex changes when history is not preserved
     * @param  {number} action?
     * @param  {string} start?
     * @param  {string} end?
     * @private
     */
    updateComplexWithoutHistory(action?: number, start?: string, end?: string): void;
    /**
     * reLayout
     * @param selection
     * @param isSelectionChanged
     * @private
     */
    reLayout(selection: Selection, isSelectionChanged?: boolean): void;
    /**
     * @private
     */
    updateHeaderFooterWidget(): void;
    /**
     * @private
     */
    updateHeaderFooterWidgetToPage(node: HeaderFooterWidget): void;
    /**
     * @private
     */
    updateHeaderFooterWidgetToPageInternal(page: Page, widget: HeaderFooterWidget, isHeader: boolean): void;
    /**
     * @private
     */
    removeFieldInWidget(widget: Widget): void;
    /**
     * @private
     */
    removeFieldInBlock(block: BlockWidget): void;
    /**
     * @private
     */
    removeFieldTable(table: TableWidget): void;
    /**
     * @private
     */
    shiftPageContent(type: HeaderFooterType, sectionFormat: WSectionFormat): void;
    /**
     * @private
     */
    checkAndShiftFromBottom(page: Page, footerWidget: HeaderFooterWidget): void;
    /**
     * Change HighlightColor
     * @param  {HighlightColor} highlightColor
     * Applies character format for selection.
     * @param {string} property
     * @param {Object} value
     * @param {boolean} update
     * @private
     */
    onApplyCharacterFormat(property: string, value: Object, update?: boolean): void;
    /**
     * @private
     */
    applyCharacterFormatForListText(selection: Selection, property: string, values: Object, update: boolean): void;
    private applyListCharacterFormatByValue;
    /**
     * @private
     */
    updateListCharacterFormat(selection: Selection, property: string, value: Object): void;
    private updateListTextSelRange;
    /**
     * @private
     */
    getListLevel(paragraph: ParagraphWidget): WListLevel;
    private updateInsertPosition;
    /**
     * preserve paragraph and offset value for selection
     * @private
     */
    setOffsetValue(selection: Selection): void;
    /**
     * Toggles the highlight color property of selected contents.
     * @param {HighlightColor} highlightColor Default value of ‘underline’ parameter is Yellow.
     */
    toggleHighlightColor(highlightColor?: HighlightColor): void;
    /**
     * Toggles the subscript formatting of selected contents.
     */
    toggleSubscript(): void;
    /**
     * Toggles the superscript formatting of selected contents.
     */
    toggleSuperscript(): void;
    /**
     * Toggles the text alignment property of selected contents.
     * @param {TextAlignment} textAlignment Default value of ‘textAlignment parameter is TextAlignment.Left.
     */
    /**
     * Increases the left indent of selected paragraphs to a factor of 36 points.
     */
    increaseIndent(): void;
    /**
     * Decreases the left indent of selected paragraphs to a factor of 36 points.
     */
    decreaseIndent(): void;
    /**
     * Clears the list format for selected paragraphs.
     */
    clearList(): void;
    /**
     * Applies the bullet list to selected paragraphs.
     * @param {string} bullet Bullet character
     * @param {string} fontFamily Bullet font family
     */
    applyBullet(bullet: string, fontFamily: string): void;
    /**
     * Applies the numbering list to selected paragraphs.
     * @param numberFormat  “%n” representations in ‘numberFormat’ parameter will be replaced by respective list level’s value.
     * `“%1)” will be displayed as “1)” `
     * @param listLevelPattern  Default value of ‘listLevelPattern’ parameter is ListLevelPattern.Arabic
     */
    applyNumbering(numberFormat: string, listLevelPattern?: ListLevelPattern): void;
    /**
     * Toggles the baseline alignment property of selected contents.
     * @param  {Selection} selection
     * @param  {BaselineAlignment} baseAlignment
     */
    toggleBaselineAlignment(baseAlignment: BaselineAlignment): void;
    /**
     * Clears the formatting.
     */
    clearFormatting(): void;
    /**
     * Toggles the specified property. If property is assigned already. Then property will be changed
     * @param  {Selection} selection
     * @param  {number} type
     * @param  {Object} value
     * @private
     */
    updateProperty(type: number, value: Object): void;
    private getCompleteStyles;
    /**
     * Initialize default styles
     * @private
     */
    intializeDefaultStyles(): void;
    /**
     * Creates a new instance of Style.
     */
    createStyle(styleString: string): void;
    /**
     * Create a Style.
     * @private
     */
    createStyleIn(styleString: string): Object;
    /**
     * @private
     */
    getUniqueStyleName(name: string): string;
    private getUniqueName;
    /**
     * Update Character format for selection
     * @private
     */
    updateSelectionCharacterFormatting(property: string, values: Object, update: boolean): void;
    /**
     * Update character format for selection range
     * @param  {SelectionRange} selectionRange
     * @param  {string} property
     * @param  {Object} value
     * @returns void
     * @private
     */
    updateCharacterFormat(property: string, value: Object): void;
    private updateCharacterFormatWithUpdate;
    private applyCharFormatSelectedContent;
    private applyCharFormatForSelectedPara;
    private splittedLastParagraph;
    private getNextParagraphForCharacterFormatting;
    private applyCharFormat;
    /**
     * Toggles the bold property of selected contents.
     */
    toggleBold(): void;
    /**
     * Toggles the bold property of selected contents.
     */
    toggleItalic(): void;
    private getCurrentSelectionValue;
    /**
     * Toggles the underline property of selected contents.
     * @param underline Default value of ‘underline’ parameter is Single.
     */
    toggleUnderline(underline?: Underline): void;
    /**
     * Toggles the strike through property of selected contents.
     * @param {Strikethrough} strikethrough Default value of strikethrough parameter is SingleStrike.
     */
    toggleStrikethrough(strikethrough?: Strikethrough): void;
    private updateFontSize;
    private applyCharFormatInline;
    private formatInline;
    private applyCharFormatCell;
    private applyCharFormatForSelectedCell;
    private applyCharFormatRow;
    private applyCharFormatForTable;
    private applyCharFormatForSelTable;
    private applyCharFormatForTableCell;
    private updateSelectedCellsInTable;
    private getCharacterFormatValueOfCell;
    /**
     * Apply Character format for selection
     * @private
     */
    applyCharFormatValueInternal(selection: Selection, format: WCharacterFormat, property: string, value: Object): void;
    private copyInlineCharacterFormat;
    private applyCharFormatValue;
    /**
     * @private
     */
    onImageFormat(elementBox: ImageElementBox, width: number, height: number): void;
    /**
     * Toggles the text alignment of selected paragraphs.
     * @param  {TextAlignment} textAlignment
     */
    toggleTextAlignment(textAlignment: TextAlignment): void;
    /**
     * Applies paragraph format for the selection ranges.
     * @param {string} property
     * @param {Object} value
     * @param {boolean} update
     * @param {boolean} isSelectionChanged
     * @private
     */
    onApplyParagraphFormat(property: string, value: Object, update: boolean, isSelectionChanged: boolean): void;
    /**
     * Update the list level
     * @param  {boolean} increaseLevel
     * @private
     */
    updateListLevel(increaseLevel: boolean): void;
    /**
     * Applies list
     * @param  {WList} list
     * @param  {number} listLevelNumber
     * @private
     */
    onApplyListInternal(list: WList, listLevelNumber: number): void;
    /**
     * Apply paragraph format to selection range
     * @private
     */
    updateSelectionParagraphFormatting(property: string, value: Object, update: boolean): void;
    private getIndentIncrementValue;
    private getIndentIncrementValueInternal;
    private updateParagraphFormatInternal;
    /**
     * Update paragraph format on undo
     * @param  {SelectionRange} selectionRange
     * @param  {string} property
     * @param  {Object} value
     * @param  {boolean} update
     * @private
     */
    updateParagraphFormat(property: string, value: Object, update: boolean): void;
    private applyParaFormatSelectedContent;
    /**
     * Apply Paragraph format
     * @private
     */
    applyParaFormatProperty(paragraph: ParagraphWidget, property: string, value: Object, update: boolean): void;
    private copyParagraphFormat;
    private onListFormatChange;
    private updateListParagraphFormat;
    /**
     * Copies list level paragraph format
     * @param  {WParagraphFormat} oldFormat
     * @param  {WParagraphFormat} newFormat
     * @private
     */
    copyFromListLevelParagraphFormat(oldFormat: WParagraphFormat, newFormat: WParagraphFormat): void;
    /**
     * @private
     */
    applyContinueNumbering(selection: Selection): void;
    /**
     * @private
     */
    applyContinueNumberingInternal(selection: Selection): void;
    /**
     * @private
     */
    getContinueNumberingInfo(paragraph: ParagraphWidget): ContinueNumberingInfo;
    /**
     * @private
     */
    revertContinueNumbering(selection: Selection, format: WParagraphFormat): void;
    private changeListId;
    private getParagraphFormat;
    private checkNumberArabic;
    /**
     * @private
     */
    applyRestartNumbering(selection: Selection): void;
    /**
     * @private
     */
    restartListAt(selection: Selection): void;
    /**
     * @private
     */
    restartListAtInternal(selection: Selection, listId: number): void;
    private changeRestartNumbering;
    private createListLevels;
    private applyParaFormat;
    private applyCharacterStyle;
    private applyParaFormatInCell;
    private applyParaFormatCellInternal;
    private getParaFormatValueInCell;
    private applyParagraphFormatRow;
    private applyParaFormatTableCell;
    private applyParaFormatTable;
    private getNextParagraphForFormatting;
    private applyParagraphFormatTableInternal;
    /**
     * Apply section format selection changes
     * @param  {string} property
     * @param  {Object} value
     * @private
     */
    onApplySectionFormat(property: string, value: Object): void;
    /**
     * Update section format
     * @param  {string} property
     * @param  {Object} value
     * @returns TextPosition
     * @private
     */
    updateSectionFormat(property: string, value: Object): void;
    /**
     * Apply table format property changes
     * @param  {string} property
     * @param  {Object} value
     * @private
     */
    onApplyTableFormat(property: string, value: Object): void;
    private getTableFormatAction;
    /**
     * Apply table row format property changes
     * @param  {string} property
     * @param  {Object} value
     * @private
     */
    onApplyTableRowFormat(property: string, value: Object): void;
    private getRowAction;
    /**
     * Apply table cell property changes
     * @param  {string} property
     * @param  {Object} value
     * @private
     */
    onApplyTableCellFormat(property: string, value: Object): void;
    private getTableCellAction;
    private applyPropertyValueForSection;
    /**
     * @private
     */
    layoutWholeDocument(): void;
    private combineSection;
    private combineSectionChild;
    private updateSelectionTableFormat;
    /**
     * Update Table Format on undo
     * @param  {Selection} selection
     * @param  {SelectionRange} selectionRange
     * @param  {string} property
     * @param  {object} value
     * @private
     */
    updateTableFormat(selection: Selection, property: string, value: object): void;
    /**
     * update cell format on undo
     * @param  {Selection} selection
     * @param  {SelectionRange} selectionRange
     * @param  {string} property
     * @param  {Object} value
     * @private
     */
    updateCellFormat(selection: Selection, property: string, value: Object): void;
    /**
     * update row format on undo
     * @param  {Selection} selection
     * @param  {SelectionRange} selectionRange
     * @param  {string} property
     * @param  {Object} value
     * @private
     */
    updateRowFormat(selection: Selection, property: string, value: Object): void;
    private initHistoryPosition;
    private startSelectionReLayouting;
    private reLayoutSelectionOfTable;
    private reLayoutSelection;
    private reLayoutSelectionOfBlock;
    /**
     * @private
     */
    layoutItemBlock(block: BlockWidget, shiftNextWidget: boolean): void;
    /**
     * @private
     */
    removeSelectedContents(selection: Selection): boolean;
    private removeSelectedContentInternal;
    private removeSelectedContent;
    private deleteSelectedContent;
    /**
     * Merge the selected cells.
     */
    mergeCells(): void;
    /**
     * Deletes the entire table at selection.
     */
    deleteTable(): void;
    /**
     * Deletes the selected column(s).
     */
    deleteColumn(): void;
    /**
     * Deletes the selected row(s).
     */
    deleteRow(): void;
    private removeRow;
    private updateTable;
    private getParagraphForSelection;
    private deletePara;
    private deleteSection;
    private combineSectionInternal;
    /**
     * @private
     */
    checkAndInsertBlock(block: BlockWidget, start: TextPosition, end: TextPosition, editAction: number, previousParagraph: BlockWidget): ParagraphWidget;
    private splitParagraph;
    /**
     * @private
     */
    removeBlock(block: BlockWidget): void;
    private removeField;
    private addRemovedNodes;
    private deleteBlock;
    private deleteTableCell;
    private deleteCellsInTable;
    private deleteCell;
    private deleteContainer;
    private deleteTableBlock;
    private splitTable;
    private updateEditPosition;
    /**
     * @private
     */
    deleteContent(table: TableWidget, selection: Selection, editAction: number): void;
    private setActionInternal;
    private checkClearCells;
    private isEndInAdjacentTable;
    private cloneTableToHistoryInfo;
    private insertParagraphPaste;
    private removeInlines;
    /**
     * @private
     */
    removeContent(lineWidget: LineWidget, startOffset: number, endOffset: number): void;
    /**
     * @private
     */
    removeEmptyLine(paragraph: ParagraphWidget): void;
    /**
     * clone the list level
     * @param  {WListLevel} source
     * @private
     */
    cloneListLevel(source: WListLevel): WListLevel;
    /**
     * Copies the list level
     * @param  {WListLevel} destination
     * @param  {WListLevel} listLevel
     * @private
     */
    copyListLevel(destination: WListLevel, listLevel: WListLevel): void;
    /**
     * Clone level override
     * @param  {WLevelOverride} source
     * @private
     */
    cloneLevelOverride(source: WLevelOverride): WLevelOverride;
    /**
     * Update List Paragraph
     * @private
     */
    updateListParagraphs(): void;
    /**
     * @private
     */
    updateListParagraphsInBlock(block: BlockWidget): void;
    /**
     * Applies list format
     * @param  {WList} list
     * @private
     */
    onApplyList(list: WList): void;
    /**
     * Applies bullets or numbering list
     * @param  {string} format
     * @param  {ListLevelPattern} listLevelPattern
     * @param  {string} fontFamily
     * @private
     */
    applyBulletOrNumbering(format: string, listLevelPattern: ListLevelPattern, fontFamily: string): void;
    private addListLevels;
    /**
     * Insert page break at cursor position
     */
    insertPageBreak(): void;
    /**
     * @private
     */
    onEnter(isInsertPageBreak?: boolean): void;
    private splitParagraphInternal;
    /**
     * @private
     */
    updateNextBlocksIndex(block: BlockWidget, increaseIndex: boolean): void;
    private updateIndex;
    private updateEndPosition;
    /**
     * @private
     */
    onBackSpace(): void;
    /**
     * @private
     */
    insertRemoveBookMarkElements(): boolean;
    /**
     * @private
     */
    deleteSelectedContents(selection: Selection, isBackSpace: boolean): boolean;
    private removeWholeElement;
    /**
     * @private
     */
    singleBackspace(selection: Selection, isRedoing: boolean): void;
    private setPositionForHistory;
    private removeAtOffset;
    /**
     * @private
     */
    onDelete(): void;
    private deleteEditElement;
    /**
     * Remove single character on right of cursor position
     * @param  {Selection} selection
     * @param  {boolean} isRedoing
     * @private
     */
    singleDelete(selection: Selection, isRedoing: boolean): void;
    private singleDeleteInternal;
    private deleteParagraphMark;
    private updateEditPositionOnMerge;
    private checkEndPosition;
    private checkInsertPosition;
    private checkIsNotRedoing;
    private deleteSelectedContentInternal;
    /**
     * Init EditorHistory
     * @private
     */
    initHistory(action: Action): void;
    /**
     * Init Complex EditorHistory
     * @private
     */
    initComplexHistory(action: Action): void;
    /**
     * Insert image
     * @param  {string} base64String
     * @param  {number} width
     * @param  {number} height
     * @private
     */
    insertPicture(base64String: string, width: number, height: number): void;
    private insertPictureInternal;
    private fitImageToPage;
    /**
     * @private
     */
    insertInlineInSelection(selection: Selection, elementBox: ElementBox): void;
    /**
     * @private
     */
    onPortrait(): void;
    /**
     * @private
     */
    onLandscape(): void;
    private copyValues;
    /**
     * @private
     */
    changeMarginValue(property: string): void;
    /**
     * @private
     */
    onPaperSize(property: string): void;
    /**
     * @private
     */
    updateListItemsTillEnd(blockAdv: BlockWidget, updateNextBlockList: boolean): void;
    /**
     * @private
     */
    updateWholeListItems(block: BlockWidget): void;
    private updateListItems;
    private updateListItemsForTable;
    private updateListItemsForRow;
    private updateListItemsForCell;
    /**
     * @private
     */
    updateRenderedListItems(block: BlockWidget): void;
    private updateRenderedListItemsForTable;
    private updateRenderedListItemsForRow;
    private updateRenderedListItemsForCell;
    private updateListItemsForPara;
    private updateRenderedListItemsForPara;
    /**
     * Get logical offset of paragraph.
     * @private
     */
    getParagraphInfo(position: TextPosition): ParagraphInfo;
    /**
     * @private
     */
    getParagraphInfoInternal(line: LineWidget, lineOffset: number): ParagraphInfo;
    /**
     * Get offset value to update in selection
     * @private
     */
    getOffsetValue(selection: Selection): void;
    /**
     * Get offset value to update in selection
     * @private
     */
    getLineInfo(paragraph: ParagraphWidget, offset: number): LineInfo;
    /**
     * @private
     */
    setPositionParagraph(paragraph: ParagraphWidget, offset: number, skipSelectionChange: boolean): void;
    /**
     * @private
     */
    setPositionForCurrentIndex(textPosition: TextPosition, editPosition: string): void;
    /**
     * @private
     */
    insertPageNumber(numberFormat?: string): void;
    /**
     * @private
     */
    insertPageCount(numberFormat?: string): void;
    private createFields;
    /**
     * Insert Bookmark at current selection range
     * @param  {string} name - Name of bookmark
     */
    insertBookmark(name: string): void;
    /**
     * @private
     */
    deleteBookmark(bookmarkName: string): void;
    /**
     * @private
     */
    deleteBookmarkInternal(bookmark: BookmarkElementBox): void;
    /**
     * @private
     */
    getSelectionInfo(): SelectionInfo;
    /**
     * @private
     */
    insertElements(endElements: ElementBox[], startElements?: ElementBox[]): void;
    /**
     * @private
     */
    insertElementsInternal(position: TextPosition, elements: ElementBox[]): void;
    /**
     * @private
     */
    getHierarchicalIndex(block: Widget, offset: string): string;
    /**
     * @private
     */
    getBlock(position: IndexInfo): BlockInfo;
    /**
     * Return Block relative to position
     * @private
     */
    getBlockInternal(widget: Widget, position: IndexInfo): BlockInfo;
    /**
     * @private
     */
    getParagraph(position: IndexInfo): ParagraphInfo;
    /**
     * Get paragraph relative to position
     * @private
     */
    private getParagraphInternal;
    private getBodyWidget;
    private getHeaderFooterWidget;
    /**
     * @private
     */
    getBodyWidgetInternal(sectionIndex: number, blockIndex: number): BodyWidget;
    /**
     * @private
     */
    getBlockByIndex(container: Widget, blockIndex: number): Widget;
    /**
     * @private
     */
    updateHistoryPosition(position: TextPosition | string, isInsertPosition: boolean): void;
    /**
     * Applies the borders based on given settings.
     * @param {BorderSettings} settings
     */
    applyBorders(settings: BorderSettings): void;
    private applyAllBorders;
    private applyInsideBorders;
    /**
     * @private
     */
    getTopBorderCellsOnSelection(): TableCellWidget[];
    /**
     * @private
     */
    getLeftBorderCellsOnSelection(): TableCellWidget[];
    /**
     * @private
     */
    getRightBorderCellsOnSelection(): TableCellWidget[];
    /**
     * @private
     */
    getBottomBorderCellsOnSelection(): TableCellWidget[];
    /**
     * @private
     */
    clearAllBorderValues(borders: WBorders): void;
    private clearBorder;
    /**
     * @private
     */
    getAdjacentCellToApplyBottomBorder(): TableCellWidget[];
    private getAdjacentBottomBorderOnEmptyCells;
    /**
     * @private
     */
    getAdjacentCellToApplyRightBorder(): TableCellWidget[];
    private getSelectedCellsNextWidgets;
    /**
     * @private
     */
    getBorder(borderColor: string, lineWidth: number, borderStyle: LineStyle): WBorder;
    /**
     * Applies borders
     * @param  {WBorders} sourceBorders
     * @param  {WBorders} applyBorders
     * @private
     */
    applyBordersInternal(sourceBorders: WBorders, applyBorders: WBorders): void;
    /**
     * Apply shading to table
     * @param  {WShading} sourceShading
     * @param  {WShading} applyShading
     * @private
     */
    applyShading(sourceShading: WShading, applyShading: WShading): void;
    private applyBorder;
    /**
     * Apply Table Format changes
     * @param  {Selection} selection
     * @param  {WTableFormat} format
     * @private
     */
    onTableFormat(format: WTableFormat, isShading?: boolean): void;
    /**
     * @private
     */
    applyTableFormat(table: TableWidget, property: string, value: object): void;
    private applyTablePropertyValue;
    private handleTableFormat;
    private updateGridForTableDialog;
    /**
     * Applies Row Format Changes
     * @param  {Selection} selection
     * @param  {WRowFormat} format
     * @param  {WRow} row
     * @private
     */
    onRowFormat(format: WRowFormat): void;
    private applyRowFormat;
    private applyRowPropertyValue;
    private handleRowFormat;
    /**
     * Applies Cell Format changes
     * @param  {Selection} selection
     * @param  {WCellFormat} format
     * @param  {WCell} cell
     * @private
     */
    onCellFormat(format: WCellFormat): void;
    /**
     * @private
     */
    updateCellMargins(selection: Selection, value: WCellFormat): void;
    /**
     * @private
     */
    updateFormatForCell(selection: Selection, property: string, value: Object): void;
    /**
     * @private
     */
    getSelectedCellInColumn(table: TableWidget, rowStartIndex: number, columnIndex: number, rowEndIndex: number): TableCellWidget[];
    private getColumnCells;
    /**
     * @private
     */
    getTableWidth(table: TableWidget): number;
    private applyCellPropertyValue;
    private handleCellFormat;
    /**
     * @private
     */
    destroy(): void;
    private isTocField;
    /**
     * Updates the table of contents.
     * @private
     */
    updateToc(tocField?: FieldElementBox): void;
    private getTocSettings;
    private decodeTSwitch;
    /**
     * Inserts, modifies or updates the table of contents based on given settings.
     * @param {TableOfContentsSettings} tableOfContentsSettings
     */
    insertTableOfContents(tableOfContentsSettings?: TableOfContentsSettings): void;
    private appendEmptyPara;
    private constructTocFieldCode;
    private constructTSwitch;
    /**
     * Appends the end filed to the given line.
     */
    private appendEndField;
    private validateTocSettings;
    /**
     * Builds the TOC
     * @private
     */
    buildToc(tocSettings: TableOfContentsSettings, fieldCode: string, isFirstPara: boolean, isStartParagraph?: boolean): ParagraphWidget[];
    private createOutlineLevels;
    /**
     * Creates TOC heading styles
     * @param start - lower heading level
     * @param end - higher heading level
     */
    private createHeadingLevels;
    /**
     * Checks the current style is heading style.
     */
    private isHeadingStyle;
    private isOutlineLevelStyle;
    /**
     * Creates TOC field element.
     */
    private createTocFieldElement;
    /**
     * Updates TOC para
     */
    private createTOCWidgets;
    /**
     * Inserts toc hyperlink.
     */
    private insertTocHyperlink;
    /**
     * Inserts toc page number.
     */
    private insertTocPageNumber;
    private updatePageRef;
    /**
     * Inserts toc bookmark.
     */
    private insertTocBookmark;
    /**
     * Generates bookmark id.
     */
    private generateBookmarkName;
    /**
     * Change cell content alignment
     * @private
     */
    onCellContentAlignment(verticalAlignment: CellVerticalAlignment, textAlignment: TextAlignment): void;
    /**
     * @private
     */
    insertEditRangeElement(user: string): void;
    /**
     * @private
     */
    private insertEditRangeInsideTable;
    /**
     * @private
     */
    addRestrictEditingForSelectedArea(user: string): void;
    /**
     * @private
     */
    addEditElement(user: string): EditRangeStartElementBox;
    /**
     * @private
     */
    protect(protectionType: ProtectionType): void;
    /**
     * @private
     */
    addEditCollectionToDocument(): void;
    /**
     * @private
     */
    updateRangeCollection(editStart: EditRangeStartElementBox, user: string): void;
    /**
     * @private
     */
    removeUserRestrictions(user: string): void;
    /**
     * @private
     */
    removeUserRestrictionsInternal(editStart: EditRangeStartElementBox, currentUser?: string): void;
    /**
     * @private
     */
    removeAllEditRestrictions(): void;
}
/**
 * @private
 */
export interface SelectionInfo {
    start: TextPosition;
    end: TextPosition;
    startElementInfo: ElementInfo;
    endElementInfo: ElementInfo;
    isEmpty: boolean;
}
/**
 * @private
 */
export interface ContinueNumberingInfo {
    currentList: WList;
    listLevelNumber: number;
    listPattern: ListLevelPattern;
}
/**
 * Specifies the settings for border.
 */
export interface BorderSettings {
    /**
     * Specifies the border type.
     */
    type: BorderType;
    /**
     * Specifies the border color.
     */
    borderColor?: string;
    /**
     * Specifies the line width.
     */
    lineWidth?: number;
    /**
     * Specifies the border style.
     */
    borderStyle?: LineStyle;
}
/**
 * @private
 */
export interface TocLevelSettings {
    [key: string]: number;
}
/**
 * @private
 */
export interface PageRefFields {
    [key: string]: FieldTextElementBox;
}
/**
 * Specifies the settings for table of contents.
 */
export interface TableOfContentsSettings {
    /**
     * Specifies the start level.
     */
    startLevel?: number;
    /**
     * Specifies the end level.
     */
    endLevel?: number;
    /**
     * Specifies whether hyperlink can be included.
     */
    includeHyperlink?: boolean;
    /**
     * Specifies whether page number can be included.
     */
    includePageNumber?: boolean;
    /**
     * Specifies whether the page number can be right aligned.
     */
    rightAlign?: boolean;
    /**
     * Specifies the tab leader.
     */
    tabLeader?: TabLeader;
    /**
     * @private
     */
    levelSettings?: TocLevelSettings;
    /**
     * Specifies whether outline levels can be included.
     */
    includeOutlineLevels?: boolean;
}
/**
 * Defines the character format properties of document editor
 */
export interface CharacterFormatProperties {
    /**
     * Defines the bold formatting
     */
    bold?: boolean;
    /**
     * Defines the italic formatting
     */
    italic?: boolean;
    /**
     * Defines the font size
     */
    fontSize?: number;
    /**
     * Defines the font family
     */
    fontFamily?: string;
    /**
     * Defines the underline property
     */
    underline?: Underline;
    /**
     * Defines the strikethrough
     */
    strikethrough?: Strikethrough;
    /**
     * Defines the subscript or superscript property
     */
    baselineAlignment?: BaselineAlignment;
    /**
     * Defines the highlight color
     */
    highlightColor?: HighlightColor;
    /**
     * Defines the font color
     */
    fontColor?: string;
    /**
     * Defines the bidirectional property
     */
    bidi?: boolean;
}
/**
 * Defines the paragraph format properties of document editor
 */
export interface ParagraphFormatProperties {
    /**
     * Defines the left indent
     */
    leftIndent?: number;
    /**
     * Defines the right indent
     */
    rightIndent?: number;
    /**
     * Defines the first line indent
     */
    firstLineIndent?: number;
    /**
     * Defines the text alignment property
     */
    textAlignment?: TextAlignment;
    /**
     * Defines the spacing value after the paragraph
     */
    afterSpacing?: number;
    /**
     * Defines the spacing value before the paragraph
     */
    beforeSpacing?: number;
    /**
     * Defines the spacing between the lines
     */
    lineSpacing?: number;
    /**
     * Defines the spacing type(AtLeast,Exactly or Multiple) between the lines
     */
    lineSpacingType?: LineSpacingType;
    /**
     * Defines the bidirectional property of paragraph
     */
    bidi?: boolean;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor/image-resizer.d.ts
/**
 * Image resizer implementation.
 */
export  class ImageResizer {
    /**
     * @private
     */
    owner: DocumentEditor;
    private currentImageElementBoxIn;
    /**
     * @private
     */
    resizeContainerDiv: HTMLDivElement;
    /**
     * @private
     */
    topLeftRect: HTMLDivElement;
    /**
     * @private
     */
    topMiddleRect: HTMLDivElement;
    /**
     * @private
     */
    topRightRect: HTMLDivElement;
    /**
     * @private
     */
    bottomLeftRect: HTMLDivElement;
    /**
     * @private
     */
    bottomMiddleRect: HTMLDivElement;
    /**
     * @private
     */
    bottomRightRect: HTMLDivElement;
    /**
     * @private
     */
    leftMiddleRect: HTMLDivElement;
    /**
     * @private
     */
    rightMiddleRect: HTMLDivElement;
    /**
     * @private
     */
    topLeftRectParent: HTMLDivElement;
    /**
     * @private
     */
    topMiddleRectParent: HTMLDivElement;
    /**
     * @private
     */
    topRightRectParent: HTMLDivElement;
    /**
     * @private
     */
    bottomLeftRectParent: HTMLDivElement;
    /**
     * @private
     */
    bottomMiddleRectParent: HTMLDivElement;
    /**
     * @private
     */
    bottomRightRectParent: HTMLDivElement;
    /**
     * @private
     */
    leftMiddleRectParent: HTMLDivElement;
    /**
     * @private
     */
    rightMiddleRectParent: HTMLDivElement;
    /**
     * @private
     */
    resizeMarkSizeIn: number;
    /**
     * @private
     */
    selectedImageWidget: Dictionary<IWidget, SelectedImageInfo>;
    /**
     * @private
     */
    baseHistoryInfo: BaseHistoryInfo;
    private imageResizerDiv;
    /**
     * @private
     */
    isImageResizing: boolean;
    /**
     * @private
     */
    isImageResizerVisible: boolean;
    private viewer;
    /**
     * @private
     */
    currentPage: Page;
    /**
     * @private
     */
    isImageMoveToNextPage: boolean;
    /**
     * @private
     */
    imageResizerDivElement: HTMLDivElement;
    /**
     * @private
     */
    imageResizerPoints: ImageResizingPoints;
    /**
     * @private
     */
    selectedResizeElement: HTMLElement;
    /**
     * @private
     */
    topValue: number;
    /**
     * @private
     */
    leftValue: number;
    /**
     * Gets or Sets the current image element box.
     * @private
     */
    /**
    * @private
    */
    currentImageElementBox: ImageElementBox;
    /**
     * Gets or Sets the resize mark size.
     * @private
     */
    /**
    * @private
    */
    resizeMarkSize: number;
    /**
     * Constructor for image resizer module.
     * @param {DocumentEditor} node
     * @param {LayoutViewer} viewer
     * @private
     */
    constructor(node: DocumentEditor, viewer: LayoutViewer);
    /**
     * Gets module name.
     */
    private getModuleName;
    /**
     * Sets image resizer position.
     * @param {number} x - Specifies for image resizer left value.
     * @param {number} y - Specifies for image resizer top value.
     * @param {number} width - Specifies for image resizer width value.
     * @param {number} height - Specifies for image resizer height value.
     * @private
     */
    setImageResizerPositions(x: number, y: number, width: number, height: number): void;
    /**
     * Creates image resizer DOM element.
     * @private
     */
    initializeImageResizer(): void;
    /**
     * Position an image resizer
     * @param {ImageElementBox} elementBox - Specifies the image position.
     * @private
     */
    positionImageResizer(elementBox: ImageElementBox): void;
    /**
     * Shows the image resizer.
     * @private
     */
    showImageResizer(): void;
    /**
     * Hides the image resizer.
     * @private
     */
    hideImageResizer(): void;
    /**
     * Initialize the resize marks.
     * @param {HTMLElement} resizeDiv - Specifies to appending resizer container div element.
     * @param {ImageResizer} imageResizer - Specifies to creating div element of each position.
     * @private
     */
    initResizeMarks(resizeDiv: HTMLElement, imageResizer: ImageResizer): HTMLDivElement;
    /**
     * Sets the image resizer position.
     * @param {number} left - Specifies for image resizer left value.
     * @param {number} top - Specifies for image resizer top value.
     * @param {number} width - Specifies for image resizer width value.
     * @param {number} height - Specifies for image resizer height value.
     * @param {ImageResizer} imageResizer - Specifies for image resizer.
     * @private
     */
    setImageResizerPosition(left: number, top: number, width: number, height: number, imageResizer: ImageResizer): void;
    /**
     * Sets the image resizing points.
     * @param {ImageResizer} imageResizer - Specifies for position of each resizing elements.
     * @private
     */
    setImageResizingPoints(imageResizer: ImageResizer): void;
    /**
     * Initialize the resize container div element.
     * @param {ImageResizer} imageResizer - Specifies for creating resize container div element.
     * @private
     */
    initResizeContainerDiv(imageResizer: ImageResizer): void;
    /**
     * Apply the properties of each resize rectangle element.
     * @param {HTMLDivElement} resizeRectElement - Specifies for applying properties to resize rectangle element.
     * @private
     */
    applyProperties(resizeRectElement: HTMLDivElement): void;
    /**
     * Handles an image resizing.
     * @param {number} x  - Specifies for left value while resizing.
     * @param {number} y - Specifies for top value while resizing.
     */
    private handleImageResizing;
    /**
     * Handles image resizing on mouse.
     * @param {MouseEvent} event - Specifies for image resizing using mouse event.
     * @private
     */
    handleImageResizingOnMouse(event: MouseEvent): void;
    private topMiddleResizing;
    private leftMiddleResizing;
    private topRightResizing;
    private topLeftResizing;
    private bottomRightResizing;
    private bottomLeftResizing;
    private getOuterResizingPoint;
    private getInnerResizingPoint;
    /**
     * Handles image resizing on touch.
     * @param {TouchEvent} touchEvent - Specifies for image resizing using touch event.
     * @private
     */
    handleImageResizingOnTouch(touchEvent: TouchEvent): void;
    /**
     * Gets the image point of mouse.
     * @param {Point} touchPoint - Specifies for resizer cursor position.
     * @private
     */
    getImagePoint(touchPoint: Point): ImagePointInfo;
    private applyPropertiesForMouse;
    /**
     * Gets the image point of touch.
     * @param {Point} touchPoints - Specifies for resizer cursor position.
     * @private
     */
    getImagePointOnTouch(touchPoints: Point): ImagePointInfo;
    private applyPropertiesForTouch;
    /**
     * @private
     */
    mouseUpInternal(): void;
    /**
     * Initialize history for image resizer.
     * @param {ImageResizer} imageResizer - Specifies for image resizer.
     * @param {WImage} imageContainer - Specifies for an image.
     * @private
     */
    initHistoryForImageResizer(imageContainer: ImageElementBox): void;
    /**
     * Updates histroy for image resizer.
     * @private
     */
    updateHistoryForImageResizer(): void;
    /**
     * Updates image resize container when applying zooming
     * @private
     */
    updateImageResizerPosition(): void;
    /**
     * Dispose the internal objects which are maintained.
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class ImageResizingPoints {
    /**
     * @private
     */ resizeContainerDiv: Point;
    /**
     * @private
     */
    topLeftRectParent: Point;
    /**
     * @private
     */
    topMiddleRectParent: Point;
    /**
     * @private
     */
    topRightRectParent: Point;
    /**
     * @private
     */
    bottomLeftRectParent: Point;
    /**
     * @private
     */
    bottomMiddleRectParent: Point;
    /**
     * @private
     */
    bottomRightRectParent: Point;
    /**
     * @private
     */
    leftMiddleRectParent: Point;
    /**
     * @private
     */
    rightMiddleRectParent: Point;
    /**
     * Constructor for image resizing points class.
     */
    constructor();
}
/**
 * @private
 */
export  class SelectedImageInfo {
    private heightIn;
    private widthIn;
    /**
     * Gets or Sets the height value.
     * @private
     */
    /**
    * @private
    */
    height: number;
    /**
     * Gets or Sets the width value.
     * @private
     */
    /**
    * @private
    */
    width: number;
    /**
     * Constructor for selected image info class.
     * @param {number} height - Specifies for height value.
     * @param {number} width - Specifies for width value.
     */
    constructor(height: number, width: number);
}
/**
 * @private
 */
export interface LeftTopInfo {
    left: number;
    top: number;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor/index.d.ts
/**
 * Editor Export
 */
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor/table-resizer.d.ts
/**
 * @private
 */
export  class TableResizer {
    owner: DocumentEditor;
    resizeNode: number;
    resizerPosition: number;
    currentResizingTable: TableWidget;
    startingPoint: Point;
    /**
     * @private
     */
    readonly viewer: LayoutViewer;
    /**
     * @private
     */
    constructor(node: DocumentEditor);
    /**
     * Gets module name.
     */
    private getModuleName;
    /**
     * @private
     */
    updateResizingHistory(touchPoint: Point): void;
    handleResize(point: Point): void;
    /**
     * @private
     */
    isInRowResizerArea(touchPoint: Point): boolean;
    isInCellResizerArea(touchPoint: Point): boolean;
    /**
     * Gets cell resizer position.
     * @param {Point} point
     * @private
     */
    getCellReSizerPosition(touchPoint: Point): number;
    /**
     * Gets cell resizer position.
     * @param {TableCellWidget} cellWidget
     * @param {Point} touchPoint
     */
    private getCellReSizerPositionInternal;
    private getRowReSizerPosition;
    /**
     * To handle Table Row and cell resize
     * @param touchPoint
     * @private
     */
    handleResizing(touchPoint: Point): void;
    resizeTableRow(dragValue: number): void;
    /**
     * Gets the table widget from given cursor point
     * @param cursorPoint
     */
    private getTableWidget;
    private getTableWidgetFromWidget;
    /**
     * Return the table cell widget from the given cursor point
     * @param cursorPoint
     * @private
     */
    getTableCellWidget(cursorPoint: Point): TableCellWidget;
    updateRowHeight(row: TableRowWidget, dragValue: number): void;
    resizeTableCellColumn(dragValue: number): void;
    /**
     * Resize Selected Cells
     */
    private resizeColumnWithSelection;
    /**
     * Resize selected cells at resizer position 0
     */
    private resizeColumnAtStart;
    private updateWidthForCells;
    /**
     * Resize selected cells at last column
     */
    private resizeColumnAtLastColumnIndex;
    /**
     *  Resize selected cells at middle column
     */
    private resizeCellAtMiddle;
    updateGridValue(table: TableWidget, isUpdate: boolean, dragValue?: number): void;
    private getColumnCells;
    private updateGridBefore;
    private getLeastGridBefore;
    private increaseOrDecreaseWidth;
    private changeWidthOfCells;
    private updateRowsGridAfterWidth;
    private getRowWidth;
    private getMaxRowWidth;
    private isColumnSelected;
    applyProperties(table: TableWidget, tableHistoryInfo: TableHistoryInfo): void;
    /**
     * Return table row width
     */
    private getActualWidth;
    setPreferredWidth(table: TableWidget): void;
    private updateCellPreferredWidths;
    /**
     * Update grid before width value
     */
    private updateGridBeforeWidth;
    /**
     * Update grid after width value
     */
    updateGridAfterWidth(width: number, row: TableRowWidget): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/format/border.d.ts
/**
 * @private
 */
export  class WBorder {
    private uniqueBorderFormat;
    private static uniqueBorderFormats;
    private static uniqueFormatType;
    ownerBase: WBorders;
    color: string;
    lineStyle: LineStyle;
    lineWidth: number;
    shadow: boolean;
    space: number;
    hasNoneStyle: boolean;
    constructor(node?: WBorders);
    private getPropertyValue;
    private setPropertyValue;
    private initializeUniqueBorder;
    private addUniqueBorderFormat;
    private static getPropertyDefaultValue;
    getLineWidth(): number;
    private getBorderLineWidthArray;
    getBorderWeight(): number;
    private getBorderNumber;
    private getNumberOfLines;
    getPrecedence(): number;
    private hasValue;
    cloneFormat(): WBorder;
    destroy(): void;
    copyFormat(border: WBorder): void;
    static clear(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/format/borders.d.ts
/**
 * @private
 */
export  class WBorders implements IWidget {
    private leftIn;
    private rightIn;
    private topIn;
    private bottomIn;
    private horizontalIn;
    private verticalIn;
    private diagonalUpIn;
    private diagonalDownIn;
    private lineWidthIn;
    private valueIn;
    ownerBase: Object;
    left: WBorder;
    right: WBorder;
    top: WBorder;
    bottom: WBorder;
    horizontal: WBorder;
    vertical: WBorder;
    diagonalUp: WBorder;
    diagonalDown: WBorder;
    constructor(node?: Object);
    destroy(): void;
    cloneFormat(): WBorders;
    copyFormat(borders: WBorders): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/format/cell-format.d.ts
/**
 * @private
 */
export  class WCellFormat {
    private uniqueCellFormat;
    private static uniqueCellFormats;
    private static uniqueFormatType;
    borders: WBorders;
    shading: WShading;
    ownerBase: Object;
    leftMargin: number;
    rightMargin: number;
    topMargin: number;
    bottomMargin: number;
    cellWidth: number;
    columnSpan: number;
    rowSpan: number;
    preferredWidth: number;
    verticalAlignment: CellVerticalAlignment;
    preferredWidthType: WidthType;
    constructor(node?: Object);
    getPropertyValue(property: string): Object;
    private setPropertyValue;
    private initializeUniqueCellFormat;
    private addUniqueCellFormat;
    private static getPropertyDefaultValue;
    containsMargins(): boolean;
    destroy(): void;
    cloneFormat(): WCellFormat;
    hasValue(property: string): boolean;
    copyFormat(format: WCellFormat): void;
    static clear(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/format/character-format.d.ts
/**
 * @private
 */
export  class WCharacterFormat {
    uniqueCharacterFormat: WUniqueFormat;
    private static uniqueCharacterFormats;
    private static uniqueFormatType;
    ownerBase: Object;
    baseCharStyle: WStyle;
    bold: boolean;
    italic: boolean;
    fontSize: number;
    fontFamily: string;
    underline: Underline;
    strikethrough: Strikethrough;
    baselineAlignment: BaselineAlignment;
    highlightColor: HighlightColor;
    fontColor: string;
    bidi: boolean;
    bdo: BiDirectionalOverride;
    boldBidi: boolean;
    italicBidi: boolean;
    fontSizeBidi: number;
    fontFamilyBidi: string;
    constructor(node?: Object);
    getPropertyValue(property: string): Object;
    private getDefaultValue;
    private documentCharacterFormat;
    private checkBaseStyle;
    private checkCharacterStyle;
    private setPropertyValue;
    private initializeUniqueCharacterFormat;
    private addUniqueCharacterFormat;
    private static getPropertyDefaultValue;
    isEqualFormat(format: WCharacterFormat): boolean;
    isSameFormat(format: WCharacterFormat): boolean;
    cloneFormat(): WCharacterFormat;
    private hasValue;
    clearFormat(): void;
    destroy(): void;
    copyFormat(format: WCharacterFormat): void;
    updateUniqueCharacterFormat(format: WCharacterFormat): void;
    static clear(): void;
    ApplyStyle(baseCharStyle: WStyle): void;
    /**
     * For internal use
     * @private
     */
    getValue(property: string): Object;
    /**
     * For internal use
     * @private
     */
    mergeFormat(format: WCharacterFormat): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/format/index.d.ts
/**
 * Formats Modules
 */
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/format/list-format.d.ts
/**
 * @private
 */
export  class WListFormat {
    private uniqueListFormat;
    private static uniqueListFormats;
    private static uniqueFormatType;
    ownerBase: Object;
    baseStyle: WStyle;
    list: WList;
    listId: number;
    listLevelNumber: number;
    readonly listLevel: WListLevel;
    constructor(node?: Object);
    private getPropertyValue;
    private setPropertyValue;
    private initializeUniqueListFormat;
    private addUniqueListFormat;
    private static getPropertyDefaultValue;
    copyFormat(format: WListFormat): void;
    hasValue(property: string): boolean;
    clearFormat(): void;
    destroy(): void;
    static clear(): void;
    ApplyStyle(baseStyle: WStyle): void;
    /**
     * For internal use
     * @private
     */
    getValue(property: string): Object;
    /**
     * For internal use
     * @private
     */
    mergeFormat(format: WListFormat): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/format/paragraph-format.d.ts
/**
 * @private
 */
export  class WTabStop {
    private positionIn;
    private deletePositionIn;
    private justification;
    private leader;
    position: number;
    deletePosition: number;
    tabJustification: TabJustification;
    tabLeader: TabLeader;
    destroy(): void;
}
/**
 * @private
 */
export  class WParagraphFormat {
    uniqueParagraphFormat: WUniqueFormat;
    private static uniqueParagraphFormats;
    private static uniqueFormatType;
    listFormat: WListFormat;
    ownerBase: Object;
    baseStyle: WStyle;
    tabs: WTabStop[];
    getUpdatedTabs(): WTabStop[];
    private hasTabStop;
    leftIndent: number;
    rightIndent: number;
    firstLineIndent: number;
    beforeSpacing: number;
    afterSpacing: number;
    lineSpacing: number;
    lineSpacingType: LineSpacingType;
    textAlignment: TextAlignment;
    outlineLevel: OutlineLevel;
    bidi: boolean;
    contextualSpacing: boolean;
    constructor(node?: Object);
    private getListFormatParagraphFormat;
    getPropertyValue(property: string): Object;
    private getDefaultValue;
    private documentParagraphFormat;
    private setPropertyValue;
    private initializeUniqueParagraphFormat;
    private addUniqueParaFormat;
    private static getPropertyDefaultValue;
    clearFormat(): void;
    destroy(): void;
    copyFormat(format: WParagraphFormat): void;
    updateUniqueParagraphFormat(format: WParagraphFormat): void;
    cloneFormat(): WParagraphFormat;
    private hasValue;
    static clear(): void;
    ApplyStyle(baseStyle: WStyle): void;
    /**
     * For internal use
     * @private
     */
    getValue(property: string): Object;
    /**
     * For internal use
     * @private
     */
    mergeFormat(format: WParagraphFormat, isStyle?: boolean): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/format/row-format.d.ts
/**
 * @private
 */
export  class WRowFormat {
    private uniqueRowFormat;
    private static uniqueRowFormats;
    private static uniqueFormatType;
    /**
     * @private
     */
    borders: WBorders;
    /**
     * @private
     */
    ownerBase: TableRowWidget;
    /**
     * @private
     */
    beforeWidth: number;
    /**
     * @private
     */
    afterWidth: number;
    gridBefore: number;
    gridBeforeWidth: number;
    gridBeforeWidthType: WidthType;
    gridAfter: number;
    gridAfterWidth: number;
    gridAfterWidthType: WidthType;
    allowBreakAcrossPages: boolean;
    isHeader: boolean;
    rightMargin: number;
    height: number;
    heightType: HeightType;
    bottomMargin: number;
    leftIndent: number;
    topMargin: number;
    leftMargin: number;
    constructor(node?: TableRowWidget);
    getPropertyValue(property: string): Object;
    private setPropertyValue;
    private initializeUniqueRowFormat;
    private addUniqueRowFormat;
    private static getPropertyDefaultValue;
    containsMargins(): boolean;
    cloneFormat(): WRowFormat;
    hasValue(property: string): boolean;
    copyFormat(format: WRowFormat): void;
    destroy(): void;
    static clear(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/format/section-format.d.ts
/**
 * @private
 */
export  class WSectionFormat {
    private uniqueSectionFormat;
    private static uniqueSectionFormats;
    private static uniqueFormatType;
    ownerBase: Object;
    headerDistance: number;
    footerDistance: number;
    differentFirstPage: boolean;
    differentOddAndEvenPages: boolean;
    pageHeight: number;
    rightMargin: number;
    pageWidth: number;
    leftMargin: number;
    bottomMargin: number;
    topMargin: number;
    bidi: boolean;
    constructor(node?: Object);
    destroy(): void;
    private hasValue;
    private static getPropertyDefaultValue;
    getPropertyValue(property: string): Object;
    private setPropertyValue;
    private initializeUniqueSectionFormat;
    private addUniqueSectionFormat;
    copyFormat(format: WSectionFormat, history?: EditorHistory): void;
    updateUniqueSectionFormat(format: WSectionFormat): void;
    cloneFormat(): WSectionFormat;
    static clear(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/format/shading.d.ts
/**
 * @private
 */
export  class WShading {
    private uniqueShadingFormat;
    private static uniqueShadingFormats;
    private static uniqueFormatType;
    ownerBase: Object;
    backgroundColor: string;
    foregroundColor: string;
    textureStyle: TextureStyle;
    constructor(node?: Object);
    private getPropertyValue;
    private setPropertyValue;
    private static getPropertyDefaultValue;
    private initializeUniqueShading;
    private addUniqueShading;
    destroy(): void;
    cloneFormat(): WShading;
    copyFormat(shading: WShading): void;
    private hasValue;
    static clear(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/format/style.d.ts
/**
 * @private
 */
export  abstract class WStyle {
    ownerBase: Object;
    type: StyleType;
    next: WStyle;
    basedOn: WStyle;
    link: WStyle;
    name: string;
}
/**
 * @private
 */
export  class WParagraphStyle extends WStyle {
    /**
     * Specifies the paragraph format
     * @default undefined
     */
    paragraphFormat: WParagraphFormat;
    /**
     * Specifies the character format
     * @default undefined
     */
    characterFormat: WCharacterFormat;
    constructor(node?: Object);
    destroy(): void;
    copyStyle(paraStyle: WParagraphStyle): void;
}
/**
 * @private
 */
export  class WCharacterStyle extends WStyle {
    /**
     * Specifies the character format
     * @default undefined
     */
    characterFormat: WCharacterFormat;
    constructor(node?: Object);
    destroy(): void;
    copyStyle(charStyle: WCharacterStyle): void;
}
/**
 * @private
 */
export  class WStyles {
    private collection;
    readonly length: number;
    remove(item: WParagraphStyle | WCharacterStyle): void;
    push(item: WParagraphStyle | WCharacterStyle): number;
    getItem(index: number): Object;
    indexOf(item: WParagraphStyle | WCharacterStyle): number;
    contains(item: WParagraphStyle | WCharacterStyle): boolean;
    clear(): void;
    findByName(name: string, type?: StyleType): Object;
    getStyleNames(type?: StyleType): string[];
    getStyles(type?: StyleType): Object[];
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/format/table-format.d.ts
/**
 * @private
 */
export  class WTableFormat {
    private uniqueTableFormat;
    private static uniqueTableFormats;
    private static uniqueFormatType;
    borders: WBorders;
    shading: WShading;
    ownerBase: TableWidget;
    allowAutoFit: boolean;
    cellSpacing: number;
    leftMargin: number;
    topMargin: number;
    rightMargin: number;
    bottomMargin: number;
    leftIndent: number;
    tableAlignment: TableAlignment;
    preferredWidth: number;
    preferredWidthType: WidthType;
    bidi: boolean;
    constructor(owner?: TableWidget);
    getPropertyValue(property: string): Object;
    private setPropertyValue;
    private initializeUniqueTableFormat;
    private addUniqueTableFormat;
    private static getPropertyDefaultValue;
    private assignTableMarginValue;
    initializeTableBorders(): void;
    destroy(): void;
    cloneFormat(): WTableFormat;
    hasValue(property: string): boolean;
    copyFormat(format: WTableFormat): void;
    static clear(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/index.d.ts
/**
 * Document Editor implementation
 */
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/list/abstract-list.d.ts
/**
 * @private
 */
export  class WAbstractList {
    private abstractListIdIn;
    levels: WListLevel[];
    abstractListId: number;
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/list/index.d.ts
/**
 * List implementation
 */
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/list/level-override.d.ts
/**
 * @private
 */
export  class WLevelOverride {
    startAt: number;
    levelNumber: number;
    overrideListLevel: WListLevel;
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/list/list-level.d.ts
/**
 * @private
 */
export  class WListLevel {
    static dotBullet: string;
    static squareBullet: string;
    static arrowBullet: string;
    static circleBullet: string;
    private uniqueListLevel;
    private static uniqueListLevels;
    private static uniqueFormatType;
    paragraphFormat: WParagraphFormat;
    characterFormat: WCharacterFormat;
    ownerBase: WAbstractList | WLevelOverride;
    listLevelPattern: ListLevelPattern;
    followCharacter: FollowCharacterType;
    startAt: number;
    numberFormat: string;
    restartLevel: number;
    constructor(node: WAbstractList | WLevelOverride);
    getPropertyValue(property: string): Object;
    setPropertyValue(property: string, value: Object): void;
    initializeUniqueWListLevel(property: string, propValue: object): void;
    addUniqueWListLevel(property: string, modifiedProperty: string, propValue: object, uniqueCharFormatTemp: Dictionary<number, object>): void;
    static getPropertyDefaultValue(property: string): Object;
    destroy(): void;
    static clear(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/list/list.d.ts
/**
 * @private
 */
export  class WList {
    listId: number;
    sourceListId: number;
    abstractListId: number;
    abstractList: WAbstractList;
    levelOverrides: WLevelOverride[];
    getListLevel(levelNumber: number): WListLevel;
    getLevelOverride(levelNumber: number): WLevelOverride;
    destroy(): void;
    mergeList(list: WList): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/print.d.ts
/**
 * Print class
 */
export  class Print {
    /**
     * Gets module name.
     */
    private getModuleName;
    /**
     * Prints the current viewer
     * @param viewer
     * @param printWindow
     * @private
     */
    print(viewer: PageLayoutViewer, printWindow?: Window): void;
    /**
     * Opens print window and displays current page to print.
     * @private
     */
    printWindow(viewer: PageLayoutViewer, browserUserAgent: string, printWindow?: Window): void;
    /**
     * Generates print content.
     * @private
     */
    generatePrintContent(viewer: PageLayoutViewer, element: HTMLDivElement): void;
    /**
     * Gets page width.
     * @param pages
     * @private
     */
    getPageWidth(pages: Page[]): number;
    /**
     *  Gets page height.
     * @private
     */
    getPageHeight(pages: Page[]): number;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/restrict-editing/add-user-dialog.d.ts
/**
 * @private
 */
export  class AddUserDialog {
    private viewer;
    private target;
    private textBoxInput;
    private userList;
    private addButton;
    private owner;
    constructor(viewer: LayoutViewer, owner: RestrictEditing);
    /**
     * @private
     */
    initUserDialog(localValue: base.L10n, isRtl?: boolean): void;
    /**
     * @private
     */
    show: () => void;
    loadUserDetails: () => void;
    /**
     * @private
     */
    okButtonClick: () => void;
    /**
     * @private
     */
    hideDialog: () => void;
    /**
     * @private
     */
    onKeyUpOnDisplayBox: () => void;
    addButtonClick: () => void;
    validateUserName(value: string): boolean;
    deleteButtonClick: () => void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/restrict-editing/enforce-protection-dialog.d.ts
/**
 * @private
 */
export  class EnforceProtectionDialog {
    private viewer;
    private target;
    private passwordTextBox;
    private confirmPasswordTextBox;
    private localeValue;
    private owner;
    /**
     * @private
     */
    password: string;
    private enforceProtectionHandler;
    constructor(viewer: LayoutViewer, owner: RestrictEditing);
    /**
     * @private
     */
    initDialog(localValue: base.L10n, isRtl?: boolean): void;
    /**
     * @private
     */
    show: () => void;
    hideDialog: () => void;
    /**
     * @private
     */
    okButtonClick: () => void;
    private failureHandler;
    private enforceProtection;
    private protectDocument;
}
/**
 * @private
 */
export  class UnProtectDocumentDialog {
    private viewer;
    private target;
    private passwordTextBox;
    private owner;
    private localObj;
    private currentHashValue;
    private currentSaltValue;
    private unProtectDocumentHandler;
    constructor(viewer: LayoutViewer, owner: RestrictEditing);
    /**
     * @private
     */
    initDialog(localValue: base.L10n, isRtl?: boolean): void;
    /**
     * @private
     */
    show: () => void;
    /**
     * @private
     */
    okButtonClick: () => void;
    private onUnProtectionSuccess;
    private failureHandler;
    /**
     * @private
     */
    hideDialog: () => void;
    private validateHashValue;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/restrict-editing/index.d.ts
/**
 * Restrict editing
 */
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/restrict-editing/restrict-editing-pane.d.ts
/**
 * @private
 */
export  class RestrictEditing {
    viewer: LayoutViewer;
    restrictPane: HTMLElement;
    allowFormatting: buttons.CheckBox;
    private addUser;
    private enforceProtection;
    private readonly;
    private allowFormat;
    private allowPrint;
    private allowCopy;
    private addUserDialog;
    enforceProtectionDialog: EnforceProtectionDialog;
    stopProtection: HTMLButtonElement;
    addRemove: boolean;
    /**
     * @private
     */
    unProtectDialog: UnProtectDocumentDialog;
    stopProtectionDiv: HTMLElement;
    restrictPaneWholeDiv: HTMLElement;
    private closeButton;
    protectionType: ProtectionType;
    restrictFormatting: boolean;
    private localObj;
    currentHashValue: string;
    currentSaltValue: string;
    isShowRestrictPane: boolean;
    base64: Base64;
    addedUser: lists.ListView;
    stopReadOnlyOptions: HTMLElement;
    usersCollection: string[];
    highlightCheckBox: buttons.CheckBox;
    constructor(viewer: LayoutViewer);
    showHideRestrictPane(isShow: boolean): void;
    private initPane;
    initRestrictEditingPane(localObj: base.L10n): void;
    showStopProtectionPane(show: boolean): void;
    private closePane;
    private wireEvents;
    private enableFormatting;
    private readOnlyChanges;
    private selectHandler;
    highlightClicked: (args: any) => void;
    private protectDocument;
    createCheckBox(label: string, element: HTMLInputElement): buttons.CheckBox;
    loadPaneValue(): void;
    navigateNextRegion: () => void;
    addUserCollection(): void;
    showAllRegion: () => void;
    updateUserInformation(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/search/index.d.ts
/**
 * Search Export
 */
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/search/options-pane.d.ts
/**
 * Options Pane class.
 */
export  class OptionsPane {
    private viewer;
    /**
     * @private
     */
    optionsPane: HTMLElement;
    /**
     * @private
     */
    isOptionsPaneShow: boolean;
    private resultsListBlock;
    private messageDiv;
    private results;
    private searchInput;
    private searchDiv;
    private searchTextBoxContainer;
    private replaceWith;
    private findDiv;
    private replaceDiv;
    private replaceButton;
    private replaceAllButton;
    private occurrenceDiv;
    private findOption;
    private matchCase;
    private wholeWord;
    private searchText;
    private resultsText;
    private messageDivText;
    private replaceButtonText;
    private replaceAllButtonText;
    private focusedIndex;
    private focusedElement;
    private resultContainer;
    private navigateToPreviousResult;
    private navigateToNextResult;
    private closeButton;
    private isOptionsPane;
    private findTab;
    private findTabButton;
    private replaceTabButton;
    private searchIcon;
    private matchDiv;
    private replacePaneText;
    private findPaneText;
    private matchDivReplaceText;
    private matchInput;
    private wholeInput;
    private regularInput;
    /**
     * @private
     */
    tabInstance: navigations.Tab;
    private findTabContentDiv;
    private replaceTabContentDiv;
    private findTabButtonHeader;
    private replaceTabButtonHeader;
    /**
     * @private
     */
    isReplace: boolean;
    private localeValue;
    /**
     * Constructor for Options pane module
     * @param {LayoutViewer} layoutViewer
     * @private
     */
    constructor(layoutViewer: LayoutViewer);
    /**
     * Get the module name.
     */
    private getModuleName;
    /**
     * Initialize the options pane.
     * @param {base.L10n} localeValue - Specifies the localization based on culture.
     * @private
     */
    initOptionsPane(localeValue: base.L10n, isRtl?: boolean): void;
    /**
     * Create replace pane instances.
     */
    private createReplacePane;
    /**
     * Gets selected tab item which tab is selected.
     * @param {navigations.SelectEventArgs} args - Specifies which tab will be opened.
     * @private
     */
    selectedTabItem: (args: navigations.SelectEventArgs) => void;
    private searchOptionChange;
    private navigateSearchResult;
    /**
     * Apply find option based on whole words value.
     * @param {buttons.ChangeEventArgs} args - Specifies the search options value.
     * @private
     */
    wholeWordsChange: (args: buttons.ChangeEventArgs) => void;
    /**
     * Apply find option based on match value.
     * @param {buttons.ChangeEventArgs} args - Specifies the search options value.
     * @private
     */
    matchChange: (args: buttons.ChangeEventArgs) => void;
    /**
     * Apply find options based on regular value.
     * @param {buttons.ChangeEventArgs} args - Specifies the search options value.
     * @private
     */
    /**
     * Binding events from the element when optins pane creation.
     * @private
     */
    onWireEvents: () => void;
    /**
     * Fires on key down actions done.
     * @private
     */
    onKeyDownInternal(): void;
    /**
     * Enable find pane only.
     * @private
     */
    onFindPane: () => void;
    private getMessageDivHeight;
    private onEnableDisableReplaceButton;
    /**
     * Enable replace pane only.
     * @private
     */
    onReplacePane: () => void;
    /**
     * Fires on key down on options pane.
     * @param {KeyboardEvent} event - Specifies the focus of current element.
     * @private
     */
    onKeyDownOnOptionPane: (event: KeyboardEvent) => void;
    /**
     * Fires on replace.
     * @private
     */
    onReplaceButtonClick: () => void;
    /**
     * Fires on replace all.
     * @private
     */
    onReplaceAllButtonClick: () => void;
    /**
     * Replace all.
     * @private
     */
    replaceAll(): void;
    /**
     * Fires on search icon.
     * @private
     */
    searchIconClickInternal: () => void;
    /**
     * Fires on getting next results.
     * @private
     */
    navigateNextResultButtonClick: () => void;
    private updateListItems;
    /**
     * Fires on getting previous results.
     * @private
     */
    navigatePreviousResultButtonClick: () => void;
    /**
     * Scrolls to position.
     * @param {HTMLElement} list - Specifies the list element.
     * @private
     */
    scrollToPosition(list: HTMLElement): void;
    /**
     * Fires on key down
     * @param {KeyboardEvent} event - Speficies key down actions.
     * @private
     */
    onKeyDown: (event: KeyboardEvent) => void;
    /**
     * Clear the focus elements.
     * @private
     */
    clearFocusElement(): void;
    /**
     * Close the optios pane.
     * @private
     */
    close: () => void;
    /**
     * Fires on results list block.
     * @param {MouseEvent} args - Specifies which list was clicked.
     * @private
     */
    resultListBlockClick: (args: MouseEvent) => void;
    /**
     * Show or hide option pane based on boolean value.
     * @param {boolean} show - Specifies showing or hiding the options pane.
     * @private
     */
    showHideOptionsPane(show: boolean): void;
    /**
     * Clears search results.
     * @private
     */
    clearSearchResultItems(): void;
    /**
     * Dispose the internal objects which are maintained.
     * @private
     */
    destroy(): void;
    /**
     * Dispose the internal objects which are maintained.
     */
    private destroyInternal;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/search/search-results.d.ts
/**
 * Search Result info
 */
export  class SearchResults {
    private searchModule;
    /**
     * Gets the length of search results.
     * @aspType int
     * @blazorType int
     */
    readonly length: number;
    /**
     * Gets the index of current search result.
     * @aspType int
     * @blazorType int
     */
    /**
    * Set the index of current search result.
    * @aspType int
    * @blazorType int
    */
    index: number;
    /**
     * @private
     */
    constructor(search: Search);
    /**
     * Replace text in current search result.
     * @param textToReplace text to replace
     * @private
     */
    replace(textToReplace: string): void;
    /**
     * Replace all the instance of search result.
     * @param textToReplace text to replace
     */
    replaceAll(textToReplace: string): void;
    /**
     * @private
     */
    navigate(index: number): void;
    /**
     * Clears all the instance of search result.
     */
    clear(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/search/search.d.ts
/**
 * Search module
 */
export  class Search {
    private owner;
    /**
     * @private
     */
    textSearch: TextSearch;
    /**
     * @private
     */
    textSearchResults: TextSearchResults;
    /**
     * @private
     */
    searchResultsInternal: SearchResults;
    /**
     * @private
     */
    searchHighlighters: Dictionary<LineWidget, SearchWidgetInfo[]>;
    private isHandledOddPageHeader;
    private isHandledEvenPageHeader;
    private isHandledOddPageFooter;
    private isHandledEvenPageFooter;
    /**
     * @private
     */
    readonly viewer: LayoutViewer;
    /**
     * Gets the search results object.
     * @aspType SearchResults
     * @blazorType SearchResults
     */
    readonly searchResults: SearchResults;
    /**
     * @private
     */
    constructor(owner: DocumentEditor);
    /**
     * Get the module name.
     */
    private getModuleName;
    /**
     * Finds the immediate occurrence of specified text from cursor position in the document.
     * @param  {string} text
     * @param  {FindOption} findOption? - Default value of ‘findOptions’ parameter is 'None'.
     * @private
     */
    find(text: string, findOptions?: FindOption): void;
    /**
     * Finds all occurrence of specified text in the document.
     * @param  {string} text
     * @param  {FindOption} findOption? - Default value of ‘findOptions’ parameter is 'None'.
     */
    findAll(text: string, findOptions?: FindOption): void;
    /**
     * Replace the searched string with specified string
     * @param  {string} replaceText
     * @param  {TextSearchResult} result
     * @param  {TextSearchResults} results
     * @private
     */
    replace(replaceText: string, result: TextSearchResult, results: TextSearchResults): number;
    /**
     * Find the textToFind string in current document and replace the specified string.
     * @param  {string} textToFind
     * @param  {string} textToReplace
     * @param  {FindOption} findOptions? - Default value of ‘findOptions’ parameter is FindOption.None.
     * @private
     */
    replaceInternal(textToReplace: string, findOptions?: FindOption): void;
    /**
     * Replace all the searched string with specified string
     * @param  {string} replaceText
     * @param  {TextSearchResults} results
     * @private
     */
    replaceAll(replaceText: string, results: TextSearchResults): number;
    /**
     * Find the textToFind string in current document and replace the specified string.
     * @param  {string} textToFind
     * @param  {string} textToReplace
     * @param  {FindOption} findOptions? - Default value of ‘findOptions’ parameter is FindOption.None.
     * @private
     */
    replaceAllInternal(textToReplace: string, findOptions?: FindOption): void;
    /**
     * @private
     */
    navigate(textSearchResult: TextSearchResult): void;
    /**
     * @private
     */
    highlight(textSearchResults: TextSearchResults): void;
    /**
     * @private
     */
    highlightResult(result: TextSearchResult): void;
    /**
     * Highlight search result
     * @private
     */
    highlightSearchResult(paragraph: ParagraphWidget, start: TextPosition, end: TextPosition): void;
    /**
     * @private
     */
    createHighlightBorder(lineWidget: LineWidget, width: number, left: number, top: number): void;
    /**
     * Adds search highlight border.
     * @private
     */
    addSearchHighlightBorder(lineWidget: LineWidget): SearchWidgetInfo;
    /**
     * @private
     */
    highlightSearchResultParaWidget(widget: ParagraphWidget, startIndex: number, endLine: LineWidget, endElement: ElementBox, endIndex: number): void;
    /**
     * @private
     */
    addSearchResultItems(result: string): void;
    /**
     * @private
     */
    addFindResultView(textSearchResults: TextSearchResults): void;
    /**
     * @private
     */
    addFindResultViewForSearch(result: TextSearchResult): void;
    /**
     * Clears search highlight.
     * @private
     */
    clearSearchHighlight(): void;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/search/text-search-result.d.ts
/**
 * @private
 */
export  class TextSearchResult {
    private startIn;
    private endIn;
    private owner;
    /**
     * @private
     */
    isHeader: boolean;
    /**
     * @private
     */
    isFooter: boolean;
    readonly viewer: LayoutViewer;
    start: TextPosition;
    end: TextPosition;
    readonly text: string;
    constructor(owner: DocumentEditor);
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/search/text-search-results.d.ts
/**
 * @private
 */
export  class TextSearchResults {
    innerList: TextSearchResult[];
    currentIndex: number;
    private owner;
    readonly length: number;
    readonly currentSearchResult: TextSearchResult;
    constructor(owner: DocumentEditor);
    addResult(): TextSearchResult;
    clearResults(): void;
    indexOf(result: TextSearchResult): number;
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/search/text-search.d.ts
/**
 * @private
 */
export  class TextSearch {
    private wordBefore;
    private wordAfter;
    private owner;
    private isHeader;
    private isFooter;
    readonly viewer: LayoutViewer;
    constructor(owner: DocumentEditor);
    find(pattern: string | RegExp, findOption?: FindOption): TextSearchResult;
    findNext(pattern: string | RegExp, findOption?: FindOption, hierarchicalPosition?: string): TextSearchResult;
    stringToRegex(textToFind: string, option: FindOption): RegExp;
    isPatternEmpty(pattern: RegExp): boolean;
    findAll(pattern: string | RegExp, findOption?: FindOption, hierarchicalPosition?: string): TextSearchResults;
    /**
     * Method to retrieve text from a line widget
     * @param  {ElementBox} inlineElement
     * @param {number} indexInInline
     * @param {boolean} includeNextLine
     * @private
     */
    getElementInfo(inlineElement: ElementBox, indexInInline: number, includeNextLine?: boolean): TextInLineInfo;
    /**
     * Method to update location for matched text
     * @param {RegExpExecArray} matches
     * @param {TextSearchResults} results
     * @param {Dictionary<TextElementBox, number>} textInfo
     * @param {number}indexInInline
     * @param {boolean} isInline
     * @param {boolean}isFirstMatch
     * @param {TextPosition}selectionEnd
     */
    updateMatchedTextLocation(matches: RegExpExecArray[], results: TextSearchResults, textInfo: Dictionary<TextElementBox, number>, indexInInline: number, inlines: ElementBox, isFirstMatch: boolean, selectionEnd: TextPosition, startPosition?: number): void;
    private findDocument;
    private findInlineText;
    private findInline;
    /**
     * Method to get text position
     * @param {LineWidget} lineWidget
     * @param {string} hierarchicalIndex
     * @private
     */
    getTextPosition(lineWidget: LineWidget, hierarchicalIndex: string): TextPosition;
}
/**
 * @private
 */
export  class SearchWidgetInfo {
    private leftInternal;
    private widthInternal;
    left: number;
    width: number;
    constructor(left: number, width: number);
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/selection/index.d.ts
/**
 * Selection Export
 */
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/selection/selection-format.d.ts
/**
 * Selection character format implementation
 */
export  class SelectionCharacterFormat {
    /**
     * @private
     */
    selection: Selection;
    private boldIn;
    private italicIn;
    private underlineIn;
    private strikeThroughIn;
    private baselineAlignmentIn;
    private highlightColorIn;
    private fontSizeIn;
    private fontFamilyIn;
    private fontColorIn;
    /**
     * @private
     */
    boldBidi: boolean;
    /**
     * @private
     */
    italicBidi: boolean;
    /**
     * @private
     */
    fontSizeBidi: number;
    /**
     * @private
     */
    fontFamilyBidi: string;
    /**
     * @private
     */
    bidi: boolean;
    /**
     * @private
     */
    private bdo;
    /**
     * @private
     */
    styleName: string;
    /**
     * Gets the font size of selected contents.
     * @aspType int
     * @blazorType int
     */
    /**
    * Sets the font size of selected contents.
    * @aspType int
    * @blazorType int
    */
    fontSize: number;
    /**
     * Gets or sets the font family of selected contents.
     * @aspType string
     * @blazorType string
     */
    /**
    * Sets the font family of selected contents.
    * @aspType string
    * @blazorType string
    */
    fontFamily: string;
    /**
     * Gets or sets the font color of selected contents.
     * @aspType string
     * @blazorType string
     */
    /**
    * Sets the font color of selected contents.
    * @aspType string
    * @blazorType string
    */
    fontColor: string;
    /**
     * Gets or sets the bold formatting of selected contents.
     * @aspType bool
     * @blazorType bool
     */
    /**
    * Sets the bold formatting of selected contents.
    * @aspType bool
    * @blazorType bool
    */
    bold: boolean;
    /**
     * Gets or sets the italic formatting of selected contents.
     * @aspType bool
     * @blazorType bool
     */
    /**
    * Sets the italic formatting of selected contents.
    * @aspType bool
    * @blazorType bool
    */
    italic: boolean;
    /**
     * Gets or sets the strikethrough property of selected contents.
     */
    /**
    * Sets the strikethrough property of selected contents.
    */
    strikethrough: Strikethrough;
    /**
     * Gets or sets the baseline alignment property of selected contents.
     */
    /**
    * Sets the baseline alignment property of selected contents.
    */
    baselineAlignment: BaselineAlignment;
    /**
     * Gets or sets the underline style of selected contents.
     */
    /**
    * Sets the underline style of selected contents.
    */
    underline: Underline;
    /**
     * Gets or sets the highlight color of selected contents.
     */
    /**
    * Sets the highlight color of selected contents.
    */
    highlightColor: HighlightColor;
    /**
     * @private
     */
    constructor(selection: Selection);
    private getPropertyValue;
    /**
     * Notifies whenever property gets changed.
     * @param  {string} propertyName
     */
    private notifyPropertyChanged;
    /**
     * Copies the source format.
     * @param  {WCharacterFormat} format
     * @returns void
     * @private
     */
    copyFormat(format: WCharacterFormat): void;
    /**
     * Combines the format.
     * @param  {WCharacterFormat} format
     * @private
     */
    combineFormat(format: WCharacterFormat): void;
    /**
     * Clones the format.
     * @param  {SelectionCharacterFormat} selectionCharacterFormat
     * @returns void
     * @private
     */
    cloneFormat(selectionCharacterFormat: SelectionCharacterFormat): void;
    /**
     * Checks whether current format is equal to the source format or not.
     * @param  {SelectionCharacterFormat} format
     * @returns boolean
     * @private
     */
    isEqualFormat(format: SelectionCharacterFormat): boolean;
    /**
     * Clears the format.
     * @returns void
     * @private
     */
    clearFormat(): void;
    /**
     * Destroys the maintained resources.
     * @returns void
     * @private
     */
    destroy(): void;
}
/**
 * Selection paragraph format implementation
 */
export  class SelectionParagraphFormat {
    private selection;
    private leftIndentIn;
    private rightIndentIn;
    private beforeSpacingIn;
    private afterSpacingIn;
    private textAlignmentIn;
    private firstLineIndentIn;
    private lineSpacingIn;
    private lineSpacingTypeIn;
    private bidiIn;
    private contextualSpacingIn;
    /**
     * @private
     */
    listId: number;
    private listLevelNumberIn;
    private viewer;
    /**
     * @private
     */
    styleName: string;
    /**
     * Gets or Sets the left indent for selected paragraphs.
     * @default undefined
     * @aspType int
     * @blazorType int
     */
    /**
    * Sets the left indent for selected paragraphs.
    * @default undefined
    * @aspType int
    * @blazorType int
    */
    leftIndent: number;
    /**
     * Gets or Sets the right indent for selected paragraphs.
     * @default undefined
     * @aspType int
     * @blazorType int
     */
    /**
    * Sets the right indent for selected paragraphs.
    * @default undefined
    * @aspType int
    * @blazorType int
    */
    rightIndent: number;
    /**
     * Gets or Sets the first line indent for selected paragraphs.
     * @default undefined
     * @aspType int
     * @blazorType int
     */
    /**
    * Sets the first line indent for selected paragraphs.
    * @default undefined
    * @aspType int
    * @blazorType int
    */
    firstLineIndent: number;
    /**
     * Gets or Sets the text alignment for selected paragraphs.
     * @default undefined
     */
    /**
    * Sets the text alignment for selected paragraphs.
    * @default undefined
    */
    textAlignment: TextAlignment;
    /**
     * Sets the after spacing for selected paragraphs.
     * @default undefined
     * @aspType int
     * @blazorType int
     */
    /**
    * Gets or Sets the after spacing for selected paragraphs.
    * @default undefined
    * @aspType int
    * @blazorType int
    */
    afterSpacing: number;
    /**
     * Gets or Sets the before spacing for selected paragraphs.
     * @default undefined
     * @aspType int
     * @blazorType int
     */
    /**
    * Sets the before spacing for selected paragraphs.
    * @default undefined
    * @aspType int
    * @blazorType int
    */
    beforeSpacing: number;
    /**
     * Gets or Sets the line spacing for selected paragraphs.
     * @default undefined
     * @aspType int
     * @blazorType int
     */
    /**
    * Sets the line spacing for selected paragraphs.
    * @default undefined
    * @aspType int
    * @blazorType int
    */
    lineSpacing: number;
    /**
     * Gets or Sets the line spacing type for selected paragraphs.
     * @default undefined
     */
    /**
    * Gets or Sets the line spacing type for selected paragraphs.
    * @default undefined
    */
    lineSpacingType: LineSpacingType;
    /**
     * Sets the list level number for selected paragraphs.
     * @default undefined
     * @aspType int
     * @blazorType int
     */
    /**
    * Gets or Sets the list level number for selected paragraphs.
    * @default undefined
    * @aspType int
    * @blazorType int
    */
    listLevelNumber: number;
    /**
     * Gets or Sets the bidirectional property for selected paragraphs
     * @aspType bool
     * @blazorType bool
     */
    /**
    * Sets the bidirectional property for selected paragraphs
    * @aspType bool
    * @blazorType bool
    */
    bidi: boolean;
    /**
     * Gets or sets a value indicating whether to add space between the paragraphs of same style.
     * @aspType bool
     * @blazorType bool
     */
    /**
    * Sets a value indicating whether to add space between the paragraphs of same style.
    * @aspType bool
    * @blazorType bool
    */
    contextualSpacing: boolean;
    /**
     * Gets the list text for selected paragraphs.
     * @aspType string
     * @blazorType string
     */
    readonly listText: string;
    /**
     * @private
     */
    constructor(selection: Selection, viewer: LayoutViewer);
    private getPropertyValue;
    /**
     * Notifies whenever the property gets changed.
     * @param  {string} propertyName
     */
    private notifyPropertyChanged;
    /**
     * Copies the format.
     * @param  {WParagraphFormat} format
     * @returns void
     * @private
     */
    copyFormat(format: WParagraphFormat): void;
    /**
     * Copies to format.
     * @param  {WParagraphFormat} format
     * @private
     */
    copyToFormat(format: WParagraphFormat): void;
    /**
     * Combines the format.
     * @param  {WParagraphFormat} format
     * @private
     */
    combineFormat(format: WParagraphFormat): void;
    /**
     * Clears the format.
     * @returns void
     * @private
     */
    clearFormat(): void;
    /**
     * Gets the clone of list at current selection.
     * @returns WList
     * @private
     */
    getList(): WList;
    /**
     * Modifies the list at current selection.
     * @param  {WList} listAdv
     * @private
     */
    setList(listAdv: WList): void;
    /**
     * Destroys the managed resources.
     * @returns void
     * @private
     */
    destroy(): void;
}
/**
 * Selection section format implementation
 */
export  class SelectionSectionFormat {
    private selection;
    private differentFirstPageIn;
    private differentOddAndEvenPagesIn;
    private headerDistanceIn;
    private footerDistanceIn;
    private pageHeightIn;
    private pageWidthIn;
    private leftMarginIn;
    private topMarginIn;
    private rightMarginIn;
    private bottomMarginIn;
    /**
     * private
     */
    bidi: boolean;
    /**
     * Gets or sets the page height.
     * @aspType int
     * @blazorType int
     */
    /**
    * Gets or sets the page height.
    * @aspType int
    * @blazorType int
    */
    pageHeight: number;
    /**
     * Gets or sets the page width.
     * @aspType int
     * @blazorType int
     */
    /**
    * Gets or sets the page width.
    * @aspType int
    * @blazorType int
    */
    pageWidth: number;
    /**
     * Gets or sets the page left margin.
     * @aspType int
     * @blazorType int
     */
    /**
    * Gets or sets the page left margin.
    * @aspType int
    * @blazorType int
    */
    leftMargin: number;
    /**
     * Gets or sets the page bottom margin.
     * @aspType int
     * @blazorType int
     */
    /**
    * Gets or sets the page bottom margin.
    * @aspType int
    * @blazorType int
    */
    bottomMargin: number;
    /**
     * Gets or sets the page top margin.
     * @aspType int
     * @blazorType int
     */
    /**
    * Gets or sets the page top margin.
    * @aspType int
    * @blazorType int
    */
    topMargin: number;
    /**
     * Gets or sets the page right margin.
     * @aspType int
     * @blazorType int
     */
    /**
    * Gets or sets the page right margin.
    * @aspType int
    * @blazorType int
    */
    rightMargin: number;
    /**
     * Gets or sets the header distance.
     * @aspType int
     * @blazorType int
     */
    /**
    * Gets or sets the header distance.
    * @aspType int
    * @blazorType int
    */
    headerDistance: number;
    /**
     * Gets or sets the footer distance.
     * @aspType int
     * @blazorType int
     */
    /**
    * Gets or sets the footer distance.
    * @aspType int
    * @blazorType int
    */
    footerDistance: number;
    /**
     * Gets or sets a value indicating whether the section has different first page.
     * @aspType bool
     * @blazorType bool
     */
    /**
    * Gets or sets a value indicating whether the section has different first page.
    * @aspType bool
    * @blazorType bool
    */
    differentFirstPage: boolean;
    /**
     * Gets or sets a value indicating whether the section has different odd and even page.
     * @aspType bool
     * @blazorType bool
     */
    /**
    * Gets or sets a value indicating whether the section has different odd and even page.
    * @aspType bool
    * @blazorType bool
    */
    differentOddAndEvenPages: boolean;
    /**
     * @private
     */
    constructor(selection: Selection);
    /**
     * Copies the format.
     * @param  {WSectionFormat} format
     * @returns void
     * @private
     */
    copyFormat(format: WSectionFormat): void;
    private notifyPropertyChanged;
    private getPropertyvalue;
    /**
     * Combines the format.
     * @param  {WSectionFormat} format
     * @private
     */
    combineFormat(format: WSectionFormat): void;
    /**
     * Clears the format.
     * @returns void
     * @private
     */
    clearFormat(): void;
    /**
     * Destroys the managed resources.
     * @returns void
     * @private
     */
    destroy(): void;
}
/**
 * Selection table format implementation
 */
export  class SelectionTableFormat {
    private selection;
    private tableIn;
    private leftIndentIn;
    private backgroundIn;
    private tableAlignmentIn;
    private cellSpacingIn;
    private leftMarginIn;
    private rightMarginIn;
    private topMarginIn;
    private bottomMarginIn;
    private preferredWidthIn;
    private preferredWidthTypeIn;
    private bidiIn;
    /**
     * Gets or sets the table.
     * @private
     */
    table: TableWidget;
    /**
     * Gets or Sets the left indent for selected table.
     * @aspType int
     * @blazorType int
     */
    /**
    * Gets or Sets the left indent for selected table.
    * @aspType int
    * @blazorType int
    */
    leftIndent: number;
    /**
     * Gets or Sets the default top margin of cell for selected table.
     * @default undefined
     * @aspType int
     * @blazorType int
     */
    /**
    * Gets or Sets the default top margin of cell for selected table.
    * @default undefined
    * @aspType int
    * @blazorType int
    */
    topMargin: number;
    /**
     * Gets or Sets the background for selected table.
     * @default undefined
     * @aspType string
     * @blazorType string
     */
    /**
    * Gets or Sets the background for selected table.
    * @default undefined
    * @aspType string
    * @blazorType string
    */
    background: string;
    /**
     * Gets or Sets the table alignment for selected table.
     * @default undefined
     */
    /**
    * Gets or Sets the table alignment for selected table.
    * @default undefined
    */
    tableAlignment: TableAlignment;
    /**
     * Gets or Sets the default left margin of cell for selected table.
     * @default undefined
     * @aspType int
     * @blazorType int
     */
    /**
    * Gets or Sets the default left margin of cell for selected table.
    * @default undefined
    * @aspType int
    * @blazorType int
    */
    leftMargin: number;
    /**
     * Gets or Sets the default bottom margin of cell for selected table.
     * @default undefined
     * @aspType int
     * @blazorType int
     */
    /**
    * Gets or Sets the default bottom margin of cell for selected table.
    * @default undefined
    * @aspType int
    * @blazorType int
    */
    bottomMargin: number;
    /**
     * Gets or Sets the cell spacing for selected table.
     * @default undefined
     * @aspType int
     * @blazorType int
     */
    /**
    * Gets or Sets the cell spacing for selected table.
    * @default undefined
    * @aspType int
    * @blazorType int
    */
    cellSpacing: number;
    /**
     * Gets or Sets the default right margin of cell for selected table.
     * @default undefined
     * @aspType int
     * @blazorType int
     */
    /**
    * Gets or Sets the default right margin of cell for selected table.
    * @default undefined
    * @aspType int
    * @blazorType int
    */
    rightMargin: number;
    /**
     * Gets or Sets the preferred width for selected table.
     * @default undefined
     * @aspType int
     * @blazorType int
     */
    /**
    * Gets or Sets the preferred width for selected table.
    * @default undefined
    * @aspType int
    * @blazorType int
    */
    preferredWidth: number;
    /**
     * Gets or Sets the preferred width type for selected table.
     * @default undefined
     */
    /**
    * Gets or Sets the preferred width type for selected table.
    * @default undefined
    */
    preferredWidthType: WidthType;
    /**
     * Gets or sets the bidi property
     * @aspType bool
     * @blazorType bool
     */
    /**
    * Gets or sets the bidi property
    * @aspType bool
    * @blazorType bool
    */
    bidi: boolean;
    /**
     * @private
     */
    constructor(selection: Selection);
    private getPropertyValue;
    private notifyPropertyChanged;
    /**
     * Copies the format.
     * @param  {WTableFormat} format Format to copy.
     * @returns void
     * @private
     */
    copyFormat(format: WTableFormat): void;
    /**
     * Clears the format.
     * @returns void
     * @private
     */
    clearFormat(): void;
    /**
     * Destroys the managed resources.
     * @returns void
     * @private
     */
    destroy(): void;
}
/**
 * Selection cell format implementation
 */
export  class SelectionCellFormat {
    private selection;
    private verticalAlignmentIn;
    private leftMarginIn;
    private rightMarginIn;
    private topMarginIn;
    private bottomMarginIn;
    private backgroundIn;
    private preferredWidthIn;
    private preferredWidthTypeIn;
    /**
     * Gets or sets the vertical alignment of the selected cells.
     * @default undefined
     */
    /**
    * Gets or sets the vertical alignment of the selected cells.
    * @default undefined
    */
    verticalAlignment: CellVerticalAlignment;
    /**
     * Gets or Sets the left margin for selected cells.
     * @default undefined
     * @aspType int
     * @blazorType int
     */
    /**
    * Gets or Sets the left margin for selected cells.
    * @default undefined
    * @aspType int
    * @blazorType int
    */
    leftMargin: number;
    /**
     * Gets or Sets the right margin for selected cells.
     * @default undefined
     * @aspType int
     * @blazorType int
     */
    /**
    * Gets or Sets the right margin for selected cells.
    * @default undefined
    * @aspType int
    * @blazorType int
    */
    rightMargin: number;
    /**
     * Gets or Sets the top margin for selected cells.
     * @default undefined
     * @aspType int
     * @blazorType int
     */
    /**
    * Gets or Sets the top margin for selected cells.
    * @default undefined
    * @aspType int
    * @blazorType int
    */
    topMargin: number;
    /**
     * Gets or Sets the bottom margin for selected cells.
     * @default undefined
     * @aspType int
     * @blazorType int
     */
    /**
    * Gets or Sets the bottom margin for selected cells.
    * @default undefined
    * @aspType int
    * @blazorType int
    */
    bottomMargin: number;
    /**
     * Gets or Sets the background for selected cells.
     * @default undefined
     * @aspType string
     * @blazorType string
     */
    /**
    * Gets or Sets the background for selected cells.
    * @default undefined
    * @aspType string
    * @blazorType string
    */
    /* tslint:enable */
    background: string;
    /**
     * Gets or Sets the preferred width type for selected cells.
     * @default undefined
     */
    /**
    * Gets or Sets the preferred width type for selected cells.
    * @default undefined
    */
    preferredWidthType: WidthType;
    /**
     * Gets or Sets the preferred width  for selected cells.
     * @default undefined
     * @aspType int
     * @blazorType int
     */
    /**
    * Gets or Sets the preferred width  for selected cells.
    * @default undefined
    * @aspType int
    * @blazorType int
    */
    preferredWidth: number;
    /**
     * @private
     */
    constructor(selection: Selection);
    private notifyPropertyChanged;
    private getPropertyValue;
    /**
     * Copies the format.
     * @param  {WCellFormat} format Source Format to copy.
     * @returns void
     * @private
     */
    copyFormat(format: WCellFormat): void;
    /**
     * Clears the format.
     * @returns void
     * @private
     */
    clearCellFormat(): void;
    /**
     * Combines the format.
     * @param  {WCellFormat} format
     * @private
     */
    combineFormat(format: WCellFormat): void;
    /**
     * Clears the format.
     * @returns void
     * @private
     */
    clearFormat(): void;
    /**
     * Destroys the manages resources.
     * @returns void
     * @private
     */
    destroy(): void;
}
/**
 * Selection row format implementation
 */
export  class SelectionRowFormat {
    private selection;
    private heightIn;
    private heightTypeIn;
    private isHeaderIn;
    private allowRowBreakAcrossPagesIn;
    /**
     * Gets or Sets the height for selected rows.
     * @default undefined
     * @aspType int
     * @blazorType int
     */
    /**
    * Gets or Sets the height for selected rows.
    * @default undefined
    * @aspType int
    * @blazorType int
    */
    height: number;
    /**
     * Gets or Sets the height type for selected rows.
     * @default undefined
     */
    /**
    * Gets or Sets the height type for selected rows.
    * @default undefined
    */
    heightType: HeightType;
    /**
     * Gets or Sets a value indicating whether the selected rows are header rows or not.
     * @default undefined
     * @aspType bool
     * @blazorType bool
     */
    /**
    * Gets or Sets a value indicating whether the selected rows are header rows or not.
    * @default undefined
    * @aspType bool
    * @blazorType bool
    */
    isHeader: boolean;
    /**
     * Gets or Sets a value indicating whether to allow break across pages for selected rows.
     * @default undefined
     * @aspType bool
     * @blazorType bool
     */
    /**
    * Gets or Sets a value indicating whether to allow break across pages for selected rows.
    * @default undefined
    * @aspType bool
    * @blazorType bool
    */
    allowBreakAcrossPages: boolean;
    /**
     * @private
     */
    constructor(selection: Selection);
    private notifyPropertyChanged;
    private getPropertyValue;
    /**
     * Copies the format.
     * @param  {WRowFormat} format
     * @returns void
     * @private
     */
    copyFormat(format: WRowFormat): void;
    /**
     * Combines the format.
     * @param  {WRowFormat} format
     * @private
     */
    combineFormat(format: WRowFormat): void;
    /**
     * Clears the row format.
     * @returns void
     * @private
     */
    clearRowFormat(): void;
    /**
     * Clears the format.
     * @returns void
     * @private
     */
    clearFormat(): void;
    /**
     * Destroys the managed resources.
     * @returns void
     * @private
     */
    destroy(): void;
}
/**
 * Selection image format implementation
 */
export  class SelectionImageFormat {
    /**
     * @private
     */
    image: ImageElementBox;
    /**
     * @private
     */
    selection: Selection;
    /**
     * Gets the width of the image.
     * @aspType int
     * @blazorType int
     */
    readonly width: number;
    /**
     * Gets the height of the image.
     * @aspType int
     * @blazorType int
     */
    readonly height: number;
    /**
     * @private
     */
    constructor(selection: Selection);
    /**
     * Resizes the image based on given size.
     * @param width
     * @param height
     */
    resize(width: number, height: number): void;
    /**
     * Update image width and height
     * @private
     */
    updateImageFormat(width: number, height: number): void;
    /**
     * @private
     */
    copyImageFormat(image: ImageElementBox): void;
    /**
     * @private
     */
    clearImageFormat(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/selection/selection-helper.d.ts
/**
 * @private
 */
export  class TextPosition {
    /**
     * @private
     */
    currentWidget: LineWidget;
    /**
     * @private
     */
    offset: number;
    /**
     * @private
     */
    owner: DocumentEditor;
    /**
     * @private
     */
    location: Point;
    private viewer;
    /**
     * @private
     */
    isUpdateLocation: boolean;
    /**
     * @private
     */
    readonly paragraph: ParagraphWidget;
    /**
     * @private
     */
    readonly isAtParagraphStart: boolean;
    /**
     * @private
     */
    readonly isAtParagraphEnd: boolean;
    /**
     * @private
     */
    readonly isCurrentParaBidi: boolean;
    /**
     * @private
     */
    readonly selection: Selection;
    /**
     * Gets the hierarchical position of logical text position in the document
     * @returns {string}
     */
    readonly hierarchicalPosition: string;
    constructor(owner: DocumentEditor);
    /**
     * Return clone of current text position
     * @private
     */
    clone(): TextPosition;
    /**
     * @private
     */
    containsRtlText(widget: LineWidget): boolean;
    /**
     * Set text position for paragraph and inline
     * @private
     */
    setPositionForSelection(line: LineWidget, element: ElementBox, index: number, physicalLocation: Point): void;
    /**
     * Set text position
     * @private
     */
    setPositionFromLine(line: LineWidget, offset: number, location?: Point): void;
    /**
     * Set text position
     * @private
     */
    setPosition(line: LineWidget, positionAtStart: boolean): void;
    /**
     * Set position for text position
     * @private
     */
    setPositionInternal(textPosition: TextPosition): void;
    /**
     * Set position for current index
     * @private
     */
    setPositionForCurrentIndex(hierarchicalIndex: string): void;
    /**
     * Get Page
     */
    getPage(position: IndexInfo): Page;
    /**
     * @private
     */
    getParagraphWidget(position: IndexInfo): LineWidget;
    /**
     * @private
     */
    getLineWidget(widget: Widget, position: IndexInfo, page?: Page): LineWidget;
    /**
     * Update physical location of paragraph
     * @private
     */
    updatePhysicalPosition(moveNextLine: boolean): void;
    /**
     * Return true if text position are in same paragraph and offset
     * @private
     */
    isAtSamePosition(textPosition: TextPosition): boolean;
    /**
     * Return true if text position is in same paragraph
     * @private
     */
    isInSameParagraph(textPosition: TextPosition): boolean;
    /**
     * Return true is current text position exist before given text position
     * @private
     */
    isExistBefore(textPosition: TextPosition): boolean;
    /**
     * Return true is current text position exist after given text position
     * @private
     */
    isExistAfter(textPosition: TextPosition): boolean;
    /**
     * Return hierarchical index of current text position
     * @private
     */
    getHierarchicalIndexInternal(): string;
    /**
     * @private
     */
    getHierarchicalIndex(line: LineWidget, hierarchicalIndex: string): string;
    /**
     * @private
     */
    setPositionParagraph(line: LineWidget, offsetInLine: number): void;
    /**
     * @private
     */
    setPositionForLineWidget(lineWidget: LineWidget, offset: number): void;
    /**
     * move to next text position
     * @private
     */
    moveNextPosition(isNavigate?: boolean): void;
    /**
     * Move text position to previous paragraph inside table
     * @private
     */
    moveToPreviousParagraphInTable(selection: Selection): void;
    private updateOffsetToNextParagraph;
    private updateOffsetToPrevPosition;
    /**
     * Moves the text position to start of the next paragraph.
     */
    moveToNextParagraphStartInternal(): void;
    /**
     * Move to previous position
     * @private
     */
    movePreviousPosition(): void;
    /**
     * Move to next position
     * @private
     */
    moveNextPositionInternal(fieldBegin: FieldElementBox): void;
    /**
     * Move text position backward
     * @private
     */
    moveBackward(): void;
    /**
     * Move text position forward
     * @private
     */
    moveForward(): void;
    /**
     * Move to given inline
     * @private
     */
    moveToInline(inline: ElementBox, index: number): void;
    /**
     * Return true is start element exist before end element
     * @private
     */
    static isForwardSelection(start: string, end: string): boolean;
    /**
     * Move to previous position offset
     * @private
     */
    movePreviousPositionInternal(fieldEnd: FieldElementBox): void;
    /**
     * Moves the text position to start of the word.
     * @private
     */
    moveToWordStartInternal(type: number): void;
    /**
     * Get next word offset
     * @private
     */
    getNextWordOffset(inline: ElementBox, indexInInline: number, type: number, isInField: boolean, endSelection: boolean, endPosition: TextPosition, excludeSpace: boolean): void;
    /**
     * get next word offset from field begin
     * @private
     */
    getNextWordOffsetFieldBegin(fieldBegin: FieldElementBox, indexInInline: number, type: number, isInField: boolean, endSelection: boolean, endPosition: TextPosition, excludeSpace: boolean): void;
    /**
     * get next word offset from image
     * @private
     */
    getNextWordOffsetImage(image: ImageElementBox, indexInInline: number, type: number, isInField: boolean, endSelection: boolean, endPosition: TextPosition, excludeSpace: boolean): void;
    /**
     * get next word offset from span
     */
    private getNextWordOffsetSpan;
    /**
     * get next word offset from field separator
     * @private
     */
    private getNextWordOffsetFieldSeperator;
    /**
     * get next word offset from field end
     * @private
     */
    private getNextWordOffsetFieldEnd;
    /**
     * Get previous word offset
     * @private
     */
    private getPreviousWordOffset;
    private getPreviousWordOffsetBookMark;
    /**
     * get previous word offset from field end
     * @private
     */
    private getPreviousWordOffsetFieldEnd;
    /**
     * get previous word offset from field separator
     * @private
     */
    private getPreviousWordOffsetFieldSeparator;
    /**
     * get previous word offset from field begin
     * @private
     */
    private getPreviousWordOffsetFieldBegin;
    /**
     * get previous word offset from image
     * @private
     */
    private getPreviousWordOffsetImage;
    /**
     * Get previous word offset from span
     * @private
     */
    private getPreviousWordOffsetSpan;
    /**
     * set previous word offset in span
     * @private
     */
    private setPreviousWordOffset;
    /**
     * Validate if text position is in field forward
     * @private
     */
    validateForwardFieldSelection(currentIndex: string, selectionEndIndex: string): void;
    /**
     * Validate if text position is in field backward
     * @private
     */
    validateBackwardFieldSelection(currentIndex: string, selectionEndIndex: string): void;
    /**
     * @private
     */
    paragraphStartInternal(selection: Selection, moveToPreviousParagraph: boolean): void;
    /**
     * @private
     */
    calculateOffset(): void;
    /**
     * Moves the text position to start of the paragraph.
     * @private
     */
    moveToParagraphStartInternal(selection: Selection, moveToPreviousParagraph: boolean): void;
    /**
     * Moves the text position to end of the paragraph.
     * @private
     */
    moveToParagraphEndInternal(selection: Selection, moveToNextParagraph: boolean): void;
    /**
     * @private
     */
    moveUp(selection: Selection, left: number): void;
    /**
     * @private
     */
    moveDown(selection: Selection, left: number): void;
    /**
     * Moves the text position to start of the line.
     * @private
     */
    moveToLineStartInternal(selection: Selection, moveToPreviousLine: boolean): void;
    /**
     * Check paragraph is inside table
     * @private
     */
    moveToNextParagraphInTableCheck(): boolean;
    /**
     * Moves the text position to end of the word.
     * @private
     */
    moveToWordEndInternal(type: number, excludeSpace: boolean): void;
    /**
     * move text position to next paragraph inside table
     * @private
     */
    moveToNextParagraphInTable(): void;
    /**
     * Moves the text position to start of the previous paragraph.
     */
    moveToPreviousParagraph(selection: Selection): void;
    /**
     * Move to previous line from current position
     * @private
     */
    moveToPreviousLine(selection: Selection, left: number): void;
    /**
     * @private
     */
    moveToLineEndInternal(selection: Selection, moveToNextLine: boolean): void;
    /**
     * Move to next line
     * @private
     */
    moveToNextLine(left: number): void;
    /**
     * Move upward in table
     * @private
     */
    private moveUpInTable;
    /**
     * Move down inside table
     * @private
     */
    private moveDownInTable;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class SelectionWidgetInfo {
    private leftIn;
    private widthIn;
    color: string;
    /**
     * @private
     */
    /**
    * @private
    */
    left: number;
    /**
     * @private
     */
    /**
    * @private
    */
    width: number;
    constructor(left: number, width: number);
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class Hyperlink {
    private linkInternal;
    private localRef;
    private typeInternal;
    private opensNewWindow;
    /**
     * Gets navigation link.
     * @returns string
     * @private
     */
    readonly navigationLink: string;
    /**
     * Gets the local reference if any.
     * @returns string
     * @private
     */
    readonly localReference: string;
    /**
     * Gets hyper link type.
     * @returns HyperLinkType
     * @private
     */
    readonly linkType: HyperlinkType;
    constructor(fieldBeginAdv: FieldElementBox, selection: Selection);
    /**
     * Parse field values
     * @param  {string} value
     * @returns Void
     */
    private parseFieldValues;
    private parseFieldValue;
    private setLinkType;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class ImageFormat {
    /**
     * @private
     */
    width: number;
    /**
     * @private
     */
    height: number;
    /**
     * Constructor for image format class
     * @param imageContainer - Specifies for image width and height values.
     */
    constructor(imageContainer: ImageElementBox);
    /**
     * Dispose the internal objects which are maintained.
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/selection/selection.d.ts
/**
 * Selection
 */
export  class Selection {
    /**
     * @private
     */
    owner: DocumentEditor;
    /**
     * @private
     */
    upDownSelectionLength: number;
    /**
     * @private
     */
    isSkipLayouting: boolean;
    /**
     * @private
     */
    isImageSelected: boolean;
    private viewer;
    private contextTypeInternal;
    /**
     * @private
     */
    caret: HTMLDivElement;
    /**
     * @private
     */
    isRetrieveFormatting: boolean;
    private characterFormatIn;
    private paragraphFormatIn;
    private sectionFormatIn;
    private tableFormatIn;
    private cellFormatIn;
    private rowFormatIn;
    private imageFormatInternal;
    /**
     * @private
     */
    skipFormatRetrieval: boolean;
    private startInternal;
    private endInternal;
    private htmlWriterIn;
    private toolTipElement;
    private toolTipObject;
    private toolTipField;
    private isMoveDownOrMoveUp;
    /**
     * @private
     */
    pasteElement: HTMLElement;
    /**
     * @private
     */
    isViewPasteOptions: boolean;
    /**
     * @private
     */
    skipEditRangeRetrieval: boolean;
    /**
     * @private
     */
    editPosition: string;
    /**
     * @private
     */
    selectedWidgets: Dictionary<IWidget, object>;
    /**
     * @private
     */
    isHighlightEditRegionIn: boolean;
    /**
     * @private
     */
    editRangeCollection: EditRangeStartElementBox[];
    /**
     * @private
     */
    isHightlightEditRegionInternal: boolean;
    /**
     * @private
     */
    isCurrentUser: boolean;
    /**
     * @private
     */
    isHighlightNext: boolean;
    /**
     * @private
     */
    hightLightNextParagraph: BlockWidget;
    /**
     * @private
     */
    editRegionHighlighters: Dictionary<LineWidget, SelectionWidgetInfo[]>;
    /**
     * @private
     */
    /**
    * @private
    */
    isHighlightEditRegion: boolean;
    /**
     * @private
     */
    readonly htmlWriter: HtmlExport;
    /**
     * Gets the start text position of last range in the selection
     * @returns {TextPosition}
     * @private
     */
    /**
    * @private
    */
    start: TextPosition;
    /**
     * Gets the instance of selection character format.
     * @default undefined
     * @aspType SelectionCharacterFormat
     * @blazorType SelectionCharacterFormat
     * @return {SelectionCharacterFormat}
     */
    readonly characterFormat: SelectionCharacterFormat;
    /**
     * Gets the instance of selection paragraph format.
     * @default undefined
     * @aspType SelectionParagraphFormat
     * @blazorType SelectionParagraphFormat
     * @return {SelectionParagraphFormat}
     */
    readonly paragraphFormat: SelectionParagraphFormat;
    /**
     * Gets the instance of selection section format.
     * @default undefined
     * @aspType SelectionSectionFormat
     * @blazorType SelectionSectionFormat
     * @return {SelectionSectionFormat}
     */
    readonly sectionFormat: SelectionSectionFormat;
    /**
     * Gets the instance of selection table format.
     * @default undefined
     * @aspType SelectionTableFormat
     * @blazorType SelectionTableFormat
     * @return {SelectionTableFormat}
     */
    readonly tableFormat: SelectionTableFormat;
    /**
     * Gets the instance of selection cell format.
     * @default undefined
     * @aspType SelectionCellFormat
     * @blazorType SelectionCellFormat
     * @return {SelectionCellFormat}
     */
    readonly cellFormat: SelectionCellFormat;
    /**
     * Gets the instance of selection row format.
     * @default undefined
     * @aspType SelectionRowFormat
     * @blazorType SelectionRowFormat
     * @returns {SelectionRowFormat}
     */
    readonly rowFormat: SelectionRowFormat;
    /**
     * Gets the instance of selection image format.
     * @default undefined
     * @aspType SelectionImageFormat
     * @blazorType SelectionImageFormat
     * @returns {SelectionImageFormat}
     */
    readonly imageFormat: SelectionImageFormat;
    /**
     * Gets the start text position of selection range.
     * @private
     */
    /**
    * For internal use
    * @private
    */
    end: TextPosition;
    /**
     * Gets the page number where the selection ends.
     */
    readonly startPage: number;
    /**
     * Gets the page number where the selection ends.
     */
    readonly endPage: number;
    /**
     * Determines whether the selection direction is forward or not.
     * @default false
     * @returns {boolean}
     * @private
     */
    readonly isForward: boolean;
    /**
     * Determines whether the start and end positions are same or not.
     * @default false
     * @returns {boolean}
     * @private
     */
    readonly isEmpty: boolean;
    /**
     * Gets the text within selection.
     * @default ''
     * @aspType string
     * @blazorType string
     * @returns {string}
     */
    readonly text: string;
    /**
     * Gets the context type of the selection.
     */
    readonly contextType: ContextType;
    /**
     * @private
     */
    readonly isCleared: boolean;
    /**
     * @private
     */
    constructor(documentEditor: DocumentEditor);
    private getModuleName;
    /**
     * Moves the selection to the header of current page.
     */
    goToHeader(): void;
    /**
     * Moves the selection to the footer of current page.
     */
    goToFooter(): void;
    /**
     * Closes the header and footer region.
     */
    closeHeaderFooter(): void;
    /**
     * Moves the selection to the start of specified page number.
     */
    goToPage(pageNumber: number): void;
    /**
     * Selects the entire table if the context is within table.
     */
    selectTable(): void;
    /**
     * Selects the entire row if the context is within table.
     */
    selectRow(): void;
    /**
     * Selects the entire column if the context is within table.
     */
    selectColumn(): void;
    /**
     * Selects the entire cell if the context is within table.
     */
    selectCell(): void;
    /**
     * Select content based on selection settings
     */
    select(selectionSettings: SelectionSettings): void;
    /**
     * Toggles the bold property of selected contents.
     * @private
     */
    toggleBold(): void;
    /**
     * Toggles the italic property of selected contents.
     * @private
     */
    toggleItalic(): void;
    /**
     * Toggles the underline property of selected contents.
     * @param underline Default value of ‘underline’ parameter is Single.
     * @private
     */
    toggleUnderline(underline?: Underline): void;
    /**
     * Toggles the strike through property of selected contents.
     * @param {Strikethrough} strikethrough Default value of strikethrough parameter is SingleStrike.
     * @private
     */
    toggleStrikethrough(strikethrough?: Strikethrough): void;
    /**
     * Toggles the highlight color property of selected contents.
     * @param {HighlightColor} highlightColor Default value of ‘underline’ parameter is Yellow.
     * @private
     */
    toggleHighlightColor(highlightColor?: HighlightColor): void;
    /**
     * Toggles the subscript formatting of selected contents.
     * @private
     */
    toggleSubscript(): void;
    /**
     * Toggles the superscript formatting of selected contents.
     * @private
     */
    toggleSuperscript(): void;
    /**
     * Toggles the text alignment property of selected contents.
     * @param {TextAlignment} textAlignment Default value of ‘textAlignment parameter is TextAlignment.Left.
     * @private
     */
    toggleTextAlignment(textAlignment: TextAlignment): void;
    /**
     * Increases the left indent of selected paragraphs to a factor of 36 points.
     * @private
     */
    increaseIndent(): void;
    /**
     * Decreases the left indent of selected paragraphs to a factor of 36 points.
     * @private
     */
    decreaseIndent(): void;
    /**
     * Fires the `requestNavigate` event if current selection context is in hyperlink.
     */
    navigateHyperlink(): void;
    /**
     * Navigate Hyperlink
     * @param fieldBegin
     * @private
     */
    fireRequestNavigate(fieldBegin: FieldElementBox): void;
    /**
     * Copies the hyperlink URL if the context is within hyperlink.
     */
    copyHyperlink(): void;
    /**
     * @private
     */
    highlightSelection(isSelectionChanged: boolean): void;
    /**
     * @private
     */
    createHighlightBorder(lineWidget: LineWidget, width: number, left: number, top: number, isElementBoxHighlight: boolean): void;
    /**
     * @private
     */
    addEditRegionHighlight(lineWidget: LineWidget, left: number, width: number): SelectionWidgetInfo;
    /**
     * Create selection highlight inside table
     * @private
     */
    createHighlightBorderInsideTable(cellWidget: TableCellWidget): void;
    /**
     * @private
     */
    clipSelection(page: Page, pageTop: number): void;
    /**
     * Add selection highlight
     * @private
     */
    addSelectionHighlight(canvasContext: CanvasRenderingContext2D, widget: LineWidget, top: number): void;
    /**
     * @private
     */
    private renderDashLine;
    /**
     * Add Selection highlight inside table
     * @private
     */
    addSelectionHighlightTable(canvasContext: CanvasRenderingContext2D, tableCellWidget: TableCellWidget): void;
    /**
     * Remove Selection highlight
     * @private
     */
    removeSelectionHighlight(widget: IWidget): void;
    /**
     * Select Current word
     * @private
     */
    selectCurrentWord(): void;
    /**
     * Select current paragraph
     * @private
     */
    selectCurrentParagraph(): void;
    /**
     * Select current word range
     * @private
     */
    selectCurrentWordRange(startPosition: TextPosition, endPosition: TextPosition, excludeSpace: boolean): void;
    /**
     * Extend selection to paragraph start
     * @private
     */
    extendToParagraphStart(): void;
    /**
     * Extend selection to paragraph end
     * @private
     */
    extendToParagraphEnd(): void;
    /**
     * Move to next text position
     * @private
     */
    moveNextPosition(): void;
    /**
     * Move to next paragraph
     * @private
     */
    moveToNextParagraph(): void;
    /**
     * Move to previous text position
     * @private
     */
    movePreviousPosition(): void;
    /**
     * Move to previous paragraph
     * @private
     */
    moveToPreviousParagraph(): void;
    /**
     * Extend selection to previous line
     * @private
     */
    extendToPreviousLine(): void;
    /**
     * Extend selection to line end
     * @private
     */
    extendToLineEnd(): void;
    /**
     * Extend to line start
     * @private
     */
    extendToLineStart(): void;
    /**
     * @private
     */
    moveUp(): void;
    /**
     * @private
     */
    moveDown(): void;
    private updateForwardSelection;
    private updateBackwardSelection;
    /**
     * @private
     */
    getFirstBlockInFirstCell(table: TableWidget): BlockWidget;
    /**
     * @private
     */
    getFirstCellInRegion(row: TableRowWidget, startCell: TableCellWidget, selectionLength: number, isMovePrevious: boolean): TableCellWidget;
    /**
     * @private
     */
    getFirstParagraph(tableCell: TableCellWidget): ParagraphWidget;
    /**
     * Get last block in last cell
     * @private
     */
    getLastBlockInLastCell(table: TableWidget): BlockWidget;
    /**
     * Move to line start
     * @private
     */
    moveToLineStart(): void;
    /**
     * Move to line end
     * @private
     */
    moveToLineEnd(): void;
    /**
     * Get Page top
     * @private
     */
    getPageTop(page: Page): number;
    /**
     * Move text position to cursor point
     * @private
     */
    moveTextPosition(cursorPoint: Point, textPosition: TextPosition): void;
    /**
     * Get document start position
     * @private
     */
    getDocumentStart(): TextPosition;
    /**
     * Get document end position
     * @private
     */
    getDocumentEnd(): TextPosition;
    /**
     * @private
     * Handles control end key.
     */
    handleControlEndKey(): void;
    /**
     * @private
     * Handles control home key.
     */
    handleControlHomeKey(): void;
    /**
     * @private
     * Handles control left key.
     */
    handleControlLeftKey(): void;
    /**
     * @private
     * Handles control right key.
     */
    handleControlRightKey(): void;
    /**
     * Handles control down key.
     * @private
     */
    handleControlDownKey(): void;
    /**
     * Handles control up key.
     * @private
     */
    handleControlUpKey(): void;
    /**
     * @private
     * Handles shift left key.
     */
    handleShiftLeftKey(): void;
    /**
     * Handles shift up key.
     * @private
     */
    handleShiftUpKey(): void;
    /**
     * Handles shift right key.
     * @private
     */
    handleShiftRightKey(): void;
    /**
     * Handles shift down key.
     * @private
     */
    handleShiftDownKey(): void;
    /**
     * @private
     * Handles control shift left key.
     */
    handleControlShiftLeftKey(): void;
    /**
     * Handles control shift up key.
     * @private
     */
    handleControlShiftUpKey(): void;
    /**
     * Handles control shift right key
     * @private
     */
    handleControlShiftRightKey(): void;
    /**
     * Handles control shift down key.
     * @private
     */
    handleControlShiftDownKey(): void;
    /**
     * Handles left key.
     * @private
     */
    handleLeftKey(): void;
    /**
     * Handles up key.
     * @private
     */
    handleUpKey(): void;
    /**
     * Handles right key.
     * @private
     */
    handleRightKey(): void;
    /**
     * Handles end key.
     * @private
     */
    handleEndKey(): void;
    /**
     * Handles home key.
     * @private
     */
    handleHomeKey(): void;
    /**
     * Handles down key.
     * @private
     */
    handleDownKey(): void;
    /**
     * Handles shift end key.
     * @private
     */
    handleShiftEndKey(): void;
    /**
     * Handles shift home key.
     * @private
     */
    handleShiftHomeKey(): void;
    /**
     * Handles control shift end key.
     * @private
     */
    handleControlShiftEndKey(): void;
    /**
     * Handles control shift home key.
     * @private
     */
    handleControlShiftHomeKey(): void;
    /**
     * Handles tab key.
     * @param isNavigateInCell
     * @param isShiftTab
     * @private
     */
    handleTabKey(isNavigateInCell: boolean, isShiftTab: boolean): void;
    private selectPreviousCell;
    private selectNextCell;
    /**
     * Select given table cell
     * @private
     */
    selectTableCellInternal(tableCell: TableCellWidget, clearMultiSelection: boolean): void;
    /**
     * Select while table
     * @private
     */
    private selectTableInternal;
    /**
     * Select single column
     * @private
     */
    selectColumnInternal(): void;
    /**
     * Select single row
     * @private
     */
    selectTableRow(): void;
    /**
     * Select single cell
     * @private
     */
    selectTableCell(): void;
    /**
     * @private
     * Selects the entire document.
     */
    selectAll(): void;
    /**
     * Extend selection backward
     * @private
     */
    extendBackward(): void;
    /**
     * Extent selection forward
     * @private
     */
    extendForward(): void;
    /**
     * Extend selection to word start and end
     * @private
     */
    extendToWordStartEnd(): boolean;
    /**
     * Extend selection to word start
     * @private
     */
    extendToWordStart(isNavigation: boolean): void;
    /**
     * Extent selection to word end
     * @private
     */
    extendToWordEnd(isNavigation: boolean): void;
    /**
     * Extend selection to next line
     * @private
     */
    extendToNextLine(): void;
    private getTextPosition;
    /**
     * Get Selected text
     * @private
     */
    getText(includeObject: boolean): string;
    /**
     * Get selected text
     * @private
     */
    getTextInternal(start: TextPosition, end: TextPosition, includeObject: boolean): string;
    /**
     * @private
     */
    getListTextElementBox(paragarph: ParagraphWidget): ListTextElementBox;
    /**
     * @private
     */
    getTextInline(inlineElement: ElementBox, endParagraphWidget: ParagraphWidget, endInline: ElementBox, endIndex: number, includeObject: boolean): string;
    /**
     * Returns field code.
     * @private
     * @param fieldBegin
     */
    getFieldCode(fieldBegin: FieldElementBox): string;
    private getFieldCodeInternal;
    /**
     * @private
     */
    getTocFieldInternal(): FieldElementBox;
    /**
     * Get next paragraph in bodyWidget
     * @private
     */
    getNextParagraph(section: BodyWidget): ParagraphWidget;
    /**
     * @private
     */
    getPreviousParagraph(section: BodyWidget): ParagraphWidget;
    /**
     * Get first paragraph in cell
     * @private
     */
    getFirstParagraphInCell(cell: TableCellWidget): ParagraphWidget;
    /**
     * Get first paragraph in first cell
     * @private
     */
    getFirstParagraphInFirstCell(table: TableWidget): ParagraphWidget;
    /**
     * Get last paragraph in last cell
     * @private
     */
    getLastParagraphInLastCell(table: TableWidget): ParagraphWidget;
    /**
     * Get last paragraph in first row
     * @private
     */
    getLastParagraphInFirstRow(table: TableWidget): ParagraphWidget;
    /**
     * Get Next start inline
     * @private
     */
    getNextStartInline(line: LineWidget, offset: number): ElementBox;
    /**
     * Get previous text inline
     * @private
     */
    getPreviousTextInline(inline: ElementBox): ElementBox;
    /**
     * Get next text inline
     * @private
     */
    getNextTextInline(inline: ElementBox): ElementBox;
    /**
     * Get container table
     * @private
     */
    getContainerTable(block: BlockWidget): TableWidget;
    /**
     * @private
     */
    isExistBefore(start: BlockWidget, block: BlockWidget): boolean;
    /**
     * @private
     */
    isExistAfter(start: BlockWidget, block: BlockWidget): boolean;
    /**
     * Return true if current inline in exist before inline
     * @private
     */
    isExistBeforeInline(currentInline: ElementBox, inline: ElementBox): boolean;
    /**
     * Return true id current inline is exist after inline
     * @private
     */
    isExistAfterInline(currentInline: ElementBox, inline: ElementBox): boolean;
    /**
     * Get next rendered block
     * @private
     */
    getNextRenderedBlock(block: BlockWidget): BlockWidget;
    /**
     * Get next rendered block
     * @private
     */
    getPreviousRenderedBlock(block: BlockWidget): BlockWidget;
    /**
     * Get Next paragraph in block
     * @private
     */
    getNextParagraphBlock(block: BlockWidget): ParagraphWidget;
    /**
     * @private
     */
    getFirstBlockInNextHeaderFooter(block: BlockWidget): ParagraphWidget;
    /**
     * @private
     */
    getLastBlockInPreviousHeaderFooter(block: BlockWidget): ParagraphWidget;
    /**
     * Get previous paragraph in block
     * @private
     */
    getPreviousParagraphBlock(block: BlockWidget): ParagraphWidget;
    /**
     * Get first paragraph in block
     * @private
     */
    getFirstParagraphBlock(block: BlockWidget): ParagraphWidget;
    /**
     * Get last paragraph in block
     * @private
     */
    getLastParagraphBlock(block: BlockWidget): ParagraphWidget;
    /**
     * Return true if paragraph has valid inline
     * @private
     */
    hasValidInline(paragraph: ParagraphWidget, start: ElementBox, end: ElementBox): boolean;
    /**
     * Get paragraph length
     * @private
     */
    getParagraphLength(paragraph: ParagraphWidget, endLine?: LineWidget, elementInfo?: ElementInfo): number;
    /**
     * Get Line length
     * @private
     */
    getLineLength(line: LineWidget, elementInfo?: ElementInfo): number;
    /**
     * Get line information
     * @private
     */
    getLineInfo(paragraph: ParagraphWidget, offset: number): LineInfo;
    /**
     * @private
     */
    getElementInfo(line: LineWidget, offset: number): ElementInfo;
    /**
     * Get paragraph start offset
     * @private
     */
    getStartOffset(paragraph: ParagraphWidget): number;
    /**
     * @private
     */
    getStartLineOffset(line: LineWidget): number;
    /**
     * Get previous paragraph from selection
     * @private
     */
    getPreviousSelectionCell(cell: TableCellWidget): ParagraphWidget;
    /**
     * Get previous paragraph selection in selection
     * @private
     */
    getPreviousSelectionRow(row: TableRowWidget): ParagraphWidget;
    /**
     * @private
     */
    getNextSelectionBlock(block: BlockWidget): ParagraphWidget;
    /**
     * Get next paragraph from selected cell
     * @private
     */
    getNextSelectionCell(cell: TableCellWidget): ParagraphWidget;
    /**
     * Get next paragraph in selection
     * @private
     */
    getNextSelectionRow(row: TableRowWidget): ParagraphWidget;
    /**
     * Get next block with selection
     * @private
     */
    getNextSelection(section: BodyWidget): ParagraphWidget;
    /**
     * @private
     */
    getNextParagraphSelection(row: TableRowWidget): ParagraphWidget;
    /**
     * @private
     */
    getPreviousSelectionBlock(block: BlockWidget): ParagraphWidget;
    /**
     * Get previous paragraph in selection
     * @private
     */
    getPreviousSelection(section: BodyWidget): ParagraphWidget;
    /**
     * @private
     */
    getPreviousParagraphSelection(row: TableRowWidget): ParagraphWidget;
    /**
     * Get last cell in the selected region
     * @private
     */
    getLastCellInRegion(row: TableRowWidget, startCell: TableCellWidget, selLength: number, isMovePrev: boolean): TableCellWidget;
    /**
     * Get Container table
     * @private
     */
    getCellInTable(table: TableWidget, tableCell: TableCellWidget): TableCellWidget;
    /**
     * Get first paragraph in last row
     * @private
     */
    getFirstParagraphInLastRow(table: TableWidget): ParagraphWidget;
    /**
     * Get previous valid offset
     * @private
     */
    getPreviousValidOffset(paragraph: ParagraphWidget, offset: number): number;
    /**
     * Get next valid offset
     * @private
     */
    getNextValidOffset(line: LineWidget, offset: number): number;
    /**
     * Get paragraph mark size info
     * @private
     */
    getParagraphMarkSize(paragraph: ParagraphWidget, topMargin: number, bottomMargin: number): SizeInfo;
    /**
     * @private
     */
    getPhysicalPositionInternal(line: LineWidget, offset: number, moveNextLine: boolean): Point;
    /**
     * Highlight selected content
     * @private
     */
    highlightSelectedContent(start: TextPosition, end: TextPosition): void;
    /**
     * @private
     */
    highlight(paragraph: ParagraphWidget, start: TextPosition, end: TextPosition): void;
    private highlightNextBlock;
    /**
     * Get start line widget
     * @private
     */
    getStartLineWidget(paragraph: ParagraphWidget, start: TextPosition, startElement: ElementBox, selectionStartIndex: number): ElementInfo;
    /**
     * Get end line widget
     * @private
     */
    getEndLineWidget(end: TextPosition, endElement: ElementBox, selectionEndIndex: number): ElementInfo;
    /**
     * Get line widget
     * @private
     */
    getLineWidgetInternal(line: LineWidget, offset: number, moveToNextLine: boolean): LineWidget;
    /**
     * Get last line widget
     * @private
     */
    getLineWidgetParagraph(offset: number, line: LineWidget): LineWidget;
    /**
     * Highlight selected cell
     * @private
     */
    highlightCells(table: TableWidget, startCell: TableCellWidget, endCell: TableCellWidget): void;
    /**
     * highlight selected table
     * @private
     */
    highlightTable(table: TableWidget, start: TextPosition, end: TextPosition): void;
    /**
     * Get cell left
     * @private
     */
    getCellLeft(row: TableRowWidget, cell: TableCellWidget): number;
    /**
     * Get next paragraph for row
     * @private
     */
    getNextParagraphRow(row: BlockWidget): ParagraphWidget;
    /**
     * Get previous paragraph from row
     * @private
     */
    getPreviousParagraphRow(row: TableRowWidget): ParagraphWidget;
    /**
     * Return true if row contain cell
     * @private
     */
    containsRow(row: TableRowWidget, tableCell: TableCellWidget): boolean;
    /**
     * Highlight selected row
     * @private
     */
    highlightRow(row: TableRowWidget, start: number, end: number): void;
    /**
     * @private
     */
    highlightInternal(row: TableRowWidget, start: TextPosition, end: TextPosition): void;
    /**
     * Get last paragraph in cell
     * @private
     */
    getLastParagraph(cell: TableCellWidget): ParagraphWidget;
    /**
     * Return true is source cell contain cell
     * @private
     */
    containsCell(sourceCell: TableCellWidget, cell: TableCellWidget): boolean;
    /**
     * Return true if cell is selected
     * @private
     */
    isCellSelected(cell: TableCellWidget, startPosition: TextPosition, endPosition: TextPosition): boolean;
    /**
     * Return Container cell
     * @private
     */
    getContainerCellOf(cell: TableCellWidget, tableCell: TableCellWidget): TableCellWidget;
    /**
     * Get Selected cell
     * @private
     */
    getSelectedCell(cell: TableCellWidget, containerCell: TableCellWidget): TableCellWidget;
    /**
     * @private
     */
    getSelectedCells(): TableCellWidget[];
    /**
     * Get Next paragraph from cell
     * @private
     */
    getNextParagraphCell(cell: TableCellWidget): ParagraphWidget;
    /**
     * Get previous paragraph from cell
     * @private
     */
    getPreviousParagraphCell(cell: TableCellWidget): ParagraphWidget;
    /**
     * Get cell's container cell
     * @private
     */
    getContainerCell(cell: TableCellWidget): TableCellWidget;
    /**
     * Highlight selected cell
     * @private
     */
    highlightCell(cell: TableCellWidget, selection: Selection, start: TextPosition, end: TextPosition): void;
    /**
     * @private
     */
    highlightContainer(cell: TableCellWidget, start: TextPosition, end: TextPosition): void;
    /**
     * Get previous valid element
     * @private
     */
    getPreviousValidElement(inline: ElementBox): ElementBox;
    /**
     * Get next valid element
     * @private
     */
    getNextValidElement(inline: ElementBox): ElementBox;
    /**
     * Return next valid inline with index
     * @private
     */
    validateTextPosition(inline: ElementBox, index: number): ElementInfo;
    /**
     * Get inline physical location
     * @private
     */
    getPhysicalPositionInline(inline: ElementBox, index: number, moveNextLine: boolean): Point;
    /**
     * Get field character position
     * @private
     */
    getFieldCharacterPosition(firstInline: ElementBox): Point;
    /**
     * @private
     */
    getNextValidElementForField(firstInline: ElementBox): ElementBox;
    /**
     * Get paragraph end position
     * @private
     */
    getEndPosition(widget: ParagraphWidget): Point;
    /**
     * Get element box
     * @private
     */
    getElementBox(currentInline: ElementBox, index: number, moveToNextLine: boolean): ElementInfo;
    /**
     * @private
     */
    getPreviousTextElement(inline: ElementBox): ElementBox;
    /**
     * Get next text inline
     * @private
     */
    getNextTextElement(inline: ElementBox): ElementBox;
    /**
     * @private
     */
    getNextRenderedElementBox(inline: ElementBox, indexInInline: number): ElementBox;
    /**
     * @private
     */
    getElementBoxInternal(inline: ElementBox, index: number): ElementInfo;
    /**
     * Get Line widget
     * @private
     */
    getLineWidget(inline: ElementBox, index: number): LineWidget;
    /**
     * @private
     */
    getLineWidgetInternalInline(inline: ElementBox, index: number, moveToNextLine: boolean): LineWidget;
    /**
     * Get next line widget
     * @private
     */
    private getNextLineWidget;
    /**
     * Get Caret height
     * @private
     */
    getCaretHeight(inline: ElementBox, index: number, format: WCharacterFormat, isEmptySelection: boolean, topMargin: number, isItalic: boolean): CaretHeightInfo;
    /**
     * Get field characters height
     * @private
     */
    getFieldCharacterHeight(startInline: FieldElementBox, format: WCharacterFormat, isEmptySelection: boolean, topMargin: number, isItalic: boolean): CaretHeightInfo;
    /**
     * Get rendered inline
     * @private
     */
    getRenderedInline(inline: FieldElementBox, inlineIndex: number): ElementInfo;
    /**
     * Get rendered field
     * @private
     */
    getRenderedField(fieldBegin: FieldElementBox): FieldElementBox;
    /**
     * Return true is inline is tha last inline
     * @private
     */
    isLastRenderedInline(inline: ElementBox, index: number): boolean;
    /**
     * Get page
     * @private
     */
    getPage(widget: Widget): Page;
    /**
     * Clear Selection highlight
     * @private
     */
    clearSelectionHighlightInSelectedWidgets(): boolean;
    /**
     * Clear selection highlight
     * @private
     */
    clearChildSelectionHighlight(widget: Widget): void;
    /**
     * Get line widget from paragraph widget
     * @private
     */
    getLineWidgetBodyWidget(widget: Widget, point: Point): LineWidget;
    /**
     * Get line widget from paragraph widget
     * @private
     */
    getLineWidgetParaWidget(widget: ParagraphWidget, point: Point): LineWidget;
    /**
     * highlight paragraph widget
     * @private
     */
    highlightParagraph(widget: ParagraphWidget, startIndex: number, endLine: LineWidget, endElement: ElementBox, endIndex: number): void;
    /**
     * Get line widget form table widget
     * @private
     */
    getLineWidgetTableWidget(widget: TableWidget, point: Point): LineWidget;
    /**
     * Get line widget fom row
     * @private
     */
    getLineWidgetRowWidget(widget: TableRowWidget, point: Point): LineWidget;
    /**
     * @private
     */
    getFirstBlock(cell: TableCellWidget): BlockWidget;
    /**
     * Highlight selected cell widget
     * @private
     */
    highlightCellWidget(widget: TableCellWidget): void;
    /**
     * Clear selection highlight
     * @private
     */
    clearSelectionHighlight(widget: IWidget): void;
    /**
     * Get line widget from cell widget
     * @private
     */
    getLineWidgetCellWidget(widget: TableCellWidget, point: Point): LineWidget;
    /**
     * update text position
     * @private
     */
    updateTextPosition(widget: LineWidget, point: Point): void;
    /**
     * @private
     */
    updateTextPositionIn(widget: LineWidget, inline: ElementBox, index: number, caretPosition: Point, includeParagraphMark: boolean): TextPositionInfo;
    /**
     * Get text length if the line widget
     * @private
     */
    getTextLength(widget: LineWidget, element: ElementBox): number;
    /**
     * Get Line widget left
     * @private
     */
    getLeft(widget: LineWidget): number;
    /**
     * Get line widget top
     * @private
     */
    getTop(widget: LineWidget): number;
    /**
     * Get first element the widget
     * @private
     */
    getFirstElement(widget: LineWidget, left: number): FirstElementInfo;
    /**
     * Return inline index
     * @private
     */
    getIndexInInline(elementBox: ElementBox): number;
    /**
     * Return true if widget is first inline of paragraph
     * @private
     */
    isParagraphFirstLine(widget: LineWidget): boolean;
    /**
     * @private
     */
    isParagraphLastLine(widget: LineWidget): boolean;
    /**
     * Return line widget width
     * @private
     */
    getWidth(widget: LineWidget, includeParagraphMark: boolean): number;
    /**
     * Return line widget left
     * @private
     */
    getLeftInternal(widget: LineWidget, elementBox: ElementBox, index: number): number;
    /**
     * Return line widget start offset
     * @private
     */
    getLineStartLeft(widget: LineWidget): number;
    /**
     * Update text position
     * @private
     */
    updateTextPositionWidget(widget: LineWidget, point: Point, textPosition: TextPosition, includeParagraphMark: boolean): void;
    /**
     * Clear selection highlight
     * @private
     */
    clearSelectionHighlightLineWidget(widget: LineWidget): void;
    /**
     * Return first element from line widget
     * @private
     */
    getFirstElementInternal(widget: LineWidget): ElementBox;
    /**
     * Select content between given range
     * @private
     */
    selectRange(startPosition: TextPosition, endPosition: TextPosition): void;
    /**
     * Selects current paragraph
     * @private
     */
    selectParagraph(paragraph: ParagraphWidget, positionAtStart: boolean): void;
    /**
     * @private
     */
    setPositionForBlock(block: BlockWidget, selectFirstBlock: boolean): TextPosition;
    /**
     * Select content in given text position
     * @private
     */
    selectContent(textPosition: TextPosition, clearMultiSelection: boolean): void;
    /**
     * Select paragraph
     * @private
     */
    selectInternal(lineWidget: LineWidget, element: ElementBox, index: number, physicalLocation: Point): void;
    /**
     * @private
     */
    selects(lineWidget: LineWidget, offset: number, skipSelectionChange: boolean): void;
    /**
     * Select content between start and end position
     * @private
     */
    selectPosition(startPosition: TextPosition, endPosition: TextPosition): void;
    /**
     * Notify selection change event
     * @private
     */
    fireSelectionChanged(isSelectionChanged: boolean): void;
    /**
     * Retrieve all current selection format
     * @private
     */
    retrieveCurrentFormatProperties(): void;
    /**
     * @private
     */
    retrieveImageFormat(start: TextPosition, end: TextPosition): void;
    private setCurrentContextType;
    /**
     * Retrieve selection table format
     * @private
     */
    retrieveTableFormat(start: TextPosition, end: TextPosition): void;
    /**
     * Retrieve selection cell format
     * @private
     */
    retrieveCellFormat(start: TextPosition, end: TextPosition): void;
    /**
     * Retrieve selection row format
     * @private
     */
    retrieveRowFormat(start: TextPosition, end: TextPosition): void;
    /**
     * Get selected cell format
     * @private
     */
    getCellFormat(table: TableWidget, start: TextPosition, end: TextPosition): void;
    /**
     * Get selected row format
     * @private
     */
    getRowFormat(table: TableWidget, start: TextPosition, end: TextPosition): void;
    /**
     * Return table with given text position
     * @private
     */
    getTable(startPosition: TextPosition, endPosition: TextPosition): TableWidget;
    private getContainerWidget;
    /**
     * Retrieve selection section format
     * @private
     */
    retrieveSectionFormat(start: TextPosition, end: TextPosition): void;
    /**
     * Retrieve selection paragraph format
     * @private
     */
    retrieveParagraphFormat(start: TextPosition, end: TextPosition): void;
    /**
     * @private
     */
    getParagraphFormatForSelection(paragraph: ParagraphWidget, selection: Selection, start: TextPosition, end: TextPosition): void;
    /**
     * @private
     */
    getParagraphFormatInternalInParagraph(paragraph: ParagraphWidget, start: TextPosition, end: TextPosition): void;
    /**
     * @private
     */
    getParagraphFormatInternalInBlock(block: BlockWidget, start: TextPosition, end: TextPosition): void;
    /**
     * @private
     */
    getParagraphFormatInternalInTable(table: TableWidget, start: TextPosition, end: TextPosition): void;
    /**
     * Get paragraph format in cell
     * @private
     */
    getParagraphFormatInCell(cell: TableCellWidget): void;
    /**
     * @private
     */
    getParagraphFormatInBlock(block: BlockWidget): void;
    /**
     * @private
     */
    getParagraphFormatInTable(tableAdv: TableWidget): void;
    /**
     * @private
     */
    getParagraphFormatInParagraph(paragraph: ParagraphWidget): void;
    /**
     * Get paragraph format in cell
     * @private
     */
    getParagraphFormatInternalInCell(cellAdv: TableCellWidget, start: TextPosition, end: TextPosition): void;
    /**
     * @private
     */
    getParaFormatForCell(table: TableWidget, startCell: TableCellWidget, endCell: TableCellWidget): void;
    /**
     * Get paragraph format ins row
     * @private
     */
    getParagraphFormatInRow(tableRow: TableRowWidget, start: TextPosition, end: TextPosition): void;
    /**
     * Retrieve Selection character format
     * @private
     */
    retrieveCharacterFormat(start: TextPosition, end: TextPosition): void;
    /**
     * @private
     */
    getCharacterFormatForSelection(paragraph: ParagraphWidget, selection: Selection, startPosition: TextPosition, endPosition: TextPosition): void;
    /**
     * Get Character format
     * @private
     */
    getCharacterFormatForTableRow(tableRowAdv: TableRowWidget, start: TextPosition, end: TextPosition): void;
    /**
     * Get Character format in table
     * @private
     */
    getCharacterFormatInTableCell(tableCell: TableCellWidget, selection: Selection, start: TextPosition, end: TextPosition): void;
    /**
     * @private
     */
    getCharacterFormatInternalInTable(table: TableWidget, startCell: TableCellWidget, endCell: TableCellWidget, startPosition: TextPosition, endPosition: TextPosition): void;
    /**
     * Get character format with in selection
     * @private
     */
    getCharacterFormat(paragraph: ParagraphWidget, start: TextPosition, end: TextPosition): void;
    private setCharacterFormat;
    /**
     * @private
     */
    getCharacterFormatForBlock(block: BlockWidget, start: TextPosition, end: TextPosition): void;
    /**
     * @private
     */
    getCharacterFormatInTable(table: TableWidget, start: TextPosition, end: TextPosition): void;
    /**
     * Get character format in selection
     * @private
     */
    getCharacterFormatForSelectionCell(cell: TableCellWidget, start: TextPosition, end: TextPosition): void;
    /**
     * @private
     */
    getCharacterFormatInternal(paragraph: ParagraphWidget, selection: Selection): void;
    /**
     * Get next valid character format from inline
     * @private
     */
    getNextValidCharacterFormat(inline: ElementBox): WCharacterFormat;
    /**
     * Get next valid paragraph format from field
     * @private
     */
    getNextValidCharacterFormatOfField(fieldBegin: FieldElementBox): WCharacterFormat;
    /**
     * Return true if cursor point with in selection range
     * @private
     */
    checkCursorIsInSelection(widget: IWidget, point: Point): boolean;
    /**
     * Copy paragraph for to selection paragraph format
     * @private
     */
    copySelectionParagraphFormat(): WParagraphFormat;
    /**
     * Get hyperlink display text
     * @private
     */
    getHyperlinkDisplayText(paragraph: ParagraphWidget, fieldSeparator: FieldElementBox, fieldEnd: FieldElementBox, isNestedField: boolean, format: WCharacterFormat): HyperlinkTextInfo;
    /**
     * Navigates hyperlink on mouse Event.
     * @private
     */
    navigateHyperLinkOnEvent(cursorPoint: Point, isTouchInput: boolean): void;
    /**
     * @private
     */
    getLinkText(fieldBegin: FieldElementBox): string;
    /**
     * Set Hyperlink content to tool tip element
     * @private
     */
    setHyperlinkContentToToolTip(fieldBegin: FieldElementBox, widget: LineWidget, xPos: number): void;
    /**
     * @private
     */
    createPasteElement(top: string, left: string): void;
    /**
     * @private
     */
    pasteOptions: (event: splitbuttons.MenuEventArgs) => void;
    /**
     * Show hyperlink tooltip
     * @private
     */
    showToolTip(x: number, y: number): void;
    /**
     * Hide tooltip object
     * @private
     */
    hideToolTip(): void;
    /**
     * Return hyperlink field
     * @private
     */
    getHyperLinkFieldInCurrentSelection(widget: LineWidget, cursorPosition: Point): FieldElementBox;
    /**
     * Return field if paragraph contain hyperlink field
     * @private
     */
    getHyperlinkField(): FieldElementBox;
    /**
     * @private
     */
    getHyperLinkFields(paragraph: ParagraphWidget, checkedFields: FieldElementBox[]): FieldElementBox;
    /**
     * @private
     */
    getHyperLinkFieldInternal(paragraph: Widget, inline: ElementBox, fields: FieldElementBox[]): FieldElementBox;
    /**
     * @private
     */
    getBlock(currentIndex: string): BlockWidget;
    /**
     * Return Block relative to position
     * @private
     */
    getBlockInternal(widget: Widget, position: string): BlockWidget;
    /**
     * Return true if inline is in field result
     * @private
     */
    inlineIsInFieldResult(fieldBegin: FieldElementBox, inline: ElementBox): boolean;
    /**
     * Retrieve true if paragraph is in field result
     * @private
     */
    paragraphIsInFieldResult(fieldBegin: FieldElementBox, paragraph: ParagraphWidget): boolean;
    /**
     * Return true if image is In field
     * @private
     */
    isImageField(): boolean;
    /**
     * @private
     */
    isTableSelected(): boolean;
    /**
     * Select List Text
     * @private
     */
    selectListText(): void;
    /**
     * Manually select the list text
     * @private
     */
    highlightListText(linewidget: LineWidget): void;
    /**
     * @private
     */
    updateImageSize(imageFormat: ImageFormat): void;
    /**
     * Gets selected table content
     * @private
     */
    private getSelectedCellsInTable;
    /**
     * Copies the selected content to clipboard.
     */
    copy(): void;
    /**
     * @private
     */
    copySelectedContent(isCut: boolean): void;
    /**
     * Copy content to clipboard
     * @private
     */
    copyToClipboard(htmlContent: string): boolean;
    /**
     * Shows caret in current selection position.
     * @private
     */
    showCaret(): void;
    /**
     * To set the editable div caret position
     * @private
     */
    setEditableDivCaretPosition(index: number): void;
    /**
     * Hides caret.
     * @private
     */
    hideCaret: () => void;
    /**
     * Initializes caret.
     * @private
     */
    initCaret(): void;
    /**
     * Updates caret position.
     * @private
     */
    updateCaretPosition(): void;
    /**
     * @private
     */
    showHidePasteOptions(top: string, left: string): void;
    /**
     * @private
     */
    getRect(position: TextPosition): Point;
    /**
     * Gets current selected page
     * @private
     */
    getSelectionPage(position: TextPosition): Page;
    /**
     * Updates caret size.
     * @private
     */
    updateCaretSize(textPosition: TextPosition, skipUpdate?: boolean): CaretHeightInfo;
    /**
     * Updates caret to page.
     * @private
     */
    updateCaretToPage(startPosition: TextPosition, endPage: Page): void;
    /**
     * Gets caret bottom position.
     * @private
     */
    getCaretBottom(textPosition: TextPosition, isEmptySelection: boolean): number;
    /**
     * Checks for cursor visibility.
     * @param isTouch
     * @private
     */
    checkForCursorVisibility(): void;
    /**
     * Keyboard shortcuts
     * @private
     */
    onKeyDownInternal(event: KeyboardEvent, ctrl: boolean, shift: boolean, alt: boolean): void;
    /**
     * @private
     */
    checkAndEnableHeaderFooter(point: Point, pagePoint: Point): boolean;
    /**
     * @private
     */
    isCursorInsidePageRect(point: Point, page: Page): boolean;
    /**
     * @private
     */
    isCursorInHeaderRegion(point: Point, page: Page): boolean;
    /**
     * @private
     */
    isCursorInFooterRegion(point: Point, page: Page): boolean;
    /**
     * @private
     */
    enableHeadersFootersRegion(widget: HeaderFooterWidget): boolean;
    /**
     * @private
     */
    shiftBlockOnHeaderFooterEnableDisable(): void;
    /**
     * @private
     */
    updateTextPositionForBlockContainer(widget: BlockContainer): void;
    /**
     * Disable Header footer
     * @private
     */
    disableHeaderFooter(): void;
    /**
     * @private
     */
    destroy(): void;
    /**
     * Navigates to the specified bookmark.
     * @param name
     * @param moveToStart
     * @private
     */
    navigateBookmark(name: string, moveToStart?: boolean): void;
    /**
     * Selects the specified bookmark.
     * @param name
     */
    selectBookmark(name: string): void;
    /**
     * Returns the toc field from the selection.
     * @private
     */
    getTocField(): FieldElementBox;
    /**
     * Returns true if the paragraph has toc style.
     */
    private isTocStyle;
    /**
     * @private
     */
    getElementsForward(lineWidget: LineWidget, startElement: ElementBox, endElement: ElementBox, bidi: boolean): ElementBox[];
    /**
     * @private
     */
    getElementsBackward(lineWidget: LineWidget, startElement: ElementBox, endElement: ElementBox, bidi: boolean): ElementBox[];
    /**
     * @private
     */
    updateEditRangeCollection(): void;
    /**
     * @private
     */
    onHighlight(): void;
    /**
     * @private
     */
    highlightEditRegion(): void;
    /**
     * @private
     */
    unHighlightEditRegion(): void;
    /**
     * @private
     */
    highlightEditRegionInternal(editRangeStart: EditRangeStartElementBox): void;
    /**
     * @private
     */
    SelectAllEditRegion(): void;
    private highlightEditRegions;
    /**
     * @private
     */
    navigateNextEditRegion(): void;
    /**
     * @private
     */
    getEditRangeStartElement(): EditRangeStartElementBox;
    /**
     * @private
     */
    isSelectionIsAtEditRegion(update: boolean): boolean;
    checkSelectionIsAtEditRegion(): boolean;
    private getPosition;
}
/**
 *  Specifies the settings for selection.
 */
export interface SelectionSettings {
    /**
     * Specifies selection left position
     */
    x: number;
    /**
     * Specifies selection top position
     */
    y: number;
    /**
     * Specifies whether to extend or update selection
     */
    extend?: boolean;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/spell-check/index.d.ts
/**
 * Spell checker export
 */
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/spell-check/spell-checker.d.ts
/**
 * The spell checker module
 */
export  class SpellChecker {
    private langIDInternal;
    private spellSuggestionInternal;
    /**
     * @private
     */
    errorWordCollection: Dictionary<string, ElementBox[]>;
    /**
     * @private
     */
    ignoreAllItems: string[];
    /**
     * @private
     */
    viewer: LayoutViewer;
    /**
     * @private
     */
    currentContextInfo: ContextElementInfo;
    private removeUnderlineInternal;
    private spellCheckSuggestion;
    /**
     * @private
     */
    errorSuggestions: Dictionary<string, string[]>;
    /**
     * Gets module name.
     */
    private getModuleName;
    /**
     * Gets the languageID.
     * @aspType int
     * @blazorType int
     */
    /**
    * Sets the languageID.
    * @aspType int
    * @blazorType int
    */
    languageID: number;
    /**
     * Getter indicates whether suggestion enabled.
     * @aspType bool
     * @blazorType bool
     */
    /**
    * Setter to enable or disable suggestion
    * @aspType bool
    * @blazorType bool
    */
    allowSpellCheckAndSuggestion: boolean;
    /**
     * Getter indicates whether underline removed for mis-spelled word.
     * @aspType bool
     * @blazorType bool
     */
    /**
    * Setter to enable or disable underline for mis-spelled word
    * @aspType bool
    * @blazorType bool
    */
    removeUnderline: boolean;
    /**
     *
     */
    constructor(viewer: LayoutViewer);
    /**
     * Method to manage replace logic
     * @private
     */
    manageReplace(content: string, dialogElement?: ElementBox): void;
    /**
     * Method to handle replace logic
     * @param {string} content
     * @private
     */
    handleReplace(content: string): void;
    /**
     * Method to retrieve exact element info
     * @param {ElementInfo} startInlineObj
     * @private
     */
    retrieveExactElementInfo(startInlineObj: ElementInfo): void;
    /**
     * Method to handle to ignore error Once
     * @param {ElementInfo} startInlineObj
     * @private
     */
    handleIgnoreOnce(startInlineObj: ElementInfo): void;
    /**
     * Method to handle ignore all items
     * @private
     */
    handleIgnoreAllItems(contextElement?: ContextElementInfo): void;
    /**
     * Method to handle dictionary
     * @private
     */
    handleAddToDictionary(contextElement?: ContextElementInfo): void;
    /**
     * Method to append/remove special characters
     * @param {string} exactText
     * @param {boolean} isRemove
     * @private
     */
    manageSpecialCharacters(exactText: string, replaceText: string, isRemove?: boolean): string;
    /**
     * Method to remove errors
     * @param {ContextElementInfo} contextItem
     * @private
     */
    removeErrorsFromCollection(contextItem: ContextElementInfo): void;
    /**
     * Method to retrieve exact text
     * @private
     */
    retriveText(): ContextElementInfo;
    /**
     * Method to handle suggestions
     * @param {any} jsonObject
     * @param {PointerEvent} event
     * @private
     */
    handleSuggestions(allsuggestions: any, event: PointerEvent): string[];
    /**
     * Method to check whether text element has errors
     * @param {string} text
     * @param {any} element
     * @param {number} left
     * @private
     */
    checktextElementHasErrors(text: string, element: any, left: number): ErrorInfo;
    /**
     * Method to update status for error elements
     * @param {ErrorTextElementBox[]} erroElements
     */
    private updateStatusForGlobalErrors;
    /**
     * Method to handle document error collection.
     * @param {string} errorInElement
     * @private
     */
    handleErrorCollection(errorInElement: TextElementBox): boolean;
    /**
     * Method to construct inline menu
     */
    private constructInlineMenu;
    /**
     * Method to retrieve error element text
     * @private
     */
    findCurretText(): ContextElementInfo;
    /**
     * Method to add error word in document error collection
     * @param text
     * @param element
     */
    private addErrorCollection;
    /**
     * Method to compare error text elements
     * @param {ErrorTextElementBox} errorElement
     * @param {ElementBox[]} errorCollection
     */
    private compareErrorTextElement;
    /**
     * Method to compare text elements
     * @param {TextElementBox} errorElement
     * @param {ElementBox[]} errorCollection
     * @private
     */
    compareTextElement(errorElement: TextElementBox, errorCollection: ElementBox[]): boolean;
    /**
     * Method to handle Word by word spell check
     * @param {any} jsonObject
     *  @param {TextElementBox} elementBox
     * @param {number} left
     * @param {number} top
     * @param {number} underlineY
     * @param {BaselineAlignment} baselineAlignment
     * @param {boolean} isSamePage
     * @private
     */
    handleWordByWordSpellCheck(jsonObject: any, elementBox: TextElementBox, left: number, top: number, underlineY: number, baselineAlignment: BaselineAlignment, isSamePage: boolean): void;
    /**
     * Method to check errors for combined elements
     * @param {TextElementBox} elementBox
     * @param {number} underlineY
     * @private
     */
    checkElementCanBeCombined(elementBox: TextElementBox, underlineY: number, beforeIndex: number, callSpellChecker: boolean): boolean;
    /**
     * Method to handle combined elements
     * @param {TextElementBox} elementBox
     * @param {string} currentText
     * @param {number} underlineY
     * @param {number} beforeIndex
     * @private
     */
    handleCombinedElements(elementBox: TextElementBox, currentText: string, underlineY: number, beforeIndex: number): void;
    /**
     * Method to check error element collection has unique element
     * @param {ErrorTextElementBox[]} errorCollection
     * @param {ErrorTextElementBox} elementToCheck
     * @private
     */
    CheckArrayHasSameElement(errorCollection: ErrorTextElementBox[], elementToCheck: ErrorTextElementBox): boolean;
    /**
     * Method to handle splitted and combined words for spell check.
     * @param {any} jsonObject
     * @param {string} currentText
     * @param {ElementBox} elementBox
     * @param {boolean} isSamePage
     * @private
     */
    handleSplitWordSpellCheck(jsonObject: any, currentText: string, elementBox: TextElementBox, isSamePage: boolean, underlineY: number, iteration: number, markIndex: number, isLastItem?: boolean): void;
    /**
     * Method to include matched results in element box and to render it
     * @param {TextSearchResults} results
     * @param {TextElementBox} elementBox
     * @param {number} wavyLineY
     * @param {number} index
     */
    private handleMatchedResults;
    /**
     * Calls the spell checker service
     * @param {number} languageID
     * @param {string} word
     * @param {boolean} checkSpellingAndSuggestion
     * @param {boolean} addWord
     * @private
     */
    CallSpellChecker(languageID: number, word: string, checkSpelling: boolean, checkSuggestion: boolean, addWord?: boolean): Promise<any>;
    /**
     * Method to check for next error
     * @private
     */
    checkForNextError(): void;
    /**
     * Method to create error element with matched results
     * @param {TextSearchResult} result
     * @param {ElementBox} errorElement
     * @private
     */
    createErrorElementWithInfo(result: TextSearchResult, errorElement: ElementBox): ErrorTextElementBox;
    /**
     * Method to get matched results from element box
     * @param {ElementBox} errorElement
     * @private
     */
    getMatchedResultsFromElement(errorElement: ElementBox, currentText?: string): MatchResults;
    /**
     * Method to update error element information
     * @param {string} error
     * @param {ErrorTextElementBox} errorElement
     * @private
     */
    updateErrorElementTextBox(error: string, errorElement: ErrorTextElementBox): void;
    /**
     * Method to retrieve space information in a text
     * @param {string} text
     * @param {WCharacterFormat} characterFormat
     * @private
     */
    getWhiteSpaceCharacterInfo(text: string, characterFormat: WCharacterFormat): SpaceCharacterInfo;
    /**
     * Retrieve Special character info
     * @param {string} text
     * @param {WCharacterFormat} characterFormat
     * @private
     */
    getSpecialCharactersInfo(text: string, characterFormat: WCharacterFormat): SpecialCharacterInfo;
    /**
     * Method to retrieve next available combined element
     * @param {ElementBox} element
     * @private
     */
    getCombinedElement(element: ElementBox): ElementBox;
    /**
     * Method to retrieve next available combined element
     * @param {ElementBox} element
     */
    private checkCombinedElementsBeIgnored;
    /**
     * Method to update error collection
     * @param {TextElementBox} currentElement
     * @param {TextElementBox} splittedElement
     * @private
     */
    updateSplittedElementError(currentElement: TextElementBox, splittedElement: TextElementBox): void;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/viewer/index.d.ts
/**
 * Viewer Export
 */
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/viewer/layout.d.ts
/**
 * @private
 */
export  class Layout {
    private viewer;
    private value;
    /**
     * @private
     */
    allowLayout: boolean;
    /**
     * @private
     */
    isInitialLoad: boolean;
    private fieldBegin;
    private maxTextHeight;
    private maxBaseline;
    private maxTextBaseline;
    private isFieldCode;
    private isRTLLayout;
    /**
     * @private
     */
    isBidiReLayout: boolean;
    /**
     * @private
     */
    defaultTabWidthPixel: number;
    private isSameStyle;
    /**
     * viewer definition
     */
    constructor(viewer: LayoutViewer);
    /**
     * @private
     */
    layout(): void;
    /**
     * Releases un-managed and - optionally - managed resources.
     */
    destroy(): void;
    /**
     * Layouts the items
     * @private
     */
    layoutItems(sections: BodyWidget[]): void;
    /**
     * Layouts the items
     * @param section
     * @param viewer
     * @private
     */
    layoutSection(section: BodyWidget, index: number, viewer: LayoutViewer, ownerWidget?: Widget): void;
    /**
     * Layouts the header footer items
     * @param section
     * @param viewer
     * @private
     */
    layoutHeaderFooter(section: BodyWidget, viewer: PageLayoutViewer, page: Page): void;
    /**
     * @private
     */
    updateHeaderFooterToParent(node: HeaderFooterWidget): HeaderFooterWidget;
    private linkFieldInHeaderFooter;
    /**
     * @private
     */
    linkFieldInParagraph(widget: ParagraphWidget): void;
    /**
     * @private
     */
    linkFieldInTable(widget: TableWidget): void;
    /**
     * Layouts the header footer items.
     * @param viewer
     * @param hfModule
     * @private
     */
    layoutHeaderFooterItems(viewer: LayoutViewer, widget: HeaderFooterWidget): HeaderFooterWidget;
    /**
     * Shifts the child location
     * @param shiftTop
     * @param bodyWidget
     */
    private shiftChildLocation;
    /**
     * Shifts the child location for table widget.
     * @param tableWidget
     * @param shiftTop
     */
    private shiftChildLocationForTableWidget;
    /**
     * Shifts the child location for table row widget.
     * @param rowWidget
     * @param shiftTop
     */
    private shiftChildLocationForTableRowWidget;
    /**
     * Shifts the child location for table cell widget.
     * @param cellWidget
     * @param shiftTop
     */
    private shiftChildLocationForTableCellWidget;
    /**
     * Layouts specified block.
     * @param block
     * @private
     */
    layoutBlock(block: BlockWidget, index: number, moveToLine?: boolean): BlockWidget;
    /**
     * Adds paragraph widget.
     * @param area
     */
    private addParagraphWidget;
    /**
     * Adds line widget.
     * @param paragraph
     */
    private addLineWidget;
    private isFirstElementWithPageBreak;
    /**
     * Layouts specified paragraph.
     * @private
     * @param paragraph
     */
    layoutParagraph(paragraph: ParagraphWidget, lineIndex: number): BlockWidget;
    private clearLineMeasures;
    private moveElementFromNextLine;
    private layoutLine;
    private layoutElement;
    /**
     * Return true if paragraph has valid inline
     * @private
     */
    hasValidElement(paragraph: ParagraphWidget): boolean;
    private updateFieldText;
    private checkLineWidgetWithClientArea;
    private checkAndSplitTabOrLineBreakCharacter;
    /**
     * @private
     */
    moveFromNextPage(line: LineWidget): void;
    private cutClientWidth;
    private layoutFieldCharacters;
    /**
     * Layouts empty line widget.
     */
    private layoutEmptyLineWidget;
    /**
     * @private
     */
    layoutListItems(paragraph: ParagraphWidget): void;
    /**
     * Layouts list.
     * @param viewer
     */
    private layoutList;
    /**
     * Adds body widget.
     * @param area
     * @param section
     * @private
     */
    addBodyWidget(area: Rect, widget?: BodyWidget): BodyWidget;
    /**
     * Adds list level.
     * @param abstractList
     */
    private addListLevels;
    private addSplittedLineWidget;
    /**
     * Adds element to line.
     * @param element
     */
    private addElementToLine;
    /**
     * Splits element for client area.
     * @param element
     */
    private splitElementForClientArea;
    /**
     * Splits by word
     * @param elementBox
     * @param text
     * @param width
     * @param characterFormat
     */
    private splitByWord;
    /**
     * Method to include error collection on splitted element
     * @private
     * @param {ElementBox} elementBox
     * @param {ElementBox} splittedBox
     */
    splitErrorCollection(elementBox: TextElementBox, splittedBox: TextElementBox): void;
    /**
     * Splits by character.
     * @param textElement
     * @param text
     * @param width
     * @param characterFormat
     */
    private splitByCharacter;
    /**
     * Splits text element word by word.
     * @param textElement
     */
    private splitTextElementWordByWord;
    /**
     * Splits text for client area.
     * @param element
     * @param text
     * @param width
     * @param characterFormat
     */
    private splitTextForClientArea;
    /**
     * Handle tab or line break character splitting
     * @param  {LayoutViewer} viewer
     * @param  {TextElementBox} span
     * @param  {number} index
     * @param  {string} spiltBy
     * @private
     */
    splitByLineBreakOrTab(viewer: LayoutViewer, span: TextElementBox, index: number, spiltBy: string): void;
    /**
     * Moves to next line.
     */
    private moveToNextLine;
    private updateLineWidget;
    /**
     * @param viewer
     */
    private moveToNextPage;
    /**
     * Aligns line elements
     * @param element
     * @param topMargin
     * @param bottomMargin
     * @param maxDescent
     * @param addSubWidth
     * @param subWidth
     * @param textAlignment
     * @param whiteSpaceCount
     * @param isLastElement
     */
    private alignLineElements;
    /**
     * Updates widget to page.
     * @param viewer
     * @param block
     * @private
     */
    updateWidgetToPage(viewer: LayoutViewer, paragraphWidget: ParagraphWidget): void;
    /**
     * @private
     */
    shiftFooterChildLocation(widget: HeaderFooterWidget, viewer: LayoutViewer): void;
    /**
     * Checks previous element.
     * @param characterFormat
     */
    private checkPreviousElement;
    /**
     * @private
     */
    clearListElementBox(paragraph: ParagraphWidget): void;
    /**
     * Gets list number.
     * @param listFormat
     * @param document
     * @private
     */
    getListNumber(listFormat: WListFormat): string;
    /**
     * Gets list start value
     * @param listLevelNumber
     * @param list
     * @private
     */
    getListStartValue(listLevelNumber: number, list: WList): number;
    /**
     * Updates list values.
     * @param list
     * @param listLevelNumber
     * @param document
     */
    private updateListValues;
    /**
     * Gets list text
     * @param listAdv
     * @param listLevelNumber
     * @param currentListLevel
     * @param document
     */
    private getListText;
    /**
     * Gets the roman letter.
     * @param number
     * @private
     */
    getAsLetter(number: number): string;
    /**
     * Gets list text using list level pattern.
     * @param listLevel
     * @param listValue
     * @private
     */
    getListTextListLevel(listLevel: WListLevel, listValue: number): string;
    /**
     * Generate roman number for the specified number.
     * @param number
     * @param magnitude
     * @param letter
     */
    private generateNumber;
    /**
     * Gets list value prefixed with zero, if less than 10
     * @param listValue
     */
    private getAsLeadingZero;
    /**
     * Gets the roman number
     * @param number
     * @private
     */
    getAsRoman(number: number): string;
    /**
     * Gets the list level
     * @param list
     * @param listLevelNumber
     * @private
     */
    getListLevel(list: WList, listLevelNumber: number): WListLevel;
    /**
     * Gets tab width
     * @param paragraph
     * @param viewer
     */
    private getTabWidth;
    /**
     * Returns the right tab width
     * @param index - index of starting inline
     * @param lineWidget - current line widget
     * @param paragraph - current paragraph widget
     */
    private getRightTabWidth;
    /**
     * Gets split index by word.
     * @param clientActiveWidth
     * @param text
     * @param width
     * @param characterFormat
     */
    private getSplitIndexByWord;
    /**
     * Gets split index by character
     * @param totalClientWidth
     * @param clientActiveAreaWidth
     * @param text
     * @param width
     * @param characterFormat
     */
    private getTextSplitIndexByCharacter;
    /**
     * Gets sub width.
     * @param justify
     * @param spaceCount
     * @param firstLineIndent
     */
    private getSubWidth;
    /**
     * Gets before spacing.
     * @param paragraph
     * @private
     */
    getBeforeSpacing(paragraph: ParagraphWidget): number;
    getAfterSpacing(paragraph: ParagraphWidget): number;
    /**
     * Gets line spacing.
     * @param paragraph
     * @param maxHeight
     * @private
     */
    getLineSpacing(paragraph: ParagraphWidget, maxHeight: number): number;
    /**
     * Checks whether current line is first line in a paragraph.
     * @param paragraph
     */
    private isParagraphFirstLine;
    /**
     * Checks whether current line is last line in a paragraph.
     * @param paragraph
     */
    private isParagraphLastLine;
    /**
     * Gets text index after space.
     * @param text
     * @param startIndex
     */
    private getTextIndexAfterSpace;
    /**
     * @private
     */
    moveNextWidgetsToTable(tableWidget: TableWidget[], rowWidgets: TableRowWidget[], moveFromNext: boolean): void;
    /**
     * Adds table cell widget.
     * @param cell
     * @param area
     * @param maxCellMarginTop
     * @param maxCellMarginBottom
     */
    private addTableCellWidget;
    /**
     * Adds specified row widget to table.
     * @param viewer
     * @param tableRowWidget
     * @param row
     */
    private addWidgetToTable;
    /**
     * Updates row height by spanned cell.
     * @param tableWidget
     * @param rowWidget
     * @param insertIndex
     * @param row
     * @private
     */
    updateRowHeightBySpannedCell(tableWidget: TableWidget, row: TableRowWidget, insertIndex: number): void;
    /**
     * Updates row height.
     * @param prevRowWidget
     * @param rowWidget
     * @param row
     */
    private updateRowHeight;
    private updateSpannedRowCollection;
    /**
     * Updates row height by cell spacing
     * @param rowWidget
     * @param viewer
     * @param row
     */
    private updateRowHeightByCellSpacing;
    /**
     * Checks whether row span is end.
     * @param row
     * @param viewer
     */
    private isRowSpanEnd;
    /**
     * Checks whether vertical merged cell to continue or not.
     * @param row
     * @private
     */
    isVerticalMergedCellContinue(row: TableRowWidget): boolean;
    /**
     * Splits widgets.
     * @param tableRowWidget
     * @param viewer
     * @param splittedWidget
     * @param row
     */
    private splitWidgets;
    /**
     * Gets splitted widget for row.
     * @param bottom
     * @param tableRowWidget
     */
    private getSplittedWidgetForRow;
    /**
     * Updates widget to table.
     * @param row
     * @param viewer
     */
    updateWidgetsToTable(tableWidgets: TableWidget[], rowWidgets: TableRowWidget[], row: TableRowWidget): void;
    /**
     * Gets header.
     * @param table
     * @private
     */
    getHeader(table: TableWidget): TableRowWidget;
    /**
     * Gets header height.
     * @param ownerTable
     * @param row
     */
    private getHeaderHeight;
    /**
     * Updates widgets to row.
     * @param cell
     */
    private updateWidgetToRow;
    /**
     * Updates height for row widget.
     * @param viewer
     * @param isUpdateVerticalPosition
     * @param rowWidget
     */
    private updateHeightForRowWidget;
    /**
     * Updates height for cell widget.
     * @param viewer
     * @param cellWidget
     */
    private updateHeightForCellWidget;
    /**
     * Gets row height.
     * @param row
     * @private
     */
    getRowHeight(row: TableRowWidget, rowCollection: TableRowWidget[]): number;
    /**
     * splits spanned cell widget.
     * @param cellWidget
     * @param viewer
     */
    private splitSpannedCellWidget;
    /**
     * Inserts splitted cell widgets.
     * @param viewer
     * @param rowWidget
     */
    private insertSplittedCellWidgets;
    /**
     * Inserts spanned row widget.
     * @param rowWidget
     * @param viewer
     * @param left
     * @param index
     */
    private insertRowSpannedWidget;
    /**
     * Inserts empty splitted cell widgets.
     * @param rowWidget
     * @param left
     * @param index
     */
    private insertEmptySplittedCellWidget;
    /**
     * Gets spllited widget.
     * @param bottom
     * @param splitMinimalWidget
     * @param cellWidget
     */
    private getSplittedWidget;
    /**
     * Gets list level pattern
     * @param value
     * @private
     */
    getListLevelPattern(value: number): ListLevelPattern;
    /**
     * Creates cell widget.
     * @param cell
     */
    private createCellWidget;
    /**
     * Create Table Widget
     */
    private createTableWidget;
    /**
     * Gets splitted widget for paragraph.
     * @param bottom
     * @param paragraphWidget
     */
    private getSplittedWidgetForPara;
    /**
     * Gets splitted table widget.
     * @param bottom
     * @param tableWidget
     * @private
     */
    getSplittedWidgetForTable(bottom: number, tableCollection: TableWidget[], tableWidget: TableWidget): TableWidget;
    /**
     * Checks whether first line fits for paragraph or not.
     * @param bottom
     * @param paraWidget
     */
    private isFirstLineFitForPara;
    /**
     * Checks whether first line fits for table or not.
     * @param bottom
     * @param tableWidget
     * @private
     */
    isFirstLineFitForTable(bottom: number, tableWidget: TableWidget): boolean;
    /**
     * Checks whether first line fits for row or not.
     * @param bottom
     * @param rowWidget
     */
    private isFirstLineFitForRow;
    /**
     * Checks whether first line fits for cell or not.
     * @param bottom
     * @param cellWidget
     */
    private isFirstLineFitForCell;
    /**
     * Updates widget location.
     * @param widget
     * @param table
     */
    private updateWidgetLocation;
    /**
     * Updates child location for table.
     * @param top
     * @param tableWidget
     * @private
     */
    updateChildLocationForTable(top: number, tableWidget: TableWidget): void;
    /**
     * Updates child location for row.
     * @param top
     * @param rowWidget
     * @private
     */
    updateChildLocationForRow(top: number, rowWidget: TableRowWidget): void;
    /**
     * Updates child location for cell.
     * @param top
     * @param cellWidget
     */
    private updateChildLocationForCell;
    /**
     * Updates cell vertical position.
     * @param cellWidget
     * @param isUpdateToTop
     * @param isInsideTable
     * @private
     */
    updateCellVerticalPosition(cellWidget: TableCellWidget, isUpdateToTop: boolean, isInsideTable: boolean): void;
    /**
     * Updates cell content vertical position.
     * @param cellWidget
     * @param displacement
     * @param isUpdateToTop
     */
    private updateCellContentVerticalPosition;
    /**
     * Updates table widget location.
     * @param tableWidget
     * @param location
     * @param isUpdateToTop
     */
    private updateTableWidgetLocation;
    /**
     * Gets displacement.
     * @param cellWidget
     * @param isUpdateToTop
     */
    private getDisplacement;
    /**
     * Gets cell content height.
     * @param cellWidget
     */
    private getCellContentHeight;
    /**
     * Gets table left borders.
     * @param borders
     * @private
     */
    getTableLeftBorder(borders: WBorders): WBorder;
    /**
     * Gets table right border.
     * @param borders
     * @private
     */
    getTableRightBorder(borders: WBorders): WBorder;
    /**
     * Get table top border.
     * @param borders
     * @private
     */
    getTableTopBorder(borders: WBorders): WBorder;
    /**
     * Gets table bottom border.
     * @param borders
     * @private
     */
    getTableBottomBorder(borders: WBorders): WBorder;
    /**
     * Get diagonal cell up border.
     * @param tableCell
     * @private
     */
    getCellDiagonalUpBorder(tableCell: TableCellWidget): WBorder;
    /**
     * Gets diagonal cell down border
     * @param tableCell
     * @private
     */
    getCellDiagonalDownBorder(tableCell: TableCellWidget): WBorder;
    /**
     * Gets table width.
     * @param table
     * @private
     */
    getTableWidth(table: TableWidget): number;
    /**
     * @private
     */
    layoutNextItemsBlock(blockAdv: BlockWidget, viewer: LayoutViewer): void;
    /**
     * @private
     */
    updateClientAreaForLine(paragraph: ParagraphWidget, startLineWidget: LineWidget, elementIndex: number): void;
    /**
     * @private
     */
    getParentTable(block: BlockWidget): TableWidget;
    /**
     * @private
     */
    reLayoutParagraph(paragraphWidget: ParagraphWidget, lineIndex: number, elementBoxIndex: number, isBidi?: boolean): void;
    /**
     * @private
     */
    reLayoutTable(block: BlockWidget): void;
    /**
     * @private
     */
    clearTableWidget(table: TableWidget, clearPosition: boolean, clearHeight: boolean, clearGrid?: boolean): void;
    /**
     * @private
     */
    clearRowWidget(row: TableRowWidget, clearPosition: boolean, clearHeight: boolean, clearGrid: boolean): void;
    /**
     * @private
     */
    clearCellWidget(cell: TableCellWidget, clearPosition: boolean, clearHeight: boolean, clearGrid: boolean): void;
    /**
     * @param blockIndex
     * @param bodyWidget
     * @param block
     * @private
     */
    layoutBodyWidgetCollection(blockIndex: number, bodyWidget: Widget, block: BlockWidget, shiftNextWidget: boolean): void;
    private checkAndGetBlock;
    /**
     * Layouts table.
     * @param table
     * @private
     */
    layoutTable(table: TableWidget, startIndex: number): BlockWidget;
    /**
     * Adds table widget.
     * @param area
     * @param table
     * @private
     */
    addTableWidget(area: Rect, table: TableWidget[], create?: boolean): TableWidget;
    /**
     * Updates widget to page.
     * @param table
     * @private
     */
    updateWidgetsToPage(tables: TableWidget[], rows: TableRowWidget[], table: TableWidget, endRowWidget?: TableRowWidget): void;
    /**
     * Updates height for table widget.
     * @param viewer
     * @param tableWidget
     * @private
     */
    updateHeightForTableWidget(tables: TableWidget[], rows: TableRowWidget[], tableWidget: TableWidget, endRowWidget?: TableRowWidget): void;
    /**
     * Layouts table row.
     * @param row
     * @private
     */
    layoutRow(tableWidget: TableWidget[], row: TableRowWidget): TableRowWidget;
    /**
     * @param area
     * @param row
     */
    private addTableRowWidget;
    /**
     * Gets maximum top cell margin.
     * @param row
     * @param topOrBottom
     */
    private getMaxTopCellMargin;
    /**
     * Gets maximum bottom cell margin.
     * @param row
     * @param topOrBottom
     */
    private getMaxBottomCellMargin;
    /**
     * Layouts cell
     * @param cell
     * @param maxCellMarginTop
     * @param maxCellMarginBottom
     */
    private layoutCell;
    /**
     * @private
     */
    shiftLayoutedItems(): void;
    /**
     * @private
     */
    updateFieldElements(): void;
    private reLayoutOrShiftWidgets;
    private shiftWidgetsBlock;
    private shiftWidgetsForPara;
    /**
     * @private
     */
    shiftTableWidget(table: TableWidget, viewer: LayoutViewer): TableWidget;
    /**
     * @private
     */
    shiftRowWidget(tables: TableWidget[], row: TableRowWidget): TableRowWidget;
    /**
     * @private
     */
    shiftCellWidget(cell: TableCellWidget, maxCellMarginTop: number, maxCellMarginBottom: number): void;
    /**
     * @private
     */
    shiftParagraphWidget(paragraph: ParagraphWidget): void;
    private shiftWidgetsForTable;
    private updateVerticalPositionToTop;
    private splitWidget;
    private getMaxElementHeight;
    private createOrGetNextBodyWidget;
    private isFitInClientArea;
    private shiftToPreviousWidget;
    private updateParagraphWidgetInternal;
    private shiftNextWidgets;
    /**
     * @private
     */
    updateContainerWidget(widget: Widget, bodyWidget: BodyWidget, index: number, destroyAndScroll: boolean): void;
    private getBodyWidgetOfPreviousBlock;
    /**
     * @private
     */
    moveBlocksToNextPage(block: BlockWidget): BodyWidget;
    private createSplitBody;
    /**
     * Relayout Paragraph from specified line widget
     * @param paragraph Paragraph to reLayout
     * @param lineIndex start line index to reLayout
     * @private
     */
    reLayoutLine(paragraph: ParagraphWidget, lineIndex: number, isBidi: boolean): void;
    isContainsRtl(lineWidget: LineWidget): boolean;
    reArrangeElementsForRtl(line: LineWidget, isParaBidi: boolean): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/viewer/page.d.ts
/**
 * @private
 */
export  class Rect {
    /**
     * @private
     */
    width: number;
    /**
     * @private
     */
    height: number;
    /**
     * @private
     */
    x: number;
    /**
     * @private
     */
    y: number;
    /**
     * @private
     */
    readonly right: number;
    /**
     * @private
     */
    readonly bottom: number;
    constructor(x: number, y: number, width: number, height: number);
}
/**
 * @private
 */
export  class Margin {
    /**
     * @private
     */
    left: number;
    /**
     * @private
     */
    top: number;
    /**
     * @private
     */
    right: number;
    /**
     * @private
     */
    bottom: number;
    constructor(leftMargin: number, topMargin: number, rightMargin: number, bottomMargin: number);
    /**
     * @private
     */
    clone(): Margin;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export interface IWidget {
}
/**
 * @private
 */
export  abstract class Widget implements IWidget {
    /**
     * @private
     */
    childWidgets: IWidget[];
    /**
     * @private
     */
    x: number;
    /**
     * @private
     */
    y: number;
    /**
     * @private
     */
    width: number;
    /**
     * @private
     */
    height: number;
    /**
     * @private
     */
    margin: Margin;
    /**
     * @private
     */
    containerWidget: Widget;
    /**
     * @private
     */
    index: number;
    /**
     * @private
     */
    readonly indexInOwner: number;
    /**
     * @private
     */
    readonly firstChild: IWidget;
    /**
     * @private
     */
    readonly lastChild: IWidget;
    /**
     * @private
     */
    readonly previousWidget: Widget;
    /**
     * @private
     */
    readonly nextWidget: Widget;
    /**
     * @private
     */
    readonly previousRenderedWidget: Widget;
    /**
     * @private
     */
    readonly nextRenderedWidget: Widget;
    /**
     * @private
     */
    readonly previousSplitWidget: Widget;
    /**
     * @private
     */
    readonly nextSplitWidget: Widget;
    /**
     * @private
     */
    abstract equals(widget: Widget): boolean;
    /**
     * @private
     */
    abstract getTableCellWidget(point: Point): TableCellWidget;
    /**
     * @private
     */
    getPreviousSplitWidgets(): Widget[];
    /**
     * @private
     */
    getSplitWidgets(): Widget[];
    /**
     * @private
     */
    combineWidget(viewer: LayoutViewer): Widget;
    private combine;
    /**
     * @private
     */
    addWidgets(childWidgets: IWidget[]): void;
    /**
     * @private
     */
    removeChild(index: number): void;
    /**
     * @private
     */
    abstract destroyInternal(viewer: LayoutViewer): void;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  abstract class BlockContainer extends Widget {
    /**
     * @private
     */
    page: Page;
    /**
     * @private
     */
    sectionFormatIn: WSectionFormat;
    /**
     * @private
     */
    /**
    * @private
    */
    sectionFormat: WSectionFormat;
    /**
     * @private
     */
    readonly sectionIndex: number;
    /**
     * @private
     */
    getHierarchicalIndex(hierarchicalIndex: string): string;
}
/**
 * @private
 */
export  class BodyWidget extends BlockContainer {
    /**
     * Initialize the constructor of BodyWidget
     */
    constructor();
    /**
     * @private
     */
    equals(widget: Widget): boolean;
    /**
     * @private
     */
    getHierarchicalIndex(hierarchicalIndex: string): string;
    /**
     * @private
     */
    getTableCellWidget(touchPoint: Point): TableCellWidget;
    /**
     * @private
     */
    destroyInternal(viewer: LayoutViewer): void;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export interface HeaderFooters {
    [key: number]: HeaderFooterWidget;
}
/**
 * @private
 */
export  class HeaderFooterWidget extends BlockContainer {
    /**
     * @private
     */
    headerFooterType: HeaderFooterType;
    /**
     * @private
     */
    isEmpty: boolean;
    constructor(type: HeaderFooterType);
    /**
     * @private
     */
    getTableCellWidget(point: Point): TableCellWidget;
    /**
     * @private
     */
    equals(widget: Widget): boolean;
    /**
     * @private
     */
    clone(): HeaderFooterWidget;
    /**
     * @private
     */
    destroyInternal(viewer: LayoutViewer): void;
}
/**
 * @private
 */
export  abstract class BlockWidget extends Widget {
    /**
     * @private
     */
    leftBorderWidth: number;
    /**
     * @private
     */
    rightBorderWidth: number;
    /**
     * @private
     */
    topBorderWidth: number;
    /**
     * @private
     */
    bottomBorderWidth: number;
    /**
     * @private
     */
    readonly bodyWidget: BlockContainer;
    /**
     * @private
     */
    readonly leftIndent: number;
    /**
     * @private
     */
    readonly rightIndent: number;
    /**
     * @private
     */
    readonly isInsideTable: boolean;
    /**
     * @private
     */
    readonly isInHeaderFooter: boolean;
    /**
     * @private
     */
    readonly associatedCell: TableCellWidget;
    /**
     * Check whether the paragraph contains only page break.
     * @private
     */
    isPageBreak(): boolean;
    /**
     * @private
     */
    getHierarchicalIndex(hierarchicalIndex: string): string;
    /**
     * @private
     */
    abstract getMinimumAndMaximumWordWidth(minimumWordWidth: number, maximumWordWidth: number): WidthInfo;
    /**
     * @private
     */
    abstract clone(): BlockWidget;
    /**
     * @private
     */
    getIndex(): number;
    /**
     * @private
     */
    getContainerWidth(): number;
    /**
     * @private
     */
    readonly bidi: boolean;
}
/**
 * @private
 */
export  class ParagraphWidget extends BlockWidget {
    /**
     * @private
     */
    paragraphFormat: WParagraphFormat;
    /**
     * @private
     */
    characterFormat: WCharacterFormat;
    /**
     * @private
     */
    isChangeDetected: boolean;
    /**
     * @private
     */
    readonly isEndsWithPageBreak: boolean;
    /**
     * Initialize the constructor of ParagraphWidget
     */
    constructor();
    /**
     * @private
     */
    equals(widget: Widget): boolean;
    /**
     * @private
     */
    isEmpty(): boolean;
    /**
     * @private
     */
    getInline(offset: number, indexInInline: number): ElementInfo;
    /**
     * @private
     */
    getLength(): number;
    /**
     * @private
     */
    getTableCellWidget(point: Point): TableCellWidget;
    /**
     * @private
     */
    getMinimumAndMaximumWordWidth(minimumWordWidth: number, maximumWordWidth: number): WidthInfo;
    private measureParagraph;
    /**
     * @private
     */
    clone(): ParagraphWidget;
    /**
     * @private
     */
    destroyInternal(viewer: LayoutViewer): void;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class TableWidget extends BlockWidget {
    private flags;
    /**
     * @private
     */
    leftMargin: number;
    /**
     * @private
     */
    topMargin: number;
    /**
     * @private
     */
    rightMargin: number;
    /**
     * @private
     */
    bottomMargin: number;
    /**
     * @private
     */
    tableFormat: WTableFormat;
    /**
     * @private
     */
    spannedRowCollection: Dictionary<number, number>;
    /**
     * @private
     */
    tableHolder: WTableHolder;
    /**
     * @private
     */
    headerHeight: number;
    /**
     * @private
     */
    description: string;
    /**
     * @private
     */
    title: string;
    /**
     * @private
     */
    tableCellInfo: Dictionary<number, Dictionary<number, number>>;
    /**
     * @private
     */
    /**
    * @private
    */
    isGridUpdated: boolean;
    /**
     * @private
     */
    /**
    * @private
    */
    continueHeader: boolean;
    /**
     * @private
     */
    /**
    * @private
    */
    header: boolean;
    isBidiTable: boolean;
    constructor();
    /**
     * @private
     */
    equals(widget: Widget): boolean;
    /**
     * @private
     */
    combineRows(viewer: LayoutViewer): void;
    /**
     * @private
     */
    contains(tableCell: TableCellWidget): boolean;
    /**
     * @private
     */
    getOwnerWidth(isBasedOnViewer: boolean): number;
    /**
     * @private
     */
    getTableWidth(): number;
    /**
     * @private
     */
    getTableClientWidth(clientWidth: number): number;
    /**
     * @private
     */
    getCellWidth(preferredWidth: number, preferredWidthType: WidthType, containerWidth: number, cell: TableCellWidget): number;
    /**
     * @private
     */
    fitCellsToClientArea(clientWidth: number): void;
    /**
     * @private
     */
    getTableCellWidget(point: Point): TableCellWidget;
    /**
     * @private
     */
    calculateGrid(): void;
    private updateColumnSpans;
    /**
     * @private
     */
    getMinimumAndMaximumWordWidth(minimumWordWidth: number, maximumWordWidth: number): WidthInfo;
    /**
     * @private
     */
    checkTableColumns(): void;
    /**
     * @private
     */
    isAutoFit(): boolean;
    /**
     * @private
     */
    buildTableColumns(): void;
    /**
     * @private
     */
    setWidthToCells(tableWidth: number, isAutoWidth: boolean): void;
    /**
     * @private
     */
    updateProperties(updateAllowAutoFit: boolean, currentSelectedTable: TableWidget, autoFitBehavior: AutoFitType): void;
    /**
     * @private
     */
    getMaxRowWidth(clientWidth: number): number;
    /**
     * @private
     */
    updateWidth(dragValue: number): void;
    /**
     * @private
     */
    convertPointToPercent(tablePreferredWidth: number, ownerWidth: number): number;
    updateChildWidgetLeft(left: number): void;
    /**
     * Shift the widgets for right to left aligned table.
     * @private
     */
    shiftWidgetsForRtlTable(clientArea: Rect, tableWidget: TableWidget): void;
    /**
     * @private
     */
    clone(): TableWidget;
    /**
     * @private
     */
    static getTableOf(node: WBorders): TableWidget;
    /**
     * @private
     */
    fitChildToClientArea(): void;
    /**
     * @private
     */
    getColumnCellsForSelection(startCell: TableCellWidget, endCell: TableCellWidget): TableCellWidget[];
    /**
     * Splits width equally for all the cells.
     * @param tableClientWidth
     * @private
     */
    splitWidthToTableCells(tableClientWidth: number): void;
    /**
     * @private
     */
    insertTableRowsInternal(tableRows: TableRowWidget[], startIndex: number): void;
    /**
     * @private
     */
    updateRowIndex(startIndex: number): void;
    /**
     * @private
     */
    getCellStartOffset(cell: TableCellWidget): number;
    /**
     * @private
     */
    destroyInternal(viewer: LayoutViewer): void;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class TableRowWidget extends BlockWidget {
    /**
     * @private
     */
    topBorderWidth: number;
    /**
     * @private
     */
    bottomBorderWidth: number;
    /**
     * @private
     */
    rowFormat: WRowFormat;
    /**
     * @private
     */
    readonly rowIndex: number;
    /**
     * @private
     */
    readonly ownerTable: TableWidget;
    /**
     * @private
     */
    readonly nextRow: TableRowWidget;
    constructor();
    /**
     * @private
     */
    equals(widget: Widget): boolean;
    /**
     * @private
     */
    combineCells(viewer: LayoutViewer): void;
    /**
     * @private
     */
    static getRowOf(node: WBorders): TableRowWidget;
    /**
     * @private
     */
    getCell(rowIndex: number, cellIndex: number): TableCellWidget;
    /**
     * @private
     */
    splitWidthToRowCells(tableClientWidth: number): void;
    /**
     * @private
     */
    getGridCount(tableGrid: number[], cell: TableCellWidget, index: number, containerWidth: number): number;
    private getOffsetIndex;
    private getCellOffset;
    /**
     * @private
     */
    updateRowBySpannedCells(): void;
    /**
     * @private
     */
    getPreviousRowSpannedCells(include?: boolean): TableCellWidget[];
    /**
     * @private
     */
    getTableCellWidget(point: Point): TableCellWidget;
    /**
     * @private
     */
    getMinimumAndMaximumWordWidth(minimumWordWidth: number, maximumWordWidth: number): WidthInfo;
    /**
     * @private
     */
    destroyInternal(viewer: LayoutViewer): void;
    /**
     * @private
     */
    clone(): TableRowWidget;
    /**
     * Updates the child widgets left.
     * @param left
     * @private
     */
    updateChildWidgetLeft(left: number): void;
    /**
     * Shift the widgets for RTL table.
     * @param clientArea
     * @param tableWidget
     * @param rowWidget
     * @private
     */
    shiftWidgetForRtlTable(clientArea: Rect, tableWidget: TableWidget, rowWidget: TableRowWidget): void;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class TableCellWidget extends BlockWidget {
    /**
     * @private
     */
    rowIndex: number;
    /**
     * @private
     */
    cellFormat: WCellFormat;
    /**
     * @private
     */
    columnIndex: number;
    private sizeInfoInternal;
    /**
     * @private
     */
    readonly ownerColumn: WColumn;
    /**
     * @private
     */
    readonly leftMargin: number;
    /**
     * @private
     */
    readonly topMargin: number;
    /**
     * @private
     */
    readonly rightMargin: number;
    /**
     * @private
     */
    readonly bottomMargin: number;
    /**
     * @private
     */
    readonly cellIndex: number;
    /**
     * @private
     */
    readonly ownerTable: TableWidget;
    /**
     * @private
     */
    readonly ownerRow: TableRowWidget;
    /**
     * @private
     */
    readonly sizeInfo: ColumnSizeInfo;
    constructor();
    /**
     * @private
     */
    equals(widget: Widget): boolean;
    /**
     * @private
     */
    getContainerTable(): TableWidget;
    /**
     * @private
     */
    getPreviousSplitWidget(): TableCellWidget;
    /**
     * @private
     */
    getNextSplitWidget(): TableCellWidget;
    /**
     * @private
     */
    getTableCellWidget(point: Point): TableCellWidget;
    /**
     * @private
     */
    updateWidth(preferredWidth: number): void;
    /**
     * @private
     */
    getCellWidth(): number;
    /**
     * @private
     */
    convertPointToPercent(cellPreferredWidth: number): number;
    /**
     * @private
     */
    static getCellLeftBorder(tableCell: TableCellWidget): WBorder;
    /**
     * @private
     */
    getLeftBorderWidth(): number;
    /**
     * @private
     */
    getRightBorderWidth(): number;
    /**
     * @private
     */
    getCellSpacing(): number;
    /**
     * @private
     */
    getCellSizeInfo(isAutoFit: boolean): ColumnSizeInfo;
    /**
     * @private
     */
    getMinimumPreferredWidth(): number;
    /**
     * @private
     */
    getPreviousCellLeftBorder(leftBorder: WBorder, previousCell: TableCellWidget): WBorder;
    /**
     * @private
     */
    getBorderBasedOnPriority(border: WBorder, adjacentBorder: WBorder): WBorder;
    /**
     * @private
     */
    getLeftBorderToRenderByHierarchy(leftBorder: WBorder, rowBorders: WBorders, tableBorders: WBorders): WBorder;
    /**
     * @private
     */
    static getCellRightBorder(tableCell: TableCellWidget): WBorder;
    /**
     * @private
     */
    getAdjacentCellRightBorder(rightBorder: WBorder, nextCell: TableCellWidget): WBorder;
    /**
     * @private
     */
    getRightBorderToRenderByHierarchy(rightBorder: WBorder, rowBorders: WBorders, tableBorders: WBorders): WBorder;
    /**
     * @private
     */
    static getCellTopBorder(tableCell: TableCellWidget): WBorder;
    /**
     * @private
     */
    getPreviousCellTopBorder(topBorder: WBorder, previousTopCell: TableCellWidget): WBorder;
    /**
     * @private
     */
    getTopBorderToRenderByHierarchy(topBorder: WBorder, rowBorders: WBorders, tableBorders: WBorders): WBorder;
    /**
     * @private
     */
    static getCellBottomBorder(tableCell: TableCellWidget): WBorder;
    /**
     * @private
     */
    getAdjacentCellBottomBorder(bottomBorder: WBorder, nextBottomCell: TableCellWidget): WBorder;
    /**
     * @private
     */
    getBottomBorderToRenderByHierarchy(bottomBorder: WBorder, rowBorders: WBorders, tableBorders: WBorders): WBorder;
    private convertHexToRGB;
    /**
     * @private
     */
    static getCellOf(node: WBorders): TableCellWidget;
    /**
     * Updates the Widget left.
     * @private
     */
    updateWidgetLeft(x: number): void;
    /**
     * @private
     */
    updateChildWidgetLeft(left: number): void;
    /**
     * @private
     */
    getMinimumAndMaximumWordWidth(minimumWordWidth: number, maximumWordWidth: number): WidthInfo;
    /**
     * @private
     */
    destroyInternal(viewer: LayoutViewer): void;
    /**
     * @private
     */
    clone(): TableCellWidget;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class LineWidget implements IWidget {
    /**
     * @private
     */
    children: ElementBox[];
    /**
     * @private
     */
    paragraph: ParagraphWidget;
    /**
     * @private
     */
    x: number;
    /**
     * @private
     */
    y: number;
    /**
     * @private
     */
    width: number;
    /**
     * @private
     */
    height: number;
    /**
     * @private
     */
    readonly indexInOwner: number;
    /**
     * @private
     */
    readonly nextLine: LineWidget;
    /**
     * @private
     */
    readonly previousLine: LineWidget;
    /**
     * @private
     */
    readonly isEndsWithPageBreak: boolean;
    /**
     * Initialize the constructor of LineWidget
     */
    constructor(paragraphWidget: ParagraphWidget);
    /**
     * @private
     */
    isFirstLine(): boolean;
    /**
     * @private
     */
    isLastLine(): boolean;
    /**
     * @private
     */
    getOffset(inline: ElementBox, index: number): number;
    /**
     * @private
     */
    getEndOffset(): number;
    /**
     * @private
     */
    getInline(offset: number, indexInInline: number, bidi?: boolean, isInsert?: boolean): ElementInfo;
    /**
     * Method to retrieve next element
     * @param line
     * @param index
     */
    private getNextTextElement;
    /**
     * @private
     */
    getHierarchicalIndex(hierarchicalIndex: string): string;
    /**
     * @private
     */
    clone(): LineWidget;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  abstract class ElementBox {
    /**
     * @private
     */
    x: number;
    /**
     * @private
     */
    y: number;
    /**
     * @private
     */
    width: number;
    /**
     * @private
     */
    height: number;
    /**
     * @private
     */
    margin: Margin;
    /**
     * @private
     */
    line: LineWidget;
    /**
     * @private
     */
    characterFormat: WCharacterFormat;
    /**
     * @private
     */
    static objectCharacter: string;
    /**
     * @private
     */
    isRightToLeft: boolean;
    /**
     * @private
     */
    canTrigger: boolean;
    /**
     * @private
     */
    ischangeDetected: boolean;
    /**
     * @private
     */
    isVisible: boolean;
    /**
     * @private
     */
    isSpellChecked?: boolean;
    /**
     * @private
     */
    readonly isPageBreak: boolean;
    /**
     * @private
     */
    linkFieldCharacter(viewer: LayoutViewer): void;
    /**
     * @private
     */
    linkFieldTraversingBackward(line: LineWidget, fieldEnd: FieldElementBox, previousNode: ElementBox): boolean;
    /**
     * @private
     */
    linkFieldTraversingForward(line: LineWidget, fieldBegin: FieldElementBox, previousNode: ElementBox): boolean;
    /**
     * @private
     */
    linkFieldTraversingBackwardSeparator(line: LineWidget, fieldSeparator: FieldElementBox, previousNode: ElementBox): boolean;
    /**
     * @private
     */
    readonly length: number;
    /**
     * @private
     */
    readonly indexInOwner: number;
    /**
     * @private
     */
    readonly previousElement: ElementBox;
    /**
     * @private
     */
    readonly nextElement: ElementBox;
    /**
     * @private
     */
    readonly nextNode: ElementBox;
    /**
     * @private
     */
    readonly previousNode: ElementBox;
    /**
     * @private
     */
    readonly paragraph: ParagraphWidget;
    /**
     * Initialize the constructor of ElementBox
     */
    constructor();
    /**
     * @private
     */
    abstract getLength(): number;
    /**
     * @private
     */
    abstract clone(): ElementBox;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class FieldElementBox extends ElementBox {
    /**
     * @private
     */
    fieldType: number;
    /**
     * @private
     */
    fieldCodeType: string;
    /**
     * @private
     */
    hasFieldEnd: boolean;
    private fieldBeginInternal;
    private fieldSeparatorInternal;
    private fieldEndInternal;
    fieldBegin: FieldElementBox;
    fieldSeparator: FieldElementBox;
    fieldEnd: FieldElementBox;
    constructor(type: number);
    /**
     * @private
     */
    getLength(): number;
    /**
     * @private
     */
    clone(): FieldElementBox;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class TextElementBox extends ElementBox {
    /**
     * @private
     */
    baselineOffset: number;
    /**
     * @private
     */
    text: string;
    /**
     * @private
     */
    errorCollection?: ErrorTextElementBox[];
    /**
     * @private
     */
    ignoreOnceItems?: string[];
    /**
     * @private
     */
    istextCombined?: boolean;
    constructor();
    /**
     * @private
     */
    getLength(): number;
    /**
     * @private
     */
    clone(): TextElementBox;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class ErrorTextElementBox extends TextElementBox {
    private startIn;
    private endIn;
    start: TextPosition;
    end: TextPosition;
    constructor();
    destroy(): void;
}
/**
 * @private
 */
export  class FieldTextElementBox extends TextElementBox {
    /**
     * @private
     */
    fieldBegin: FieldElementBox;
    private fieldText;
    text: string;
    constructor();
    /**
     * @private
     */
    clone(): FieldTextElementBox;
}
/**
 * @private
 */
export  class TabElementBox extends TextElementBox {
    /**
     * @private
     */
    tabText: string;
    /**
     * @private
     */
    tabLeader: TabLeader;
    /**
     * @private
     */
    destroy(): void;
    constructor();
    /**
     * @private
     */
    clone(): TabElementBox;
}
/**
 * @private
 */
export  class BookmarkElementBox extends ElementBox {
    private bookmarkTypeIn;
    private refereneceIn;
    private nameIn;
    /**
     * @private
     */
    readonly bookmarkType: number;
    /**
     * @private
     */
    /**
    * @private
    */
    name: string;
    /**
     * @private
     */
    /**
    * @private
    */
    reference: BookmarkElementBox;
    constructor(type: number);
    /**
     * @private
     */
    getLength(): number;
    /**
     * @private
     */
    destroy(): void;
    /**
     * Clones the bookmark element box.
     * @param element - book mark element
     */
    /**
     * @private
     */
    clone(): BookmarkElementBox;
}
/**
 * @private
 */
export  class ImageElementBox extends ElementBox {
    private imageStr;
    private imgElement;
    private isInlineImageIn;
    /**
     * @private
     */
    isMetaFile: boolean;
    /**
     * @private
     */
    readonly isInlineImage: boolean;
    /**
     * @private
     */
    readonly element: HTMLImageElement;
    /**
     * @private
     */
    readonly length: number;
    /**
     * @private
     */
    /**
    * @private
    */
    imageString: string;
    constructor(isInlineImage?: boolean);
    /**
     * @private
     */
    getLength(): number;
    /**
     * @private
     */
    clone(): ImageElementBox;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class ListTextElementBox extends ElementBox {
    /**
     * @private
     */
    baselineOffset: number;
    /**
     * @private
     */
    text: string;
    /**
     * @private
     */
    listLevel: WListLevel;
    /**
     * @private
     */
    isFollowCharacter: boolean;
    constructor(listLevel: WListLevel, isListFollowCharacter: boolean);
    /**
     * @private
     */
    getLength(): number;
    /**
     * @private
     */
    clone(): ListTextElementBox;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class EditRangeEndElementBox extends ElementBox {
    /**
     * @private
     */
    editRangeStart: EditRangeStartElementBox;
    editRangeId: number;
    constructor();
    /**
     * @private
     */
    getLength(): number;
    /**
     * @private
     */
    destroy(): void;
    /**
     * @private
     */
    clone(): EditRangeEndElementBox;
}
/**
 * @private
 */
export  class EditRangeStartElementBox extends ElementBox {
    /**
     * @private
     */
    columnFirst: number;
    /**
     * @private
     */
    columnLast: number;
    /**
     * @private
     */
    user: string;
    /**
     * @private
     */
    group: string;
    /**
     * @private
     */
    editRangeEnd: EditRangeEndElementBox;
    editRangeId: number;
    constructor();
    /**
     * @private
     */
    getLength(): number;
    /**
     * @private
     */
    destroy(): void;
    /**
     * @private
     */
    clone(): EditRangeStartElementBox;
}
/**
 * @private
 */
export  class ChartElementBox extends ImageElementBox {
    /**
     * @private
     */
    private div;
    /**
     * @private
     */
    private officeChartInternal;
    /**
     * @private
     */
    private chartTitle;
    /**
     * @private
     */
    private chartType;
    /**
     * @private
     */
    private gapWidth;
    /**
     * @private
     */
    private overlap;
    /**
     * @private
     */
    private chartElement;
    /**
     * @private
     */
    chartArea: ChartArea;
    /**
     * @private
     */
    chartPlotArea: ChartArea;
    /**
     * @private
     */
    chartCategory: ChartCategory[];
    /**
     * @private
     */
    chartSeries: ChartSeries[];
    /**
     * @private
     */
    chartTitleArea: ChartTitleArea;
    /**
     * @private
     */
    chartLegend: ChartLegend;
    /**
     * @private
     */
    chartPrimaryCategoryAxis: ChartCategoryAxis;
    /**
     * @private
     */
    chartPrimaryValueAxis: ChartCategoryAxis;
    /**
     * @private
     */
    chartDataTable: ChartDataTable;
    /**
     * @private
     */
    getLength(): number;
    /**
     * @private
     */
    /**
    * @private
    */
    title: string;
    /**
     * @private
     */
    /**
    * @private
    */
    type: string;
    /**
     * @private
     */
    /**
    * @private
    */
    chartGapWidth: number;
    /**
     * @private
     */
    /**
    * @private
    */
    chartOverlap: number;
    /**
     * @private
     */
    readonly targetElement: HTMLDivElement;
    /**
     * @private
     */
    /**
    * @private
    */
    officeChart: officeChart.ChartComponent;
    /**
     * @private
     */
    constructor();
    private onChartLoaded;
    /**
     * @private
     */
    clone(): ChartElementBox;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class ChartArea {
    /**
     * @private
     */
    private foreColor;
    /**
     * @private
     */
    /**
    * @private
    */
    chartForeColor: string;
    /**
     * @private
     */
    clone(): ChartArea;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class ChartCategory {
    /**
     * @private
     */
    private categoryXName;
    /**
     * @private
     */
    chartData: ChartData[];
    /**
     * @private
     */
    /**
    * @private
    */
    xName: string;
    /**
     * @private
     */
    clone(): ChartCategory;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class ChartData {
    private yValue;
    private xValue;
    private size;
    /**
     * @private
     */
    /**
    * @private
    */
    yAxisValue: number;
    /**
     * @private
     */
    /**
    * @private
    */
    xAxisValue: number;
    /**
     * @private
     */
    /**
    * @private
    */
    bubbleSize: number;
    /**
     * @private
     */
    clone(): ChartData;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class ChartLegend {
    /**
     * @private
     */
    private legendPostion;
    /**
     * @private
     */
    chartTitleArea: ChartTitleArea;
    /**
     * @private
     */
    /**
    * @private
    */
    chartLegendPostion: string;
    /**
     * @private
     */
    constructor();
    /**
     * @private
     */
    clone(): ChartLegend;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class ChartSeries {
    /**
     * @private
     */
    chartDataFormat: ChartDataFormat[];
    /**
     * @private
     */
    errorBar: ChartErrorBar;
    /**
     * @private
     */
    seriesFormat: ChartSeriesFormat;
    /**
     * @private
     */
    trendLines: ChartTrendLines[];
    /**
     * @private
     */
    private name;
    /**
     * @private
     */
    private sliceAngle;
    /**
     * @private
     */
    private holeSize;
    /**
     * @private
     */
    dataLabels: ChartDataLabels;
    /**
     * @private
     */
    /**
    * @private
    */
    seriesName: string;
    /**
     * @private
     */
    /**
    * @private
    */
    firstSliceAngle: number;
    /**
     * @private
     */
    /**
    * @private
    */
    doughnutHoleSize: number;
    constructor();
    /**
     * @private
     */
    clone(): ChartSeries;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class ChartErrorBar {
    /**
     * @private
     */
    private type;
    /**
     * @private
     */
    private direction;
    /**
     * @private
     */
    private errorValue;
    /**
     * @private
     */
    private endStyle;
    /**
     * @private
     */
    /**
    * @private
    */
    errorType: string;
    /**
     * @private
     */
    /**
    * @private
    */
    errorDirection: string;
    /**
     * @private
     */
    /**
    * @private
    */
    errorEndStyle: string;
    /**
    * @private
    */
    numberValue: number;
    /**
     * @private
     */
    clone(): ChartErrorBar;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class ChartSeriesFormat {
    /**
     * @private
     */
    private style;
    /**
     * @private
     */
    private color;
    /**
     * @private
     */
    private size;
    /**
     * @private
     */
    /**
    * @private
    */
    markerStyle: string;
    /**
     * @private
     */
    /**
    * @private
    */
    markerColor: string;
    /**
     * @private
     */
    /**
    * @private
    */
    numberValue: number;
    /**
     * @private
     */
    clone(): ChartSeriesFormat;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class ChartDataLabels {
    /**
     * @private
     */
    private position;
    /**
     * @private
     */
    private name;
    /**
     * @private
     */
    private color;
    /**
     * @private
     */
    private size;
    /**
     * @private
     */
    private isLegend;
    /**
     * @private
     */
    private isBubble;
    /**
     * @private
     */
    private isCategory;
    /**
     * @private
     */
    private isSeries;
    /**
     * @private
     */
    private isValueEnabled;
    /**
     * @private
     */
    private isPercentageEnabled;
    /**
     * @private
     */
    private showLeaderLines;
    /**
     * @private
     */
    /**
    * @private
    */
    labelPosition: string;
    /**
     * @private
     */
    /**
    * @private
    */
    fontName: string;
    /**
     * @private
     */
    /**
    * @private
    */
    fontColor: string;
    /**
     * @private
     */
    /**
    * @private
    */
    fontSize: number;
    /**
     * @private
     */
    /**
    * @private
    */
    isLegendKey: boolean;
    /**
     * @private
     */
    /**
    * @private
    */
    isBubbleSize: boolean;
    /**
     * @private
     */
    /**
    * @private
    */
    isCategoryName: boolean;
    /**
     * @private
     */
    /**
    * @private
    */
    isSeriesName: boolean;
    /**
     * @private
     */
    /**
    * @private
    */
    isValue: boolean;
    /**
     * @private
     */
    /**
    * @private
    */
    isPercentage: boolean;
    /**
     * @private
     */
    /**
    * @private
    */
    isLeaderLines: boolean;
    /**
     * @private
     */
    clone(): ChartDataLabels;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class ChartTrendLines {
    /**
     * @private
     */
    private type;
    /**
     * @private
     */
    private name;
    /**
     * @private
     */
    private backward;
    /**
     * @private
     */
    private forward;
    /**
     * @private
     */
    private intercept;
    /**
     * @private
     */
    private displayRSquared;
    /**
     * @private
     */
    private displayEquation;
    /**
     * @private
     */
    /**
    * @private
    */
    trendLineType: string;
    /**
     * @private
     */
    /**
    * @private
    */
    trendLineName: string;
    /**
     * @private
     */
    /**
    * @private
    */
    interceptValue: number;
    /**
     * @private
     */
    /**
    * @private
    */
    forwardValue: number;
    /**
     * @private
     */
    /**
    * @private
    */
    backwardValue: number;
    /**
     * @private
     */
    /**
    * @private
    */
    isDisplayRSquared: boolean;
    /**
     * @private
     */
    /**
    * @private
    */
    isDisplayEquation: boolean;
    /**
     * @private
     */
    clone(): ChartTrendLines;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class ChartTitleArea {
    /**
     * @private
     */
    private fontName;
    /**
     * @private
     */
    private fontSize;
    /**
     * @private
     */
    dataFormat: ChartDataFormat;
    /**
     * @private
     */
    layout: ChartLayout;
    /**
     * @private
     */
    /**
    * @private
    */
    chartfontName: string;
    /**
     * @private
     */
    /**
    * @private
    */
    chartFontSize: number;
    /**
     * @private
     */
    constructor();
    /**
     * @private
     */
    clone(): ChartTitleArea;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class ChartDataFormat {
    /**
     * @private
     */
    line: ChartFill;
    /**
     * @private
     */
    fill: ChartFill;
    /**
     * @private
     */
    constructor();
    /**
     * @private
     */
    clone(): ChartDataFormat;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class ChartFill {
    /**
     * @private
     */
    private fillColor;
    /**
     * @private
     */
    private fillRGB;
    /**
     * @private
     */
    /**
    * @private
    */
    color: string;
    /**
     * @private
     */
    /**
    * @private
    */
    rgb: string;
    /**
     * @private
     */
    clone(): ChartFill;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class ChartLayout {
    /**
     * @private
     */
    private layoutX;
    /**
     * @private
     */
    private layoutY;
    /**
     * @private
     */
    /**
    * @private
    */
    chartLayoutLeft: number;
    /**
     * @private
     */
    /**
    * @private
    */
    chartLayoutTop: number;
    /**
     * @private
     */
    clone(): ChartLayout;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class ChartCategoryAxis {
    /**
     * @private
     */
    private title;
    /**
     * @private
     */
    private fontSize;
    /**
     * @private
     */
    private fontName;
    /**
     * @private
     */
    private categoryType;
    /**
     * @private
     */
    private numberFormat;
    /**
     * @private
     */
    chartTitleArea: ChartTitleArea;
    /**
     * @private
     */
    private hasMajorGridLines;
    /**
     * @private
     */
    private hasMinorGridLines;
    /**
     * @private
     */
    private majorTickMark;
    /**
     * @private
     */
    private minorTickMark;
    /**
     * @private
     */
    private tickLabelPostion;
    /**
     * @private
     */
    private majorUnit;
    /**
     * @private
     */
    private minimumValue;
    /**
     * @private
     */
    private maximumValue;
    /**
     * @private
     */
    /**
    * @private
    */
    majorTick: string;
    /**
     * @private
     */
    /**
    * @private
    */
    minorTick: string;
    /**
     * @private
     */
    /**
    * @private
    */
    tickPosition: string;
    /**
     * @private
     */
    /**
    * @private
    */
    minorGridLines: boolean;
    /**
     * @private
     */
    /**
    * @private
    */
    majorGridLines: boolean;
    /**
     * @private
     */
    /**
    * @private
    */
    interval: number;
    /**
     * @private
     */
    /**
    * @private
    */
    max: number;
    /**
     * @private
     */
    /**
    * @private
    */
    min: number;
    /**
     * @private
     */
    /**
    * @private
    */
    categoryAxisTitle: string;
    /**
     * @private
     */
    /**
    * @private
    */
    categoryAxisType: string;
    /**
     * @private
     */
    /**
    * @private
    */
    categoryNumberFormat: string;
    /**
     * @private
     */
    /**
    * @private
    */
    axisFontSize: number;
    /**
     * @private
     */
    /**
    * @private
    */
    axisFontName: string;
    constructor();
    /**
     * @private
     */
    clone(): ChartCategoryAxis;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class ChartDataTable {
    /**
     * @private
     */
    private isSeriesKeys;
    /**
     * @private
     */
    private isHorzBorder;
    /**
     * @private
     */
    private isVertBorder;
    /**
     * @private
     */
    private isBorders;
    /**
     * @private
     */
    /**
    * @private
    */
    showSeriesKeys: boolean;
    /**
     * @private
     */
    /**
    * @private
    */
    hasHorzBorder: boolean;
    /**
     * @private
     */
    /**
    * @private
    */
    hasVertBorder: boolean;
    /**
     * @private
     */
    /**
    * @private
    */
    hasBorders: boolean;
    /**
     * @private
     */
    clone(): ChartDataTable;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class Page {
    /**
     * Specifies the Viewer
     * @private
     */
    viewer: LayoutViewer;
    /**
     * Specifies the Bonding Rectangle
     * @private
     */
    boundingRectangle: Rect;
    /**
     * @private
     */
    repeatHeaderRowTableWidget: boolean;
    /**
     * Specifies the bodyWidgets
     * @default []
     * @private
     */
    bodyWidgets: BodyWidget[];
    /**
     * @private
     */
    headerWidget: HeaderFooterWidget;
    /**
     * @private
     */
    footerWidget: HeaderFooterWidget;
    /**
     * @private
     */
    readonly index: number;
    /**
     * @private
     */
    readonly previousPage: Page;
    /**
     * @private
     */
    readonly nextPage: Page;
    /**
     * @private
     */
    readonly sectionIndex: number;
    /**
     * Initialize the constructor of Page
     */
    constructor();
    destroy(): void;
}
/**
 * @private
 */
export  class WTableHolder {
    private tableColumns;
    /**
     * @private
     */
    tableWidth: number;
    readonly columns: WColumn[];
    /**
     * @private
     */
    resetColumns(): void;
    /**
     * @private
     */
    getPreviousSpannedCellWidth(previousColumnIndex: number, curColumnIndex: number): number;
    /**
     * @private
     */
    addColumns(currentColumnIndex: number, columnSpan: number, width: number, sizeInfo: ColumnSizeInfo, offset: number): void;
    /**
     * @private
     */
    getTotalWidth(type: number): number;
    /**
     * @private
     */
    isFitColumns(containerWidth: number, preferredTableWidth: number, isAutoWidth: boolean): boolean;
    /**
     * @private
     */
    autoFitColumn(containerWidth: number, preferredTableWidth: number, isAuto: boolean, isNestedTable: boolean): void;
    /**
     * @private
     */
    fitColumns(containerWidth: number, preferredTableWidth: number, isAutoWidth: boolean, indent?: number): void;
    /**
     * @private
     */
    getCellWidth(columnIndex: number, columnSpan: number, preferredTableWidth: number): number;
    /**
     * @private
     */
    validateColumnWidths(): void;
    /**
     * @private
     */
    clone(): WTableHolder;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class WColumn {
    /**
     * @private
     */
    preferredWidth: number;
    /**
     * @private
     */
    minWidth: number;
    /**
     * @private
     */
    maxWidth: number;
    /**
     * @private
     */
    endOffset: number;
    /**
     * @private
     */
    minimumWordWidth: number;
    /**
     * @private
     */
    maximumWordWidth: number;
    /**
     * @private
     */
    minimumWidth: number;
    /**
     * @private
     */
    clone(): WColumn;
    /**
     * @private
     */
    destroy(): void;
}
/**
 * @private
 */
export  class ColumnSizeInfo {
    /**
     * @private
     */
    minimumWordWidth: number;
    /**
     * @private
     */
    maximumWordWidth: number;
    /**
     * @private
     */
    minimumWidth: number;
    /**
     * @private
     */
    hasMinimumWidth: boolean;
    /**
     * @private
     */
    hasMinimumWordWidth: boolean;
    /**
     * @private
     */
    hasMaximumWordWidth: boolean;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/viewer/render.d.ts
/**
 * @private
 */
export  class Renderer {
    isPrinting: boolean;
    private pageLeft;
    private pageTop;
    private viewer;
    private pageIndex;
    private pageCanvasIn;
    private isFieldCode;
    private leftPosition;
    private topPosition;
    /**
     * Gets page canvas.
     * @private
     */
    readonly pageCanvas: HTMLCanvasElement;
    /**
     * Gets the spell checker
     * @private
     */
    readonly spellChecker: SpellChecker;
    /**
     * Gets selection canvas.
     */
    private readonly selectionCanvas;
    /**
     * Gets page context.
     */
    private readonly pageContext;
    /**
     * Gets selection context.
     */
    private readonly selectionContext;
    constructor(viewer: LayoutViewer);
    /**
     * Gets the color.
     * @private
     */
    getColor(color: string): string;
    /**
     * Renders widgets.
     * @param {Page} page
     * @param {number} left
     * @param {number} top
     * @param {number} width
     * @param {number} height
     * @private
     */
    renderWidgets(page: Page, left: number, top: number, width: number, height: number): void;
    /**
     * Sets page size.
     * @param {Page} page
     */
    private setPageSize;
    /**
     * Renders header footer widget.
     * @param {Page} page
     * @param {HeaderFooterWidget} headFootWidget
     */
    private renderHFWidgets;
    private renderHeaderSeparator;
    private getHeaderFooterType;
    /**
     * @private
     */
    renderDashLine(ctx: CanvasRenderingContext2D, x: number, y: number, width: number, fillStyle: string, isSmallDash: boolean): void;
    private renderHeaderFooterMark;
    private renderHeaderFooterMarkText;
    /**
     * Renders body widget.
     * @param {Page} page
     * @param {BodyWidget} bodyWidget
     */
    private render;
    /**
     * Renders block widget.
     * @param {Page} page
     * @param {Widget} widget
     */
    private renderWidget;
    /**
     * Renders header.
     * @param {Page} page
     * @param {TableWidget} widget
     * @param {WRow} header
     * @private
     */
    renderHeader(page: Page, widget: TableWidget, header: TableRowWidget): void;
    /**
     * Renders paragraph widget.
     * @param {Page} page
     * @param {ParagraphWidget} paraWidget
     */
    private renderParagraphWidget;
    /**
     * Renders table widget.
     * @param {Page} page
     * @param {TableWidget} tableWidget
     */
    private renderTableWidget;
    /**
     * Renders table row widget.
     * @param {Page} page
     * @param {Widget} rowWidget
     */
    private renderTableRowWidget;
    /**
     * Renders table cell widget.
     * @param {Page} page
     * @param {TableCellWidget} cellWidget
     */
    private renderTableCellWidget;
    /**
     * Renders line widget.
     * @param {LineWidget} lineWidget
     * @param {Page} page
     * @param {number} left
     * @param {number} top
     */
    private renderLine;
    private toSkipFieldCode;
    /**
     * Gets underline y position.
     * @param {LineWidget} lineWidget
     * @private
     */
    getUnderlineYPosition(lineWidget: LineWidget): number;
    /**
     * Renders list element box
     * @param {ListTextElementBox} elementBox
     * @param {number} left
     * @param {number} top
     * @param {number} underlineY
     */
    private renderListTextElementBox;
    /**
     * Renders text element box.
     * @param {TextElementBox} elementBox
     * @param {number} left
     * @param {number} top
     * @param {number} underlineY
     */
    private renderTextElementBox;
    /**
     * Method to handle spell check for modified or newly added elements
     * @param {TextElementBox} elementBox
     * @param {number} underlineY
     * @param {number} left
     * @param {number} top
     * @param {number} baselineAlignment
     */
    private handleChangeDetectedElements;
    /**
     * Method to handle spell check combine and splitted text elements
     * @param {string} currentText
     * @param {TextElementBox} elementBox
     * @param {number} underlineY
     * @param {number} iteration
     * @private
     */
    handleUnorderdElements(currentText: string, elementBox: TextElementBox, underlineY: number, iteration: number, markindex: number, isLastItem?: boolean, beforeIndex?: number): void;
    /**
     * Render Wavy Line
     * @param {ElementBox} elementBox
     * @param {number} left
     * @param {number} top
     * @param {number} underlineY
     * @param {string} color
     * @param {Underline} underline
     * @param {BaselineAlignment} baselineAlignment
     * @private
     */
    renderWavyline(elementBox: TextElementBox, left: number, top: number, underlineY: number, color: string, underline: Underline, baselineAlignment: BaselineAlignment, backgroundColor?: string): void;
    /**
     * Draw wavy line
     * @param {Point} from
     * @param {Point} to
     * @param {Number} frequency
     * @param {Number} amplitude
     * @param {Number} step
     * @param {string} color
     * @param {Number} negative
     * @private
     */
    drawWavy(from: Point, to: Point, frequency: number, amplitude: number, step: number, color: string, height: number, backColor: string, negative?: number): void;
    /**
     * Returns tab leader
     */
    private getTabLeader;
    /**
     * Returns tab leader string.
     */
    private getTabLeaderString;
    /**
     * Clips the rectangle with specified position.
     * @param {number} xPos
     * @param {number} yPos
     * @param {number} width
     * @param {number} height
     */
    private clipRect;
    /**
     * Renders underline.
     * @param {ElementBox} elementBox
     * @param {number} left
     * @param {number} top
     * @param {number} underlineY
     * @param {string} color
     * @param {Underline} underline
     * @param {BaselineAlignment} baselineAlignment
     */
    private renderUnderline;
    /**
     * Renders strike through.
     * @param {ElementBox} elementBox
     * @param {number} left
     * @param {number} top
     * @param {Strikethrough} strikethrough
     * @param {string} color
     * @param {BaselineAlignment} baselineAlignment
     */
    private renderStrikeThrough;
    /**
     * Renders image element box.
     * @param {ImageElementBox} elementBox
     * @param {number} left
     * @param {number} top
     * @param {number} underlineY
     */
    private renderImageElementBox;
    /**
     * Renders table outline.
     * @param {TableWidget} tableWidget
     */
    private renderTableOutline;
    /**
     * Renders table cell outline.
     * @param {LayoutViewer} viewer
     * @param {TableCellWidget} cellWidget
     */
    private renderTableCellOutline;
    /**
     * Renders cell background.
     * @param {number} height
     * @param {TableCellWidget} cellWidget
     */
    private renderCellBackground;
    /**
     * Renders single border.
     * @param {WBorder} border
     * @param {number} startX
     * @param {number} startY
     * @param {number} endX
     * @param {number} endY
     * @param {number} lineWidth
     */
    private renderSingleBorder;
    /**
     * Gets scaled value.
     * @param {number} value
     * @param {number} type
     * @private
     */
    getScaledValue(value: number, type?: number): number;
    /**
     * Destroys the internal objects which is maintained.
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/viewer/sfdt-reader.d.ts
/**
 * @private
 */
export  class SfdtReader {
    private viewer;
    private fieldSeparator;
    private isPageBreakInsideTable;
    private editableRanges;
    private readonly isPasting;
    constructor(viewer: LayoutViewer);
    /**
     * @private
     * @param json
     */
    convertJsonToDocument(json: string): BodyWidget[];
    private parseDocumentProtection;
    private parseStyles;
    parseStyle(data: any, style: any, styles: WStyles): void;
    private getStyle;
    private parseAbstractList;
    private parseListLevel;
    private parseList;
    private parseLevelOverride;
    private parseSections;
    /**
     * @private
     */
    parseHeaderFooter(data: any, headersFooters: any): HeaderFooters;
    private parseTextBody;
    parseBody(data: any, blocks: BlockWidget[], container?: Widget, isSectionBreak?: boolean): void;
    private parseTable;
    private parseRowGridValues;
    private parseParagraph;
    private parseEditableRangeStart;
    private addEditRangeCollection;
    private parseChartTitleArea;
    private parseChartDataFormat;
    private parseChartLayout;
    private parseChartLegend;
    private parseChartCategoryAxis;
    private parseChartDataTable;
    private parseChartArea;
    private parseChartData;
    private parseChartSeries;
    private parseChartDataLabels;
    private parseChartSeriesDataPoints;
    private parseChartTrendLines;
    private parseTableFormat;
    private parseCellFormat;
    private parseCellMargin;
    private parseRowFormat;
    private parseBorders;
    private parseBorder;
    private parseShading;
    /**
     * @private
     */
    parseCharacterFormat(sourceFormat: any, characterFormat: WCharacterFormat, writeInlineFormat?: boolean): void;
    private getColor;
    /**
     * @private
     */
    parseParagraphFormat(sourceFormat: any, paragraphFormat: WParagraphFormat): void;
    private parseListFormat;
    private parseSectionFormat;
    private parseTabStop;
    private validateImageUrl;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/viewer/text-helper.d.ts
/**
 * @private
 */
export interface TextSizeInfo {
    Height?: number;
    BaselineOffset?: number;
    Width?: number;
}
/**
 * @private
 */
export interface TextHeightInfo {
    [key: string]: TextSizeInfo;
}
/**
 * @private
 */
export  class TextHelper {
    private owner;
    private context;
    private paragraphMarkInfo;
    private readonly paragraphMark;
    private readonly lineBreakMark;
    constructor(viewer: LayoutViewer);
    /**
     * @private
     */
    getParagraphMarkWidth(characterFormat: WCharacterFormat): number;
    /**
     * @private
     */
    getParagraphMarkSize(characterFormat: WCharacterFormat): TextSizeInfo;
    /**
     * @private
     */
    getTextSize(elementBox: TextElementBox, characterFormat: WCharacterFormat): number;
    /**
     * @private
     */
    getHeight(characterFormat: WCharacterFormat): TextSizeInfo;
    /**
     * @private
     */
    getFormatText(characterFormat: WCharacterFormat): string;
    /**
     * @private
     */
    getHeightInternal(characterFormat: WCharacterFormat): TextSizeInfo;
    /**
     * @private
     */
    measureTextExcludingSpaceAtEnd(text: string, characterFormat: WCharacterFormat): number;
    /**
     * @private
     */
    getWidth(text: string, characterFormat: WCharacterFormat): number;
    setText(textToRender: string, isBidi: boolean, bdo: BiDirectionalOverride, isRender?: boolean): string;
    /**
     * @private
     */
    applyStyle(spanElement: HTMLSpanElement, characterFormat: WCharacterFormat): void;
    /**
     * @private
     */
    measureText(text: string, characterFormat: WCharacterFormat): TextSizeInfo;
    /**
     * @private
     */
    updateTextSize(elementBox: ListTextElementBox, paragraph: ParagraphWidget): void;
    /**
     * @private
     */
    isRTLText(text: string): boolean;
    /**
     * @private
     */
    getRtlLanguage(text: string): RtlInfo;
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/viewer/viewer.d.ts
/**
 * @private
 */
export  abstract class LayoutViewer {
    /**
     * @private
     */
    owner: DocumentEditor;
    private visibleBoundsIn;
    /**
     * @private
     */
    pageContainer: HTMLElement;
    /**
     * @private
     */
    viewerContainer: HTMLElement;
    /**
     * @private
     */
    optionsPaneContainer: HTMLElement;
    /**
     * @private
     */
    pages: Page[];
    /**
     * @private
     */
    clientActiveArea: Rect;
    /**
     * @private
     */
    clientArea: Rect;
    /**
     * @private
     */
    textWrap: boolean;
    /**
     * @private
     */
    currentPage: Page;
    private selectionStartPageIn;
    private selectionEndPageIn;
    /**
     * @private
     */
    iframe: HTMLIFrameElement;
    /**
     * @private
     */
    editableDiv: HTMLElement;
    /**
     * @private
     */
    fieldStacks: FieldElementBox[];
    /**
     * @private
     */
    splittedCellWidgets: TableCellWidget[];
    /**
     * @private
     */
    tableLefts: number[];
    private tapCount;
    private timer;
    private isTimerStarted;
    /**
     * @private
     */
    isFirstLineFitInShiftWidgets: boolean;
    /**
     * @private
     */
    preZoomFactor: number;
    /**
     * @private
     */
    preDifference: number;
    /**
     * @private
     */
    fieldEndParagraph: ParagraphWidget;
    /**
     * @private
     */
    fieldToLayout: FieldElementBox;
    /**
     * @private
     */
    backgroundColor: string;
    /**
     * @private
     */
    layout: Layout;
    /**
     * @private
     */
    render: Renderer;
    /**
     * @private
     */
    containerTop: number;
    /**
     * @private
     */
    containerLeft: number;
    private containerCanvasIn;
    private selectionCanvasIn;
    /**
     * @private
     */
    zoomModule: Zoom;
    /**
     * @private
     */
    isMouseDown: boolean;
    /**
     * @private
     */
    isSelectionChangedOnMouseMoved: boolean;
    /**
     * @private
     */
    isControlPressed: boolean;
    /**
     * @private
     */
    touchStart: HTMLElement;
    /**
     * @private
     */
    touchEnd: HTMLElement;
    /**
     * @private
     */
    isTouchInput: boolean;
    /**
     * @private
     */
    useTouchSelectionMark: boolean;
    /**
     * @private
     */
    touchDownOnSelectionMark: number;
    /**
     * @private
     */
    textHelper: TextHelper;
    /**
     * @private
     */
    isComposingIME: boolean;
    /**
     * @private
     */
    lastComposedText: string;
    /**
     * @private
     */
    isCompositionStart: boolean;
    /**
     * @private
     */
    isCompositionUpdated: boolean;
    /**
     * @private
     */
    isCompositionCanceled: boolean;
    /**
     * @private
     */
    isCompositionEnd: boolean;
    /**
     * @private
     */
    prefix: string;
    /**
     * @private
     */
    suffix: string;
    private dialogInternal;
    private dialogTarget;
    private dialogInternal2;
    /**
     * @private
     */
    fields: FieldElementBox[];
    /**
     * @private
     */
    blockToShift: BlockWidget;
    /**
     * @private
     */
    heightInfoCollection: TextHeightInfo;
    private animationTimer;
    /**
     * @private
     */
    isListTextSelected: boolean;
    /**
     * @private
     */
    selectionLineWidget: LineWidget;
    /**
     * @private
     */
    characterFormat: WCharacterFormat;
    /**
     * @private
     */
    paragraphFormat: WParagraphFormat;
    /**
     * @private
     */
    renderedLists: Dictionary<WAbstractList, Dictionary<number, number>>;
    /**
     * @private
     */
    headersFooters: HeaderFooters[];
    private fieldSeparator;
    /**
     * @private
     */
    defaultTabWidth: number;
    /**
     * @private
     */
    lists: WList[];
    /**
     * @private
     */
    abstractLists: WAbstractList[];
    /**
     * @private
     */
    styles: WStyles;
    /**
     * @private
     */
    listParagraphs: ParagraphWidget[];
    /**
     * @private
     */
    preDefinedStyles: Dictionary<string, string>;
    /**
     * @private
     */
    isRowOrCellResizing: boolean;
    /**
     * @private
     */
    bookmarks: Dictionary<string, BookmarkElementBox>;
    /**
     * @private
     */
    editRanges: Dictionary<string, EditRangeStartElementBox[]>;
    private isMouseDownInFooterRegion;
    private pageFitTypeIn;
    /**
     * @private
     */
    fieldCollection: FieldElementBox[];
    /**
     * @private
     */
    isPageField: boolean;
    /**
     * @private
     */
    mouseDownOffset: Point;
    /**
     * @private
     */
    protected zoomX: number;
    /**
     * @private
     */
    protected zoomY: number;
    private zoomFactorInternal;
    /**
     * If movecaretposition is 1, Home key is pressed
     * If moveCaretPosition is 2, End key is pressed
     * @private
     */
    moveCaretPosition: number;
    /**
     * @private
     */
    isTextInput: boolean;
    /**
     * @private
     */
    isScrollHandler: boolean;
    /**
     * @private
     */
    triggerElementsOnLoading: boolean;
    /**
     * @private
     */
    triggerSpellCheck: boolean;
    /**
     * @private
     */
    scrollTimer: number;
    /**
     * @private
     * @default false
     */
    isScrollToSpellCheck: boolean;
    /**
     * preserve the format
     * @private
     */
    restrictFormatting: boolean;
    /**
     * preserve the document protection type either readonly or no protection
     * @private
     */
    protectionType: ProtectionType;
    /**
     * Preserve the password protection is enforced or not
     * @private
     */
    isDocumentProtected: boolean;
    /**
     * preserve the hash value of password
     * @private
     */
    hashValue: string;
    /**
     * @private
     */
    saltValue: string;
    /**
     * @private
     */
    userCollection: string[];
    /**
     * @private
     */
    restrictEditingPane: RestrictEditing;
    /**
     * Gets container canvas.
     * @private
     */
    readonly containerCanvas: HTMLCanvasElement;
    /**
     * Gets selection canvas.
     * @private
     */
    readonly selectionCanvas: HTMLCanvasElement;
    /**
     * Gets container context.
     * @private
     */
    readonly containerContext: CanvasRenderingContext2D;
    /**
     * Gets selection context.
     * @private
     */
    readonly selectionContext: CanvasRenderingContext2D;
    /**
     * Gets the current rendering page.
     */
    readonly currentRenderingPage: Page;
    /**
     * Gets visible bounds.
     * @private
     */
    readonly visibleBounds: Rect;
    /**
     * Gets or sets zoom factor.
     * @private
     */
    zoomFactor: number;
    /**
     * Gets the selection.
     * @private
     */
    readonly selection: Selection;
    /**
     * Gets or sets selection start page.
     * @private
     */
    selectionStartPage: Page;
    /**
     * Gets or sets selection end page.
     * @private
     */
    selectionEndPage: Page;
    /**
     * Gets the initialized default dialog.
     * @private
     */
    readonly dialog: popups.Dialog;
    /**
     * Gets the initialized default dialog.
     * @private
     */
    readonly dialog2: popups.Dialog;
    /**
     * Gets or sets page fit type.
     * @private
     */
    pageFitType: PageFitType;
    constructor(owner: DocumentEditor);
    private initalizeStyles;
    /**
     * @private
     */
    clearDocumentItems(): void;
    /**
     * @private
     */
    setDefaultDocumentFormat(): void;
    private setDefaultCharacterValue;
    private setDefaultParagraphValue;
    /**
     * @private
     */
    getAbstractListById(id: number): WAbstractList;
    /**
     * @private
     */
    getListById(id: number): WList;
    /**
     * @private
     */
    static getListLevelNumber(listLevel: WListLevel): number;
    /**
     * Gets the bookmarks.
     * @private
     */
    getBookmarks(includeHidden?: boolean): string[];
    /**
     * Initializes components.
     * @private
     */
    initializeComponents(): void;
    /**
     * @private
     */
    private createEditableDiv;
    /**
     * @private
     */
    private createEditableIFrame;
    /**
     * Wires events and methods.
     */
    private wireEvent;
    /**
     * @private
     */
    private onTextInput;
    /**
     * Fires when composition starts.
     * @private
     */
    private compositionStart;
    /**
     * Fires on every input during composition.
     * @private
     */
    private compositionUpdated;
    /**
     * Fires when user selects a character/word and finalizes the input.
     * @private
     */
    private compositionEnd;
    private getEditableDivTextContent;
    /**
     * @private
     */
    positionEditableTarget(): void;
    private onImageResizer;
    private onKeyPressInternal;
    private onTextInputInternal;
    /**
     * Fired on paste.
     * @param {ClipboardEvent} event
     * @private
     */
    onPaste: (event: ClipboardEvent) => void;
    /**
     * Initializes dialog template.
     */
    private initDialog;
    /**
     * Initializes dialog template.
     */
    private initDialog2;
    /**
     * Fires when editable div loses focus.
     * @private
     */
    onFocusOut: () => void;
    /**
     * Updates focus to editor area.
     * @private
     */
    updateFocus: () => void;
    /**
     * Clears the context.
     * @private
     */
    clearContent(): void;
    /**
     * Fired when the document gets changed.
     * @param {WordDocument} document
     */
    onDocumentChanged(sections: BodyWidget[]): void;
    /**
     * Fires on scrolling.
     */
    private scrollHandler;
    /**
     * Fires when the window gets resized.
     * @private
     */
    onWindowResize: () => void;
    /**
     * @private
     */
    onContextMenu: (event: PointerEvent) => void;
    /**
     * Initialize touch ellipse.
     */
    private initTouchEllipse;
    /**
     * Updates touch mark position.
     * @private
     */
    updateTouchMarkPosition(): void;
    /**
     * Called on mouse down.
     * @param {MouseEvent} event
     * @private
     */
    onMouseDownInternal: (event: MouseEvent) => void;
    /**
     * Called on mouse move.
     * @param {MouseEvent} event
     * @private
     */
    onMouseMoveInternal: (event: MouseEvent) => void;
    /**
     * Fired on double tap.
     * @param {MouseEvent} event
     * @private
     */
    onDoubleTap: (event: MouseEvent) => void;
    /**
     * Called on mouse up.
     * @param {MouseEvent} event
     * @private
     */
    onMouseUpInternal: (event: MouseEvent) => void;
    private isSelectionInListText;
    /**
     * Check whether touch point is inside the rectangle or not.
     * @param x
     * @param y
     * @param width
     * @param height
     * @param touchPoint
     * @private
     */
    isInsideRect(x: number, y: number, width: number, height: number, touchPoint: Point): boolean;
    /**
     * @private
     */
    getLeftValue(widget: LineWidget): number;
    /**
     * Checks whether left mouse button is pressed or not.
     */
    private isLeftButtonPressed;
    /**
     * Fired on touch start.
     * @param {TouchEvent} event
     * @private
     */
    onTouchStartInternal: (event: Event) => void;
    /**
     * Fired on touch move.
     * @param {TouchEvent} event
     * @private
     */
    onTouchMoveInternal: (event: TouchEvent) => void;
    /**
     * Fired on touch up.
     * @param {TouchEvent} event
     * @private
     */
    onTouchUpInternal: (event: TouchEvent) => void;
    /**
     * Gets touch offset value.
     */
    private getTouchOffsetValue;
    /**
     * Fired on pinch zoom in.
     * @param {TouchEvent} event
     */
    private onPinchInInternal;
    /**
     * Fired on pinch zoom out.
     * @param {TouchEvent} event
     */
    private onPinchOutInternal;
    /**
     * Gets page width.
     * @private
     */
    getPageWidth(page: Page): number;
    /**
     * Removes specified page.
     * @private
     */
    removePage(page: Page): void;
    /**
     * Updates viewer size on window resize.
     * @private
     */
    updateViewerSize(): void;
    /**
     * Updates viewer size.
     */
    private updateViewerSizeInternal;
    /**
     * Updates client area for block.
     * @private
     */
    updateClientAreaForBlock(block: BlockWidget, beforeLayout: boolean, tableCollection?: TableWidget[]): void;
    private tableAlignmentForBidi;
    /**
     * Updates client active area left.
     * @private
     */
    cutFromLeft(x: number): void;
    /**
     * Updates client active area top.
     * @private
     */
    cutFromTop(y: number): void;
    /**
     * Updates client width.
     * @private
     */
    updateClientWidth(width: number): void;
    /**
     * Inserts page in specified index.
     * @private
     */
    insertPage(index: number, page: Page): void;
    /**
     * Updates client area.
     * @private
     */
    updateClientArea(sectionFormat: WSectionFormat, page: Page): void;
    /**
     * Updates client area left or top position.
     * @private
     */
    updateClientAreaTopOrLeft(tableWidget: TableWidget, beforeLayout: boolean): void;
    /**
     * Updates client area for table.
     * @private
     */
    updateClientAreaForTable(tableWidget: TableWidget): void;
    /**
     * Updates client area for row.
     * @private
     */
    updateClientAreaForRow(row: TableRowWidget, beforeLayout: boolean): void;
    /**
     * Updates client area for cell.
     * @private
     */
    updateClientAreaForCell(cell: TableCellWidget, beforeLayout: boolean): void;
    /**
     * Updates the client area based on widget.
     * @private
     */
    updateClientAreaByWidget(widget: ParagraphWidget): void;
    /**
     * Updates client area location.
     * @param widget
     * @param area
     * @private
     */
    updateClientAreaLocation(widget: Widget, area: Rect): void;
    /**
     * Updates text position for selection.
     * @param cursorPoint
     * @param tapCount
     * @param clearMultiSelection
     * @private
     */
    updateTextPositionForSelection(cursorPoint: Point, tapCount: number): void;
    /**
     * Scrolls to specified position.
     * @param startPosition
     * @param endPosition
     * @private
     */
    scrollToPosition(startPosition: TextPosition, endPosition: TextPosition): void;
    /**
     * Gets line widget using cursor point.
     * @private
     */
    getLineWidget(cursorPoint: Point): LineWidget;
    /**
     * Gets line widget.
     * @private
     */
    getLineWidgetInternal(cursorPoint: Point, isMouseDragged: boolean): LineWidget;
    /**
     * @private
     */
    isBlockInHeader(block: Widget): boolean;
    /**
     * Clears selection highlight.
     * @private
     */
    clearSelectionHighlight(): void;
    /**
     * Fired on keyup event.
     * @private
     */
    onKeyUpInternal: (event: KeyboardEvent) => void;
    /**
     * Fired on keydown.
     * @private
     */
    onKeyDownInternal: (event: KeyboardEvent) => void;
    /**
     * @private
     */
    removeEmptyPages(): void;
    /**
     * @private
     */
    scrollToBottom(): void;
    /**
     * Returns the field code result.
     * @private
     */
    getFieldResult(fieldBegin: FieldElementBox, page: Page): string;
    /**
     * Returns field text.
     */
    private getFieldText;
    /**
     * Destroys the internal objects maintained for control.
     */
    destroy(): void;
    /**
     * Un-Wires events and methods
     */
    private unWireEvent;
    /**
     * @private
     */
    abstract createNewPage(section: BodyWidget, index?: number): Page;
    /**
     * @private
     */
    abstract renderVisiblePages(): void;
    /**
     * @private
     */
    abstract updateScrollBars(): void;
    /**
     * private
     */
    abstract scrollToPage(pageIndex: number): void;
    protected abstract updateCursor(event: MouseEvent): void;
    /**
     * @private
     */
    abstract findFocusedPage(point: Point, updateCurrentPage: boolean): Point;
    /**
     * @private
     */
    abstract onPageFitTypeChanged(pageFitType: PageFitType): void;
}
/**
 * @private
 */
export  class PageLayoutViewer extends LayoutViewer {
    private pageLeft;
    /**
     * @private
     */
    readonly pageGap: number;
    /**
     * @private
     */
    visiblePages: Page[];
    /**
     * Initialize the constructor of PageLayoutViewer
     */
    constructor(owner: DocumentEditor);
    /**
     * Creates new page.
     * @private
     */
    createNewPage(section: BodyWidget, index?: number): Page;
    /**
     * Updates cursor.
     */
    protected updateCursor(event: MouseEvent): void;
    /**
     * Finds focused page.
     * @private
     */
    findFocusedPage(currentPoint: Point, updateCurrentPage: boolean): Point;
    /**
     * Fired when page fit type changed.
     * @private
     */
    onPageFitTypeChanged(pageFitType: PageFitType): void;
    /**
     * @private
     */
    handleZoom(): void;
    /**
     * Gets current page header footer.
     * @private
     */
    getCurrentPageHeaderFooter(section: BodyWidget, isHeader: boolean): HeaderFooterWidget;
    /**
     * Get header footer type
     * @private
     */
    getHeaderFooterType(section: BodyWidget, isHeader: boolean): HeaderFooterType;
    /**
     * Gets current header footer.
     * @param type
     * @param section
     * @private
     */
    getCurrentHeaderFooter(type: HeaderFooterType, sectionIndex: number): HeaderFooterWidget;
    private createHeaderFooterWidget;
    /**
     * Gets header footer.
     * @param type
     * @private
     */
    getHeaderFooter(type: HeaderFooterType): number;
    /**
     * Updates header footer client area.
     * @private
     */
    updateHFClientArea(sectionFormat: WSectionFormat, isHeader: boolean): void;
    /**
     * @private
     */
    updateHCFClientAreaWithTop(sectionFormat: WSectionFormat, isHeader: boolean, page: Page): void;
    /**
     * Scrolls to the specified page
     * @private
     */
    scrollToPage(pageIndex: number): void;
    /**
     * Updates scroll bars.
     * @private
     */
    updateScrollBars(): void;
    updateScrollBarPosition(containerWidth: number, containerHeight: number, viewerWidth: number, viewerHeight: number, width: number, height: number): void;
    /**
     * Updates visible pages.
     * @private
     */
    updateVisiblePages(): void;
    /**
     * Adds visible pages.
     */
    private addVisiblePage;
    /**
     * Render specified page widgets.
     */
    private renderPage;
    /**
     * Renders visible pages.
     * @private
     */
    renderVisiblePages(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/viewer/zooming.d.ts
/**
 * @private
 */
export  class Zoom {
    private viewer;
    setZoomFactor(value: number): void;
    constructor(viewer: LayoutViewer);
    private onZoomFactorChanged;
    private zoom;
    onMouseWheelInternal: (event: WheelEvent) => void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/writer/html-export.d.ts
/**
 * @private
 */
export  class HtmlExport {
    private document;
    private characterFormat;
    private paragraphFormat;
    /**
     * @private
     */
    fieldCheck: number;
    /**
     * @private
     */
    writeHtml(document: any): string;
    /**
     * @private
     */
    serializeSection(section: any): string;
    /**
     * @private
     */
    serializeParagraph(paragraph: any): string;
    /**
     * @private
     */
    serializeInlines(paragraph: any, blockStyle: string): string;
    /**
     * @private
     */
    serializeSpan(spanText: string, characterFormat: WCharacterFormat): string;
    /**
     * @private
     */
    serializeImageContainer(image: any): string;
    /**
     * @private
     */
    serializeCell(cell: any): string;
    /**
     * @private
     */
    serializeTable(table: any): string;
    /**
     * @private
     */
    serializeRow(row: any): string;
    /**
     * @private
     */
    serializeParagraphStyle(paragraph: any, className: string, isList: boolean): string;
    /**
     * @private
     */
    serializeInlineStyle(characterFormat: WCharacterFormat, className: string): string;
    /**
     * @private
     */
    serializeTableBorderStyle(borders: any): string;
    /**
     * @private
     */
    serializeCellBordersStyle(borders: any): string;
    /**
     * @private
     */
    serializeBorderStyle(border: any, borderPosition: string): string;
    /**
     * @private
     */
    convertBorderLineStyle(lineStyle: LineStyle): string;
    /**
     * @private
     */
    serializeCharacterFormat(characterFormat: any): string;
    /**
     * @private
     */
    serializeParagraphFormat(paragraphFormat: any, isList: boolean): string;
    /**
     * @private
     */
    createAttributesTag(tagValue: string, localProperties: string[]): string;
    /**
     * @private
     */
    createTag(tagValue: string): string;
    /**
     * @private
     */
    endTag(tagValue: string): string;
    /**
     * @private
     */
    createTableStartTag(table: any): string;
    /**
     * @private
     */
    createTableEndTag(): string;
    /**
     * @private
     */
    createRowStartTag(row: any): string;
    /**
     * @private
     */
    createRowEndTag(row: any): string;
    /**
     * @private
     */
    decodeHtmlNames(text: string): string;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/writer/index.d.ts
/**
 * Export Export
 */
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/writer/sfdt-export.d.ts
/**
 * Exports the document to Sfdt format.
 */
export  class SfdtExport {
    private endLine;
    private endOffset;
    private endCell;
    private startColumnIndex;
    private endColumnIndex;
    private lists;
    private viewer;
    private document;
    private writeInlineStyles;
    private editRangeId;
    /**
     * @private
     */
    constructor(owner: LayoutViewer);
    private getModuleName;
    private clear;
    /**
     * Serialize the data as Syncfusion document text.
     * @private
     */
    serialize(): string;
    /**
     * @private
     */
    saveAsBlob(viewer: LayoutViewer): Promise<Blob>;
    private updateEditRangeId;
    /**
     * @private
     */
    write(line?: LineWidget, startOffset?: number, endLine?: LineWidget, endOffset?: number, writeInlineStyles?: boolean): any;
    private writeBodyWidget;
    private writeHeaderFooters;
    private writeHeaderFooter;
    private createSection;
    private writeBlock;
    private writeParagraph;
    private writeInlines;
    private writeInline;
    writeChart(element: ChartElementBox, inline: any): void;
    private writeChartTitleArea;
    private writeChartDataFormat;
    private writeChartLayout;
    private writeChartArea;
    private writeChartLegend;
    private writeChartCategoryAxis;
    private writeChartDataTable;
    private writeChartCategory;
    private createChartCategory;
    private writeChartData;
    private createChartData;
    private createChartSeries;
    private writeChartSeries;
    private writeChartDataLabels;
    private writeChartTrendLines;
    private writeLines;
    private writeLine;
    private createParagraph;
    /**
     * @private
     */
    writeCharacterFormat(format: WCharacterFormat, isInline?: boolean): any;
    private writeParagraphFormat;
    private writeTabs;
    /**
     * @private
     */
    writeListFormat(format: WListFormat, isInline?: boolean): any;
    private writeTable;
    private writeRow;
    private writeCell;
    private createTable;
    private createRow;
    private createCell;
    private writeShading;
    private writeBorder;
    private writeBorders;
    private writeCellFormat;
    private writeRowFormat;
    private writeTableFormat;
    private writeStyles;
    private writeStyle;
    private writeLists;
    private writeAbstractList;
    private writeList;
    private writeListLevel;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/writer/text-export.d.ts
/**
 * Exports the document to Text format.
 */
export  class TextExport {
    private getModuleName;
    private text;
    private curSectionIndex;
    private sections;
    private document;
    private lastPara;
    private mSections;
    private inField;
    /**
     * @private
     */
    save(viewer: LayoutViewer, fileName: string): void;
    /**
     * @private
     */
    saveAsBlob(viewer: LayoutViewer): Promise<Blob>;
    private serialize;
    private setDocument;
    private writeInternal;
    private writeBody;
    private writeParagraph;
    private writeTable;
    private writeHeadersFooters;
    private writeHeaderFooter;
    private writeSectionEnd;
    private writeNewLine;
    private writeText;
    private updateLastParagraph;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/writer/word-export.d.ts
/**
 * Exports the document to Word format.
 */
export  class WordExport {
    private getModuleName;
    private documentPath;
    private stylePath;
    private chartPath;
    private numberingPath;
    private settingsPath;
    private headerPath;
    private footerPath;
    private imagePath;
    private appPath;
    private corePath;
    private contentTypesPath;
    private defaultEmbeddingPath;
    private generalRelationPath;
    private wordRelationPath;
    private excelRelationPath;
    private headerRelationPath;
    private footerRelationPath;
    private xmlContentType;
    private fontContentType;
    private documentContentType;
    private settingsContentType;
    private footerContentType;
    private headerContentType;
    private numberingContentType;
    private stylesContentType;
    private webSettingsContentType;
    private appContentType;
    private coreContentType;
    private customContentType;
    private customXmlContentType;
    private relationContentType;
    private chartsContentType;
    private tableStyleContentType;
    private chartColorStyleContentType;
    private settingsRelType;
    private footerRelType;
    private headerRelType;
    private documentRelType;
    private numberingRelType;
    private stylesRelType;
    private chartRelType;
    private fontRelType;
    private tableStyleRelType;
    private coreRelType;
    private appRelType;
    private customRelType;
    private imageRelType;
    private hyperlinkRelType;
    private controlRelType;
    private packageRelType;
    private customXmlRelType;
    private customUIRelType;
    private attachedTemplateRelType;
    private chartColorStyleRelType;
    private wNamespace;
    private wpNamespace;
    private pictureNamespace;
    private aNamespace;
    private a14Namespace;
    private rNamespace;
    private rpNamespace;
    private vNamespace;
    private oNamespace;
    private xmlNamespace;
    private w10Namespace;
    private cpNamespace;
    private dcNamespace;
    private docPropsNamespace;
    private veNamespace;
    private mNamespace;
    private wneNamespace;
    private customPropsNamespace;
    private vtNamespace;
    private chartNamespace;
    private slNamespace;
    private dtNamespace;
    private wmlNamespace;
    private w14Namespace;
    private wpCanvasNamespace;
    private wpDrawingNamespace;
    private wpGroupNamespace;
    private wpInkNamespace;
    private wpShapeNamespace;
    private w15Namespace;
    private diagramNamespace;
    private eNamespace;
    private pNamespace;
    private certNamespace;
    private c15Namespace;
    private c7Namespace;
    private csNamespace;
    private spreadSheetNamespace;
    private spreadSheet9;
    private cRelationshipsTag;
    private cRelationshipTag;
    private cIdTag;
    private cTypeTag;
    private cTargetTag;
    private cUserShapesTag;
    private cExternalData;
    private twipsInOnePoint;
    private twentiethOfPoint;
    private borderMultiplier;
    private percentageFactor;
    private emusPerPoint;
    private cConditionalTableStyleTag;
    private cTableFormatTag;
    private cTowFormatTag;
    private cCellFormatTag;
    private cParagraphFormatTag;
    private cCharacterFormatTag;
    private packageType;
    private relsPartPath;
    private documentRelsPartPath;
    private webSettingsPath;
    private wordMLDocumentPath;
    private wordMLStylePath;
    private wordMLNumberingPath;
    private wordMLSettingsPath;
    private wordMLHeaderPath;
    private wordMLFooterPath;
    private wordMLCommentsPath;
    private wordMLImagePath;
    private wordMLFootnotesPath;
    private wordMLEndnotesPath;
    private wordMLAppPath;
    private wordMLCorePath;
    private wordMLCustomPath;
    private wordMLFontTablePath;
    private wordMLChartsPath;
    private wordMLDefaultEmbeddingPath;
    private wordMLEmbeddingPath;
    private wordMLDrawingPath;
    private wordMLThemePath;
    private wordMLFontsPath;
    private wordMLDiagramPath;
    private wordMLControlPath;
    private wordMLVbaProject;
    private wordMLVbaData;
    private wordMLVbaProjectPath;
    private wordMLVbaDataPath;
    private wordMLWebSettingsPath;
    private wordMLCustomItemProp1Path;
    private wordMLFootnoteRelPath;
    private wordMLEndnoteRelPath;
    private wordMLSettingsRelPath;
    private wordMLNumberingRelPath;
    private wordMLFontTableRelPath;
    private wordMLCustomXmlPropsRelType;
    private wordMLControlRelType;
    private wordMLDiagramContentType;
    private section;
    private lastSection;
    private blockOwner;
    private paragraph;
    private table;
    private row;
    private headerFooter;
    private document;
    private mSections;
    private mLists;
    private mAbstractLists;
    private mStyles;
    private defCharacterFormat;
    private defParagraphFormat;
    private defaultTabWidthValue;
    private mRelationShipID;
    private cRelationShipId;
    private eRelationShipId;
    private mDocPrID;
    private chartCount;
    private seriesCount;
    private chartStringCount;
    private chart;
    private mDifferentFirstPage;
    private mHeaderFooterColl;
    private mVerticalMerge;
    private mGridSpans;
    private mDocumentImages;
    private mDocumentCharts;
    private mExternalLinkImages;
    private mHeaderFooterImages;
    private mArchive;
    private mArchiveExcel;
    private mBookmarks;
    private formatting;
    private enforcement;
    private hashValue;
    private saltValue;
    private protectionType;
    private fileName;
    private spanCellFormat;
    private readonly bookmarks;
    private readonly documentImages;
    private readonly externalImages;
    private readonly headerFooterImages;
    private readonly documentCharts;
    private readonly headersFooters;
    /**
     * @private
     */
    save(viewer: LayoutViewer, fileName: string): void;
    /**
     * @private
     */
    saveAsBlob(viewer: LayoutViewer): Promise<Blob>;
    /**
     * @private
     */
    saveExcel(): Promise<Blob>;
    /**
     * @private
     */
    destroy(): void;
    private serialize;
    private setDocument;
    private clearDocument;
    private serializeDocument;
    private writeCommonAttributeStrings;
    private writeDup;
    private writeCustom;
    private serializeDocumentBody;
    private serializeSection;
    private serializeSectionProperties;
    private serializeColumns;
    private serializePageSetup;
    private serializePageSize;
    private serializePageMargins;
    private serializeSectionType;
    private serializeHFReference;
    private addHeaderFooter;
    private serializeBodyItems;
    private serializeBodyItem;
    private serializeParagraph;
    private serializeParagraphItems;
    private serializeBiDirectionalOverride;
    private serializeEditRange;
    private serializeBookMark;
    private getBookmarkId;
    private serializePicture;
    private serializeDrawing;
    private serializeInlinePicture;
    private serializeInlineCharts;
    private serializeDrawingGraphicsChart;
    private getNextChartName;
    private serializeChart;
    private serializeChartStructure;
    private serializeChartXML;
    private serializeChartColors;
    private serializeChartColor;
    private serializeChartExcelData;
    private serializeWorkBook;
    private serializeExcelStyles;
    private serializeExcelData;
    private serializeSharedString;
    private serializeExcelSheet;
    private serializeExcelContentTypes;
    private serializeExcelRelation;
    private serializeExcelGeneralRelations;
    private getNextExcelRelationShipID;
    private getNextChartRelationShipID;
    private serializeChartData;
    private serializeChartPlotArea;
    private serializeChartLegend;
    private serializeChartErrorBar;
    private errorBarValueType;
    private serializeCategoryAxis;
    private serializeValueAxis;
    private serializeAxis;
    private parseChartTrendLines;
    private chartTrendLineType;
    private parseChartDataLabels;
    private serializeShapeProperties;
    private serializeDefaultShapeProperties;
    private serializeDefaultLineProperties;
    private serializeTextProperties;
    private serializeChartTitleFont;
    private serializeChartSolidFill;
    private serializeFont;
    private parseChartSeriesColor;
    private parseChartDataPoint;
    private serializeChartCategory;
    private serializeChartValue;
    private serializeChartYValue;
    private chartType;
    private chartGrouping;
    private chartLegendPosition;
    private updatechartId;
    private addChartRelation;
    private startsWith;
    private serializeDrawingGraphics;
    private updateShapeId;
    private addImageRelation;
    private updateHFImageRels;
    private serializeTable;
    private serializeTableGrid;
    private serializeTableRows;
    private serializeRow;
    private serializeRowFormat;
    private serializeCells;
    private serializeCell;
    private serializeCellFormat;
    private serializeCellWidth;
    private serializeCellMerge;
    private createMerge;
    private serializeColumnSpan;
    private checkMergeCell;
    private serializeGridSpan;
    private serializeTableCellDirection;
    private serializeCellVerticalAlign;
    private serializeGridColumns;
    private serializeTableFormat;
    private serializeTableMargins;
    private serializeRowMargins;
    private serializeCellMargins;
    private serializeMargins;
    private serializeShading;
    private getTextureStyle;
    private serializeTableBorders;
    private serializeBorders;
    private serializeTblLayout;
    private serializeBorder;
    private getBorderStyle;
    private serializeTableIndentation;
    private serializeCellSpacing;
    private serializeTableWidth;
    private serializeTableAlignment;
    private serializeFieldCharacter;
    private serializeTextRange;
    private serializeParagraphFormat;
    private serializeTabs;
    private serializeTab;
    private getTabLeader;
    private getTabJustification;
    private serializeListFormat;
    private serializeParagraphAlignment;
    private serializeParagraphSpacing;
    private serializeIndentation;
    private serializeStyles;
    private serializeDefaultStyles;
    private serializeDocumentStyles;
    private serializeCharacterFormat;
    private getColor;
    private getUnderlineStyle;
    private getHighlightColor;
    private serializeBoolProperty;
    private serializeNumberings;
    private serializeAbstractListStyles;
    private serializeListInstances;
    private generateHex;
    private roundToTwoDecimal;
    private serializeListLevel;
    private getLevelPattern;
    private serializeLevelText;
    private serializeLevelFollow;
    private serializeDocumentProtectionSettings;
    private serializeSettings;
    private serializeCoreProperties;
    private serializeAppProperties;
    private serializeFontTable;
    private serializeSettingsRelation;
    private serializeHeaderFooters;
    private serializeHeaderFooter;
    private serializeHeader;
    private serializeHFRelations;
    private writeHFCommonAttributes;
    private serializeFooter;
    private serializeDocumentRelations;
    private serializeChartDocumentRelations;
    private serializeChartRelations;
    private serializeImagesRelations;
    /**
     * @private
     */
    encodedString(input: string): Uint8Array;
    private serializeExternalLinkImages;
    private serializeHeaderFooterRelations;
    private serializeHFRelation;
    private serializeRelationShip;
    private getNextRelationShipID;
    private serializeGeneralRelations;
    private serializeContentTypes;
    private serializeHFContentTypes;
    private serializeHeaderFootersContentType;
    private serializeOverrideContentType;
    private serializeDefaultContentType;
    private resetRelationShipID;
    private resetExcelRelationShipId;
    private resetChartRelationShipId;
    private close;
}
//node_modules/@syncfusion/ej2-documenteditor/src/document-editor/index.d.ts
/**
 * export document editor
 */
//node_modules/@syncfusion/ej2-documenteditor/src/index.d.ts
/**
 * export document editor modules
 */
 }
export namespace drawings { 

//node_modules/@syncfusion/ej2-drawings/src/drawing/core/appearance-model.d.ts
/**
 * Interface for a class Thickness
 */
export interface ThicknessModel {
}
/**
 * Interface for a class Margin
 */
export interface MarginModel {
    /**
     * Sets the space to be left from the left side of the immediate parent of an element
     * @default 0
     */
    left?: number;
    /**
     * Sets the space to be left from the right side of the immediate parent of an element
     * @default 0
     */
    right?: number;
    /**
     * Sets the space to be left from the top side of the immediate parent of an element
     * @default 0
     */
    top?: number;
    /**
     * Sets the space to be left from the bottom side of the immediate parent of an element
     * @default 0
     */
    bottom?: number;
}
/**
 * Interface for a class Stop
 */
export interface StopModel {
    /**
     * Sets the color to be filled over the specified region
     * @default ''
     */
    color?: string;
    /**
     * Sets the position where the previous color transition ends and a new color transition starts
     * @default 0
     */
    offset?: number;
    /**
     * Describes the transparency level of the region
     * @default 1
     */
    opacity?: number;
}
/**
 * Interface for a class Gradient
 */
export interface GradientModel {
    /**
     * Defines the stop collection of gradient
     * @default []
     */
    stops?: StopModel[];
    /**
     * Defines the type of gradient
     * * Linear - Sets the type of the gradient as Linear
     * * Radial - Sets the type of the gradient as Radial
     * @default 'None'
     */
    type?: GradientType;
    /**
     * Defines the id of gradient
     * @default ''
     */
    id?: string;
}
/**
 * Interface for a class LinearGradient
 */
export interface LinearGradientModel extends GradientModel{
    /**
     * Defines the x1 value of linear gradient
     * @default 0
     */
    x1?: number;
    /**
     * Defines the x2 value of linear gradient
     * @default 0
     */
    x2?: number;
    /**
     * Defines the y1 value of linear gradient
     * @default 0
     */
    y1?: number;
    /**
     * Defines the y2 value of linear gradient
     * @default 0
     */
    y2?: number;
}
/**
 * Interface for a class RadialGradient
 */
export interface RadialGradientModel extends GradientModel{
    /**
     * Defines the cx value of radial gradient
     * @default 0
     */
    cx?: number;
    /**
     * Defines the cy value of radial gradient
     * @default cy
     */
    cy?: number;
    /**
     * Defines the fx value of radial gradient
     * @default 0
     */
    fx?: number;
    /**
     * Defines the fy value of radial gradient
     * @default fy
     */
    fy?: number;
    /**
     * Defines the r value of radial gradient
     * @default 50
     */
    r?: number;
}
/**
 * Interface for a class ShapeStyle
 */
export interface ShapeStyleModel {
    /**
     * Sets the fill color of a shape/path
     * @default 'white'
     */
    fill?: string;
    /**
     * Sets the stroke color of a shape/path
     * @default 'black'
     */
    strokeColor?: string;
    /**
     * Defines the pattern of dashes and spaces to stroke the path/shape
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```
     *  let nodes: NodeModel[] = [{  id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100,
     * style: { fill: 'red', strokeColor: 'blue', strokeWidth: 5, 
     * strokeDashArray: '2 2', opacity: 0.6 } as ShapeStyleModel,
     * }];
     * let diagram: Diagram = new Diagram({
     * ...
     *   nodes: nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default ''
     */
    strokeDashArray?: string;
    /**
     * Defines the stroke width of the path/shape
     * @default 1
     */
    strokeWidth?: number;
    /**
     * Sets the opacity of a shape/path
     * @default 1
     */
    opacity?: number;
    /**
     * Defines the gradient of a shape/path
     * @default null
     * @aspType object
     */
    gradient?: GradientModel | LinearGradientModel | RadialGradientModel;
}
/**
 * Interface for a class StrokeStyle
 */
export interface StrokeStyleModel extends ShapeStyleModel{
    /**
     * Sets the fill color of a shape/path
     * @default 'transparent'
     */
    fill?: string;
}
/**
 * Interface for a class TextStyle
 */
export interface TextStyleModel extends ShapeStyleModel{
    /**
     * Sets the font color of a text
     * @default 'black'
     */
    color?: string;
    /**
     * Sets the font type of a text
     * @default 'Arial'
     */
    fontFamily?: string;
    /**
     * Defines the font size of a text
     * @default 12
     */
    fontSize?: number;
    /**
     * Enables/disables the italic style of text
     * @default false
     */
    italic?: boolean;
    /**
     * Enables/disables the bold style of text
     * @default false
     */
    bold?: boolean;
    /**
     * Defines how the white space and new line characters have to be handled
     * * PreserveAll - Preserves all empty spaces and empty lines
     * * CollapseSpace - Collapses the consequent spaces into one
     * * CollapseAll - Collapses all consequent empty spaces and empty lines
     * @default 'CollapseSpace'
     */
    whiteSpace?: WhiteSpace;
    /**
     * Defines how the text should be wrapped, when the text size exceeds some specific bounds
     * * WrapWithOverflow - Wraps the text so that no word is broken
     * * Wrap - Wraps the text and breaks the word, if necessary
     * * NoWrap - Text will no be wrapped
     * @default  'WrapWithOverflow'
     */
    textWrapping?: TextWrap;
    /**
     * Defines how the text should be aligned within its bounds
     * * Left - Aligns the text at the left of the text bounds
     * * Right - Aligns the text at the right of the text bounds
     * * Center - Aligns the text at the center of the text bounds
     * * Justify - Aligns the text in a justified manner
     * @default 'Center'
     */
    textAlign?: TextAlign;
    /**
     * Defines how the text should be decorated. For example, with underline/over line
     * * Overline - Decorates the text with a line above the text
     * * Underline - Decorates the text with an underline
     * * LineThrough - Decorates the text by striking it with a line
     * * None - Text will not have any specific decoration
     * @default 'None'
     */
    textDecoration?: TextDecoration;
    /**
     * Defines how to handle the text when it exceeds the given size.
     * * Wrap - Wraps the text to next line, when it exceeds its bounds
     * * Ellipsis - It truncates the overflown text and represents the clipping with an ellipsis
     * * Clip - It clips the overflow text
     * @default 'Wrap'
     */
    textOverflow?: TextOverflow;
    /**
     * Sets the fill color of a shape/path
     * @default 'transparent'
     */
    fill?: string;
}
//node_modules/@syncfusion/ej2-drawings/src/drawing/core/appearance.d.ts
/**
 * Layout Model module defines the styles and types to arrange objects in containers
 */
export  class Thickness {
    /**
     * Sets the left value of the thickness
     * @default 0
     */
    left: number;
    /**
     * Sets the right value of the thickness
     * @default 0
     */
    right: number;
    /**
     * Sets the top value of the thickness
     * @default 0
     */
    top: number;
    /**
     * Sets the bottom value of the thickness
     * @default 0
     */
    bottom: number;
    constructor(left: number, right: number, top: number, bottom: number);
}
/**
 * Defines the space to be left between an object and its immediate parent
 */
export  class Margin extends base.ChildProperty<Margin> {
    /**
     * Sets the space to be left from the left side of the immediate parent of an element
     * @default 0
     */
    left: number;
    /**
     * Sets the space to be left from the right side of the immediate parent of an element
     * @default 0
     */
    right: number;
    /**
     * Sets the space to be left from the top side of the immediate parent of an element
     * @default 0
     */
    top: number;
    /**
     * Sets the space to be left from the bottom side of the immediate parent of an element
     * @default 0
     */
    bottom: number;
}
/**
 * Defines the different colors and the region of color transitions
 * ```html
 * <div id='diagram'></div>
 * ```
 * ```typescript
 * let stopscol: StopModel[] = [];
 * let stops1: StopModel = { color: 'white', offset: 0, opacity: 0.7 };
 * stopscol.push(stops1);
 * let stops2: StopModel = { color: 'red', offset: 0, opacity: 0.3 };
 * stopscol.push(stops2);
 * let gradient: RadialGradientModel = { cx: 50, cy: 50, fx: 50, fy: 50, stops: stopscol, type: 'Radial' };
 * let nodes$: NodeModel[] = [{ id: 'node1', width: 100, height: 100,
 * style: { gradient: gradient }
 * }];
 * let diagram$: Diagram = new Diagram({
 * ...
 *   nodes: nodes,
 * ...
 * });
 * diagram.appendTo('#diagram');
 * ```
 */
export  class Stop extends base.ChildProperty<Stop> {
    /**
     * Sets the color to be filled over the specified region
     * @default ''
     */
    color: string;
    /**
     * Sets the position where the previous color transition ends and a new color transition starts
     * @default 0
     */
    offset: number;
    /**
     * Describes the transparency level of the region
     * @default 1
     */
    opacity: number;
    /**
     * @private
     * Returns the name of class Stop
     */
    getClassName(): string;
}
/**
 * Paints the node with a smooth transition from one color to another color
 */
export  class Gradient extends base.ChildProperty<Gradient> {
    /**
     * Defines the stop collection of gradient
     * @default []
     */
    stops: StopModel[];
    /**
     * Defines the type of gradient
     * * Linear - Sets the type of the gradient as Linear
     * * Radial - Sets the type of the gradient as Radial
     * @default 'None'
     */
    type: GradientType;
    /**
     * Defines the id of gradient
     * @default ''
     */
    id: string;
}
/**
 * Defines the linear gradient of styles
 * ```html
 * <div id='diagram'></div>
 * ```
 * ```typescript
 * let stopscol: StopModel[] = [];
 * let stops1: StopModel = { color: 'white', offset: 0, opacity: 0.7 };
 * stopscol.push(stops1);
 * let stops2: StopModel = { color: 'red', offset: 0, opacity: 0.3 };
 * stopscol.push(stops2);
 * let gradient: LinearGradientModel = { x1: 0, x2: 50, y1: 0, y2: 50, stops: stopscol, type: 'Linear' };
 * let nodes$: NodeModel[] = [{ id: 'node1', width: 100, height: 100,
 * style: { gradient: gradient }
 * }];
 * let diagram$: Diagram = new Diagram({
 * ...
 *   nodes: nodes,
 * ...
 * });
 * diagram.appendTo('#diagram');
 * ```
 */
/**
 * Paints the node with linear color transitions
 */
export  class LinearGradient extends Gradient {
    /**
     * Defines the x1 value of linear gradient
     * @default 0
     */
    x1: number;
    /**
     * Defines the x2 value of linear gradient
     * @default 0
     */
    x2: number;
    /**
     * Defines the y1 value of linear gradient
     * @default 0
     */
    y1: number;
    /**
     * Defines the y2 value of linear gradient
     * @default 0
     */
    y2: number;
}
/**
 * A focal point defines the beginning of the gradient, and a circle defines the end point of the gradient
 * ```html
 * <div id='diagram'></div>
 * ```
 * ```typescript
 * let stopscol: StopModel[] = [];
 * let stops1: StopModel = { color: 'white', offset: 0, opacity: 0.7 };
 * stopscol.push(stops1);
 * let stops2: StopModel = { color: 'red', offset: 0, opacity: 0.3 };
 * stopscol.push(stops2);
 * let gradient: RadialGradientModel = { cx: 50, cy: 50, fx: 50, fy: 50, stops: stopscol, type: 'Radial' };
 * let nodes$: NodeModel[] = [{ id: 'node1', width: 100, height: 100,
 * style: { gradient: gradient }
 * }];
 * let diagram$: Diagram = new Diagram({
 * ...
 *   nodes: nodes,
 * ...
 * });
 * diagram.appendTo('#diagram');
 * ```
 */
export  class RadialGradient extends Gradient {
    /**
     * Defines the cx value of radial gradient
     * @default 0
     */
    cx: number;
    /**
     * Defines the cy value of radial gradient
     * @default cy
     */
    cy: number;
    /**
     * Defines the fx value of radial gradient
     * @default 0
     */
    fx: number;
    /**
     * Defines the fy value of radial gradient
     * @default fy
     */
    fy: number;
    /**
     * Defines the r value of radial gradient
     * @default 50
     */
    r: number;
}
/**
 * Defines the style of shape/path
 */
export  class ShapeStyle extends base.ChildProperty<ShapeStyle> {
    /**
     * Sets the fill color of a shape/path
     * @default 'white'
     */
    fill: string;
    /**
     * Sets the stroke color of a shape/path
     * @default 'black'
     */
    strokeColor: string;
    /**
     * Defines the pattern of dashes and spaces to stroke the path/shape
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```
     *  let nodes$: NodeModel[] = [{  id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100,
     * style: { fill: 'red', strokeColor: 'blue', strokeWidth: 5,
     * strokeDashArray: '2 2', opacity: 0.6 } as ShapeStyleModel,
     * }];
     * let diagram$: Diagram = new Diagram({
     * ...
     *   nodes: nodes,
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     * @default ''
     */
    strokeDashArray: string;
    /**
     * Defines the stroke width of the path/shape
     * @default 1
     */
    strokeWidth: number;
    /**
     * Sets the opacity of a shape/path
     * @default 1
     */
    opacity: number;
    /**
     * Defines the gradient of a shape/path
     * @default null
     * @aspType object
     */
    gradient: GradientModel | LinearGradientModel | RadialGradientModel;
}
/**
 * Defines the stroke style of a path
 */
export  class StrokeStyle extends ShapeStyle {
    /**
     * Sets the fill color of a shape/path
     * @default 'transparent'
     */
    fill: string;
}
/**
 * Defines the appearance of text
 * ```html
 * <div id='diagram'></div>
 * ```
 * ```typescript
 * let style: TextStyleModel = { strokeColor: 'black', opacity: 0.5, strokeWidth: 1 };
 * let node: NodeModel;
 * node = {
 * ...
 * id: 'node', width: 100, height: 100, offsetX: 100, offsetY: 100,
 * annotations : [{
 * content: 'text', style: style }];
 * ...
 * };
 * let diagram$: Diagram = new Diagram({
 * ...
 *   nodes: [node],
 * ...
 * });
 * diagram.appendTo('#diagram');
 * ```
 */
export  class TextStyle extends ShapeStyle {
    /**
     * Sets the font color of a text
     * @default 'black'
     */
    color: string;
    /**
     * Sets the font type of a text
     * @default 'Arial'
     */
    fontFamily: string;
    /**
     * Defines the font size of a text
     * @default 12
     */
    fontSize: number;
    /**
     * Enables/disables the italic style of text
     * @default false
     */
    italic: boolean;
    /**
     * Enables/disables the bold style of text
     * @default false
     */
    bold: boolean;
    /**
     * Defines how the white space and new line characters have to be handled
     * * PreserveAll - Preserves all empty spaces and empty lines
     * * CollapseSpace - Collapses the consequent spaces into one
     * * CollapseAll - Collapses all consequent empty spaces and empty lines
     * @default 'CollapseSpace'
     */
    whiteSpace: WhiteSpace;
    /**
     * Defines how the text should be wrapped, when the text size exceeds some specific bounds
     * * WrapWithOverflow - Wraps the text so that no word is broken
     * * Wrap - Wraps the text and breaks the word, if necessary
     * * NoWrap - Text will no be wrapped
     * @default  'WrapWithOverflow'
     */
    textWrapping: TextWrap;
    /**
     * Defines how the text should be aligned within its bounds
     * * Left - Aligns the text at the left of the text bounds
     * * Right - Aligns the text at the right of the text bounds
     * * Center - Aligns the text at the center of the text bounds
     * * Justify - Aligns the text in a justified manner
     * @default 'Center'
     */
    textAlign: TextAlign;
    /**
     * Defines how the text should be decorated. For example, with underline/over line
     * * Overline - Decorates the text with a line above the text
     * * Underline - Decorates the text with an underline
     * * LineThrough - Decorates the text by striking it with a line
     * * None - Text will not have any specific decoration
     * @default 'None'
     */
    textDecoration: TextDecoration;
    /**
     * Defines how to handle the text when it exceeds the given size.
     * * Wrap - Wraps the text to next line, when it exceeds its bounds
     * * Ellipsis - It truncates the overflown text and represents the clipping with an ellipsis
     * * Clip - It clips the overflow text
     * @default 'Wrap'
     */
    textOverflow: TextOverflow;
    /**
     * Sets the fill color of a shape/path
     * @default 'transparent'
     */
    fill: string;
}
//node_modules/@syncfusion/ej2-drawings/src/drawing/core/containers/canvas.d.ts
/**
 * Canvas module is used to define a plane(canvas) and to arrange the children based on margin
 */
export  class Canvas extends Container {
    /**
     * Not applicable for canvas
     *  @private
     */
    measureChildren: boolean;
    /**
     * Measures the minimum space that the canvas requires
     * @param availableSize
     */
    measure(availableSize: Size): Size;
    /**
     * Arranges the child elements of the canvas
     */
    arrange(desiredSize: Size): Size;
    /**
     * Aligns the child element based on its parent
     * @param child
     * @param childSize
     * @param parentSize
     * @param x
     * @param y
     */
    private alignChildBasedOnParent;
    /**
     * Aligns the child elements based on a point
     * @param child
     * @param x
     * @param y
     */
    private alignChildBasedOnaPoint;
}
//node_modules/@syncfusion/ej2-drawings/src/drawing/core/containers/container.d.ts
/**
 * Container module is used to group related objects
 */
export  class Container extends DrawingElement {
    /**
     * Gets/Sets the collection of child elements
     */
    children: DrawingElement[];
    private desiredBounds;
    /** @private */
    measureChildren: boolean;
    /**
     * returns whether the container has child elements or not
     */
    hasChildren(): boolean;
    /**   @private  */
    prevRotateAngle: number;
    /**
     * Measures the minimum space that the container requires
     *
     * @param availableSize
     */
    measure(availableSize: Size): Size;
    /**
     * Arranges the container and its children
     * @param desiredSize
     */
    arrange(desiredSize: Size): Size;
    /**
     * Stretches the child elements based on the size of the container
     * @param size
     */
    protected stretchChildren(size: Size): void;
    /**
     * Finds the offset of the child element with respect to the container
     * @param child
     * @param center
     */
    protected findChildOffsetFromCenter(child: DrawingElement, center: PointModel): void;
    private GetChildrenBounds;
}
//node_modules/@syncfusion/ej2-drawings/src/drawing/core/containers/index.d.ts
/**
 * Diagram component exported items
 */
//node_modules/@syncfusion/ej2-drawings/src/drawing/core/elements/drawing-element.d.ts
/**
 * DiagramElement module defines the basic unit of diagram
 */
export  class DrawingElement {
    /**
     * Sets the unique id of the element
     */
    id: string;
    /**
     * Sets/Gets the reference point of the element
     * ```html
     * <div id='diagram'></div>
     * ```
     * ```typescript
     * let stackPanel: StackPanel = new StackPanel();
     * stackPanel.offsetX = 300;
 stackPanel.offsetY = 200;
     * stackPanel.width = 100;
 stackPanel.height = 100;
     * stackPanel.style.fill = 'red';
     * stackPanel.pivot = { x: 0.5, y: 0.5 };
     * let diagram$: Diagram = new Diagram({
     * ...
     * basicElements: [stackPanel],
     * ...
     * });
     * diagram.appendTo('#diagram');
     * ```
     */
    pivot: PointModel;
    rotateValue: IRotateValue;
    /**
     * Sets or gets whether the content of the element needs to be measured
     */
    isDirt: boolean;
    /**
     * Sets/Gets the x-coordinate of the element
     */
    offsetX: number;
    /**
     * Sets/Gets the y-coordinate of the element
     */
    offsetY: number;
    /**
     * Set the corner of the element
     */
    cornerRadius: number;
    /**
     * Sets/Gets the minimum height of the element
     */
    minHeight: number;
    /**
     * Sets/Gets the minimum width of the element
     */
    minWidth: number;
    /**
     * Sets/Gets the maximum width of the element
     */
    maxWidth: number;
    /**
     * Sets/Gets the maximum height of the element
     */
    maxHeight: number;
    /**
     * Sets/Gets the width of the element
     */
    width: number;
    /**
     * Sets/Gets the height of the element
     */
    height: number;
    /**
     * Sets/Gets how the element has to be horizontally arranged with respect to its immediate parent
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Left - Aligns the diagram element at the left of its immediate parent
     * * Right - Aligns the diagram element at the right of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     */
    horizontalAlignment: HorizontalAlignment;
    /**
     * Sets/Gets how the element has to be vertically arranged with respect to its immediate parent
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Top - Aligns the diagram element at the top of its immediate parent
     * * Bottom - Aligns the diagram element at the bottom of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     */
    verticalAlignment: VerticalAlignment;
    /**
     * Sets or gets whether the content of the element to be visible
     */
    visible: boolean;
    /**
     * Sets/Gets the rotate angle of the element
     */
    rotateAngle: number;
    /**
     * Sets/Gets the margin of the element
     */
    margin: MarginModel;
    /**
     * Sets whether the element has to be aligned with respect to a point/with respect to its immediate parent
     * * Point - Diagram elements will be aligned with respect to a point
     * * Object - Diagram elements will be aligned with respect to its immediate parent
     */
    relativeMode: RelativeMode;
    /**
     * Sets whether the element has to be transformed based on its parent or not
     * * Self - Sets the transform type as Self
     * * Parent - Sets the transform type as Parent
     */
    /** @private */
    transform: RotateTransform;
    /**
     * Sets the style of the element
     */
    style: ShapeStyleModel;
    /**
     * Gets the minimum size that is required by the element
     */
    desiredSize: Size;
    /**
     * Gets the size that the element will be rendered
     */
    actualSize: Size;
    /**
     * Gets the rotate angle that is set to the immediate parent of the element
     */
    parentTransform: number;
    /** @private */
    preventContainer: boolean;
    /**
     * Gets/Sets the boundary of the element
     */
    bounds: Rect;
    /**
     * Gets/Sets the corners of the rectangular bounds
     */
    /** @private */
    corners: Corners;
    /**
     * Defines whether the element has to be measured or not
     */
    staticSize: boolean;
    /**
     * check whether the element is rect or not
     */
    /** @private */
    isRectElement: boolean;
    /** @private */
    isCalculateDesiredSize: boolean;
    /**
     * Defines whether the element is group or port
     */
    /** @private */
    elementActions: ElementAction;
    /**
     * Sets the offset of the element with respect to its parent
     * @param x
     * @param y
     * @param mode
     */
    setOffsetWithRespectToBounds(x: number, y: number, mode: UnitMode): void;
    /**
     * Gets the position of the element with respect to its parent
     * @param size
     */
    getAbsolutePosition(size: Size): PointModel;
    private position;
    private unitMode;
    /**   @private  */
    float: boolean;
    /**
    * used to set the outer bounds value
    * @private
    */
    outerBounds: Rect;
    private floatingBounds;
    /**
     * Measures the minimum space that the element requires
     * @param availableSize
     */
    measure(availableSize: Size): Size;
    /**
     * Arranges the element
     * @param desiredSize
     */
    arrange(desiredSize: Size): Size;
    /**
     * Updates the bounds of the element
     */
    updateBounds(): void;
    /**
     * Validates the size of the element with respect to its minimum and maximum size
     * @param desiredSize
     * @param availableSize
     */
    protected validateDesiredSize(desiredSize: Size, availableSize: Size): Size;
}
/** @private */
export interface Corners {
    topLeft: PointModel;
    topCenter: PointModel;
    topRight: PointModel;
    middleLeft: PointModel;
    center: PointModel;
    middleRight: PointModel;
    bottomLeft: PointModel;
    bottomCenter: PointModel;
    bottomRight: PointModel;
    left: number;
    right: number;
    top: number;
    bottom: number;
    width: number;
    height: number;
}
//node_modules/@syncfusion/ej2-drawings/src/drawing/core/elements/image-element.d.ts
/**
 * ImageElement defines a basic image elements
 */
export  class ImageElement extends DrawingElement {
    /**
     * set the id for each element
     */
    constructor();
    /**
     * sets or gets the image source
     */
    private imageSource;
    /**
     * Gets the source for the image element
     */
    /**
    * Sets the source for the image element
    */
    source: string;
    /**
     * sets scaling factor of the image
     */
    imageScale: Scale;
    /**
     * sets the alignment of the image
     */
    imageAlign: ImageAlignment;
    /**
     * Sets how to stretch the image
     */
    stretch: Stretch;
    /**
     * Saves the actual size of the image
     */
    contentSize: Size;
    /**
     * Measures minimum space that is required to render the image
     * @param availableSize
     */
    measure(availableSize: Size): Size;
    /**
     * Arranges the image
     * @param desiredSize
     */
    arrange(desiredSize: Size): Size;
}
//node_modules/@syncfusion/ej2-drawings/src/drawing/core/elements/index.d.ts
/**
 * Diagram component exported items
 */
//node_modules/@syncfusion/ej2-drawings/src/drawing/core/elements/path-element.d.ts
/**
 * PathElement takes care of how to align the path based on offsetX and offsetY
 */
export  class PathElement extends DrawingElement {
    /**
     * set the id for each element
     */
    constructor();
    /**
     * Gets or sets the geometry of the path element
     */
    private pathData;
    /**
     * Gets the geometry of the path element
     */
    /**
    * Sets the geometry of the path element
    */
    data: string;
    /**
     * Gets/Sets whether the path has to be transformed to fit the given x,y, width, height
     */
    transformPath: boolean;
    /**
     * Gets/Sets the equivalent path, that will have the origin as 0,0
     */
    absolutePath: string;
    /**   @private  */
    canMeasurePath: boolean;
    /**   @private  */
    absoluteBounds: Rect;
    private points;
    private pointTimer;
    /**
     * Measures the minimum space that is required to render the element
     * @param availableSize
     */
    measure(availableSize: Size): Size;
    /**
     * Arranges the path element
     * @param desiredSize
     */
    arrange(desiredSize: Size): Size;
    /**
     * Translates the path to 0,0 and scales the path based on the actual size
     * @param pathData
     * @param bounds
     * @param actualSize
     */
    updatePath(pathData: string, bounds: Rect, actualSize: Size): string;
}
//node_modules/@syncfusion/ej2-drawings/src/drawing/core/elements/text-element.d.ts
/**
 * TextElement is used to display text/annotations
 */
export  class TextElement extends DrawingElement {
    /**
     * set the id for each element
     */
    constructor();
    /**
     * sets or gets the image source
     */
    private textContent;
    /** @private */
    canMeasure: boolean;
    /** @private */
    canConsiderBounds: boolean;
    /** @private */
    doWrap: boolean;
    /**
     * gets the content for the text element
     */
    /**
    * sets the content for the text element
    */
    content: string;
    private textNodes;
    /**
     * sets the content for the text element
     */
    /**
    * gets the content for the text element
    */
    childNodes: SubTextElement[];
    private textWrapBounds;
    /**
     * gets the wrapBounds for the text
     */
    /**
    * sets the wrapBounds for the text
    */
    wrapBounds: TextBounds;
    /** @private */
    refreshTextElement(): void;
    /**
     * Defines the appearance of the text element
     */
    style: TextStyleModel;
    /**
     * Measures the minimum size that is required for the text element
     * @param availableSize
     */
    measure(availableSize: Size): Size;
    /**
     * Arranges the text element
     * @param desiredSize
     */
    arrange(desiredSize: Size): Size;
}
//node_modules/@syncfusion/ej2-drawings/src/drawing/core/index.d.ts
/**
 * Diagram component exported items
 */
//node_modules/@syncfusion/ej2-drawings/src/drawing/enum/enum.d.ts
/**
 * enum module defines the public enumerations
 */
/**
 * Defines how to handle the text when it exceeds the element bounds
 * Wrap - Wraps the text to next line, when it exceeds its bounds
 * Ellipsis - It truncates the overflown text and represents the clipping with an ellipsis
 * Clip - It clips the overflow text
 */
export  type TextOverflow = 
/** Wrap - Wraps the text to next line, when it exceeds its bounds */
'Wrap' | 
/** Ellipsis - It truncates the overflown text and represents the clipping with an ellipsis */
'Ellipsis' | 
/** Clip - It clips the overflow text */
'Clip';
/**
 * Defines how to decorate the text
 * Overline - Decorates the text with a line above the text
 * Underline - Decorates the text with an underline
 * LineThrough - Decorates the text by striking it with a line
 * None - Text will not have any specific decoration
 */
export  type TextDecoration = 
/** Overline - Decorates the text with a line above the text */
'Overline' | 
/** Underline - Decorates the text with an underline */
'Underline' | 
/** LineThrough - Decorates the text by striking it with a line */
'LineThrough' | 
/** None - Text will not have any specific decoration */
'None';
/**
 * Defines how the text has to be aligned
 * Left - Aligns the text at the left of the text bounds
 * Right - Aligns the text at the right of the text bounds
 * Center - Aligns the text at the center of the text bounds
 * Justify - Aligns the text in a justified manner
 */
export  type TextAlign = 
/** Left - Aligns the text at the left of the text bounds */
'Left' | 
/** Right - Aligns the text at the right of the text bounds */
'Right' | 
/** Center - Aligns the text at the center of the text bounds */
'Center' | 
/** Justify - Aligns the text in a justified manner */
'Justify';
/**
 * Defines how to wrap the text when it exceeds the element bounds
 * WrapWithOverflow - Wraps the text so that no word is broken
 * Wrap - Wraps the text and breaks the word, if necessary
 * NoWrap - Text will no be wrapped
 */
export  type TextWrap = 
/** WrapWithOverflow - Wraps the text so that no word is broken */
'WrapWithOverflow' | 
/** Wrap - Wraps the text and breaks the word, if necessary */
'Wrap' | 
/** NoWrap - Text will no be wrapped */
'NoWrap';
/**
 * Defines how the diagram elements have to be aligned with respect to its immediate parent
 * * Stretch - Stretches the diagram element throughout its immediate parent
 * * Top - Aligns the diagram element at the top of its immediate parent
 * * Bottom - Aligns the diagram element at the bottom of its immediate parent
 * * Center - Aligns the diagram element at the center of its immediate parent
 * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
 */
export  type VerticalAlignment = 
/**
 * Stretch - Stretches the diagram element throughout its immediate parent
 */
'Stretch' | 
/**
 * Top - Aligns the diagram element at the top of its immediate parent
 */
'Top' | 
/**
 * Bottom - Aligns the diagram element at the bottom of its immediate parent
 */
'Bottom' | 
/**
 * Center - Aligns the diagram element at the center of its immediate parent
 */
'Center' | 
/**
 * Auto - Aligns the diagram element based on the characteristics of its immediate parent
 */
'Auto';
/**
 * Defines how the diagram elements have to be aligned with respect to its immediate parent
 * * Stretch - Stretches the diagram element throughout its immediate parent
 * * Left - Aligns the diagram element at the left of its immediate parent
 * * Right - Aligns the diagram element at the right of its immediate parent
 * * Center - Aligns the diagram element at the center of its immediate parent
 * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
 */
export  type HorizontalAlignment = 
/**
 * Stretch - Stretches the diagram element throughout its immediate parent
 */
'Stretch' | 
/**
 * Left - Aligns the diagram element at the left of its immediate parent
 */
'Left' | 
/**
 * Right - Aligns the diagram element at the right of its immediate parent
 */
'Right' | 
/**
 * Center - Aligns the diagram element at the center of its immediate parent
 */
'Center' | 
/**
 * Auto - Aligns the diagram element based on the characteristics of its immediate parent
 */
'Auto';
/**
 * Defines the reference with respect to which the diagram elements have to be aligned
 * Point - Diagram elements will be aligned with respect to a point
 * Object - Diagram elements will be aligned with respect to its immediate parent
 */
export  type RelativeMode = 
/** Point - Diagram elements will be aligned with respect to a point */
'Point' | 
/** Object - Diagram elements will be aligned with respect to its immediate parent */
'Object';
/**
 * Defines the type of the gradient
 * Linear - Sets the type of the gradient as Linear
 * Radial - Sets the type of the gradient as Radial
 */
export  type GradientType = 
/** None - Sets the type of the gradient as None */
'None' | 
/** Linear - Sets the type of the gradient as Linear */
'Linear' | 
/** Radial - Sets the type of the gradient as Radial */
'Radial';
/**
 * Defines the unit mode
 * Absolute - Sets the unit mode type as Absolute
 * Fraction - Sets the unit mode type as Fraction
 */
export  type UnitMode = 
/** Absolute - Sets the unit mode type as Absolute */
'Absolute' | 
/** Fraction - Sets the unit mode type as Fraction */
'Fraction';
/**
 * Defines the container/canvas transform
 * Self - Sets the transform type as Self
 * Parent - Sets the transform type as Parent
 */
export  enum RotateTransform {
    /** Self - Sets the transform type as Self */
    Self = 1,
    /** Parent - Sets the transform type as Parent */
    Parent = 2
}
/** Enables/Disables The element actions
 * None - Diables all element actions are none
 * ElementIsPort - Enable element action is port
 * ElementIsGroup - Enable element action as Group
 * @private
 */
export  enum ElementAction {
    /** Disables all element actions are none  */
    None = 0,
    /** Enable the element action is Port  */
    ElementIsPort = 2,
    /** Enable the element action as Group  */
    ElementIsGroup = 4
}
/**
 * Defines how the annotations have to be aligned with respect to its immediate parent
 * Center - Aligns the annotation at the center of a connector segment
 * Before - Aligns the annotation before a connector segment
 * After - Aligns the annotation after a connector segment
 */
export  type AnnotationAlignment = 
/**
 * Center - Aligns the annotation at the center of a connector segment
 */
'Center' | 
/**
 * Before - Aligns the annotation before a connector segment
 */
'Before' | 
/**
 * After - Aligns the annotation after a connector segment
 */
'After';
/**
 * Defines the type of the annotation
 * Shape - Sets the annotation type as Shape
 * Path - Sets the annotation type as Path
 */
export  type AnnotationTypes = 
/**
 * Shape - Sets the annotation type as Shape
 */
'Shape' | 
/**
 * Path - Sets the annotation type as Path
 */
'Path';
/**
 * Defines the decorator shape of the connector
 * None - Sets the decorator shape as None
 * Arrow - Sets the decorator shape as Arrow
 * Diamond - Sets the decorator shape as Diamond
 * Path - Sets the decorator shape as Path
 * OpenArrow - Sets the decorator shape as OpenArrow
 * Circle - Sets the decorator shape as Circle
 * Square - Sets the decorator shape as Square
 * Fletch - Sets the decorator shape as Fletch
 * OpenFetch - Sets the decorator shape as OpenFetch
 * IndentedArrow - Sets the decorator shape as Indented Arrow
 * OutdentedArrow - Sets the decorator shape as Outdented Arrow
 * DoubleArrow - Sets the decorator shape as DoubleArrow
 */
export  type DecoratorShapes = 
/** None - Sets the decorator shape as None */
'None' | 
/** Arrow - Sets the decorator shape as Arrow */
'Arrow' | 
/** Diamond - Sets the decorator shape as Diamond */
'Diamond' | 
/** OpenArrow - Sets the decorator shape as OpenArrow */
'OpenArrow' | 
/** Circle - Sets the decorator shape as Circle */
'Circle' | 
/** Square - Sets the decorator shape as Square */
'Square' | 
/** Fletch - Sets the decorator shape as Fletch */
'Fletch' | 
/** OpenFetch - Sets the decorator shape as OpenFetch */
'OpenFetch' | 
/** IndentedArrow - Sets the decorator shape as Indented Arrow */
'IndentedArrow' | 
/** OutdentedArrow - Sets the decorator shape as Outdented Arrow */
'OutdentedArrow' | 
/** DoubleArrow - Sets the decorator shape as DoubleArrow */
'DoubleArrow' | 
/** Custom - Sets the decorator shape as Custom */
'Custom';
/**
 * Enables/Disables shape of the uml classifier shapes
 * * Package - Indicates the scope is public.
 * * Class - Indicates the scope is protected.
 * * Interface - Indicates the scope is private.
 * * Enumeration - Indicates the scope is package.
 * * CollapsedPackage - Indicates the scope is public.
 * * Inheritance - Indicates the scope is protected.
 * * Association - Indicates the scope is private.
 * * Aggregation - Indicates the scope is package.
 * * Composition - Indicates the scope is public.
 * * Realization - Indicates the scope is protected.
 * * DirectedAssociation - Indicates the scope is private.
 * * Dependency - Indicates the scope is package.
 */
export  type ClassifierShape = 'Class' | 'Interface' | 'Enumeration' | 'Inheritance' | 'Association' | 'Aggregation' | 'Composition' | 'Realization' | 'Dependency';
/**
 * Defines the direction the uml connectors
 * * Default - Indicates the direction is Default.
 * * Directional - Indicates the direction is single Directional.
 * * BiDirectional - Indicates the direction is BiDirectional.
 */
export  type AssociationFlow = 'Default' | 'Directional' | 'BiDirectional';
/**
 * Define the Multiplicity of uml connector shapes
 * * OneToOne - Indicates the connector multiplicity is OneToOne.
 * * OneToMany - Indicates the connector multiplicity is OneToMany.
 * * ManyToOne - Indicates the connector multiplicity is ManyToOne.
 * * ManyToOne - Indicates the connector multiplicity is ManyToOne.
 */
export  type Multiplicity = 'OneToOne' | 'OneToMany' | 'ManyToOne' | 'ManyToOne';
/**
 * Defines the segment type of the connector
 * Straight - Sets the segment type as Straight
 */
export  type Segments = 
/** Straight - Sets the segment type as Straight */
'Straight';
/**
 * Defines the constraints to enable/disable certain features of connector.
 * * None - Interaction of the connectors cannot be done.
 * * Select - Selects the connector.
 * * Delete - Delete the connector.
 * * Drag - Drag the connector.
 * * DragSourceEnd - Drag the source end of the connector.
 * * DragTargetEnd - Drag the target end of the connector.
 * * DragSegmentThump - Drag the segment thumb of the connector.
 * * AllowDrop - Allow to drop a node.
 * * Bridging - Creates bridge  on intersection of two connectors.
 * * BridgeObstacle -
 * * InheritBridging - Creates bridge  on intersection of two connectors.
 * * PointerEvents - Sets the pointer events.
 * * Tooltip - Displays a tooltip for the connectors.
 * * InheritToolTip - Displays a tooltip for the connectors.
 * * Interaction - Features of the connector used for interaction.
 * * ReadOnly - Enables ReadOnly
 * * Default - Default features of the connector.
 * @aspNumberEnum
 * @IgnoreSingular
 */
export  enum ConnectorConstraints {
    /** Disable all connector Constraints. */
    None = 1,
    /** Enables connector to be selected. */
    Select = 2,
    /** Enables connector to be Deleted. */
    Delete = 4,
    /** Enables connector to be Dragged. */
    Drag = 8,
    /** Enables connectors source end to be selected. */
    DragSourceEnd = 16,
    /** Enables connectors target end to be selected. */
    DragTargetEnd = 32,
    /** Enables control point and end point of every segment in a connector for editing. */
    DragSegmentThumb = 64,
    /** Enables AllowDrop constraints to the  connector. */
    AllowDrop = 128,
    /** Enables bridging to the connector. */
    Bridging = 256,
    /** Enables or Disables Bridge Obstacles with overlapping of connectors. */
    BridgeObstacle = 512,
    /** Enables bridging to the connector. */
    InheritBridging = 1024,
    /** Used to set the pointer events. */
    PointerEvents = 2048,
    /** Enables or disables tool tip for the connectors */
    Tooltip = 4096,
    /** Enables or disables tool tip for the connectors */
    InheritTooltip = 8192,
    /** Enables Interaction. */
    Interaction = 4218,
    /** Enables ReadOnly */
    ReadOnly = 16384,
    /** Enables all constraints. */
    Default = 11838
}
/**
 * Defines the objects direction
 * Left - Sets the direction type as Left
 * Right - Sets the direction type as Right
 * Top - Sets the direction type as Top
 * Bottom - Sets the direction type as Bottom
 */
export  type Direction = 
/** Left - Sets the direction type as Left */
'Left' | 
/** Right - Sets the direction type as Right */
'Right' | 
/** Top - Sets the direction type as Top */
'Top' | 
/** Bottom - Sets the direction type as Bottom */
'Bottom';
/**
 * Defines the orientation of the layout
 * * TopToBottom - Renders the layout from top to bottom
 * * BottomToTop - Renders the layout from bottom to top
 * * LeftToRight - Renders the layout from left to right
 * * RightToLeft - Renders the layout from right to left
 */
export  type LayoutOrientation = 
/**
 * TopToBottom - Renders the layout from top to bottom
 */
'TopToBottom' | 
/**
 * BottomToTop - Renders the layout from bottom to top
 */
'BottomToTop' | 
/**
 * LeftToRight - Renders the layout from left to right
 */
'LeftToRight' | 
/**
 * RightToLeft - Renders the layout from right to left
 */
'RightToLeft';
/**
 * Detect the status of Crud operation performed in the diagram
 */
export  type Status = 'None' | 'New' | 'Update';
/** Enables/Disables the handles of the selector
 * Rotate - Enable Rotate Thumb
 * ConnectorSource - Enable Connector source point
 * ConnectorTarget - Enable Connector target point
 * ResizeNorthEast - Enable ResizeNorthEast Resize
 * ResizeEast - Enable ResizeEast Resize
 * ResizeSouthEast - Enable ResizeSouthEast Resize
 * ResizeSouth - Enable ResizeSouth Resize
 * ResizeSouthWest - Enable ResizeSouthWest Resize
 * ResizeWest - Enable ResizeWest Resize
 * ResizeNorthWest - Enable ResizeNorthWest Resize
 * ResizeNorth - Enable ResizeNorth Resize
 * Default - Enables all constraints
 * @private
 */
export  enum ThumbsConstraints {
    /** Enable Rotate Thumb  */
    Rotate = 2,
    /** Enable Connector source point  */
    ConnectorSource = 4,
    /** Enable Connector target point  */
    ConnectorTarget = 8,
    /** Enable ResizeNorthEast Resize  */
    ResizeNorthEast = 16,
    /** Enable ResizeEast Resize  */
    ResizeEast = 32,
    /** Enable ResizeSouthEast Resize */
    ResizeSouthEast = 64,
    /** Enable ResizeSouth Resize */
    ResizeSouth = 128,
    /** Enable ResizeSouthWest Resize */
    ResizeSouthWest = 256,
    /** Enable ResizeWest Resize */
    ResizeWest = 512,
    /** Enable ResizeNorthWest Resize */
    ResizeNorthWest = 1024,
    /** Enable ResizeNorth Resize */
    ResizeNorth = 2048,
    /** Enables all constraints */
    Default = 4094
}
/**
 * Defines the visibility of the selector handles
 * None - Hides all the selector elements
 * ConnectorSourceThumb - Shows/hides the source thumb of the connector
 * ConnectorTargetThumb - Shows/hides the target thumb of the connector
 * ResizeSouthEast - Shows/hides the bottom right resize handle of the selector
 * ResizeSouthWest - Shows/hides the bottom left resize handle of the selector
 * ResizeNorthEast - Shows/hides the top right resize handle of the selector
 * ResizeNorthWest - Shows/hides the top left resize handle of the selector
 * ResizeEast - Shows/hides the middle right resize handle of the selector
 * ResizeWest - Shows/hides the middle left resize handle of the selector
 * ResizeSouth - Shows/hides the bottom center resize handle of the selector
 * ResizeNorth - Shows/hides the top center resize handle of the selector
 * Rotate - Shows/hides the rotate handle of the selector
 * UserHandles - Shows/hides the user handles of the selector
 * Resize - Shows/hides all resize handles of the selector
 * @aspNumberEnum
 * @IgnoreSingular
 */
export  enum SelectorConstraints {
    /** Hides all the selector elements */
    None = 1,
    /** Shows/hides the source thumb of the connector */
    ConnectorSourceThumb = 2,
    /** Shows/hides the target thumb of the connector */
    ConnectorTargetThumb = 4,
    /** Shows/hides the bottom right resize handle of the selector */
    ResizeSouthEast = 8,
    /** Shows/hides the bottom left resize handle of the selector */
    ResizeSouthWest = 16,
    /** Shows/hides the top right resize handle of the selector */
    ResizeNorthEast = 32,
    /** Shows/hides the top left resize handle of the selector */
    ResizeNorthWest = 64,
    /** Shows/hides the middle right resize handle of the selector  */
    ResizeEast = 128,
    /** Shows/hides the middle left resize handle of the selector */
    ResizeWest = 256,
    /** Shows/hides the bottom center resize handle of the selector */
    ResizeSouth = 512,
    /** Shows/hides the top center resize handle of the selector */
    ResizeNorth = 1024,
    /**  Shows/hides the rotate handle of the selector */
    Rotate = 2048,
    /** Shows/hides the user handles of the selector */
    UserHandle = 4096,
    /** Shows/hides the default tooltip of nodes and connectors */
    ToolTip = 8192,
    /** Shows/hides all resize handles of the selector */
    ResizeAll = 2046,
    /** Shows all handles of the selector  */
    All = 16382
}
/**
 * Defines how to handle the empty space and empty lines of a text
 * PreserveAll - Preserves all empty spaces and empty lines
 * CollapseSpace - Collapses the consequent spaces into one
 * CollapseAll - Collapses all consequent empty spaces and empty lines
 */
export  type WhiteSpace = 
/** PreserveAll - Preserves all empty spaces and empty lines */
'PreserveAll' | 
/** CollapseSpace - Collapses the consequent spaces into one */
'CollapseSpace' | 
/** CollapseAll - Collapses all consequent empty spaces and empty lines */
'CollapseAll';
/** @private */
export  enum NoOfSegments {
    Zero = 0,
    One = 1,
    Two = 2,
    Three = 3,
    Four = 4,
    Five = 5
}
/**
 * None - Alignment value will be set as none
 * XMinYMin - smallest X value of the view port and  smallest Y value of the view port
 * XMidYMin - midpoint X value of the view port and  smallest Y value of the view port
 * XMaxYMin - maximum X value of the view port and  smallest Y value of the view port
 * XMinYMid - smallest X value of the view port and midpoint Y value of the view port
 * XMidYMid - midpoint X value of the view port and midpoint Y value of the view port
 * XMaxYMid - maximum X value of the view port and midpoint Y value of the view port
 * XMinYMax - smallest X value of the view port and maximum Y value of the view port
 * XMidYMax - midpoint X value of the view port and maximum Y value of the view port
 * XMaxYMax - maximum X value of the view port and maximum Y value of the view port
 */
export  type ImageAlignment = 
/** None - Alignment value will be set as none */
'None' | 
/** XMinYMin - smallest X value of the view port and  smallest Y value of the view port */
'XMinYMin' | 
/** XMidYMin - midpoint X value of the view port and  smallest Y value of the view port */
'XMidYMin' | 
/** XMaxYMin - maximum X value of the view port and  smallest Y value of the view port */
'XMaxYMin' | 
/** XMinYMid - smallest X value of the view port and midpoint Y value of the view port */
'XMinYMid' | 
/** XMidYMid - midpoint X value of the view port and midpoint Y value of the view port */
'XMidYMid' | 
/** XMaxYMid - maximum X value of the view port and midpoint Y value of the view port */
'XMaxYMid' | 
/** XMinYMax - smallest X value of the view port and maximum Y value of the view port */
'XMinYMax' | 
/** XMidYMax - midpoint X value of the view port and maximum Y value of the view port */
'XMidYMax' | 
/** XMaxYMax - maximum X value of the view port and maximum Y value of the view port */
'XMaxYMax';
/**
 * Defines the diagrams stretch
 * None - Sets the stretch type for diagram as None
 * Stretch - Sets the stretch type for diagram as Stretch
 * Meet - Sets the stretch type for diagram as Meet
 * Slice - Sets the stretch type for diagram as Slice
 */
export  type Stretch = 
/** None - Sets the stretch type for diagram as None */
'None' | 
/** Stretch - Sets the stretch type for diagram as Stretch */
'Stretch' | 
/** Meet - Sets the stretch type for diagram as Meet */
'Meet' | 
/** Slice - Sets the stretch type for diagram as Slice */
'Slice';
/**
 * None - Scale value will be set as None for the image
 * Meet - Scale value Meet will be set for the image
 * Slice - Scale value Slice will be set for the image
 */
export  type Scale = 
/** None - Scale value will be set as None for the image */
'None' | 
/** Meet - Scale value Meet will be set for the image */
'Meet' | 
/** Slice - Scale value Slice will be set for the image */
'Slice';
//node_modules/@syncfusion/ej2-drawings/src/drawing/enum/index.d.ts
/**
 * Diagram component exported items
 */
//node_modules/@syncfusion/ej2-drawings/src/drawing/index.d.ts
/**
 * Diagram component exported items
 */
//node_modules/@syncfusion/ej2-drawings/src/drawing/objects/interface/IElement.d.ts
/**
 * IElement interface defines the base of the diagram objects (node/connector)
 */
export interface IElement {
    /** returns the wrapper of the diagram element */
    wrapper: Container;
    init(diagram: Container, getDescription?: Function): void;
}
/**
 * IRotateValue interface Rotated label values
 */
export interface IRotateValue {
    /** returns the x position of the label */
    x?: number;
    /** returns the y position of the label */
    y?: number;
    /** returns the angle of the label */
    angle?: number;
}
//node_modules/@syncfusion/ej2-drawings/src/drawing/objects/interface/index.d.ts
/**
 * Diagram component exported items
 */
//node_modules/@syncfusion/ej2-drawings/src/drawing/primitives/index.d.ts
/**
 * Diagram component exported items
 */
//node_modules/@syncfusion/ej2-drawings/src/drawing/primitives/matrix.d.ts
/**
 * Matrix module is used to transform points based on offsets, angle
 */
/** @private */
export  enum MatrixTypes {
    Identity = 0,
    Translation = 1,
    Scaling = 2,
    Unknown = 4
}
/** @private */
export  class Matrix {
    /**   @private  */
    m11: number;
    /**   @private  */
    m12: number;
    /**   @private  */
    m21: number;
    /**   @private  */
    m22: number;
    /**   @private  */
    offsetX: number;
    /**   @private  */
    offsetY: number;
    /**   @private  */
    type: MatrixTypes;
    constructor(m11: number, m12: number, m21: number, m22: number, offsetX: number, offsetY: number, type?: MatrixTypes);
}
/** @private */
export  function identityMatrix(): Matrix;
/** @private */
export  function transformPointByMatrix(matrix: Matrix, point: PointModel): PointModel;
/** @private */
export  function transformPointsByMatrix(matrix: Matrix, points: PointModel[]): PointModel[];
/** @private */
export  function rotateMatrix(matrix: Matrix, angle: number, centerX: number, centerY: number): void;
/** @private */
export  function scaleMatrix(matrix: Matrix, scaleX: number, scaleY: number, centerX?: number, centerY?: number): void;
/** @private */
export  function translateMatrix(matrix: Matrix, offsetX: number, offsetY: number): void;
/** @private */
export  function multiplyMatrix(matrix1: Matrix, matrix2: Matrix): void;
//node_modules/@syncfusion/ej2-drawings/src/drawing/primitives/point-model.d.ts
/**
 * Interface for a class Point
 */
export interface PointModel {
    /**
     * Sets the x-coordinate of a position
     * @default 0
     */
    x?: number;
    /**
     * Sets the y-coordinate of a position
     * @default 0
     */
    y?: number;
}
//node_modules/@syncfusion/ej2-drawings/src/drawing/primitives/point.d.ts
/**
 * Defines and processes coordinates
 */
export  class Point extends base.ChildProperty<Point> {
    /**
     * Sets the x-coordinate of a position
     * @default 0
     */
    x: number;
    /**
     * Sets the y-coordinate of a position
     * @default 0
     */
    y: number;
    /**   @private  */
    static equals(point1: PointModel, point2: PointModel): boolean;
    /**
     * check whether the points are given
     */
    static isEmptyPoint(point: PointModel): boolean;
    /**   @private  */
    static transform(point: PointModel, angle: number, length: number): PointModel;
    /**   @private  */
    static findLength(s: PointModel, e: PointModel): number;
    /**   @private  */
    static findAngle(point1: PointModel, point2: PointModel): number;
    /**   @private  */
    static distancePoints(pt1: PointModel, pt2: PointModel): number;
    /**   @private  */
    static getLengthFromListOfPoints(points: PointModel[]): number;
    /**   @private  */
    static adjustPoint(source: PointModel, target: PointModel, isStart: boolean, length: number): PointModel;
    /**   @private  */
    static direction(pt1: PointModel, pt2: PointModel): string;
    /**
     * @private
     * Returns the name of class Point
     */
    getClassName(): string;
}
//node_modules/@syncfusion/ej2-drawings/src/drawing/primitives/rect.d.ts
/**
 * Rect defines and processes rectangular regions
 */
export  class Rect {
    /**
     * Sets the x-coordinate of the starting point of a rectangular region
     * @default 0
     */
    x: number;
    /**
     * Sets the y-coordinate of the starting point of a rectangular region
     * @default 0
     */
    y: number;
    /**
     * Sets the width of a rectangular region
     * @default 0
     */
    width: number;
    /**
     * Sets the height of a rectangular region
     * @default 0
     */
    height: number;
    constructor(x?: number, y?: number, width?: number, height?: number);
    /**   @private  */
    static empty: Rect;
    /**   @private  */
    readonly left: number;
    /**   @private  */
    readonly right: number;
    /**   @private  */
    readonly top: number;
    /**   @private  */
    readonly bottom: number;
    /**   @private  */
    readonly topLeft: PointModel;
    /**   @private  */
    readonly topRight: PointModel;
    /**   @private  */
    readonly bottomLeft: PointModel;
    /**   @private  */
    readonly bottomRight: PointModel;
    /**   @private  */
    readonly middleLeft: PointModel;
    /**   @private  */
    readonly middleRight: PointModel;
    /**   @private  */
    readonly topCenter: PointModel;
    /**   @private  */
    readonly bottomCenter: PointModel;
    /**   @private  */
    readonly center: PointModel;
    /**   @private  */
    equals(rect1: Rect, rect2: Rect): boolean;
    /**   @private  */
    uniteRect(rect: Rect): Rect;
    /**   @private  */
    unitePoint(point: PointModel): void;
    intersection(rect: Rect): Rect;
    /**   @private  */
    Inflate(padding: number): Rect;
    /**   @private  */
    intersects(rect: Rect): boolean;
    /**   @private  */
    containsRect(rect: Rect): boolean;
    /**   @private  */
    containsPoint(point: PointModel, padding?: number): boolean;
    toPoints(): PointModel[];
    /**   @private  */
    static toBounds(points: PointModel[]): Rect;
    scale(scaleX: number, scaleY: number): void;
    offset(offsetX: number, offsetY: number): void;
}
//node_modules/@syncfusion/ej2-drawings/src/drawing/primitives/size.d.ts
/**
 * Size defines and processes the size(width/height) of the objects
 */
export  class Size {
    /**
     * Sets the height of an object
     * @default 0
     */
    height: number;
    /**
     * Sets the width of an object
     * @default 0
     */
    width: number;
    constructor(width?: number, height?: number);
    /**   @private  */
    clone(): Size;
}
//node_modules/@syncfusion/ej2-drawings/src/drawing/rendering/canvas-interface.d.ts
/**
 * canvas interface
 */
/** @private */
export interface StyleAttributes {
    fill: string;
    stroke: string;
    strokeWidth: number;
    dashArray: string;
    opacity: number;
    gradient?: GradientModel;
    class?: string;
}
/** @private */
export interface BaseAttributes extends StyleAttributes {
    id: string;
    x: number;
    y: number;
    width: number;
    height: number;
    angle: number;
    pivotX: number;
    pivotY: number;
    visible: boolean;
    description?: string;
    canApplyStyle?: boolean;
}
/** @private */
export interface LineAttributes extends BaseAttributes {
    startPoint: PointModel;
    endPoint: PointModel;
}
/** @private */
export interface CircleAttributes extends BaseAttributes {
    centerX: number;
    centerY: number;
    radius: number;
    id: string;
}
/** @private */
export interface Alignment {
    vAlign?: string;
    hAlign?: string;
}
/** @private */
export interface SegmentInfo {
    point?: PointModel;
    index?: number;
    angle?: number;
}
/** @private */
export interface RectAttributes extends BaseAttributes {
    cornerRadius?: number;
}
/** @private */
export interface PathAttributes extends BaseAttributes {
    data: string;
}
/** @private */
export interface TextAttributes extends BaseAttributes {
    whiteSpace: string;
    content: string;
    breakWord: string;
    fontSize: number;
    textWrapping: TextWrap;
    fontFamily: string;
    bold: boolean;
    italic: boolean;
    textAlign: string;
    color: string;
    textOverflow: TextOverflow;
    textDecoration: string;
    doWrap: boolean;
    wrapBounds: TextBounds;
    childNodes: SubTextElement[];
}
/** @private */
export interface SubTextElement {
    text: string;
    x: number;
    dy: number;
    width: number;
}
/** @private */
export interface TextBounds {
    x: number;
    width: number;
}
/** @private */
export interface PathSegment {
    command?: string;
    angle?: number;
    largeArc?: boolean;
    x2?: number;
    sweep?: boolean;
    x1?: number;
    y1?: number;
    y2?: number;
    x0?: number;
    y0?: number;
    x?: number;
    y?: number;
    r1?: number;
    r2?: number;
    centp?: {
        x?: number;
        y?: number;
    };
    xAxisRotation?: number;
    rx?: number;
    ry?: number;
    a1?: number;
    ad?: number;
}
/** @private */
export interface ImageAttributes extends BaseAttributes {
    source: string;
    sourceX: number;
    sourceY: number;
    sourceWidth: number;
    sourceHeight: number;
    scale: Scale;
    alignment: ImageAlignment;
}
//node_modules/@syncfusion/ej2-drawings/src/drawing/rendering/canvas-renderer.d.ts
/**
 * Canvas Renderer
 */
/** @private */
export  class CanvasRenderer {
    /**   @private  */
    static getContext(canvas: HTMLCanvasElement): CanvasRenderingContext2D;
    private setStyle;
    private rotateContext;
    private setFontStyle;
    /**   @private  */
    parseDashArray(dashArray: string): number[];
    /**   @private  */
    drawRectangle(canvas: HTMLCanvasElement, options: RectAttributes): void;
    /**   @private  */
    drawPath(canvas: HTMLCanvasElement, options: PathAttributes): void;
    /**   @private  */
    renderPath(canvas: HTMLCanvasElement, options: PathAttributes, collection: Object[]): void;
    /**   @private  */
    drawText(canvas: HTMLCanvasElement, options: TextAttributes): void;
    private m;
    private r;
    private a;
    private getMeetOffset;
    private getSliceOffset;
    private image;
    private loadImage;
    /**   @private  */
    drawImage(canvas: HTMLCanvasElement, obj: ImageAttributes, parentSvg?: SVGSVGElement, fromPalette?: boolean): void;
    /**   @private  */
    labelAlign(text: TextAttributes, wrapBounds: TextBounds, childNodes: SubTextElement[]): PointModel;
}
export  function refreshDiagramElements(canvas: HTMLCanvasElement, drawingObjects: DrawingElement[], renderer: DrawingRenderer): void;
//node_modules/@syncfusion/ej2-drawings/src/drawing/rendering/index.d.ts
/**
 * Diagram component exported items
 */
//node_modules/@syncfusion/ej2-drawings/src/drawing/rendering/IRenderer.d.ts
/**
 * IRenderer interface defines the base of the SVG and Canvas renderer.
 */
/** @private */
export interface IRenderer {
    parseDashArray(dashArray: string): number[];
    drawRectangle(canvas: HTMLCanvasElement | SVGElement, options: RectAttributes, diagramId: string, onlyRect?: boolean, isSelector?: boolean, parentSvg?: SVGSVGElement, ariaLabel?: Object): void;
}
//node_modules/@syncfusion/ej2-drawings/src/drawing/rendering/renderer.d.ts
/**
 * Renderer module is used to render basic diagram elements
 */
/** @private */
export  class DrawingRenderer {
    /**   @private  */
    renderer: CanvasRenderer;
    private diagramId;
    /** @private */
    adornerSvgLayer: SVGSVGElement;
    /** @private */
    isSvgMode: Boolean;
    /** @private */
    private element;
    constructor(name: string, isSvgMode: Boolean);
    /**   @private  */
    renderElement(element: DrawingElement, canvas: HTMLCanvasElement | SVGElement, htmlLayer: HTMLElement, transform?: Transforms, parentSvg?: SVGSVGElement, createParent?: boolean, fromPalette?: boolean, indexValue?: number): void;
    /**   @private  */
    renderImageElement(element: ImageElement, canvas: HTMLCanvasElement | SVGElement, transform?: Transforms, parentSvg?: SVGSVGElement, fromPalette?: boolean): void;
    /**   @private  */
    renderPathElement(element: PathElement, canvas: HTMLCanvasElement | SVGElement, transform?: Transforms, parentSvg?: SVGSVGElement, fromPalette?: boolean): void;
    /**   @private  */
    renderTextElement(element: TextElement, canvas: HTMLCanvasElement | SVGElement, transform?: Transforms, parentSvg?: SVGSVGElement, fromPalette?: boolean): void;
    /**   @private  */
    renderContainer(group: Container, canvas: HTMLCanvasElement | SVGElement, htmlLayer: HTMLElement, transform?: Transforms, parentSvg?: SVGSVGElement, createParent?: boolean, fromPalette?: boolean, indexValue?: number): void;
    /**   @private  */
    renderRect(element: DrawingElement, canvas: HTMLCanvasElement | SVGElement, transform?: Transforms, parentSvg?: SVGSVGElement): void;
    /**   @private  */
    getBaseAttributes(element: DrawingElement, transform?: Transforms): BaseAttributes;
}
interface Transforms {
    tx: number;
    ty: number;
    scale: number;
}
//node_modules/@syncfusion/ej2-drawings/src/drawing/rendering/svg-renderer.d.ts
/**
 * SVG Renderer
 */
/** @private */
export  class SvgRenderer implements IRenderer {
    /**   @private  */
    parseDashArray(dashArray: string): number[];
    /**   @private  */
    drawRectangle(svg: SVGElement, options: RectAttributes, diagramId: string, onlyRect?: boolean, isSelector?: Boolean, parentSvg?: SVGSVGElement, ariaLabel?: Object): void;
    /**   @private  */
    updateSelectionRegion(gElement: SVGElement, options: RectAttributes): void;
    /**   @private  */
    createGElement(elementType: string, attribute: Object): SVGGElement;
    /** @private */
    drawCircle(gElement: SVGElement, options: CircleAttributes, enableSelector?: number, ariaLabel?: Object): void;
    /**   @private  */
    setSvgStyle(svg: SVGElement, style: StyleAttributes, diagramId?: string): void;
    /**   @private  */
    svgLabelAlign(text: TextAttributes, wrapBound: TextBounds, childNodes: SubTextElement[]): PointModel;
    /** @private */
    drawLine(gElement: SVGElement, options: LineAttributes): void;
    /**   @private  */
    drawPath(svg: SVGElement, options: PathAttributes, diagramId: string, isSelector?: Boolean, parentSvg?: SVGSVGElement, ariaLabel?: Object): void;
    /**   @private  */
    renderPath(svg: SVGElement, options: PathAttributes, collection: Object[]): void;
}
/** @private */
export  function setAttributeSvg(svg: SVGElement, attributes: Object): void;
/** @private */
export  function createSvgElement(elementType: string, attribute: Object): SVGElement;
/** @private */
export  function createSvg(id: string, width: string | Number, height: string | Number): SVGElement;
export  function getParentSvg(element: DrawingElement, targetElement?: string, canvas?: HTMLCanvasElement | SVGElement): SVGElement;
//node_modules/@syncfusion/ej2-drawings/src/drawing/utility/base-util.d.ts
/**
 * Implements the basic functionalities
 */
/** @private */
export  function randomId(): string;
/** @private */
export  function cornersPointsBeforeRotation(ele: DrawingElement): Rect;
/** @private */
export  function rotateSize(size: Size, angle: number): Size;
/** @private */
export  function getBounds(element: DrawingElement): Rect;
/** @private */
export  function textAlignToString(value: TextAlign): string;
/** @private */
export  function wordBreakToString(value: TextWrap | TextDecoration): string;
export  function bBoxText(textContent: string, options: TextAttributes): number;
/** @private */
export  function middleElement(i: number, j: number): number;
/** @private */
export  function whiteSpaceToString(value: WhiteSpace, wrap: TextWrap): string;
/** @private */
export  function rotatePoint(angle: number, pivotX: number, pivotY: number, point: PointModel): PointModel;
/** @private */
export  function getOffset(topLeft: PointModel, obj: DrawingElement): PointModel;
//node_modules/@syncfusion/ej2-drawings/src/drawing/utility/diagram-util.d.ts
/**
 * Implements the drawing functionalities
 */
/** @private */
export  function findNearestPoint(reference: PointModel, start: PointModel, end: PointModel): PointModel;
/** @private */
export  function findElementUnderMouse(obj: IElement, position: PointModel, padding?: number): DrawingElement;
/** @private */
export  function findTargetElement(container: Container, position: PointModel, padding?: number): DrawingElement;
/** @private */
export  function intersect3(lineUtil1: Segment, lineUtil2: Segment): Intersection;
/** @private */
export  function intersect2(start1: PointModel, end1: PointModel, start2: PointModel, end2: PointModel): PointModel;
/** @private */
export  function getLineSegment(x1: number, y1: number, x2: number, y2: number): Segment;
/** @private */
export  function getPoints(element: DrawingElement, corners: Corners, padding?: number): PointModel[];
/** @private */
export  function getBezierDirection(src: PointModel, tar: PointModel): string;
/** @private */
export  function updateStyle(changedObject: TextStyleModel, target: DrawingElement): void;
/** @private */
export  function scaleElement(element: DrawingElement, sw: number, sh: number, refObject: DrawingElement): void;
/** @private */
export  function contains(mousePosition: PointModel, corner: PointModel, padding: number): boolean;
/** @private */
export  function getPoint(x: number, y: number, w: number, h: number, angle: number, offsetX: number, offsetY: number, cornerPoint: PointModel): PointModel;
export interface Segment {
    x1: number;
    y1: number;
    x2: number;
    y2: number;
}
/** @private */
export interface Intersection {
    enabled: boolean;
    intersectPt: PointModel;
}
/** @private */
export interface Info {
    ctrlKey?: boolean;
    shiftKey?: boolean;
}
//node_modules/@syncfusion/ej2-drawings/src/drawing/utility/dom-util.d.ts
/**
 * Defines the functionalities that need to access DOM
 */
export  function getChildNode(node: SVGElement): SVGElement[] | HTMLCollection;
export  function translatePoints(element: PathElement, points: PointModel[]): PointModel[];
/** @private */
export  function measurePath(data: string): Rect;
/** @private */
export  function measureText(text: TextElement, style: TextStyleModel, content: string, maxWidth?: number, textValue?: string): Size;
/** @private */
export  function getDiagramElement(elementId: string, contentId?: string): HTMLElement;
/** @private */
export  function createHtmlElement(elementType: string, attribute: Object): HTMLElement;
/** @private */
export  function setAttributeHtml(element: HTMLElement, attributes: Object): void;
/**
 * @private
 */
export  function getAdornerLayerSvg(diagramId: string, index?: number): SVGSVGElement;
/** @private */
export  function getSelectorElement(diagramId: string, index?: number): SVGElement;
/** @private */
export  function createMeasureElements(): void;
/** @private */
export  function measureImage(source: string, contentSize: Size): Size;
//node_modules/@syncfusion/ej2-drawings/src/drawing/utility/path-util.d.ts
/**
 * These utility methods help to process the data and to convert it to desired dimensions
 */
/** @private */
export  function processPathData(data: string): Object[];
/** @private */
export  function parsePathData(data: string): Object[];
/**
 * Used to find the path for rounded rect
 */
export  function getRectanglePath(cornerRadius: number, height: number, width: number): string;
/** @private */
export  function pathSegmentCollection(collection: Object[]): Object[];
/** @private */
export  function transformPath(arr: Object[], sX: number, sY: number, s: boolean, bX: number, bY: number, iX: number, iY: number): string;
/** @private */
export  function updatedSegment(segment: PathSegment, char: string, obj: PathSegment, isScale: boolean, sX: number, sY: number): Object;
/** @private */
export  function scalePathData(val: number, scaleFactor: number, oldOffset: number, newOffset: number): number;
/** @private */
export  function splitArrayCollection(arrayCollection: Object[]): Object[];
/** @private */
export  function getPathString(arrayCollection: Object[]): string;
/** @private */
export  function getString(obj: PathSegment): string;
//node_modules/@syncfusion/ej2-drawings/src/index.d.ts
/**
 * Diagram component exported items
 */
 }
export namespace dropdowns { 

//node_modules/@syncfusion/ej2-dropdowns/src/auto-complete/auto-complete-model.d.ts
/**
 * Interface for a class AutoComplete
 */
export interface AutoCompleteModel extends ComboBoxModel{
    /**
     * The `fields` property maps the columns of the data table and binds the data to the component.
     * * text - Maps the text column from data table for each list item
     * * value - Maps the value column from data table for each list item
     * * iconCss - Maps the icon class column from data table for each list item
     * * groupBy - Group the list items with it's related items by mapping groupBy field
     * 
     * > For more details about the field mapping refer to [`Data binding`](../../auto-complete/data-binding) documentation.
     * @default { value: null, iconCss: null, groupBy: null}
     */
    fields?: FieldSettingsModel;
    /**
     * When set to ‘false’, consider the [`case-sensitive`](../../auto-complete/filtering/#case-sensitive-filtering)
     * on performing the search to find suggestions.
     * By default consider the casing.
     * @default true
     */
    ignoreCase?: boolean;
    /**
     * Allows you to either show or hide the popup button on the component.
     * @default false
     */
    showPopupButton?: boolean;
    /**
     * When set to ‘true’, highlight the searched characters on suggested list items.
     * > For more details about the highlight refer to [`Custom highlight search`](../../auto-complete/how-to/custom-search) documentation.
     * @default false
     */
    highlight?: boolean;
    /**
     * Supports the [`specified number`](../../auto-complete/filtering#filter-item-count)
     * of list items on the suggestion popup.
     * @default 20
     * @blazorType int
     */
    suggestionCount?: number;
    /**
     * Allows additional HTML base.attributes such as title, name, etc., and
     * accepts n number of base.attributes in a key-value pair format.
     * 
     * {% codeBlock src="autocomplete/html-base.attributes-api/index.ts" %}{% endcodeBlock %}
     * 
     * {% codeBlock src="autocomplete/html-base.attributes-api/index.html" %}{% endcodeBlock %}
     * @default {}
     */
    htmlAttributes?: { [key: string]: string;
 };
    /**
     * Accepts the external `query`
     * that execute along with data processing.
     * 
     * {% codeBlock src="autocomplete/query-api/index.ts" %}{% endcodeBlock %}
     * 
     * {% codeBlock src="autocomplete/query-api/index.html" %}{% endcodeBlock %}
     * @default null
     */
    query?: data.Query;
    /**
     * Allows you to set [`the minimum search character length']
     * (../../auto-complete/filtering#limit-the-minimum-filter-character),
     * the search action will perform after typed minimum characters.
     * @default 1
     * @blazorType int
     */
    minLength?: number;
    /**
     * Determines on which filter type, the component needs to be considered on search action. 
     * The available [`FilterType`](../../auto-complete/filtering/#change-the-filter-type)
     * and its supported data types are 
     * 
     * <table> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * FilterType<br/></td><td colSpan=1 rowSpan=1> 
     * Description<br/></td><td colSpan=1 rowSpan=1> 
     * Supported Types<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * StartsWith<br/></td><td colSpan=1 rowSpan=1> 
     * Checks whether a value begins with the specified value.<br/></td><td colSpan=1 rowSpan=1> 
     * String<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * EndsWith<br/></td><td colSpan=1 rowSpan=1> 
     * Checks whether a value ends with specified value.<br/><br/></td><td colSpan=1 rowSpan=1> 
     * <br/>String<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * Contains<br/></td><td colSpan=1 rowSpan=1> 
     * Checks whether a value contains with specified value.<br/><br/></td><td colSpan=1 rowSpan=1> 
     * <br/>String<br/></td></tr> 
     * </table> 
     * 
     * {% codeBlock src="autocomplete/filter-type-api/index.ts" %}{% endcodeBlock %}
     * 
     * {% codeBlock src="autocomplete/filter-type-api/index.html" %}{% endcodeBlock %}
     * 
     * The default value set to `Contains`, all the suggestion items which contain typed characters to listed in the suggestion popup.
     * @default 'Contains'
     */
    filterType?: FilterType;
    /**
     * Triggers on typing a character in the component.
     * @event
     * @blazorProperty 'Filtering'
     */
    filtering?: base.EmitType<FilteringEventArgs>;
    /**
     * Not applicable to this component.
     * @default null
     * @private
     * @blazorType int
     * @isBlazorNullableType true
     */
    index?: number;
    /**
     * Specifies whether to display the floating label above the input element.
     * Possible values are:
     * * Never: The label will never float in the input when the placeholder is available.
     * * Always: The floating label will always float above the input.
     * * Auto: The floating label will float above the input after focusing or entering a value in the input.
     * 
     * {% codeBlock src="autocomplete/float-label-type-api/index.ts" %}{% endcodeBlock %}
     * 
     * {% codeBlock src="autocomplete/float-label-type-api/index.html" %}{% endcodeBlock %}
     * 
     * @default Syncfusion.EJ2.Inputs.inputs.FloatLabelType.Never
     * @aspType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     * @isEnumeration true
     * @blazorType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     */
    floatLabelType?: inputs.FloatLabelType;
    /**
     * Not applicable to this component.
     * @default null
     * @private
     */
    valueTemplate?: string;
    /**
     * Not applicable to this component.
     * @default null
     * @private
     */
    filterBarPlaceholder?: string;
    /**
     * Not applicable to this component. 
     * @default false
     * @private
     */
    allowFiltering?: boolean;
    /**
     * Not applicable to this component. 
     * @default null
     * @private
     */
    text?: string;
}
//node_modules/@syncfusion/ej2-dropdowns/src/auto-complete/auto-complete.d.ts

/**
 * The AutoComplete component provides the matched suggestion list when type into the input,
 * from which the user can select one.
 * ```html
 * <input id="list" type="text"/>
 * ```
 * ```typescript
 *   let atcObj:AutoComplete = new AutoComplete();
 *   atcObj.appendTo("#list");
 * ```
 */
export  class AutoComplete extends ComboBox {
    private isFiltered;
    /**
     * The `fields` property maps the columns of the data table and binds the data to the component.
     * * text - Maps the text column from data table for each list item
     * * value - Maps the value column from data table for each list item
     * * iconCss - Maps the icon class column from data table for each list item
     * * groupBy - Group the list items with it's related items by mapping groupBy field
     *
     * > For more details about the field mapping refer to [`Data binding`](../../auto-complete/data-binding) documentation.
     * @default { value: null, iconCss: null, groupBy: null}
     */
    fields: FieldSettingsModel;
    /**
     * When set to ‘false’, consider the [`case-sensitive`](../../auto-complete/filtering/#case-sensitive-filtering)
     * on performing the search to find suggestions.
     * By default consider the casing.
     * @default true
     */
    ignoreCase: boolean;
    /**
     * Allows you to either show or hide the popup button on the component.
     * @default false
     */
    showPopupButton: boolean;
    /**
     * When set to ‘true’, highlight the searched characters on suggested list items.
     * > For more details about the highlight refer to [`Custom highlight search`](../../auto-complete/how-to/custom-search) documentation.
     * @default false
     */
    highlight: boolean;
    /**
     * Supports the [`specified number`](../../auto-complete/filtering#filter-item-count)
     * of list items on the suggestion popup.
     * @default 20
     * @blazorType int
     */
    suggestionCount: number;
    /**
     * Allows additional HTML attributes such as title, name, etc., and
     * accepts n number of attributes in a key-value pair format.
     *
     * {% codeBlock src="autocomplete/html-attributes-api/index.ts" %}{% endcodeBlock %}
     *
     * {% codeBlock src="autocomplete/html-attributes-api/index.html" %}{% endcodeBlock %}
     * @default {}
     */
    htmlAttributes: {
        [key: string]: string;
    };
    /**
     * Accepts the external `query`
     * that execute along with data processing.
     *
     * {% codeBlock src="autocomplete/query-api/index.ts" %}{% endcodeBlock %}
     *
     * {% codeBlock src="autocomplete/query-api/index.html" %}{% endcodeBlock %}
     * @default null
     */
    query: data.Query;
    /**
     * Allows you to set [`the minimum search character length']
     * (../../auto-complete/filtering#limit-the-minimum-filter-character),
     * the search action will perform after typed minimum characters.
     * @default 1
     * @blazorType int
     */
    minLength: number;
    /**
     * Determines on which filter type, the component needs to be considered on search action.
     * The available [`FilterType`](../../auto-complete/filtering/#change-the-filter-type)
     * and its supported data types are
     *
     * <table>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * FilterType<br/></td><td colSpan=1 rowSpan=1>
     * Description<br/></td><td colSpan=1 rowSpan=1>
     * Supported Types<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * StartsWith<br/></td><td colSpan=1 rowSpan=1>
     * Checks whether a value begins with the specified value.<br/></td><td colSpan=1 rowSpan=1>
     * String<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * EndsWith<br/></td><td colSpan=1 rowSpan=1>
     * Checks whether a value ends with specified value.<br/><br/></td><td colSpan=1 rowSpan=1>
     * <br/>String<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * Contains<br/></td><td colSpan=1 rowSpan=1>
     * Checks whether a value contains with specified value.<br/><br/></td><td colSpan=1 rowSpan=1>
     * <br/>String<br/></td></tr>
     * </table>
     *
     * {% codeBlock src="autocomplete/filter-type-api/index.ts" %}{% endcodeBlock %}
     *
     * {% codeBlock src="autocomplete/filter-type-api/index.html" %}{% endcodeBlock %}
     *
     * The default value set to `Contains`, all the suggestion items which contain typed characters to listed in the suggestion popup.
     * @default 'Contains'
     */
    filterType: FilterType;
    /**
     * Triggers on typing a character in the component.
     * @event
     * @blazorProperty 'Filtering'
     */
    filtering: base.EmitType<FilteringEventArgs>;
    /**
     * Not applicable to this component.
     * @default null
     * @private
     * @blazorType int
     * @isBlazorNullableType true
     */
    index: number;
    /**
     * Specifies whether to display the floating label above the input element.
     * Possible values are:
     * * Never: The label will never float in the input when the placeholder is available.
     * * Always: The floating label will always float above the input.
     * * Auto: The floating label will float above the input after focusing or entering a value in the input.
     *
     * {% codeBlock src="autocomplete/float-label-type-api/index.ts" %}{% endcodeBlock %}
     *
     * {% codeBlock src="autocomplete/float-label-type-api/index.html" %}{% endcodeBlock %}
     *
     * @default Syncfusion.EJ2.Inputs.inputs.FloatLabelType.Never
     * @aspType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     * @isEnumeration true
     * @blazorType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     */
    floatLabelType: inputs.FloatLabelType;
    /**
     * Not applicable to this component.
     * @default null
     * @private
     */
    valueTemplate: string;
    /**
     * Not applicable to this component.
     * @default null
     * @private
     */
    filterBarPlaceholder: string;
    /**
     * Not applicable to this component.
     * @default false
     * @private
     */
    allowFiltering: boolean;
    /**
     * Not applicable to this component.
     * @default null
     * @private
     */
    text: string;
    /**
     * * Constructor for creating the widget
     */
    constructor(options?: AutoCompleteModel, element?: string | HTMLElement);
    /**
     * Initialize the event handler
     * @private
     */
    protected preRender(): void;
    protected getLocaleName(): string;
    protected getNgDirective(): string;
    protected getQuery(query: data.Query): data.Query;
    protected searchLists(e: base.KeyboardEventArgs): void;
    /**
     * To filter the data from given data source by using query
     * @param  {Object[] | data.DataManager } dataSource - Set the data source to filter.
     * @param  {data.Query} query - Specify the query to filter the data.
     * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.
     * @return {void}.
     */
    filter(dataSource: {
        [key: string]: Object;
    }[] | data.DataManager | string[] | number[] | boolean[], query?: data.Query, fields?: FieldSettingsModel): void;
    private filterAction;
    protected clear(e?: MouseEvent, property?: AutoCompleteModel): void;
    protected onActionComplete(ulElement: HTMLElement, list: {
        [key: string]: Object;
    }[], e?: Object, isUpdated?: boolean): void;
    private postBackAction;
    protected setSelection(li: Element, e: MouseEvent | base.KeyboardEventArgs | TouchEvent): void;
    protected listOption(dataSource: {
        [key: string]: Object;
    }[], fieldsSettings: FieldSettingsModel): FieldSettingsModel;
    protected isFiltering(): boolean;
    protected renderPopup(): void;
    protected isEditTextBox(): boolean;
    protected isPopupButton(): boolean;
    protected isSelectFocusItem(element: Element): boolean;
    /**
     * Search the entered text and show it in the suggestion list if available.
     * @returns void.
     */
    showPopup(): void;
    /**
     * Hides the popup if it is in open state.
     * @returns void.
     */
    hidePopup(): void;
    /**
     * Dynamically change the value of properties.
     * @private
     */
    onPropertyChanged(newProp: AutoCompleteModel, oldProp: AutoCompleteModel): void;
    /**
     * Return the module name of this component.
     * @private
     */
    getModuleName(): string;
    /**
     * To initialize the control rendering
     * @private
     */
    render(): void;
}
//node_modules/@syncfusion/ej2-dropdowns/src/auto-complete/index.d.ts
/**
 * export all modules from current location
 */
//node_modules/@syncfusion/ej2-dropdowns/src/combo-box/combo-box-model.d.ts
/**
 * Interface for a class ComboBox
 */
export interface ComboBoxModel extends DropDownListModel{
    /**
     * Specifies whether suggest a first matched item in input when searching. No action happens when no matches found.
     * @default false
     */
    autofill?: boolean;
    /**
     * Specifies whether the component allows user defined value which does not exist in data source.    
     * @default true
     */
    allowCustom?: boolean;
    /**
     * Allows additional HTML attributes such as title, name, etc., and
     * accepts n number of attributes in a key-value pair format.
     * 
     * {% codeBlock src="combobox/html-attributes-api/index.ts" %}{% endcodeBlock %}
     * 
     * {% codeBlock src="combobox/html-attributes-api/index.html" %}{% endcodeBlock %}
     * @default {}
     */
    htmlAttributes?: { [key: string]: string;
 };
    /**
     * When allowFiltering is set to true, show the filter bar (search box) of the component.
     * The filter action retrieves matched items through the `filtering` event based on
     * the characters typed in the search TextBox.
     * If no match is found, the value of the `noRecordsTemplate` property will be displayed.
     * 
     * {% codeBlock src="combobox/allow-filtering-api/index.ts" %}{% endcodeBlock %}
     * 
     * {% codeBlock src="combobox/allow-filtering-api/index.html" %}{% endcodeBlock %}
     * @default false
     */
    allowFiltering?: boolean;
    /**
     * Accepts the external `data.Query`
     * that execute along with [`data processing`](../../combo-box/data-binding).
     * 
     * {% codeBlock src="combobox/query-api/index.ts" %}{% endcodeBlock %}
     * 
     * {% codeBlock src="combobox/query-api/index.html" %}{% endcodeBlock %}
     * @default null
     */
    query?: data.Query;
    /**
     * Gets or sets the index of the selected item in the component.
     * 
     * {% codeBlock src="combobox/index-api/index.ts" %}{% endcodeBlock %}
     * 
     * {% codeBlock src="combobox/index-api/index.html" %}{% endcodeBlock %}
     * 
     * @default null
     * @blazorType int
     * @isBlazorNullableType true
     */
    index?: number;
    /**
     * Specifies whether to show or hide the clear button. 
     * When the clear button is clicked, `value`, `text`, and `index` properties are reset to null.
     * @default true
     */
    showClearButton?: boolean;
    /**
     * Triggers on set a 
     * [`custom value`](../../combo-box/getting-started#custom-values) to this component.
     * @event
     * @blazorProperty 'CustomValueSpecifier'
     */
    customValueSpecifier?: base.EmitType<CustomValueSpecifierEventArgs>;
    /**
     * Triggers on typing a character in the component.
     * > For more details about the filtering refer to [`Filtering`](../../combo-box/filtering) documentation.
     * @event
     * @blazorProperty 'Filtering'
     */
    filtering?: base.EmitType<FilteringEventArgs>;
    /**
     * Not applicable to this component.
     * @default null
     * @private
     */
    valueTemplate?: string;
    /**
     * Specifies whether to display the floating label above the input element.
     * Possible values are:
     * * Never: The label will never float in the input when the placeholder is available.
     * * Always: The floating label will always float above the input.
     * * Auto: The floating label will float above the input after focusing or entering a value in the input.
     * 
     * {% codeBlock src="combobox/float-label-type-api/index.ts" %}{% endcodeBlock %}
     * 
     * {% codeBlock src="combobox/float-label-type-api/index.html" %}{% endcodeBlock %}
     * 
     * @default Syncfusion.EJ2.Inputs.inputs.FloatLabelType.Never
     * @aspType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     * @isEnumeration true
     * @blazorType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     */
    floatLabelType?: inputs.FloatLabelType;
    /**
     * Not applicable to this component.
     * @default null
     * @private
     */
    filterBarPlaceholder?: string;
}
//node_modules/@syncfusion/ej2-dropdowns/src/combo-box/combo-box.d.ts

/**
 * The ComboBox component allows the user to type a value or choose an option from the list of predefined options.
 * ```html
 * <select id="list">
 *      <option value='1'>Badminton</option>
 *      <option value='2'>Basketball</option>
 *      <option value='3'>Cricket</option>
 *      <option value='4'>Football</option>
 *      <option value='5'>Tennis</option>
 * </select>
 * ```
 * ```typescript
 *   let games:ComboBox = new ComboBox();
 *   games.appendTo("#list");
 * ```
 */
export  class ComboBox extends DropDownList {
    /**
     * Specifies whether suggest a first matched item in input when searching. No action happens when no matches found.
     * @default false
     */
    autofill: boolean;
    /**
     * Specifies whether the component allows user defined value which does not exist in data source.
     * @default true
     */
    allowCustom: boolean;
    /**
     * Allows additional HTML attributes such as title, name, etc., and
     * accepts n number of attributes in a key-value pair format.
     *
     * {% codeBlock src="combobox/html-attributes-api/index.ts" %}{% endcodeBlock %}
     *
     * {% codeBlock src="combobox/html-attributes-api/index.html" %}{% endcodeBlock %}
     * @default {}
     */
    htmlAttributes: {
        [key: string]: string;
    };
    /**
     * When allowFiltering is set to true, show the filter bar (search box) of the component.
     * The filter action retrieves matched items through the `filtering` event based on
     * the characters typed in the search TextBox.
     * If no match is found, the value of the `noRecordsTemplate` property will be displayed.
     *
     * {% codeBlock src="combobox/allow-filtering-api/index.ts" %}{% endcodeBlock %}
     *
     * {% codeBlock src="combobox/allow-filtering-api/index.html" %}{% endcodeBlock %}
     * @default false
     */
    allowFiltering: boolean;
    /**
     * Accepts the external `data.Query`
     * that execute along with [`data processing`](../../combo-box/data-binding).
     *
     * {% codeBlock src="combobox/query-api/index.ts" %}{% endcodeBlock %}
     *
     * {% codeBlock src="combobox/query-api/index.html" %}{% endcodeBlock %}
     * @default null
     */
    query: data.Query;
    /**
     * Gets or sets the index of the selected item in the component.
     *
     * {% codeBlock src="combobox/index-api/index.ts" %}{% endcodeBlock %}
     *
     * {% codeBlock src="combobox/index-api/index.html" %}{% endcodeBlock %}
     *
     * @default null
     * @blazorType int
     * @isBlazorNullableType true
     */
    index: number;
    /**
     * Specifies whether to show or hide the clear button.
     * When the clear button is clicked, `value`, `text`, and `index` properties are reset to null.
     * @default true
     */
    showClearButton: boolean;
    /**
     * Triggers on set a
     * [`custom value`](../../combo-box/getting-started#custom-values) to this component.
     * @event
     * @blazorProperty 'CustomValueSpecifier'
     */
    customValueSpecifier: base.EmitType<CustomValueSpecifierEventArgs>;
    /**
     * Triggers on typing a character in the component.
     * > For more details about the filtering refer to [`Filtering`](../../combo-box/filtering) documentation.
     * @event
     * @blazorProperty 'Filtering'
     */
    filtering: base.EmitType<FilteringEventArgs>;
    /**
     * Not applicable to this component.
     * @default null
     * @private
     */
    valueTemplate: string;
    /**
     * Specifies whether to display the floating label above the input element.
     * Possible values are:
     * * Never: The label will never float in the input when the placeholder is available.
     * * Always: The floating label will always float above the input.
     * * Auto: The floating label will float above the input after focusing or entering a value in the input.
     *
     * {% codeBlock src="combobox/float-label-type-api/index.ts" %}{% endcodeBlock %}
     *
     * {% codeBlock src="combobox/float-label-type-api/index.html" %}{% endcodeBlock %}
     *
     * @default Syncfusion.EJ2.Inputs.inputs.FloatLabelType.Never
     * @aspType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     * @isEnumeration true
     * @blazorType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     */
    floatLabelType: inputs.FloatLabelType;
    /**
     * Not applicable to this component.
     * @default null
     * @private
     */
    filterBarPlaceholder: string;
    /**
     * *Constructor for creating the component
     */
    constructor(options?: ComboBoxModel, element?: string | HTMLElement);
    /**
     * Initialize the event handler
     * @private
     */
    protected preRender(): void;
    protected getLocaleName(): string;
    protected wireEvent(): void;
    private preventBlur;
    protected onBlur(e: MouseEvent): void;
    protected targetElement(): HTMLElement | HTMLInputElement;
    protected setOldText(text: string): void;
    protected setOldValue(value: string | number): void;
    private valueMuteChange;
    protected updateValues(): void;
    protected updateIconState(): void;
    protected getAriaAttributes(): {
        [key: string]: string;
    };
    protected searchLists(e: base.KeyboardEventArgs): void;
    protected getNgDirective(): string;
    protected setSearchBox(): inputs.InputObject;
    protected onActionComplete(ulElement: HTMLElement, list: {
        [key: string]: Object;
    }[], e?: Object, isUpdated?: boolean): void;
    protected getFocusElement(): Element;
    protected setValue(e?: base.KeyboardEventArgs): boolean;
    protected checkCustomValue(): void;
    /**
     * Shows the spinner loader.
     * @returns void.
     */
    showSpinner(): void;
    /**
     * Hides the spinner loader.
     * @returns void.
     */
    hideSpinner(): void;
    protected setAutoFill(activeElement: Element, isHover?: boolean): void;
    private isAndroidAutoFill;
    protected clear(e?: MouseEvent | base.KeyboardEventArgs, property?: ComboBoxModel): void;
    protected isSelectFocusItem(element: Element): boolean;
    private inlineSearch;
    protected incrementalSearch(e: base.KeyboardEventArgs): void;
    private setAutoFillSelection;
    protected getValueByText(text: string): string | number | boolean;
    protected unWireEvent(): void;
    protected setSelection(li: Element, e: MouseEvent | base.KeyboardEventArgs | TouchEvent): void;
    protected selectCurrentItem(e: base.KeyboardEventArgs): void;
    protected setHoverList(li: Element): void;
    private targetFocus;
    protected dropDownClick(e: MouseEvent): void;
    private customValue;
    private updateCustomValueCallback;
    /**
     * Dynamically change the value of properties.
     * @private
     */
    onPropertyChanged(newProp: ComboBoxModel, oldProp: ComboBoxModel): void;
    /**
     * To initialize the control rendering.
     * @private
     */
    render(): void;
    /**
     * Return the module name of this component.
     * @private
     */
    getModuleName(): string;
    /**
     * Hides the popup if it is in open state.
     * @returns void.
     */
    hidePopup(): void;
    /**
     * Sets the focus to the component for interaction.
     * @returns void.
     */
    focusIn(): void;
}
export interface CustomValueSpecifierEventArgs {
    /**
     * Gets the typed custom text to make a own text format and assign it to `item` argument.
     */
    text: string;
    /**
     * Sets the text custom format data for set a `value` and `text`.
     * @blazorType object
     */
    item: {
        [key: string]: string | Object;
    };
}
//node_modules/@syncfusion/ej2-dropdowns/src/combo-box/index.d.ts
/**
 * export all modules from current location
 */
//node_modules/@syncfusion/ej2-dropdowns/src/common/highlight-search.d.ts
export  type HightLightType = 'Contains' | 'StartsWith' | 'EndsWith';
/**
 * Function helps to find which highlightSearch is to call based on your data.
 * @param  {HTMLElement} element - Specifies an li element.
 * @param  {string} query - Specifies the string to be highlighted.
 * @param  {boolean} ignoreCase - Specifies the ignoreCase option.
 * @param  {HightLightType} type - Specifies the type of highlight.
 */
export  function highlightSearch(element: HTMLElement, query: string, ignoreCase: boolean, type?: HightLightType): void;
/**
 * Function helps to remove highlighted element based on your data.
 * @param  {HTMLElement} content - Specifies an content element.
 */
export  function revertHighlightSearch(content: HTMLElement): void;
//node_modules/@syncfusion/ej2-dropdowns/src/common/incremental-search.d.ts
/**
 * IncrementalSearch module file
 */
export  type SearchType = 'StartsWith' | 'Equal';
/**
 * Search and focus the list item based on key code matches with list text content
 * @param  { number } keyCode - Specifies the key code which pressed on keyboard events.
 * @param  { HTMLElement[]] } items - Specifies an array of HTMLElement, from which matches find has done.
 * @param { number } selectedIndex - Specifies the selected item in list item, so that search will happen
 * after selected item otherwise it will do from initial.
 * @param  { boolean } ignoreCase - Specifies the case consideration when search has done.
 */
export  function incrementalSearch(keyCode: number, items: HTMLElement[], selectedIndex: number, ignoreCase: boolean): Element;
export  function Search(inputVal: string, items: HTMLElement[], searchType: SearchType, ignoreCase?: boolean): {
    [key: string]: Element | number;
};
//node_modules/@syncfusion/ej2-dropdowns/src/common/index.d.ts
/**
 * Common source
 */
//node_modules/@syncfusion/ej2-dropdowns/src/drop-down-base/drop-down-base-model.d.ts
/**
 * Interface for a class FieldSettings
 */
export interface FieldSettingsModel {
    /**
     * Maps the text column from data table for each list item
     * @default null
     */
    text?: string;
    /**
     * Maps the value column from data table for each list item
     * @default null
     */
    value?: string;
    /**
     * Maps the icon class column from data table for each list item.
     * @default null
     */
    iconCss?: string;
    /**
     * Group the list items with it's related items by mapping groupBy field.
     * @default null
     */
    groupBy?: string;
    /**
     * Allows additional attributes such as title, disabled, etc., to configure the elements 
     * in various ways to meet the criteria.
     * @default null
     */
    htmlAttributes?: string;
}
/**
 * Interface for a class DropDownBase
 */
export interface DropDownBaseModel extends base.ComponentModel{
    /**
     * The `fields` property maps the columns of the data table and binds the data to the component.
     * * text - Maps the text column from data table for each list item.
     * * value - Maps the value column from data table for each list item.
     * * iconCss - Maps the icon class column from data table for each list item.
     * * groupBy - Group the list items with it's related items by mapping groupBy field.
     * ```html
     * <input type="text" tabindex="1" id="list"> </input>
     * ```
     * ```typescript  
     *   let customers: DropDownList = new DropDownList({
     *      dataSource:new data.DataManager({ url:'http://js.syncfusion.com/demos/ejServices/Wcf/Northwind.svc/' }),
     *      query: new data.Query().from('Customers').select(['ContactName', 'CustomerID']).take(5),
     *      fields: { text: 'ContactName', value: 'CustomerID' },
     *      placeholder: 'Select a customer'
     *   });
     *   customers.appendTo("#list");
     * ```
     * @default {text: null, value: null, iconCss: null, groupBy: null}
     */
    fields?: FieldSettingsModel;
    /**
     * Enable or disable persisting component's state between page reloads. 
     * If enabled, following list of states will be persisted.
     * 1. value
     * @default false
     */
    enablePersistence?: boolean;
    /**
     * Accepts the template design and assigns it to each list item present in the popup.
     * We have built-in `template engine`
     * 
     * which provides options to base.compile template string into a executable function. 
     * For EX: We have expression evolution as like ES6 expression string literals. 
     * @default null
     */
    itemTemplate?: string;
    /**
     * Accepts the template design and assigns it to the group headers present in the popup list.
     * @default null
     */
    groupTemplate?: string;
    /**
     * Accepts the template design and assigns it to popup list of component
     * when no data is available on the component.
     * @default 'No Records Found'
     */
    noRecordsTemplate?: string;
    /**
     * Accepts the template and assigns it to the popup list content of the component
     * when the data fetch request from the remote server fails.
     * @default 'The Request Failed'
     */
    actionFailureTemplate?: string;
    /**
     * Specifies the `sortOrder` to sort the data source. The available type of sort orders are
     * * `None` - The data source is not sorting.
     * * `Ascending` - The data source is sorting with ascending order.
     * * `Descending` - The data source is sorting with descending order.
     * @default None
     */
    sortOrder?: lists.SortOrder;
    /**
     * Specifies a value that indicates whether the component is enabled or not.
     * @default true
     */
    enabled?: boolean;
    /**
     * Accepts the list items either through local or remote service and binds it to the component.
     * It can be an array of JSON Objects or an instance of
     * `data.DataManager`.
     * @default []
     */
    dataSource?: { [key: string]: Object }[] | data.DataManager | string[] | number[] | boolean[];
    /**
     * Accepts the external `data.Query`
     * which will execute along with the data processing.
     * @default null
     */
    query?: data.Query;
    /**
     * Determines on which filter type, the component needs to be considered on search action. 
     * The `FilterType` and its supported data types are 
     * 
     * <table> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * FilterType<br/></td><td colSpan=1 rowSpan=1> 
     * Description<br/></td><td colSpan=1 rowSpan=1> 
     * Supported Types<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * StartsWith<br/></td><td colSpan=1 rowSpan=1> 
     * Checks whether a value begins with the specified value.<br/></td><td colSpan=1 rowSpan=1> 
     * String<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * EndsWith<br/></td><td colSpan=1 rowSpan=1> 
     * Checks whether a value ends with specified value.<br/><br/></td><td colSpan=1 rowSpan=1> 
     * <br/>String<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * Contains<br/></td><td colSpan=1 rowSpan=1> 
     * Checks whether a value contains with specified value.<br/><br/></td><td colSpan=1 rowSpan=1> 
     * <br/>String<br/></td></tr> 
     * </table>
     * 
     * The default value set to `StartsWith`, all the suggestion items which contain typed characters to listed in the suggestion popup.
     * @default 'StartsWith'
     */
    filterType?: FilterType;
    /**
     * When set to ‘false’, consider the `case-sensitive` on performing the search to find suggestions.
     * By default consider the casing.
     * @default true
     */
    ignoreCase?: boolean;
    /**
     * specifies the z-index value of the component popup element.
     * @default 1000
     */
    zIndex?: number;
    /**
     * ignoreAccent set to true, then ignores the diacritic characters or accents when filtering.
     */
    ignoreAccent?: boolean;
    /**
     * Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
     * @default 'en-US'
     */
    locale?: string;
    /**
     * Triggers before fetching data from the remote server.
     * @event
     * @blazorProperty 'OnActionBegin'
     * @blazorType ActionBeginEventArgs
     */
    actionBegin?: base.EmitType<Object>;
    /**
     * Triggers after data is fetched successfully from the remote server.
     * @event
     * @blazorProperty 'OnActionComplete'
     * @blazorType ActionCompleteEventArgs
     */
    actionComplete?: base.EmitType<Object>;
    /**
     * Triggers when the data fetch request from the remote server fails.
     * @event
     * @blazorProperty 'OnActionFailure'
     */
    actionFailure?: base.EmitType<Object>;
    /**
     * Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.
     * @event
     * @blazorProperty 'OnValueSelect'
     */
    select?: base.EmitType<SelectEventArgs>;
    /**
     * Triggers when data source is populated in the popup list..
     * @event
     * @blazorProperty 'DataBound'
     * @blazorType DataBoundEventArgs
     */
    dataBound?: base.EmitType<Object>;
    /**
     * Triggers when the component is created.
     * @event 
     * @blazorProperty 'Created'
     */
    created?: base.EmitType<Object>;
    /**
     * Triggers when the component is destroyed.
     * @event
     * @blazorProperty 'Destroyed'
     */
    destroyed?: base.EmitType<Object>;
}
//node_modules/@syncfusion/ej2-dropdowns/src/drop-down-base/drop-down-base.d.ts
export  type FilterType = 'StartsWith' | 'EndsWith' | 'Contains';
export  class FieldSettings extends base.ChildProperty<FieldSettings> {
    /**
     * Maps the text column from data table for each list item
     * @default null
     */
    text: string;
    /**
     * Maps the value column from data table for each list item
     * @default null
     */
    value: string;
    /**
     * Maps the icon class column from data table for each list item.
     * @default null
     */
    iconCss: string;
    /**
     * Group the list items with it's related items by mapping groupBy field.
     * @default null
     */
    groupBy: string;
    /**
     * Allows additional attributes such as title, disabled, etc., to configure the elements
     * in various ways to meet the criteria.
     * @default null
     */
    htmlAttributes: string;
}
export  const dropDownBaseClasses: DropDownBaseClassList;
export interface DropDownBaseClassList {
    root: string;
    rtl: string;
    content: string;
    selected: string;
    hover: string;
    noData: string;
    fixedHead: string;
    focus: string;
    li: string;
    disabled: string;
    group: string;
    grouping: string;
}
export interface SelectEventArgs {
    /**
     * If the event is triggered by interaction, it returns true. Otherwise, it returns false.
     */
    isInteracted: boolean;
    /**
     * Returns the selected list item
     */
    item: HTMLLIElement;
    /**
     * Returns the selected item as JSON Object from the data source.
     * @blazorType object
     */
    itemData: FieldSettingsModel;
    /**
     * Specifies the original event arguments.
     */
    e: MouseEvent | KeyboardEvent | TouchEvent;
    /**
     * Illustrates whether the current action needs to be prevented or not.
     */
    cancel?: boolean;
}
export interface BeforeOpenEventArgs {
    /**
     * Illustrates whether the current action needs to be prevented or not.
     */
    cancel?: boolean;
}
export interface ActionBeginEventArgs {
    /**
     * Specify the query to begin the data
     */
    query: data.Query;
    /**
     *  Set the data source to action begin
     * @blazorType object
     */
    data: {
        [key: string]: Object;
    }[] | data.DataManager | string[] | number[] | boolean[];
    /**
     * Illustrates whether the current action needs to be prevented or not.
     */
    cancel?: boolean;
}
export interface ActionCompleteEventArgs {
    /**
     * Illustrates whether the current action needs to be prevented or not.
     */
    cancel?: boolean;
    /**
     * Returns the selected items as JSON Object from the data source.
     * @blazorType object
     */
    result?: ResultData;
    /**
     * Return the actual records.
     */
    actual?: object;
    /**
     * Return the aggregates
     */
    aggregates?: object;
    /**
     * Return the total number for records.
     */
    count?: number;
    /**
     * Specify the query to complete the data
     */
    query?: data.Query;
    /**
     * Return the request type
     */
    request?: string;
    /**
     * Return the virtualSelectRecords
     */
    virtualSelectRecords?: object;
    /**
     * Return XMLHttpRequest
     */
    xhr: XMLHttpRequest;
}
export interface DataBoundEventArgs {
    /**
     * Returns the selected items as JSON Object from the data source.
     * @blazorType object
     */
    items: {
        [key: string]: Object;
    }[] | data.DataManager | string[] | number[] | boolean[];
    /**
     * Return the bounded objects
     */
    e?: object;
}
/**
 * DropDownBase component will generate the list items based on given data and act as base class to drop-down related components
 */
export  class DropDownBase extends base.Component<HTMLElement> implements base.INotifyPropertyChanged {
    protected listData: {
        [key: string]: Object;
    }[] | string[] | boolean[] | number[];
    protected ulElement: HTMLElement;
    protected liCollections: HTMLElement[];
    private bindEvent;
    private scrollTimer;
    protected list: HTMLElement;
    protected fixedHeaderElement: HTMLElement;
    protected keyboardModule: base.KeyboardEvents;
    protected enableRtlElements: HTMLElement[];
    protected rippleFun: Function;
    protected l10n: base.L10n;
    protected item: HTMLLIElement;
    protected itemData: {
        [key: string]: Object;
    } | string | number | boolean;
    protected isActive: boolean;
    protected isRequested: boolean;
    protected isDataFetched: boolean;
    protected queryString: string;
    protected sortedData: {
        [key: string]: Object;
    }[] | string[] | boolean[] | number[];
    protected isGroupChecking: boolean;
    protected itemTemplateId: string;
    protected valueTemplateId: string;
    protected groupTemplateId: string;
    protected headerTemplateId: string;
    protected footerTemplateId: string;
    protected noRecordsTemplateId: string;
    protected actionFailureTemplateId: string;
    /**
     * The `fields` property maps the columns of the data table and binds the data to the component.
     * * text - Maps the text column from data table for each list item.
     * * value - Maps the value column from data table for each list item.
     * * iconCss - Maps the icon class column from data table for each list item.
     * * groupBy - Group the list items with it's related items by mapping groupBy field.
     * ```html
     * <input type="text" tabindex="1" id="list"> </input>
     * ```
     * ```typescript
     *   let customers$: DropDownList = new DropDownList({
     *      dataSource:new data.DataManager({ url:'http://js.syncfusion.com/demos/ejServices/Wcf/Northwind.svc/' }),
     *      query: new data.Query().from('Customers').select(['ContactName', 'CustomerID']).take(5),
     *      fields: { text: 'ContactName', value: 'CustomerID' },
     *      placeholder: 'Select a customer'
     *   });
     *   customers.appendTo("#list");
     * ```
     * @default {text: null, value: null, iconCss: null, groupBy: null}
     */
    fields: FieldSettingsModel;
    /**
     * Enable or disable persisting component's state between page reloads.
     * If enabled, following list of states will be persisted.
     * 1. value
     * @default false
     */
    enablePersistence: boolean;
    /**
     * Accepts the template design and assigns it to each list item present in the popup.
     * We have built-in `template engine`
     *
     * which provides options to compile template string into a executable function.
     * For EX: We have expression evolution as like ES6 expression string literals.
     * @default null
     */
    itemTemplate: string;
    /**
     * Accepts the template design and assigns it to the group headers present in the popup list.
     * @default null
     */
    groupTemplate: string;
    /**
     * Accepts the template design and assigns it to popup list of component
     * when no data is available on the component.
     * @default 'No Records Found'
     */
    noRecordsTemplate: string;
    /**
     * Accepts the template and assigns it to the popup list content of the component
     * when the data fetch request from the remote server fails.
     * @default 'The Request Failed'
     */
    actionFailureTemplate: string;
    /**
     * Specifies the `sortOrder` to sort the data source. The available type of sort orders are
     * * `None` - The data source is not sorting.
     * * `Ascending` - The data source is sorting with ascending order.
     * * `Descending` - The data source is sorting with descending order.
     * @default None
     */
    sortOrder: lists.SortOrder;
    /**
     * Specifies a value that indicates whether the component is enabled or not.
     * @default true
     */
    enabled: boolean;
    /**
     * Accepts the list items either through local or remote service and binds it to the component.
     * It can be an array of JSON Objects or an instance of
     * `data.DataManager`.
     * @default []
     */
    dataSource: {
        [key: string]: Object;
    }[] | data.DataManager | string[] | number[] | boolean[];
    /**
     * Accepts the external `data.Query`
     * which will execute along with the data processing.
     * @default null
     */
    query: data.Query;
    /**
     * Determines on which filter type, the component needs to be considered on search action.
     * The `FilterType` and its supported data types are
     *
     * <table>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * FilterType<br/></td><td colSpan=1 rowSpan=1>
     * Description<br/></td><td colSpan=1 rowSpan=1>
     * Supported Types<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * StartsWith<br/></td><td colSpan=1 rowSpan=1>
     * Checks whether a value begins with the specified value.<br/></td><td colSpan=1 rowSpan=1>
     * String<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * EndsWith<br/></td><td colSpan=1 rowSpan=1>
     * Checks whether a value ends with specified value.<br/><br/></td><td colSpan=1 rowSpan=1>
     * <br/>String<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * Contains<br/></td><td colSpan=1 rowSpan=1>
     * Checks whether a value contains with specified value.<br/><br/></td><td colSpan=1 rowSpan=1>
     * <br/>String<br/></td></tr>
     * </table>
     *
     * The default value set to `StartsWith`, all the suggestion items which contain typed characters to listed in the suggestion popup.
     * @default 'StartsWith'
     */
    filterType: FilterType;
    /**
     * When set to ‘false’, consider the `case-sensitive` on performing the search to find suggestions.
     * By default consider the casing.
     * @default true
     */
    ignoreCase: boolean;
    /**
     * specifies the z-index value of the component popup element.
     * @default 1000
     */
    zIndex: number;
    /**
     * ignoreAccent set to true, then ignores the diacritic characters or accents when filtering.
     */
    ignoreAccent: boolean;
    /**
     * Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
     * @default 'en-US'
     */
    locale: string;
    /**
     * Triggers before fetching data from the remote server.
     * @event
     * @blazorProperty 'OnActionBegin'
     * @blazorType ActionBeginEventArgs
     */
    actionBegin: base.EmitType<Object>;
    /**
     * Triggers after data is fetched successfully from the remote server.
     * @event
     * @blazorProperty 'OnActionComplete'
     * @blazorType ActionCompleteEventArgs
     */
    actionComplete: base.EmitType<Object>;
    /**
     * Triggers when the data fetch request from the remote server fails.
     * @event
     * @blazorProperty 'OnActionFailure'
     */
    actionFailure: base.EmitType<Object>;
    /**
     * Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.
     * @event
     * @blazorProperty 'OnValueSelect'
     */
    select: base.EmitType<SelectEventArgs>;
    /**
     * Triggers when data source is populated in the popup list..
     * @event
     * @blazorProperty 'DataBound'
     * @blazorType DataBoundEventArgs
     */
    dataBound: base.EmitType<Object>;
    /**
     * Triggers when the component is created.
     * @event
     * @blazorProperty 'Created'
     */
    created: base.EmitType<Object>;
    /**
     * Triggers when the component is destroyed.
     * @event
     * @blazorProperty 'Destroyed'
     */
    destroyed: base.EmitType<Object>;
    /**
     * * Constructor for DropDownBase class
     */
    constructor(options?: DropDownBaseModel, element?: string | HTMLElement);
    protected getPropObject(prop: string, newProp: {
        [key: string]: string;
    }, oldProp: {
        [key: string]: string;
    }): {
        [key: string]: Object;
    };
    protected getValueByText(text: string, ignoreCase?: boolean, ignoreAccent?: boolean): string | number | boolean;
    private checkValueCase;
    private checkingAccent;
    private checkIgnoreCase;
    private checkNonIgnoreCase;
    private getItemValue;
    protected l10nUpdate(actionFailure?: boolean): void;
    protected getLocaleName(): string;
    protected getTextByValue(value: string | number | boolean): string;
    protected getFormattedValue(value: string): string | number | boolean;
    /**
     * Sets RTL to dropdownbase wrapper
     */
    protected setEnableRtl(): void;
    /**
     * Initialize the base.Component.
     */
    private initialize;
    protected DropDownBaseupdateBlazorTemplates(item: boolean, group: boolean, noRecord: boolean, action: boolean, value?: boolean, header?: boolean, footer?: boolean, isEmpty?: boolean): void;
    protected DropDownBaseresetBlazorTemplates(item: boolean, group: boolean, noRecord: boolean, action: boolean, value?: boolean, header?: boolean, footer?: boolean): void;
    /**
     * Get the properties to be maintained in persisted state.
     */
    protected getPersistData(): string;
    /**
     * Sets the enabled state to DropDownBase.
     */
    protected setEnabled(): void;
    /**
     * Sets the enabled state to DropDownBase.
     */
    protected updateDataAttribute(value: {
        [key: string]: string;
    }): void;
    private renderItemsBySelect;
    private getJSONfromOption;
    /**
     * Execute before render the list items
     * @private
     */
    protected preRender(): void;
    /**
     * Creates the list items of DropDownBase component.
     */
    private setListData;
    private bindChildItems;
    protected updateListValues(): void;
    protected findListElement(list: HTMLElement, findNode: string, attribute: string, value: string | boolean | number): HTMLElement;
    private raiseDataBound;
    private remainingItems;
    private emptyDataRequest;
    protected showSpinner(): void;
    protected hideSpinner(): void;
    protected onActionFailure(e: Object): void;
    protected onActionComplete(ulElement: HTMLElement, list: {
        [key: string]: Object;
    }[] | boolean[] | string[] | number[], e?: Object): void;
    protected postRender(listElement: HTMLElement, list: {
        [key: string]: Object;
    }[] | number[] | string[] | boolean[], bindEvent: boolean): void;
    /**
     * Get the query to do the data operation before list item generation.
     */
    protected getQuery(query: data.Query): data.Query;
    /**
     * To render the template content for group header element.
     */
    private renderGroupTemplate;
    /**
     * To create the ul li list items
     */
    private createListItems;
    protected listOption(dataSource: {
        [key: string]: Object;
    }[] | string[] | number[] | boolean[], fields: FieldSettingsModel): FieldSettingsModel;
    protected setFloatingHeader(e: Event): void;
    private scrollStop;
    /**
     * To render the list items
     */
    protected renderItems(listData: {
        [key: string]: Object;
    }[], fields: FieldSettingsModel): HTMLElement;
    protected templateListItem(dataSource: {
        [key: string]: Object;
    }[], fields: FieldSettingsModel): HTMLElement;
    protected typeOfData(items: {
        [key: string]: Object;
    }[] | string[] | number[] | boolean[]): {
        [key: string]: Object;
    };
    protected setFixedHeader(): void;
    private getSortedDataSource;
    /**
     * Return the index of item which matched with given value in data source
     */
    protected getIndexByValue(value: string | number | boolean): number;
    /**
     * To dispatch the event manually
     */
    protected dispatchEvent(element: HTMLElement, type: string): void;
    /**
     * To set the current fields
     */
    protected setFields(): void;
    /**
     * reset the items list.
     */
    protected resetList(dataSource?: {
        [key: string]: Object;
    }[] | data.DataManager | string[] | number[] | boolean[], fields?: FieldSettingsModel, query?: data.Query): void;
    protected updateSelection(): void;
    protected renderList(): void;
    protected updateDataSource(props?: DropDownBaseModel): void;
    protected setUpdateInitial(props: string[], newProp: {
        [key: string]: string;
    }): void;
    /**
     * When property value changes happened, then onPropertyChanged method will execute the respective changes in this component.
     * @private
     */
    onPropertyChanged(newProp: DropDownBaseModel, oldProp: DropDownBaseModel): void;
    /**
     * Build and render the component
     * @private
     */
    render(isEmptyData?: boolean): void;
    /**
     * Return the module name of this component.
     * @private
     */
    getModuleName(): string;
    /**
     * Gets all the list items bound on this component.
     * @returns Element[].
     */
    getItems(): Element[];
    /**
     * Adds a new item to the popup list. By default, new item appends to the list as the last item,
     * but you can insert based on the index parameter.
     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.
     * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.
     * @return {void}.
     */
    addItem(items: {
        [key: string]: Object;
    }[] | {
        [key: string]: Object;
    } | string | boolean | number | string[] | boolean[] | number[], itemIndex?: number): void;
    protected validationAttribute(target: HTMLElement, hidden: Element): void;
    protected setZIndex(): void;
    protected updateActionCompleteData(li: HTMLElement, item: {
        [key: string]: Object;
    }): void;
    /**
     * Gets the data Object that matches the given value.
     * @param { string | number } value - Specifies the value of the list item.
     * @returns Object.
     * @blazorType object
     */
    getDataByValue(value: string | number | boolean): {
        [key: string]: Object;
    } | string | number | boolean;
    /**
     * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.
     * @method destroy
     * @return {void}.
     */
    destroy(): void;
}
export interface ResultData {
    /**
     * To return the JSON result.
     */
    result: {
        [key: string]: Object;
    }[];
}
export interface FilteringEventArgs {
    /**
     * To prevent the internal filtering action.
     */
    preventDefaultAction: boolean;
    /**
     * Gets the `keyup` event arguments.
     */
    baseEventArgs: Object;
    /**
     * Illustrates whether the current action needs to be prevented or not.
     */
    cancel: boolean;
    /**
     * Search text value.
     */
    text: string;
    /**
     * To filter the data from given data source by using query
     * @param  {Object[] | data.DataManager } dataSource - Set the data source to filter.
     * @param  {data.Query} query - Specify the query to filter the data.
     * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.
     * @return {void}.
     */
    updateData(dataSource: {
        [key: string]: Object;
    }[] | data.DataManager | string[] | number[] | boolean[], query?: data.Query, fields?: FieldSettingsModel): void;
}
export interface PopupEventArgs {
    /**
     * Specifies the popup Object.
     * @deprecated
     */
    popup: popups.Popup;
    /**
     * Illustrates whether the current action needs to be prevented or not.
     */
    cancel?: boolean;
    /**
     * Specifies the animation Object.
     */
    animation?: base.AnimationModel;
}
export interface FocusEventArgs {
    /**
     * Specifies the focus interacted.
     */
    isInteracted?: boolean;
    /**
     * Specifies the event.
     */
    event?: MouseEvent | FocusEvent | TouchEvent | KeyboardEvent;
}
//node_modules/@syncfusion/ej2-dropdowns/src/drop-down-base/index.d.ts
/**
 * export all modules from current location
 */
//node_modules/@syncfusion/ej2-dropdowns/src/drop-down-list/drop-down-list-model.d.ts
/**
 * Interface for a class DropDownList
 */
export interface DropDownListModel extends DropDownBaseModel{
    /**
     * Sets CSS classes to the root element of the component that allows customization of appearance.
     * @default null
     */
    cssClass?: string;
    /**
     * Specifies the width of the component. By default, the component width sets based on the width of 
     * its parent container. You can also set the width in pixel values.
     * @default '100%'
     * @aspType string
     * @blazorType string
     */
    width?: string | number;
    /**
     * Specifies the height of the popup list.  
     * > For more details about the popup configuration refer to 
     * [`popups.Popup Configuration`](../../drop-down-list/getting-started#configure-the-popup-list) documentation.
     * @default '300px'
     * @aspType string
     * @blazorType string
     */
    popupHeight?: string | number;
    /**
     * Specifies the width of the popup list. By default, the popup width sets based on the width of 
     * the component.
     * > For more details about the popup configuration refer to 
     * [`popups.Popup Configuration`](../../drop-down-list/getting-started#configure-the-popup-list) documentation.
     * @default '100%'
     * @aspType string
     * @blazorType string
     */
    popupWidth?: string | number;
    /**
     * Specifies a short hint that describes the expected value of the DropDownList component.
     * @default null
     */
    placeholder?: string;
    /**
     * Accepts the value to be displayed as a watermark text on the filter bar. 
     * @default null
     */
    filterBarPlaceholder?: string;
    /**
     * Allows additional HTML base.attributes such as title, name, etc., and
     * accepts n number of base.attributes in a key-value pair format.
     * 
     * {% codeBlock src="dropdownlist/html-base.attributes-api/index.ts" %}{% endcodeBlock %}
     * 
     * {% codeBlock src="dropdownlist/html-base.attributes-api/index.html" %}{% endcodeBlock %}
     *
     * @default {}
     */
    htmlAttributes?: { [key: string]: string;
 };
    /**
     * Accepts the external `data.Query`
     * that execute along with data processing.
     * 
     * {% codeBlock src="dropdownlist/query-api/index.ts" %}{% endcodeBlock %}
     * 
     * {% codeBlock src="dropdownlist/query-api/index.html" %}{% endcodeBlock %}
     * 
     * @default null
     */
    query?: data.Query;
    /**
     * Accepts the template design and assigns it to the selected list item in the input element of the component.
     * For more details about the available template options refer to 
     * [`Template`](../../drop-down-list/templates) documentation.
     * 
     * We have built-in `template engine`
     * which provides options to base.compile template string into a executable function.
     * For EX: We have expression evolution as like ES6 expression string literals.
     * @default null
     */
    valueTemplate?: string;
    /**
     * Accepts the template design and assigns it to the header container of the popup list.
     * > For more details about the available template options refer to [`Template`](../../drop-down-list/templates) documentation.
     * @default null
     */
    headerTemplate?: string;
    /**
     * Accepts the template design and assigns it to the footer container of the popup list.
     * > For more details about the available template options refer to [`Template`](../../drop-down-list/templates) documentation.
     * @default null
     */
    footerTemplate?: string;
    /**
     * When allowFiltering is set to true, show the filter bar (search box) of the component.
     * The filter action retrieves matched items through the `filtering` event based on
     * the characters typed in the search TextBox.
     * 
     * If no match is found, the value of the `noRecordsTemplate` property will be displayed.
     * > For more details about the filtering refer to [`Filtering`](../../drop-down-list/filtering) documentation.
     * 
     * {% codeBlock src="dropdownlist/allow-filtering-api/index.ts" %}{% endcodeBlock %}
     * 
     * {% codeBlock src="dropdownlist/allow-filtering-api/index.html" %}{% endcodeBlock %}
     * @default false
     */
    allowFiltering?: boolean;
    /**
     * When set to true, the user interactions on the component are disabled.
     * @default false
     */
    readonly?: boolean;
    /**
     * Gets or sets the display text of the selected item in the component.
     * @default null
     */
    text?: string;
    /**
     * Gets or sets the value of the selected item in the component.
     * @default null
     * @isGenericType true
     */
    value?: number | string | boolean;
    /**
     * Gets or sets the index of the selected item in the component.
     * 
     * {% codeBlock src="dropdownlist/index-api/index.ts" %}{% endcodeBlock %}
     * 
     * {% codeBlock src="dropdownlist/index-api/index.html" %}{% endcodeBlock %}
     * 
     * @default null
     * @blazorType int
     * @isBlazorNullableType true
     */
    index?: number;
    /**
     * Specifies whether to display the floating label above the input element.
     * Possible values are:
     * * Never: The label will never float in the input when the placeholder is available.
     * * Always: The floating label will always float above the input.
     * * Auto: The floating label will float above the input after focusing or entering a value in the input.
     * 
     * {% codeBlock src="dropdownlist/float-label-type-api/index.ts" %}{% endcodeBlock %}
     * 
     * {% codeBlock src="dropdownlist/float-label-type-api/index.html" %}{% endcodeBlock %}
     * 
     * @default Syncfusion.EJ2.Inputs.inputs.FloatLabelType.Never
     * @aspType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     * @isEnumeration true
     * @blazorType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     */
    floatLabelType?: inputs.FloatLabelType;
    /**
     * Specifies whether to show or hide the clear button. 
     * When the clear button is clicked, `value`, `text`, and `index` properties are reset to null.
     * @default false
     */
    showClearButton?: boolean;
    /**
     * Triggers on typing a character in the filter bar when the 
     * [`allowFiltering`](./#allowfiltering) 
     * is enabled.
     * > For more details about the filtering refer to [`Filtering`](../../drop-down-list/filtering) documentation.
     * 
     * @event
     * @blazorProperty 'Filtering'
     */
    filtering?: base.EmitType<FilteringEventArgs>;
    /**
     * Triggers when an item in a popup is selected or when the model value is changed by user.
     * Use change event to 
     * [`Configure the Cascading DropDownList`](../../drop-down-list/how-to/cascading)
     * @event
     * @blazorProperty 'ValueChange'
     */
    change?: base.EmitType<ChangeEventArgs>;
    /**
     * Triggers when the popup before opens.
     * @event
     * @blazorProperty 'OnOpen'
     * @blazorType BeforeOpenEventArgs
     */
    beforeOpen?: base.EmitType<Object>;
    /**
     * Triggers when the popup opens.
     * @event
     * @blazorProperty 'Opened'
     */
    open?: base.EmitType<PopupEventArgs>;
    /**
     * Triggers when the popup is closed.
     * @event
     * @blazorProperty 'OnClose'
     */
    close?: base.EmitType<PopupEventArgs>;
    /**
     * Triggers when focus moves out from the component.
     * @event
     */
    blur?: base.EmitType<Object>;
    /**
     * Triggers when the component is focused.
     * @event
     */
    focus?: base.EmitType<Object>;
}
//node_modules/@syncfusion/ej2-dropdowns/src/drop-down-list/drop-down-list.d.ts

export interface ChangeEventArgs extends SelectEventArgs {
    /**
     * Returns the selected value
     * @isGenericType true
     */
    value: number | string | boolean;
    /**
     * Returns the previous selected list item
     */
    previousItem: HTMLLIElement;
    /**
     * Returns the previous selected item as JSON Object from the data source.
     * @blazorType object
     */
    previousItemData: FieldSettingsModel;
    /**
     * Returns the root element of the component.
     */
    element: HTMLElement;
}
export  const dropDownListClasses: DropDownListClassList;
/**
 * The DropDownList component contains a list of predefined values from which you can
 * choose a single value.
 * ```html
 * <input type="text" tabindex="1" id="list"> </input>
 * ```
 * ```typescript
 *   let dropDownListObj:DropDownList = new DropDownList();
 *   dropDownListObj.appendTo("#list");
 * ```
 */
export  class DropDownList extends DropDownBase implements inputs.IInput {
    protected inputWrapper: inputs.InputObject;
    protected inputElement: HTMLInputElement;
    private valueTempElement;
    private listObject;
    private header;
    private footer;
    protected selectedLI: HTMLElement;
    protected previousSelectedLI: HTMLElement;
    protected previousItemData: {
        [key: string]: Object;
    } | string | number | boolean;
    private listHeight;
    protected hiddenElement: HTMLSelectElement;
    protected isPopupOpen: boolean;
    private isDocumentClick;
    protected isInteracted: boolean;
    private isFilterFocus;
    protected beforePopupOpen: boolean;
    protected initial: boolean;
    private initRemoteRender;
    private searchBoxHeight;
    private popupObj;
    private backIconElement;
    private clearIconElement;
    private containerStyle;
    protected previousValue: string | number | boolean;
    protected activeIndex: number;
    protected filterInput: HTMLInputElement;
    private searchKeyModule;
    private tabIndex;
    private isNotSearchList;
    protected isTyped: boolean;
    protected isSelected: boolean;
    protected preventFocus: boolean;
    protected preventAutoFill: boolean;
    protected queryString: string;
    protected isValidKey: boolean;
    protected typedString: string;
    protected isEscapeKey: boolean;
    private isPreventBlur;
    protected isTabKey: boolean;
    private actionCompleteData;
    protected prevSelectPoints: {
        [key: string]: number;
    };
    protected isSelectCustom: boolean;
    protected isDropDownClick: boolean;
    protected preventAltUp: boolean;
    private searchKeyEvent;
    private filterInputObj;
    protected spinnerElement: HTMLElement;
    protected keyConfigure: {
        [key: string]: string;
    };
    protected isCustomFilter: boolean;
    private isSecondClick;
    /**
     * Sets CSS classes to the root element of the component that allows customization of appearance.
     * @default null
     */
    cssClass: string;
    /**
     * Specifies the width of the component. By default, the component width sets based on the width of
     * its parent container. You can also set the width in pixel values.
     * @default '100%'
     * @aspType string
     * @blazorType string
     */
    width: string | number;
    /**
     * Specifies the height of the popup list.
     * > For more details about the popup configuration refer to
     * [`Popup Configuration`](../../drop-down-list/getting-started#configure-the-popup-list) documentation.
     * @default '300px'
     * @aspType string
     * @blazorType string
     */
    popupHeight: string | number;
    /**
     * Specifies the width of the popup list. By default, the popup width sets based on the width of
     * the component.
     * > For more details about the popup configuration refer to
     * [`Popup Configuration`](../../drop-down-list/getting-started#configure-the-popup-list) documentation.
     * @default '100%'
     * @aspType string
     * @blazorType string
     */
    popupWidth: string | number;
    /**
     * Specifies a short hint that describes the expected value of the DropDownList component.
     * @default null
     */
    placeholder: string;
    /**
     * Accepts the value to be displayed as a watermark text on the filter bar.
     * @default null
     */
    filterBarPlaceholder: string;
    /**
     * Allows additional HTML attributes such as title, name, etc., and
     * accepts n number of attributes in a key-value pair format.
     *
     * {% codeBlock src="dropdownlist/html-attributes-api/index.ts" %}{% endcodeBlock %}
     *
     * {% codeBlock src="dropdownlist/html-attributes-api/index.html" %}{% endcodeBlock %}
     *
     * @default {}
     */
    htmlAttributes: {
        [key: string]: string;
    };
    /**
     * Accepts the external `data.Query`
     * that execute along with data processing.
     *
     * {% codeBlock src="dropdownlist/query-api/index.ts" %}{% endcodeBlock %}
     *
     * {% codeBlock src="dropdownlist/query-api/index.html" %}{% endcodeBlock %}
     *
     * @default null
     */
    query: data.Query;
    /**
     * Accepts the template design and assigns it to the selected list item in the input element of the component.
     * For more details about the available template options refer to
     * [`Template`](../../drop-down-list/templates) documentation.
     *
     * We have built-in `template engine`
     * which provides options to compile template string into a executable function.
     * For EX: We have expression evolution as like ES6 expression string literals.
     * @default null
     */
    valueTemplate: string;
    /**
     * Accepts the template design and assigns it to the header container of the popup list.
     * > For more details about the available template options refer to [`Template`](../../drop-down-list/templates) documentation.
     * @default null
     */
    headerTemplate: string;
    /**
     * Accepts the template design and assigns it to the footer container of the popup list.
     * > For more details about the available template options refer to [`Template`](../../drop-down-list/templates) documentation.
     * @default null
     */
    footerTemplate: string;
    /**
     * When allowFiltering is set to true, show the filter bar (search box) of the component.
     * The filter action retrieves matched items through the `filtering` event based on
     * the characters typed in the search TextBox.
     *
     * If no match is found, the value of the `noRecordsTemplate` property will be displayed.
     * > For more details about the filtering refer to [`Filtering`](../../drop-down-list/filtering) documentation.
     *
     * {% codeBlock src="dropdownlist/allow-filtering-api/index.ts" %}{% endcodeBlock %}
     *
     * {% codeBlock src="dropdownlist/allow-filtering-api/index.html" %}{% endcodeBlock %}
     * @default false
     */
    allowFiltering: boolean;
    /**
     * When set to true, the user interactions on the component are disabled.
     * @default false
     */
    readonly: boolean;
    /**
     * Gets or sets the display text of the selected item in the component.
     * @default null
     */
    text: string;
    /**
     * Gets or sets the value of the selected item in the component.
     * @default null
     * @isGenericType true
     */
    value: number | string | boolean;
    /**
     * Gets or sets the index of the selected item in the component.
     *
     * {% codeBlock src="dropdownlist/index-api/index.ts" %}{% endcodeBlock %}
     *
     * {% codeBlock src="dropdownlist/index-api/index.html" %}{% endcodeBlock %}
     *
     * @default null
     * @blazorType int
     * @isBlazorNullableType true
     */
    index: number;
    /**
     * Specifies whether to display the floating label above the input element.
     * Possible values are:
     * * Never: The label will never float in the input when the placeholder is available.
     * * Always: The floating label will always float above the input.
     * * Auto: The floating label will float above the input after focusing or entering a value in the input.
     *
     * {% codeBlock src="dropdownlist/float-label-type-api/index.ts" %}{% endcodeBlock %}
     *
     * {% codeBlock src="dropdownlist/float-label-type-api/index.html" %}{% endcodeBlock %}
     *
     * @default Syncfusion.EJ2.Inputs.inputs.FloatLabelType.Never
     * @aspType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     * @isEnumeration true
     * @blazorType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     */
    floatLabelType: inputs.FloatLabelType;
    /**
     * Specifies whether to show or hide the clear button.
     * When the clear button is clicked, `value`, `text`, and `index` properties are reset to null.
     * @default false
     */
    showClearButton: boolean;
    /**
     * Triggers on typing a character in the filter bar when the
     * [`allowFiltering`](./#allowfiltering)
     * is enabled.
     * > For more details about the filtering refer to [`Filtering`](../../drop-down-list/filtering) documentation.
     *
     * @event
     * @blazorProperty 'Filtering'
     */
    filtering: base.EmitType<FilteringEventArgs>;
    /**
     * Triggers when an item in a popup is selected or when the model value is changed by user.
     * Use change event to
     * [`Configure the Cascading DropDownList`](../../drop-down-list/how-to/cascading)
     * @event
     * @blazorProperty 'ValueChange'
     */
    change: base.EmitType<ChangeEventArgs>;
    /**
     * Triggers when the popup before opens.
     * @event
     * @blazorProperty 'OnOpen'
     * @blazorType BeforeOpenEventArgs
     */
    beforeOpen: base.EmitType<Object>;
    /**
     * Triggers when the popup opens.
     * @event
     * @blazorProperty 'Opened'
     */
    open: base.EmitType<PopupEventArgs>;
    /**
     * Triggers when the popup is closed.
     * @event
     * @blazorProperty 'OnClose'
     */
    close: base.EmitType<PopupEventArgs>;
    /**
     * Triggers when focus moves out from the component.
     * @event
     */
    blur: base.EmitType<Object>;
    /**
     * Triggers when the component is focused.
     * @event
     */
    focus: base.EmitType<Object>;
    /**
     * * Constructor for creating the DropDownList component.
     */
    constructor(options?: DropDownListModel, element?: string | HTMLElement);
    /**
     * Initialize the event handler.
     * @private
     */
    protected preRender(): void;
    private initializeData;
    protected setZIndex(): void;
    protected renderList(isEmptyData?: boolean): void;
    private floatLabelChange;
    protected resetHandler(e: MouseEvent): void;
    protected resetFocusElement(): void;
    protected clear(e?: MouseEvent | base.KeyboardEventArgs, properties?: DropDownListModel): void;
    private resetSelection;
    private setHTMLAttributes;
    protected getAriaAttributes(): {
        [key: string]: string;
    };
    protected setEnableRtl(): void;
    private setEnable;
    /**
     * Get the properties to be maintained in the persisted state.
     */
    protected getPersistData(): string;
    protected getLocaleName(): string;
    private preventTabIndex;
    protected targetElement(): HTMLElement | HTMLInputElement;
    protected getNgDirective(): string;
    protected getElementByText(text: string): Element;
    protected getElementByValue(value: string | number | boolean): Element;
    private initValue;
    protected updateValues(): void;
    protected onBlur(e: MouseEvent): void;
    protected focusOutAction(): void;
    protected onFocusOut(): void;
    protected onFocus(e?: FocusEvent | MouseEvent | KeyboardEvent | TouchEvent): void;
    private resetValueHandler;
    protected wireEvent(): void;
    protected bindCommonEvent(): void;
    private bindClearEvent;
    protected unBindCommonEvent(): void;
    protected updateIconState(): void;
    /**
     * Event binding for list
     */
    private wireListEvents;
    private onSearch;
    protected onMouseClick(e: MouseEvent): void;
    private onMouseOver;
    private setHover;
    private onMouseLeave;
    private removeHover;
    protected isValidLI(li: Element | HTMLElement): boolean;
    protected incrementalSearch(e: base.KeyboardEventArgs): void;
    /**
     * Hides the spinner loader.
     * @returns void.
     */
    hideSpinner(): void;
    /**
     * Shows the spinner loader.
     * @returns void.
     */
    showSpinner(): void;
    protected keyActionHandler(e: base.KeyboardEventArgs): void;
    protected selectCurrentItem(e: base.KeyboardEventArgs): void;
    protected isSelectFocusItem(element: Element): boolean;
    private getPageCount;
    private pageUpSelection;
    private pageDownSelection;
    protected unWireEvent(): void;
    /**
     * Event un binding for list items.
     */
    private unWireListEvents;
    protected onDocumentClick(e: MouseEvent): void;
    private activeStateChange;
    private focusDropDown;
    protected dropDownClick(e: MouseEvent): void;
    protected cloneElements(): void;
    protected updateSelectedItem(li: Element, e: MouseEvent | KeyboardEvent | TouchEvent, preventSelect?: boolean, isSelection?: boolean): void;
    private selectEventCallback;
    protected activeItem(li: Element): void;
    protected setValue(e?: base.KeyboardEventArgs): boolean;
    protected setSelection(li: Element, e: MouseEvent | base.KeyboardEventArgs | TouchEvent): void;
    private setSelectOptions;
    private setValueTemplate;
    protected removeSelection(): void;
    protected getItemData(): {
        [key: string]: string;
    };
    /**
     * To trigger the change event for list.
     */
    protected onChangeEvent(eve: MouseEvent | KeyboardEvent | TouchEvent): void;
    private detachChanges;
    protected detachChangeEvent(eve: MouseEvent | KeyboardEvent | TouchEvent): void;
    protected setHiddenValue(): void;
    /**
     * Filter bar implementation
     */
    protected onFilterUp(e: base.KeyboardEventArgs): void;
    protected onFilterDown(e: base.KeyboardEventArgs): void;
    protected removeFillSelection(): void;
    protected getQuery(query: data.Query): data.Query;
    protected getSelectionPoints(): {
        [key: string]: number;
    };
    protected searchLists(e: base.KeyboardEventArgs): void;
    /**
     * To filter the data from given data source by using query
     * @param  {Object[] | data.DataManager } dataSource - Set the data source to filter.
     * @param  {data.Query} query - Specify the query to filter the data.
     * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.
     * @return {void}.
     */
    filter(dataSource: {
        [key: string]: Object;
    }[] | data.DataManager | string[] | number[] | boolean[], query?: data.Query, fields?: FieldSettingsModel): void;
    private filteringAction;
    protected setSearchBox(popupElement: HTMLElement): inputs.InputObject;
    protected onInput(): void;
    protected onActionFailure(e: Object): void;
    protected onActionComplete(ulElement: HTMLElement, list: {
        [key: string]: Object;
    }[], e?: Object, isUpdated?: boolean): void;
    private addNewItem;
    protected updateActionCompleteData(li: HTMLElement, item: {
        [key: string]: Object;
    }): void;
    private focusIndexItem;
    protected updateSelection(): void;
    protected removeFocus(): void;
    protected renderPopup(): void;
    private checkCollision;
    private getOffsetValue;
    private createPopup;
    private isEmptyList;
    protected getFocusElement(): void;
    private isFilterLayout;
    private scrollHandler;
    private setSearchBoxPosition;
    private setPopupPosition;
    private setWidth;
    private scrollBottom;
    private scrollTop;
    protected isEditTextBox(): boolean;
    protected isFiltering(): boolean;
    protected isPopupButton(): boolean;
    protected setScrollPosition(e?: base.KeyboardEventArgs): void;
    private clearText;
    private listScroll;
    private closePopup;
    private destroyPopup;
    private clickOnBackIcon;
    /**
     * To Initialize the control rendering
     * @private
     */
    render(): void;
    private setFooterTemplate;
    private setHeaderTemplate;
    protected setOldText(text: string): void;
    protected setOldValue(value: string | number | boolean): void;
    protected refreshPopup(): void;
    private checkDatasource;
    protected updateDataSource(props?: DropDownListModel): void;
    protected checkCustomValue(): void;
    private updateInputFields;
    /**
     * Dynamically change the value of properties.
     * @private
     */
    onPropertyChanged(newProp: DropDownListModel, oldProp: DropDownListModel): void;
    private checkValidLi;
    private setSelectionData;
    private setCssClass;
    /**
     * Return the module name.
     * @private
     */
    getModuleName(): string;
    /**
     * Opens the popup that displays the list of items.
     * @returns void.
     */
    showPopup(): void;
    /**
     * Hides the popup if it is in an open state.
     * @returns void.
     */
    hidePopup(): void;
    /**
     * Sets the focus on the component for interaction.
     * @returns void.
     */
    focusIn(e?: FocusEvent | MouseEvent | KeyboardEvent | TouchEvent): void;
    /**
     * Moves the focus from the component if the component is already focused.
     * @returns void.
     */
    focusOut(): void;
    /**
     * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.
     * @method destroy
     * @return {void}.
     */
    destroy(): void;
    /**
     * Gets all the list items bound on this component.
     * @returns Element[].
     */
    getItems(): Element[];
}
export interface DropDownListClassList {
    root: string;
    hover: string;
    selected: string;
    rtl: string;
    base: string;
    disable: string;
    input: string;
    inputFocus: string;
    li: string;
    icon: string;
    iconAnimation: string;
    value: string;
    focus: string;
    device: string;
    backIcon: string;
    filterBarClearIcon: string;
    filterInput: string;
    filterParent: string;
    mobileFilter: string;
    footer: string;
    header: string;
    clearIcon: string;
    clearIconHide: string;
    popupFullScreen: string;
    disableIcon: string;
    hiddenElement: string;
}
//node_modules/@syncfusion/ej2-dropdowns/src/drop-down-list/index.d.ts
/**
 * export all modules from current location
 */
//node_modules/@syncfusion/ej2-dropdowns/src/drop-down-tree/drop-down-tree-model.d.ts
/**
 * Interface for a class Fields
 */
export interface FieldsModel {

    /**
     * This field specifies the child items or mapping field for the nested child items which contains an array of JSON objects.
     */
    child?: string | FieldsModel;

    /**
     * Specifies the array of JavaScript objects or instance of Data Manager to populate the dropdown tree items.
     * @default []
     */
    dataSource?: data.DataManager | { [key: string]: Object }[];

    /**
     * This fields specifies the mapping field to define the expanded state of a Dropdown tree item.
     */
    expanded?: string;

    /**
     * This field specifies the mapping field to indicate whether the Dropdown tree item has children or not.
     */
    hasChildren?: string;

    /**
     * Specifies the mapping field for htmlAttributes to be added to the Dropdown Tree item.
     */
    htmlAttributes?: string;

    /**
     * Specifies the mapping field for icon class of each Dropdown Tree item that will be added before the text.
     */
    iconCss?: string;

    /**
     * Specifies the mapping field for image URL of each Dropdown Tree item where image will be added before the text.
     */
    imageUrl?: string;

    /**
     * Specifies the parent value field mapped in data source.
     */
    parentValue?: string;

    /**
     * Defines the external [`Query`](http://ej2.syncfusion.com/documentation/data/api-query.html)
     * that will execute along with data processing.
     * @default null
     */
    query?: any;

    /**
     * Specifies the mapping field for selected state of the Dropdown Tree item.
     */
    selected?: string;

    /**
     * Specifies the table name used to fetch data from a specific table in the server.
     */
    tableName?: string;

    /**
     * Specifies the mapping field for text displayed as Dropdown Tree item's display text.
     */
    text?: string;

    /**
     * Specifies the mapping field for tooltip that will be displayed as hovering text of the Dropdown Tree item.
     */
    tooltip?: string;

    /**
     * Specifies the value(ID) field mapped in data source.
     */
    value?: string;

}

/**
 * Interface for a class TreeSettings
 */
export interface TreeSettingsModel {

    /**
     * Specifies whether the child and parent tree items check states are dependent over each other when checkboxes are enabled.
     * @default false
     */

    autoCheck?: boolean;

    /**
     * Specifies the action on which the parent items in the pop-up should expand/collapse. The available actions are
     * * `Auto` - In desktop, the expand/collapse operation happens when you double-click the node,
     * and in mobile devices it happens on single-tap.
     * * `Click` - The expand/collapse operation happens when you perform single-click/tap 
     * on the pop-up item in both desktop and mobile devices.
     * * `DblClick` - The expand/collapse operation happens when you perform a double-click/tap 
     * on the pop-up item in both desktop and mobile devices.
     * * `None` - The expand/collapse operation will not happen when you perform single-click/tap 
     * or double-click/tap on the pop-up items in both desktop and mobile devices.
     * @default 'Auto'
     */
    expandOn?: ExpandOn;

    /**
     * By default, the load on demand (Lazy load) is set to false.
     * Enabling this property will render only the parent tree items in the popup and
     * the child items will be rendered on demand while expanding the corresponding parent node.
     * @default false
     */
    loadOnDemand?: boolean;

}

/**
 * Interface for a class DropDownTree
 */
export interface DropDownTreeModel extends base.ComponentModel{

    /**
     * Specifies the template that renders to the popup list content of the 
     * Dropdown Tree component when the data fetch request from the remote server fails.
     * @default 'The Request Failed'
     */
    actionFailureTemplate?: string;

    /**
     * When allowFiltering is set to true, show the filter bar (search text box) of the component.
     * The filter action retrieves matched items through the **filtering** event based on the characters typed in the search text box.
     * If no match is found, the value of the **noRecordsTemplate** property will be displayed.
     * 
     * @default false
     */
    allowFiltering?: boolean;

    /**
     * Enables or disables the multi-selection of items. To select multiple items:
     * * Select the items by holding down the **CTRL** key while clicking on the items.
     * * Select consecutive items by clicking the first item to select and hold down the **SHIFT** key and click the last item to select.
     *
     * @default false
     */
    allowMultiSelection?: boolean;

    /**
     * By default, the Dropdown Tree component fires the change event while focus out the component.
     * If you want to fire the change event on every value selection and remove, then disable this property.
     * 
     * @default true
     */
    changeOnBlur?: boolean;

    /**
     * Specifies the CSS classes to be added with the root and popup element of the Dropdown Tree component.
     * that allows customization of appearance.
     * @default ''
     */
    cssClass?: string;

    /**
     * Defines the value separator character in the input element when multi-selection or checkbox is enabled in the Dropdown Tree.
     * The delimiter character is applicable only for **default** and **delimiter** visibility modes.
     * @default ","
     */
    delimiterChar?: string;

    /**
     * Specifies a value that indicates whether the Dropdown Tree component is enabled or not.
     * @default true
     */
    enabled?: boolean;

    /**
     * Specifies the data source and mapping fields to render Dropdown Tree items.
     * @default {value: 'value', text: 'text', dataSource: [], child: 'child', parentValue: 'parentValue', hasChildren: 'hasChildren',
     *  expanded: 'expanded', htmlAttributes: 'htmlAttributes', iconCss: 'iconCss', imageUrl: 'imageUrl',
     *  query: null, selected: 'selected', tableName: null, tooltip: 'tooltip'}
     */
    fields?: FieldsModel;

    /**
     * Accepts the value to be displayed as a watermark text on the filter bar.
     * @default null
     */
    filterBarPlaceholder?: string;

    /**
     * Determines on which filter type, the component needs to be considered on search action.
     * The **TreeFilterType** and its supported data types are,
     * 
     * <table> 
     * <tr> 
     * <td colSpan=1 rowSpan=1><b> 
     * TreeFilterType</b></td><td colSpan=1 rowSpan=1><b> 
     * Description</b></td><td colSpan=1 rowSpan=1><b> 
     * Supported Types</b></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * StartsWith<br/></td><td colSpan=1 rowSpan=1> 
     * Checks whether a value begins with the specified value.<br/></td><td colSpan=1 rowSpan=1> 
     * String<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * EndsWith<br/></td><td colSpan=1 rowSpan=1> 
     * Checks whether a value ends with specified value.<br/></td><td colSpan=1 rowSpan=1> 
     * String<br/></td></tr> 
     * <tr> 
     * <td colSpan=1 rowSpan=1> 
     * Contains<br/></td><td colSpan=1 rowSpan=1> 
     * Checks whether a value contains with specified value.<br/></td><td colSpan=1 rowSpan=1> 
     * String<br/></td></tr> 
     * </table>
     * 
     * The default value set to **StartsWith**, all the suggestion items which starts with typed characters to listed in the
     * suggestion popup.
     * @default 'StartsWith'
     */
    filterType?: TreeFilterType;

    /**
     * Specifies whether to display the floating label above the input element.
     * Possible values are:
     * * Never: The label will never float in the input when the placeholder is available.
     * * Always: The floating label will always float above the input.
     * * Auto: The floating label will float above the input after focusing or entering a value in the input.
     * @default Syncfusion.EJ2.Inputs.FloatLabelType.Never
     * @isEnumeration true
     */
    floatLabelType?: any;

    /**
     * Specifies the template that renders a customized footer container at the bottom of the pop-up list.
     * By default the footerTemplate will be null and there will no footer container for the pop-up list.
     * @default null
     */
    footerTemplate?: string;

    /**
     * When **ignoreAccent** set to true, then ignores the diacritic characters or accents when filtering.
     */
    ignoreAccent?: boolean;

    /**
     * When set to false, consider the case-sensitive on performing the search to find suggestions. By default, consider the casing.
     * @default true
     */
    ignoreCase?: boolean;

    /**
     * Specifies the template that renders a customized header container in the top of the pop-up list.
     * By default the headerTemplate will be null and there will no header container for the pop-up list.
     * @default null
     */
    headerTemplate?: string;

    /**
     * Allows additional HTML attributes such as title, name, etc., and accepts n number of attributes in a key-value pair format.
     * @default {}
     */
    htmlAttributes?: { [key: string]: string; };

    /**
     * Specifies a template to render customized content for all the items.
     * If the itemTemplate property is set, the template content overrides the displayed item text.
     * The property accepts [template string](http://ej2.syncfusion.com/documentation/base/template-engine.html)
     * or HTML element ID holding the content.
     * @default null
     */
    itemTemplate?: string;

    /**
     * Configures visibility mode for component interaction when allowMultiSelection or checkbox is enabled.
     * Different modes are:
     * * Box : Selected items will be visualized in chip.
     * * Delimiter : Selected items will be visualized in text content.
     * * Default : On focus in, the component will act in box mode. On blur component will act in delimiter mode.
     */
    mode?: Mode;

    /**
     * Specifies the template that renders a customized pop-up list content when there no data available to be displayed within the pop-up.
     * @default 'No Records Found'
     */
    noRecordsTemplate?: string;

    /**
     * Specifies a short hint that describes the expected value of the Dropdown Tree component.
     * @default null
     */
    placeholder?: string;

    /**
     * Specifies the height of the pop-up list.
     * @default '300px'
     */
    popupHeight?: string | number;

    /**
     * Specifies the width of the popup list. By default, the popup width sets based on the width of the Dropdown Tree element.
     * @default '100%'
     */
    popupWidth?: string | number;

    /**
     * When set to true, the user interactions on the component are disabled.
     * @default false
     */
    readonly?: boolean;

    /**
     * Specifies whether to show or hide the selectAll checkbox in the pop-up which allows to select all items in the pop-up.
     * @default false
     */
    showSelectAll?: boolean;

    /**
     * Specifies the display text for the selectAll checkbox in the pop-up.
     * @default 'Select All'
     */
    selectAllText?: string;

    /**
     * Enables or disables the checkbox option in the Dropdown Tree component.
     * If enable, the Checkbox will be displayed next to the expand/collapse icon of the tree items.
     * @default false
     */
    showCheckBox?: boolean;

    /**
     * Specifies whether to show or hide the clear icon in textbox.
     * When the clear button is clicked, `value`, `text` properties are reset to null.
     * @default true
     */
    showClearButton?: boolean;

    /**
     * Specifies whether to show or hide the Dropdown button.
     * 
     * @default true
     */
    showDropDownIcon?: boolean;

    /**
     * Specifies a value that indicates whether the items are sorted in the ascending or descending order, or are not sorted at all.
     * The available types of sort order are,
     * * `None` - The items are not sorted.
     * * `Ascending` - The items are sorted in the ascending order.
     * * `Descending` - - The items are sorted in the ascending order.
     * @default 'None'
     */
    sortOrder?: SortOrder;

    /**
     * Gets or sets the display text of the selected item which maps the data **text** field in the component.
     * @default null
     */
    text?: string;

    /**
     * Configures the pop-up tree settings.
     * @default {autoCheck: false, loadOnDemand: true}
     */
    treeSettings?: TreeSettingsModel;

    /**
     * Specifies the display text for the un select all checkbox in the pop-up.
     * @default 'Unselect All'
     */
    unSelectAllText?: string;

    /**
     * Gets or sets the value of selected item(s) which maps the data **value** field in the component.
     * @default null
     * @aspType Object
     */
    value?: string[];

    /**
     * Specifies the width of the component. By default, the component width sets based on the width of its parent container.
     * You can also set the width in pixel values.
     * @default '100%'
     */
    width?: string | number;

    /**
     * specifies the z-index value of the pop-up element.
     * @default 1000
     */
    zIndex?: number;

    /**
     * Triggers when the data fetch request from the remote server fails.
     * @event
     */
    actionFailure?: base.EmitType<Object>;

    /**
     * Fires when popup opens before animation.
     * @event
     */
    beforeOpen?: base.EmitType<DdtBeforeOpenEventArgs>;

    /**
     * Triggers when an item in a popup is selected or when the model value is changed by user.
     * @event
     */
    change?: base.EmitType<DdtChangeEventArgs>;

    /**
     * Fires when popup close after animation completion.
     * @event
     */
    close?: base.EmitType<DdtPopupEventArgs>;

    /**
     * Triggers when the Dropdown Tree input element gets focus-out.
     * @event
     */
    blur?: base.EmitType<Object>;

    /**
     * Triggers when the Dropdown Tree is created successfully.
     * @event
     */
    created?: base.EmitType<Object>;

    /**
     * Triggers when data source is populated in the Dropdown Tree.
     * @event
     */
    dataBound?: base.EmitType<DdtDataBoundEventArgs>;

    /**
     * Triggers when the Dropdown Tree is destroyed successfully.
     * @event
     */
    destroyed?: base.EmitType<Object>;

    /**
     * Triggers on typing a character in the filter bar when the **allowFiltering** is enabled.
     * 
     * @event
     * @blazorProperty 'Filtering'
     */
    filtering?: base.EmitType<DdtFilteringEventArgs>;

    /**
     * Triggers when the Dropdown Tree input element is focused.
     * @event
     */
    focus?: base.EmitType<DdtFocusEventArgs>;

    /**
     * Triggers when key press is successful. It helps to customize the operations at key press.
     * @event
     */
    keyPress?: base.EmitType<DdtKeyPressEventArgs>;

    /**
     * Fires when popup opens after animation completion.
     * @event
     */
    open?: base.EmitType<DdtPopupEventArgs>;

    /**
     * Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.
     * @event
     */
    select?: base.EmitType<DdtSelectEventArgs>;

}
//node_modules/@syncfusion/ej2-dropdowns/src/drop-down-tree/drop-down-tree.d.ts
export type TreeFilterType = 'StartsWith' | 'EndsWith' | 'Contains';
export class Fields extends base.ChildProperty<Fields> {
    /**
     * This field specifies the child items or mapping field for the nested child items which contains an array of JSON objects.
     */
    child: string | FieldsModel;
    /**
     * Specifies the array of JavaScript objects or instance of Data Manager to populate the dropdown tree items.
     * @default []
     */
    dataSource: data.DataManager | {
        [key: string]: Object;
    }[];
    /**
     * This fields specifies the mapping field to define the expanded state of a Dropdown tree item.
     */
    expanded: string;
    /**
     * This field specifies the mapping field to indicate whether the Dropdown tree item has children or not.
     */
    hasChildren: string;
    /**
     * Specifies the mapping field for htmlAttributes to be added to the Dropdown Tree item.
     */
    htmlAttributes: string;
    /**
     * Specifies the mapping field for icon class of each Dropdown Tree item that will be added before the text.
     */
    iconCss: string;
    /**
     * Specifies the mapping field for image URL of each Dropdown Tree item where image will be added before the text.
     */
    imageUrl: string;
    /**
     * Specifies the parent value field mapped in data source.
     */
    parentValue: string;
    /**
     * Defines the external [`Query`](http://ej2.syncfusion.com/documentation/data/api-query.html)
     * that will execute along with data processing.
     * @default null
     */
    query: data.Query;
    /**
     * Specifies the mapping field for selected state of the Dropdown Tree item.
     */
    selected: string;
    /**
     * Specifies the table name used to fetch data from a specific table in the server.
     */
    tableName: string;
    /**
     * Specifies the mapping field for text displayed as Dropdown Tree item's display text.
     */
    text: string;
    /**
     * Specifies the mapping field for tooltip that will be displayed as hovering text of the Dropdown Tree item.
     */
    tooltip: string;
    /**
     * Specifies the value(ID) field mapped in data source.
     */
    value: string;
}
export class TreeSettings extends base.ChildProperty<TreeSettings> {
    /**
     * Specifies whether the child and parent tree items check states are dependent over each other when checkboxes are enabled.
     * @default false
     */
    autoCheck: boolean;
    /**
     * Specifies the action on which the parent items in the pop-up should expand/collapse. The available actions are
     * * `Auto` - In desktop, the expand/collapse operation happens when you double-click the node,
     * and in mobile devices it happens on single-tap.
     * * `Click` - The expand/collapse operation happens when you perform single-click/tap
     * on the pop-up item in both desktop and mobile devices.
     * * `DblClick` - The expand/collapse operation happens when you perform a double-click/tap
     * on the pop-up item in both desktop and mobile devices.
     * * `None` - The expand/collapse operation will not happen when you perform single-click/tap
     * or double-click/tap on the pop-up items in both desktop and mobile devices.
     * @default 'Auto'
     */
    expandOn: ExpandOn;
    /**
     * By default, the load on demand (Lazy load) is set to false.
     * Enabling this property will render only the parent tree items in the popup and
     * the child items will be rendered on demand while expanding the corresponding parent node.
     * @default false
     */
    loadOnDemand: boolean;
}
export interface DdtChangeEventArgs {
    /**
     * If the event is triggered by interaction, it returns true. Otherwise, it returns false.
     */
    isInteracted: boolean;
    /**
     * Returns the component previous values.
     */
    oldValue: string[];
    /**
     * Returns the updated component values.
     */
    value: string[];
    /**
     * Specifies the original event.
     */
    e: MouseEvent | KeyboardEvent;
    /**
     * Returns the root element of the component.
     */
    element: HTMLElement;
}
export interface DdtBeforeOpenEventArgs {
    /**
     * Illustrates whether the current action needs to be prevented or not.
     */
    cancel: boolean;
}
export interface DdtPopupEventArgs {
    /**
     * Specifies the pop-up object.
     */
    popup: any;
}
export interface DdtDataBoundEventArgs {
    /**
     * Return the DropDownTree data.
     */
    data: {
        [key: string]: Object;
    }[];
}
export interface DdtFocusEventArgs {
    /**
     * Specifies whether the element is interacted while focusing or not.
     */
    isInteracted?: boolean;
    /**
     * Specifies the original event.
     */
    event?: MouseEvent | FocusEvent | TouchEvent | KeyboardEvent;
}
export interface DdtFilteringEventArgs {
    /**
     * To prevent the internal filtering action.
     */
    preventDefaultAction: boolean;
    /**
     * Gets the `input` event arguments.
     */
    event: Event;
    /**
     * Illustrates whether the current action needs to be prevented or not.
     */
    cancel: boolean;
    /**
     * Filter text value.
     */
    text: string;
    /**
     * Gets or sets the fields of Dropdown Tree.
     */
    fields: FieldsModel;
}
export interface DdtSelectEventArgs {
    /**
     * Return the name of action like select or un-select.
     */
    action: string;
    /**
     * If the event is triggered by interacting the Dropdown Tree, it returns true. Otherwise, it returns false.
     */
    isInteracted: boolean;
    /**
     * Return the currently selected Dropdown item.
     */
    item: HTMLLIElement;
    /**
     * Return the currently selected item as JSON object from data source.
     */
    itemData: {
        [key: string]: Object;
    };
}
export interface DdtKeyPressEventArgs {
    /**
     * If you want to cancel this event then, set cancel as true. Otherwise, false.
     */
    cancel: boolean;
    /**
     * Return the actual event.
     */
    event: base.KeyboardEventArgs;
}
export type Mode = 'Default' | 'Delimiter' | 'Box';
export type SortOrder = 'None' | 'Ascending' | 'Descending';
export type ExpandOn = 'Auto' | 'Click' | 'DblClick' | 'None';
/**
 * The Dropdown Tree control allows you to select single or multiple values from hierarchical data in a tree-like structure.
 * It has several out-of-the-box features, such as data binding, check boxes, templates, filter,
 * UI customization, accessibility, and preselected values.
 * ```html
 *  <input type="text" id="tree"></input>
 * ```
 * ```typescript
 *  let ddtObj: DropDownTree = new DropDownTree();
 *  ddtObj.appendTo("#tree");
 * ```
 */
export class DropDownTree extends base.Component<HTMLElement> implements base.INotifyPropertyChanged {
    private inputEle;
    private inputObj;
    private hiddenElement;
    private isReverseUpdate;
    private checkSelectAll;
    private inputWrapper;
    private popupDiv;
    private tree;
    private isPopupOpen;
    private inputFocus;
    private popupObj;
    private treeObj;
    private overAllClear;
    private isClearButtonClick;
    private isDocumentClick;
    private isFirstRender;
    private isInitialized;
    private treeDataType;
    private oldValue;
    private removeValue;
    private currentValue;
    private currentText;
    private treeItems;
    private filterTimer;
    private filterContainer;
    private isRemoteData;
    private selectedText;
    private chipWrapper;
    private chipCollection;
    private isChipDelete;
    private checkAllParent;
    private selectAllSpan;
    private checkBoxElement;
    private checkWrapper;
    private isNodeSelected;
    private dataValue;
    private popupEle;
    private isDynamicChange;
    private header;
    private footer;
    private noRecord;
    private headerTemplateId;
    private footerTemplateId;
    private l10n;
    private actionFailureTemplateId;
    private noRecordsTemplateId;
    private isValueChange;
    private keyEventArgs;
    private keyboardModule;
    private keyConfigs;
    private isBlazorPlatForm;
    private isFilteredData;
    private isFilterRestore;
    private treeData;
    private selectedData;
    private filterObj;
    private filterDelayTime;
    private nestedTableUpdate;
    /**
     * Specifies the template that renders to the popup list content of the
     * Dropdown Tree component when the data fetch request from the remote server fails.
     * @default 'The Request Failed'
     */
    actionFailureTemplate: string;
    /**
     * When allowFiltering is set to true, show the filter bar (search text box) of the component.
     * The filter action retrieves matched items through the **filtering** event based on the characters typed in the search text box.
     * If no match is found, the value of the **noRecordsTemplate** property will be displayed.
     *
     * @default false
     */
    allowFiltering: boolean;
    /**
     * Enables or disables the multi-selection of items. To select multiple items:
     * * Select the items by holding down the **CTRL** key while clicking on the items.
     * * Select consecutive items by clicking the first item to select and hold down the **SHIFT** key and click the last item to select.
     *
     * @default false
     */
    allowMultiSelection: boolean;
    /**
     * By default, the Dropdown Tree component fires the change event while focus out the component.
     * If you want to fire the change event on every value selection and remove, then disable this property.
     *
     * @default true
     */
    changeOnBlur: boolean;
    /**
     * Specifies the CSS classes to be added with the root and popup element of the Dropdown Tree component.
     * that allows customization of appearance.
     * @default ''
     */
    cssClass: string;
    /**
     * Defines the value separator character in the input element when multi-selection or checkbox is enabled in the Dropdown Tree.
     * The delimiter character is applicable only for **default** and **delimiter** visibility modes.
     * @default ","
     */
    delimiterChar: string;
    /**
     * Specifies a value that indicates whether the Dropdown Tree component is enabled or not.
     * @default true
     */
    enabled: boolean;
    /**
     * Specifies the data source and mapping fields to render Dropdown Tree items.
     * @default {value: 'value', text: 'text', dataSource: [], child: 'child', parentValue: 'parentValue', hasChildren: 'hasChildren',
     *  expanded: 'expanded', htmlAttributes: 'htmlAttributes', iconCss: 'iconCss', imageUrl: 'imageUrl',
     *  query: null, selected: 'selected', tableName: null, tooltip: 'tooltip'}
     */
    fields: FieldsModel;
    /**
     * Accepts the value to be displayed as a watermark text on the filter bar.
     * @default null
     */
    filterBarPlaceholder: string;
    /**
     * Determines on which filter type, the component needs to be considered on search action.
     * The **TreeFilterType** and its supported data types are,
     *
     * <table>
     * <tr>
     * <td colSpan=1 rowSpan=1><b>
     * TreeFilterType</b></td><td colSpan=1 rowSpan=1><b>
     * Description</b></td><td colSpan=1 rowSpan=1><b>
     * Supported Types</b></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * StartsWith<br/></td><td colSpan=1 rowSpan=1>
     * Checks whether a value begins with the specified value.<br/></td><td colSpan=1 rowSpan=1>
     * String<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * EndsWith<br/></td><td colSpan=1 rowSpan=1>
     * Checks whether a value ends with specified value.<br/></td><td colSpan=1 rowSpan=1>
     * String<br/></td></tr>
     * <tr>
     * <td colSpan=1 rowSpan=1>
     * Contains<br/></td><td colSpan=1 rowSpan=1>
     * Checks whether a value contains with specified value.<br/></td><td colSpan=1 rowSpan=1>
     * String<br/></td></tr>
     * </table>
     *
     * The default value set to **StartsWith**, all the suggestion items which starts with typed characters to listed in the
     * suggestion popup.
     * @default 'StartsWith'
     */
    filterType: TreeFilterType;
    /**
     * Specifies whether to display the floating label above the input element.
     * Possible values are:
     * * Never: The label will never float in the input when the placeholder is available.
     * * Always: The floating label will always float above the input.
     * * Auto: The floating label will float above the input after focusing or entering a value in the input.
     * @default Syncfusion.EJ2.Inputs.FloatLabelType.Never
     * @isEnumeration true
     */
    floatLabelType: inputs.FloatLabelType;
    /**
     * Specifies the template that renders a customized footer container at the bottom of the pop-up list.
     * By default the footerTemplate will be null and there will no footer container for the pop-up list.
     * @default null
     */
    footerTemplate: string;
    /**
     * When **ignoreAccent** set to true, then ignores the diacritic characters or accents when filtering.
     */
    ignoreAccent: boolean;
    /**
     * When set to false, consider the case-sensitive on performing the search to find suggestions. By default, consider the casing.
     * @default true
     */
    ignoreCase: boolean;
    /**
     * Specifies the template that renders a customized header container in the top of the pop-up list.
     * By default the headerTemplate will be null and there will no header container for the pop-up list.
     * @default null
     */
    headerTemplate: string;
    /**
     * Allows additional HTML attributes such as title, name, etc., and accepts n number of attributes in a key-value pair format.
     * @default {}
     */
    htmlAttributes: {
        [key: string]: string;
    };
    /**
     * Specifies a template to render customized content for all the items.
     * If the itemTemplate property is set, the template content overrides the displayed item text.
     * The property accepts [template string](http://ej2.syncfusion.com/documentation/base/template-engine.html)
     * or HTML element ID holding the content.
     * @default null
     */
    itemTemplate: string;
    /**
     * Configures visibility mode for component interaction when allowMultiSelection or checkbox is enabled.
     * Different modes are:
     * * Box : Selected items will be visualized in chip.
     * * Delimiter : Selected items will be visualized in text content.
     * * Default : On focus in, the component will act in box mode. On blur component will act in delimiter mode.
     */
    mode: Mode;
    /**
     * Specifies the template that renders a customized pop-up list content when there no data available to be displayed within the pop-up.
     * @default 'No Records Found'
     */
    noRecordsTemplate: string;
    /**
     * Specifies a short hint that describes the expected value of the Dropdown Tree component.
     * @default null
     */
    placeholder: string;
    /**
     * Specifies the height of the pop-up list.
     * @default '300px'
     */
    popupHeight: string | number;
    /**
     * Specifies the width of the popup list. By default, the popup width sets based on the width of the Dropdown Tree element.
     * @default '100%'
     */
    popupWidth: string | number;
    /**
     * When set to true, the user interactions on the component are disabled.
     * @default false
     */
    readonly: boolean;
    /**
     * Specifies whether to show or hide the selectAll checkbox in the pop-up which allows to select all items in the pop-up.
     * @default false
     */
    showSelectAll: boolean;
    /**
     * Specifies the display text for the selectAll checkbox in the pop-up.
     * @default 'Select All'
     */
    selectAllText: string;
    /**
     * Enables or disables the checkbox option in the Dropdown Tree component.
     * If enable, the Checkbox will be displayed next to the expand/collapse icon of the tree items.
     * @default false
     */
    showCheckBox: boolean;
    /**
     * Specifies whether to show or hide the clear icon in textbox.
     * When the clear button is clicked, `value`, `text` properties are reset to null.
     * @default true
     */
    showClearButton: boolean;
    /**
     * Specifies whether to show or hide the Dropdown button.
     *
     * @default true
     */
    showDropDownIcon: boolean;
    /**
     * Specifies a value that indicates whether the items are sorted in the ascending or descending order, or are not sorted at all.
     * The available types of sort order are,
     * * `None` - The items are not sorted.
     * * `Ascending` - The items are sorted in the ascending order.
     * * `Descending` - - The items are sorted in the ascending order.
     * @default 'None'
     */
    sortOrder: SortOrder;
    /**
     * Gets or sets the display text of the selected item which maps the data **text** field in the component.
     * @default null
     */
    text: string;
    /**
     * Configures the pop-up tree settings.
     * @default {autoCheck: false, loadOnDemand: true}
     */
    treeSettings: TreeSettingsModel;
    /**
     * Specifies the display text for the un select all checkbox in the pop-up.
     * @default 'Unselect All'
     */
    unSelectAllText: string;
    /**
     * Gets or sets the value of selected item(s) which maps the data **value** field in the component.
     * @default null
     * @aspType Object
     */
    value: string[];
    /**
     * Specifies the width of the component. By default, the component width sets based on the width of its parent container.
     * You can also set the width in pixel values.
     * @default '100%'
     */
    width: string | number;
    /**
     * specifies the z-index value of the pop-up element.
     * @default 1000
     */
    zIndex: number;
    /**
     * Triggers when the data fetch request from the remote server fails.
     * @event
     */
    actionFailure: base.EmitType<Object>;
    /**
     * Fires when popup opens before animation.
     * @event
     */
    beforeOpen: base.EmitType<DdtBeforeOpenEventArgs>;
    /**
     * Triggers when an item in a popup is selected or when the model value is changed by user.
     * @event
     */
    change: base.EmitType<DdtChangeEventArgs>;
    /**
     * Fires when popup close after animation completion.
     * @event
     */
    close: base.EmitType<DdtPopupEventArgs>;
    /**
     * Triggers when the Dropdown Tree input element gets focus-out.
     * @event
     */
    blur: base.EmitType<Object>;
    /**
     * Triggers when the Dropdown Tree is created successfully.
     * @event
     */
    created: base.EmitType<Object>;
    /**
     * Triggers when data source is populated in the Dropdown Tree.
     * @event
     */
    dataBound: base.EmitType<DdtDataBoundEventArgs>;
    /**
     * Triggers when the Dropdown Tree is destroyed successfully.
     * @event
     */
    destroyed: base.EmitType<Object>;
    /**
     * Triggers on typing a character in the filter bar when the **allowFiltering** is enabled.
     *
     * @event
     * @blazorProperty 'Filtering'
     */
    filtering: base.EmitType<DdtFilteringEventArgs>;
    /**
     * Triggers when the Dropdown Tree input element is focused.
     * @event
     */
    focus: base.EmitType<DdtFocusEventArgs>;
    /**
     * Triggers when key press is successful. It helps to customize the operations at key press.
     * @event
     */
    keyPress: base.EmitType<DdtKeyPressEventArgs>;
    /**
     * Fires when popup opens after animation completion.
     * @event
     */
    open: base.EmitType<DdtPopupEventArgs>;
    /**
     * Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.
     * @event
     */
    select: base.EmitType<DdtSelectEventArgs>;
    constructor(options?: DropDownTreeModel, element?: string | HTMLElement);
    /**
     * Get the properties to be maintained in the persisted state.
     * @returns string
     * @hidden
     */
    getPersistData(): string;
    /**
     * Initialize the event handler.
     * @private
     */
    protected preRender(): void;
    /**
     * To Initialize the control rendering
     * @private
     */
    render(): void;
    private ensureAutoCheck;
    private hideCheckAll;
    private renderFilter;
    private filterChangeHandler;
    private filterHandler;
    private nestedFilter;
    private nestedChildFilter;
    private selfReferencefilter;
    private isMatchedNode;
    private wireEvents;
    private wireTreeEvents;
    private wireCheckAllWrapperEvents;
    private unWireEvents;
    private dropDownClick;
    private mouseIn;
    private onMouseLeave;
    protected getDirective(): string;
    private focusOut;
    private onFocusOut;
    private triggerChangeEvent;
    private compareValues;
    private focusIn;
    private treeAction;
    private keyActionHandler;
    private checkAllAction;
    private windowResize;
    protected getAriaAttributes(): {
        [key: string]: string;
    };
    private createHiddenElement;
    private createClearIcon;
    private validationAttribute;
    private createChip;
    private getValidMode;
    private createSelectAllWrapper;
    private clickHandler;
    private changeState;
    private setLocale;
    private setAttributes;
    private setHTMLAttributes;
    private updateDataAttribute;
    private showOverAllClear;
    private setTreeValue;
    private setTreeText;
    private setSelectedValue;
    private setValidValue;
    private getItems;
    private getNestedItems;
    private getChildType;
    private renderTree;
    private renderPopup;
    private updatePopupHeight;
    private createPopup;
    private setElementWidth;
    private setWidth;
    private getHeight;
    private onDocumentClick;
    private onActionFailure;
    private OnDataBound;
    private restoreFilterSelection;
    private setCssClass;
    private setEnableRTL;
    private setEnable;
    private cloneFields;
    private cloneChildField;
    private getTreeFields;
    private getTreeChildren;
    private getTreeDataType;
    private setFields;
    private getEventArgs;
    private onBeforeSelect;
    private onNodeSelected;
    private onNodeClicked;
    private onNodeChecked;
    private beforeCheck;
    private updateClearButton;
    private updateDropDownIconState;
    private updateMode;
    private ensureClearIconPosition;
    private setMultiSelectValue;
    private setMultiSelect;
    private getSelectedData;
    private removeSelectedData;
    private updateSelectedValues;
    private setChipValues;
    private setSelectAllWrapper;
    private setHeaderTemplate;
    private templateComplier;
    private setFooterTemplate;
    private clearAll;
    private removeChip;
    private resetValue;
    private clearCheckAll;
    private selectAllItems;
    private updateTreeSettings;
    private updateCheckBoxState;
    private updateTemplate;
    private l10nUpdate;
    private ddtupdateBlazorTemplates;
    private ddtresetBlazorTemplates;
    private updateRecordTemplate;
    private updateMultiSelection;
    private updateAllowFiltering;
    private updateFilterPlaceHolder;
    private updateValue;
    private updateText;
    private updateModelMode;
    /**
     * Dynamically change the value of properties.
     * @private
     */
    onPropertyChanged(newProp: DropDownTreeModel, oldProp: DropDownTreeModel): void;
    /**
     * Allows you to clear the selected values from the Dropdown Tree component.
     * @method clear
     * @return {void}.
     */
    clear(): void;
    /**
     * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.
     * @method destroy
     * @return {void}.
     */
    destroy(): void;
    private destroyFilter;
    /**
     * Ensures visibility of the Dropdown Tree item by using item value or item element.
     * When many Dropdown Tree items are present and we need to find a particular item, `ensureVisible` property
     * helps to bring the item to visibility by expanding the Dropdown Tree and scrolling to the specific item.
     * @param  {string | Element} item - Specifies value of Dropdown Tree item/ Dropdown Tree item element.
     */
    ensureVisible(item: string | Element): void;
    /**
     * To get the updated data of source of the Dropdown Tree.
     * @param  {string | Element} item - Specifies value of Dropdown Tree item/ Dropdown Tree item element.
     * @returns { { [key: string]: Object }[] }.
     */
    getData(item?: string | Element): {
        [key: string]: Object;
    }[];
    /**
     * Close the Dropdown tree pop-up.
     * @returns void.
     */
    hidePopup(): void;
    /**
     * Based on the state parameter, entire list item will be selected/deselected.
     * parameter
     * `true`   - Selects entire Dropdown Tree items.
     * `false`  - Un Selects entire Dropdown Tree items.
     * @returns void
     */
    selectAll(state: boolean): void;
    /**
     * Opens the popup that displays the Dropdown Tree items.
     * @returns void.
     */
    showPopup(): void;
    /**
     * Return the module name.
     * @private
     */
    getModuleName(): string;
}
//node_modules/@syncfusion/ej2-dropdowns/src/drop-down-tree/index.d.ts
/**
 * export all modules from current location
 */
//node_modules/@syncfusion/ej2-dropdowns/src/index.d.ts
/**
 * export all modules from current location
 */
//node_modules/@syncfusion/ej2-dropdowns/src/list-box/index.d.ts
/**
 * export all modules from current location
 */
//node_modules/@syncfusion/ej2-dropdowns/src/list-box/list-box-model.d.ts
/**
 * Interface for a class SelectionSettings
 */
export interface SelectionSettingsModel {
    /**
     * Specifies the selection modes. The possible values are
     * * `Single`: Allows you to select a single item in the ListBox.
     * * `Multiple`: Allows you to select more than one item in the ListBox.
     * @default 'Multiple'
     */
    mode?: SelectionMode;
    /**
     * If 'showCheckbox' is set to true, then 'checkbox' will be visualized in the list item.
     * @default false
     */
    showCheckbox?: boolean;
    /**
     * Allows you to either show or hide the selectAll option on the component.
     * @default false
     */
    showSelectAll?: boolean;
    /**
     * Set the position of the checkbox.
     * @default 'Left'
     */
    checkboxPosition?: CheckBoxPosition;
}
/**
 * Interface for a class ToolbarSettings
 */
export interface ToolbarSettingsModel {
    /**
     * Specifies the list of tools for dual ListBox.
     * The predefined tools are 'moveUp', 'moveDown', 'lists.moveTo', 'moveFrom', 'moveAllTo', and 'moveAllFrom'.
     * @default []
     */
    items?: string[];
    /**
     * Positions the toolbar before/after the ListBox.
     * The possible values are:
     * * Left: The toolbar will be positioned to the left of the ListBox.
     * * Right: The toolbar will be positioned to the right of the ListBox.
     * @default 'Right'
     */
    position?: ToolBarPosition;
}
/**
 * Interface for a class ListBox
 */
export interface ListBoxModel extends DropDownBaseModel{
    /**
     * Sets the CSS classes to root element of this component, which helps to customize the
     * complete styles.
     * @default ''
     */
    cssClass?: string;
    /**
     * Sets the specified item to the selected state or gets the selected item in the ListBox.
     * @default []
     * @aspType object
     * @isGenericType true
     */
    value?: string[] | number[] | boolean[];
    /**
     * Sets the height of the ListBox component.
     * @default ''
     */
    height?: number | string;
    /**
     * If 'allowDragAndDrop' is set to true, then you can perform drag and drop of the list item.
     * ListBox contains same 'scope' property enables drag and drop between multiple ListBox.
     * @default false
     */
    allowDragAndDrop?: boolean;
    /**
     * Sets limitation to the value selection.
     * based on the limitation, list selection will be prevented.
     * @default 1000
     */
    maximumSelectionLength?: number;
    /**
     * To enable the filtering option in this component. 
     * Filter action performs when type in search box and collect the matched item through `filtering` event.
     * If searching character does not match, `noRecordsTemplate` property value will be shown.
     * @default false
     */
    allowFiltering?: boolean;
    /**
     * Defines the scope value to group sets of draggable and droppable ListBox.
     * A draggable with the same scope value will be accepted by the droppable.
     * @default ''
     */
    scope?: string;
    /**
     * When set to ‘false’, consider the `case-sensitive` on performing the search to find suggestions.
     * By default consider the casing.
     * @default true
     * @private
     */
    ignoreCase?: boolean;
    /**
     * Triggers while rendering each list item.
     * @event
     * @blazorProperty 'OnItemRender'
     */
    beforeItemRender?: base.EmitType<BeforeItemRenderEventArgs>;
    /**
     * Triggers on typing a character in the component.
     * @event
     * @blazorProperty 'ItemSelected'
     */
    filtering?: base.EmitType<FilteringEventArgs>;
    /**
     * Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.
     * @event
     * @private
     */
    select?: base.EmitType<SelectEventArgs>;
    /**
     * Triggers while select / unselect the list item.
     * @event
     * @blazorProperty 'ValueChange'
     */
    change?: base.EmitType<ListBoxChangeEventArgs>;
    /**
     * Triggers after dragging the list item.
     * @event
     * @blazorProperty 'DragStart'
     */
    dragStart?: base.EmitType<DragEventArgs>;
    /**
     * Triggers while dragging the list item.
     * @event
     * @blazorProperty 'Dragging'
     */
    drag?: base.EmitType<DragEventArgs>;
    /**
     * Triggers before dropping the list item on another list item.
     * @event
     * @blazorProperty 'Dropped'
     */
    drop?: base.EmitType<DragEventArgs>;
    /**
     * Triggers when data source is populated in the list.
     * @event
     * @private
     */
    dataBound?: base.EmitType<Object>;
    /**
     * Accepts the template design and assigns it to the group headers present in the list.
     * @default null
     * @private
     */
    groupTemplate?: string;
    /**
     * Accepts the template design and assigns it to list of component
     * when no data is available on the component.
     * @default 'No Records Found'
     * @private
     */
    noRecordsTemplate?: string;
    /**
     * Accepts the template and assigns it to the list content of the component
     * when the data fetch request from the remote server fails.
     * @default 'The Request Failed'
     * @private
     */
    actionFailureTemplate?: string;
    /**
     * specifies the z-index value of the component popup element.
     * @default 1000
     * @private
     */
    zIndex?: number;
    /**
     * ignoreAccent set to true, then ignores the diacritic characters or accents when filtering.
     * @private
     */
    ignoreAccent?: boolean;
    /**
     * Specifies the toolbar items and its position.
     * @default { items: [], position: 'Right' }
     */
    toolbarSettings?: ToolbarSettingsModel;
    /**
     * Specifies the selection mode and its type.
     * @default { mode: 'Multiple', type: 'Default' }
     */
    selectionSettings?: SelectionSettingsModel;
}
//node_modules/@syncfusion/ej2-dropdowns/src/list-box/list-box.d.ts

export  type SelectionMode = 'Multiple' | 'Single';
export  type ToolBarPosition = 'Left' | 'Right';
export  type CheckBoxPosition = 'Left' | 'Right';
 type obj = {
    [key: string]: object;
};
export  class SelectionSettings extends base.ChildProperty<SelectionSettings> {
    /**
     * Specifies the selection modes. The possible values are
     * * `Single`: Allows you to select a single item in the ListBox.
     * * `Multiple`: Allows you to select more than one item in the ListBox.
     * @default 'Multiple'
     */
    mode: SelectionMode;
    /**
     * If 'showCheckbox' is set to true, then 'checkbox' will be visualized in the list item.
     * @default false
     */
    showCheckbox: boolean;
    /**
     * Allows you to either show or hide the selectAll option on the component.
     * @default false
     */
    showSelectAll: boolean;
    /**
     * Set the position of the checkbox.
     * @default 'Left'
     */
    checkboxPosition: CheckBoxPosition;
}
export  class ToolbarSettings extends base.ChildProperty<ToolbarSettings> {
    /**
     * Specifies the list of tools for dual ListBox.
     * The predefined tools are 'moveUp', 'moveDown', 'moveTo', 'moveFrom', 'moveAllTo', and 'moveAllFrom'.
     * @default []
     */
    items: string[];
    /**
     * Positions the toolbar before/after the ListBox.
     * The possible values are:
     * * Left: The toolbar will be positioned to the left of the ListBox.
     * * Right: The toolbar will be positioned to the right of the ListBox.
     * @default 'Right'
     */
    position: ToolBarPosition;
}
/**
 * The ListBox is a graphical user interface component used to display a list of items.
 * Users can select one or more items in the list using a checkbox or by keyboard selection.
 * It supports sorting, grouping, reordering, and drag and drop of items.
 * ```html
 * <select id="listbox">
 *      <option value='1'>Badminton</option>
 *      <option value='2'>Basketball</option>
 *      <option value='3'>Cricket</option>
 *      <option value='4'>Football</option>
 *      <option value='5'>Tennis</option>
 * </select>
 * ```
 * ```typescript
 * <script>
 *   var listObj = new ListBox();
 *   listObj.appendTo("#listbox");
 * </script>
 * ```
 */
export  class ListBox extends DropDownBase {
    private prevSelIdx;
    private listCurrentOptions;
    private allowDragAll;
    private checkBoxSelectionModule;
    private tBListBox;
    private initLoad;
    private spinner;
    private initialSelectedOptions;
    private showSelectAll;
    private selectAllText;
    private unSelectAllText;
    private popupWrapper;
    private targetInputElement;
    private isValidKey;
    private isFiltered;
    private remoteFilterAction;
    private mainList;
    private remoteCustomValue;
    private filterParent;
    protected inputString: string;
    protected filterInput: HTMLInputElement;
    /**
     * Sets the CSS classes to root element of this component, which helps to customize the
     * complete styles.
     * @default ''
     */
    cssClass: string;
    /**
     * Sets the specified item to the selected state or gets the selected item in the ListBox.
     * @default []
     * @aspType object
     * @isGenericType true
     */
    value: string[] | number[] | boolean[];
    /**
     * Sets the height of the ListBox component.
     * @default ''
     */
    height: number | string;
    /**
     * If 'allowDragAndDrop' is set to true, then you can perform drag and drop of the list item.
     * ListBox contains same 'scope' property enables drag and drop between multiple ListBox.
     * @default false
     */
    allowDragAndDrop: boolean;
    /**
     * Sets limitation to the value selection.
     * based on the limitation, list selection will be prevented.
     * @default 1000
     */
    maximumSelectionLength: number;
    /**
     * To enable the filtering option in this component.
     * Filter action performs when type in search box and collect the matched item through `filtering` event.
     * If searching character does not match, `noRecordsTemplate` property value will be shown.
     * @default false
     */
    allowFiltering: boolean;
    /**
     * Defines the scope value to group sets of draggable and droppable ListBox.
     * A draggable with the same scope value will be accepted by the droppable.
     * @default ''
     */
    scope: string;
    /**
     * When set to ‘false’, consider the `case-sensitive` on performing the search to find suggestions.
     * By default consider the casing.
     * @default true
     * @private
     */
    ignoreCase: boolean;
    /**
     * Triggers while rendering each list item.
     * @event
     * @blazorProperty 'OnItemRender'
     */
    beforeItemRender: base.EmitType<BeforeItemRenderEventArgs>;
    /**
     * Triggers on typing a character in the component.
     * @event
     * @blazorProperty 'ItemSelected'
     */
    filtering: base.EmitType<FilteringEventArgs>;
    /**
     * Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.
     * @event
     * @private
     */
    select: base.EmitType<SelectEventArgs>;
    /**
     * Adds a new item to the popup list. By default, new item appends to the list as the last item,
     * but you can insert based on the index parameter.
     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.
     * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.
     * @return {void}.
     * @private
     */
    addItem(items: {
        [key: string]: Object;
    }[] | {
        [key: string]: Object;
    } | string | boolean | number | string[] | boolean[] | number[], itemIndex?: number): void;
    /**
     * Triggers while select / unselect the list item.
     * @event
     * @blazorProperty 'ValueChange'
     */
    change: base.EmitType<ListBoxChangeEventArgs>;
    /**
     * Triggers after dragging the list item.
     * @event
     * @blazorProperty 'DragStart'
     */
    dragStart: base.EmitType<DragEventArgs>;
    /**
     * Triggers while dragging the list item.
     * @event
     * @blazorProperty 'Dragging'
     */
    drag: base.EmitType<DragEventArgs>;
    /**
     * Triggers before dropping the list item on another list item.
     * @event
     * @blazorProperty 'Dropped'
     */
    drop: base.EmitType<DragEventArgs>;
    /**
     * Triggers when data source is populated in the list.
     * @event
     * @private
     */
    dataBound: base.EmitType<Object>;
    /**
     * Accepts the template design and assigns it to the group headers present in the list.
     * @default null
     * @private
     */
    groupTemplate: string;
    /**
     * Accepts the template design and assigns it to list of component
     * when no data is available on the component.
     * @default 'No Records Found'
     * @private
     */
    noRecordsTemplate: string;
    /**
     * Accepts the template and assigns it to the list content of the component
     * when the data fetch request from the remote server fails.
     * @default 'The Request Failed'
     * @private
     */
    actionFailureTemplate: string;
    /**
     * specifies the z-index value of the component popup element.
     * @default 1000
     * @private
     */
    zIndex: number;
    /**
     * ignoreAccent set to true, then ignores the diacritic characters or accents when filtering.
     * @private
     */
    ignoreAccent: boolean;
    /**
     * Specifies the toolbar items and its position.
     * @default { items: [], position: 'Right' }
     */
    toolbarSettings: ToolbarSettingsModel;
    /**
     * Specifies the selection mode and its type.
     * @default { mode: 'Multiple', type: 'Default' }
     */
    selectionSettings: SelectionSettingsModel;
    /**
     * Constructor for creating the ListBox component.
     */
    constructor(options?: ListBoxModel, element?: string | HTMLElement);
    /**
     * Build and render the component
     * @private
     */
    render(): void;
    private initWrapper;
    private initDraggable;
    private initToolbar;
    private createButtons;
    protected validationAttribute(input: HTMLInputElement, hiddenSelect: HTMLSelectElement): void;
    private setHeight;
    private setCssClass;
    private setEnable;
    protected showSpinner(): void;
    protected hideSpinner(): void;
    private onInput;
    protected onActionComplete(ulElement: HTMLElement, list: obj[] | boolean[] | string[] | number[], e?: Object): void;
    private initToolbarAndStyles;
    private triggerDragStart;
    private triggerDrag;
    private dragEnd;
    private removeSelected;
    private getCurIdx;
    private getComponent;
    protected listOption(dataSource: obj[] | string[] | number[] | boolean[], fields: FieldSettingsModel): FieldSettingsModel;
    private triggerBeforeItemRender;
    requiredModules(): base.ModuleDeclaration[];
    /**
     * This method is used to enable or disable the items in the ListBox based on the items and enable argument.
     * @param items Text items that needs to be enabled/disabled.
     * @param enable Set `true`/`false` to enable/disable the list items.
     * @returns void
     */
    enableItems(items: string[], enable?: boolean): void;
    /**
     * Based on the state parameter, specified list item will be selected/deselected.
     * @param items Array of text value of the item.
     * @param state Set `true`/`false` to select/un select the list items.
     * @returns void
     */
    selectItems(items: string[], state?: boolean): void;
    /**
     * Based on the state parameter, entire list item will be selected/deselected.
     * @param state Set `true`/`false` to select/un select the entire list items.
     * @returns void
     */
    selectAll(state?: boolean): void;
    /**
     * Adds a new item to the list. By default, new item appends to the list as the last item,
     * but you can insert based on the index parameter.
     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.
     * @param { number } itemIndex - Specifies the index to place the newly added item in the list.
     * @returns {void}.
     */
    addItems(items: obj[] | obj, itemIndex?: number): void;
    /**
     * Removes a item from the list. By default, removed the last item in the list,
     * but you can remove based on the index parameter.
     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.
     * @param { number } itemIndex - Specifies the index to remove the item from the list.
     * @returns {void}.
     */
    removeItems(items?: obj[] | obj, itemIndex?: number): void;
    /**
     * Removes a item from the list. By default, removed the last item in the list,
     * but you can remove based on the index parameter.
     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.
     * @param { number } itemIndex - Specifies the index to remove the item from the list.
     * @returns {void}.
     */
    removeItem(items?: {
        [key: string]: Object;
    }[] | {
        [key: string]: Object;
    } | string | boolean | number | string[] | boolean[] | number[], itemIndex?: number): void;
    private updateLiCollection;
    private selectAllItems;
    private updateMainList;
    private wireEvents;
    private wireToolbarEvent;
    private unwireEvents;
    private clickHandler;
    private checkSelectAll;
    protected getQuery(query: data.Query): data.Query;
    private setFiltering;
    private selectHandler;
    private triggerChange;
    private getDataByElems;
    private checkMaxSelection;
    private toolbarClickHandler;
    private moveUpDown;
    private moveTo;
    private moveFrom;
    /**
     * Called internally if any of the property value changed.
     * @returns void
     * @private
     */
    private moveData;
    private moveAllTo;
    private moveAllFrom;
    private moveAllData;
    private changeData;
    private getSelectedItems;
    private getScopedListBox;
    private getDragArgs;
    private onKeyDown;
    private keyDownStatus;
    private keyDownHandler;
    private upDownKeyHandler;
    private KeyUp;
    private filteringAction;
    protected targetElement(): string;
    private dataUpdater;
    private focusOutHandler;
    private getValidIndex;
    private updateSelectedOptions;
    private clearSelection;
    private setSelection;
    private updateSelectTag;
    private updateToolBarState;
    private setCheckboxPosition;
    private showCheckbox;
    private isSelected;
    private getSelectTag;
    private getToolElem;
    private formResetHandler;
    /**
     * Return the module name.
     * @private
     */
    getModuleName(): string;
    /**
     * Get the properties to be maintained in the persisted state.
     */
    protected getPersistData(): string;
    protected getLocaleName(): string;
    destroy(): void;
    /**
     * Called internally if any of the property value changed.
     * @returns void
     * @private
     */
    onPropertyChanged(newProp: ListBoxModel, oldProp: ListBoxModel): void;
}
/**
 * Interface for before item render event.
 */
export interface BeforeItemRenderEventArgs extends base.BaseEventArgs {
    element: Element;
    item: {
        [key: string]: Object;
    };
}
/**
 * Interface for drag and drop event.
 */
export interface DragEventArgs {
    elements: Element[];
    items: Object[];
    target?: Element;
    dragSelected?: boolean;
}
/**
 * Interface for change event args.
 */
export interface ListBoxChangeEventArgs extends base.BaseEventArgs {
    elements: Element[];
    items: Object[];
    value: number | string | boolean;
    event: Event;
}
//node_modules/@syncfusion/ej2-dropdowns/src/multi-select/checkbox-selection.d.ts
/**
 * The Multiselect enable CheckBoxSelection call this inject module.
 */
export  class CheckBoxSelection {
    private parent;
    private checkAllParent;
    private selectAllSpan;
    filterInput: HTMLInputElement;
    private filterInputObj;
    private backIconElement;
    private clearIconElement;
    private checkWrapper;
    list: HTMLElement;
    private activeLi;
    private activeEle;
    constructor(parent?: IMulitSelect);
    getModuleName(): string;
    addEventListener(): void;
    removeEventListener(): void;
    listOption(args: {
        [key: string]: Object;
    }): void;
    private setPlaceholder;
    private checboxCreate;
    private setSelectAll;
    destroy(): void;
    listSelection(args: IUpdateListArgs): void;
    private validateCheckNode;
    private clickHandler;
    private changeState;
    protected setSearchBox(args: IUpdateListArgs): inputs.InputObject | void;
    private clickOnBackIcon;
    private clearText;
    private setDeviceSearchBox;
    private setSearchBoxPosition;
    protected targetElement(): string;
    private onBlur;
    protected onDocumentClick(e: MouseEvent): void;
    private getFocus;
    private checkSelectAll;
    private setLocale;
    private getActiveList;
    private setReorder;
}
export interface ItemCreatedArgs {
    curData: {
        [key: string]: Object;
    };
    item: HTMLElement;
    text: string;
}
export interface IUpdateListArgs {
    module: string;
    enable: boolean;
    li: HTMLElement;
    e: MouseEvent | base.KeyboardEventArgs;
    popupElement: HTMLElement;
    value: string;
    index: number;
}
//node_modules/@syncfusion/ej2-dropdowns/src/multi-select/float-label.d.ts
/**
 * Function to create Float Label element.
 * @param overAllWrapper - overall wrapper of multiselect.
 * @param element - the given html element.
 * @param inputElement - specify the input wrapper.
 * @param value - Value of the MultiSelect.
 * @param floatLabelType - Specify the FloatLabel Type.
 * @param placeholder - Specify the PlaceHolder text.
 */
export  function createFloatLabel(overAllWrapper: HTMLDivElement, searchWrapper: HTMLElement, element: HTMLElement, inputElement: HTMLInputElement, value: number[] | string[] | boolean[], floatLabelType: inputs.FloatLabelType, placeholder: string): void;
/**
 * Function to update status of the Float Label element.
 * @param value - Value of the MultiSelect.
 * @param label - float label element.
 */
export  function updateFloatLabelState(value: string[] | number[] | boolean[], label: HTMLElement): void;
/**
 * Function to remove Float Label element.
 * @param overAllWrapper - overall wrapper of multiselect.
 * @param componentWrapper - wrapper element of multiselect.
 * @param searchWrapper - search wrapper of multiselect.
 * @param inputElement - specify the input wrapper.
 * @param value - Value of the MultiSelect.
 * @param floatLabelType - Specify the FloatLabel Type.
 * @param placeholder - Specify the PlaceHolder text.
 */
export  function removeFloating(overAllWrapper: HTMLDivElement, componentWrapper: HTMLDivElement, searchWrapper: HTMLElement, inputElement: HTMLInputElement, value: number[] | string[] | boolean[], floatLabelType: inputs.FloatLabelType, placeholder: string): void;
/**
 * Function to set the placeholder to the element.
 * @param value - Value of the MultiSelect.
 * @param inputElement - specify the input wrapper.
 * @param placeholder - Specify the PlaceHolder text.
 */
export  function setPlaceHolder(value: number[] | string[] | boolean[], inputElement: HTMLInputElement, placeholder: string): void;
/**
 * Function for focusing the Float Element.
 * @param overAllWrapper - overall wrapper of multiselect.
 * @param componentWrapper - wrapper element of multiselect.
 */
export  function floatLabelFocus(overAllWrapper: HTMLDivElement, componentWrapper: HTMLDivElement): void;
/**
 * Function to focus the Float Label element.
 * @param overAllWrapper - overall wrapper of multiselect.
 * @param componentWrapper - wrapper element of multiselect.
 * @param value - Value of the MultiSelect.
 * @param floatLabelType - Specify the FloatLabel Type.
 * @param placeholder - Specify the PlaceHolder text.
 */
export  function floatLabelBlur(overAllWrapper: HTMLDivElement, componentWrapper: HTMLDivElement, value: number[] | string[] | boolean[], floatLabelType: inputs.FloatLabelType, placeholder: string): void;
//node_modules/@syncfusion/ej2-dropdowns/src/multi-select/index.d.ts
/**
 * export all modules from current location
 */
//node_modules/@syncfusion/ej2-dropdowns/src/multi-select/interface.d.ts
/**
 * Specifies mulitselct interfaces.
 * @hidden
 */
export interface IMulitSelect extends base.Component<HTMLElement> {
    listCurrentOptions?: {
        [key: string]: Object;
    };
    inputElement?: HTMLInputElement;
    popupWrapper?: HTMLDivElement;
    selectAll?(state?: boolean): void;
    selectAllHeight?: number;
    searchBoxHeight?: number;
    onInput?(): void;
    filterInput?: HTMLInputElement;
    KeyUp?(e?: base.KeyboardEventArgs): void;
    onKeyDown?(e?: base.KeyboardEventArgs): void;
    mainList?: HTMLElement;
    list?: HTMLElement;
    listData?: {
        [key: string]: Object;
    }[];
    targetElement?(): string;
    targetInputElement?: HTMLInputElement | string;
    selectAllText?: string;
    unSelectAllText?: string;
    popupObj?: popups.Popup;
    onDocumentFocus?: boolean;
    selectAllItems?(status: boolean, event?: MouseEvent): void;
    hidePopup?(): void;
    refreshPopup?(): void;
    refreshListItems?(data?: string): void;
    filterBarPlaceholder?: string;
    overAllWrapper?: HTMLDivElement;
    searchWrapper?: HTMLElement;
    componentWrapper?: HTMLDivElement;
    templateList?: {
        [key: string]: Object;
    };
    itemTemplate?: string;
    headerTemplate?: string;
    mobFilter?: boolean;
    header?: HTMLElement;
    updateDelimView?(): void;
    updateValueState?(event?: base.KeyboardEventArgs | MouseEvent, newVal?: [string | number], oldVal?: [string | number]): void;
    tempValues?: [number | string];
    value?: [number | string];
    refreshInputHight?(): void;
    refreshPlaceHolder?(): void;
    ulElement?: HTMLElement;
    hiddenElement?: HTMLSelectElement;
    dispatchEvent?(element?: HTMLElement, type?: string): void;
    inputFocus?: boolean;
    enableSelectionOrder?: boolean;
    focusAtFirstListItem(): void;
    isPopupOpen(): boolean;
    showSelectAll: boolean;
    scrollFocusStatus: boolean;
    focused: boolean;
    onBlur(eve?: MouseEvent): void;
    keyAction?: boolean;
    removeFocus?(): void;
    getLocaleName?(): string;
    filterParent: HTMLElement;
    enableGroupCheckBox: boolean;
}
//node_modules/@syncfusion/ej2-dropdowns/src/multi-base.select/multi-base.select-model.d.ts
/**
 * Interface for a class MultiSelect
 */
export interface MultiSelectModel extends DropDownBaseModel{
    /**
     * Specifies a Boolean value that indicates the whether the grouped list items are 
     * allowed to check by checking the group header in checkbox mode.
     * By default, there is no checkbox provided for group headers.
     * This property allows you to render checkbox for group headers and to base.select 
     * all the grouped items at once
     * @default false
     */
    enableGroupCheckBox?: boolean;
    /**
     * Sets the CSS classes to root element of this component which helps to customize the
     * complete styles.
     * @default null
     */
    cssClass?: string;
    /**
     * Gets or sets the width of the component. By default, it sizes based on its parent.
     * container dimension.
     * @default '100%'
     * @aspType string
     * @blazorType string
     */
    width?: string | number;
    /**
     * Gets or sets the height of the popup list. By default it renders based on its list item.
     * > For more details about the popup configuration refer to 
     * [`popups.Popup Configuration`](../../multi-base.select/getting-started/#configure-the-popup-list) documentation.
     * 
     * @default '300px'
     * @aspType string
     * @blazorType string
     */
    popupHeight?: string | number;
    /**
     * Gets or sets the width of the popup list and percentage values has calculated based on input width.
     * > For more details about the popup configuration refer to 
     * [`popups.Popup Configuration`](../../multi-base.select/getting-started/#configure-the-popup-list) documentation.
     * 
     * @default '100%'
     * @aspType string
     * @blazorType string
     */
    popupWidth?: string | number;
    /**
     * Gets or sets the placeholder in the component to display the given information
     * in input when no item selected. 
     * @default null
     */
    placeholder?: string;
    /**
     * Accepts the value to be displayed as a watermark text on the filter bar. 
     * @default null
     */
    filterBarPlaceholder?: string;
    /**
     * Gets or sets the additional attribute to `HtmlAttributes` property in MultiSelect,
     * which helps to add attribute like title, name etc, input should be key value pair.
     * 
     * {% codeBlock src="multiselect/html-base.attributes-api/index.ts" %}{% endcodeBlock %}
     * 
     * {% codeBlock src="multiselect/html-base.attributes-api/index.html" %}{% endcodeBlock %}
     * @default {}
     */
    htmlAttributes?: { [key: string]: string;
 };
    /**
     * Accepts the template design and assigns it to the selected list item in the input element of the component.
     * For more details about the available template options refer to 
     * [`Template`](../../multi-base.select/templates) documentation.
     * 
     * We have built-in `template engine`
     * which provides options to base.compile template string into a executable function. 
     * For EX: We have expression evolution as like ES6 expression string literals.
     * @default null
     */
    valueTemplate?: string;
    /**
     * Accepts the template design and assigns it to the header container of the popup list.
     * > For more details about the available template options refer to [`Template`](../../multi-base.select/templates) documentation.
     * 
     * @default null
     */
    headerTemplate?: string;
    /**
     * Accepts the template design and assigns it to the footer container of the popup list.
     * > For more details about the available template options refer to [`Template`](../../multi-base.select/templates) documentation.
     * 
     * @default null
     */
    footerTemplate?: string;
    /**
     * Accepts the template design and assigns it to each list item present in the popup.
     * > For more details about the available template options refer to [`Template`](../../multi-base.select/templates) documentation.
     * 
     * We have built-in `template engine`
     * which provides options to base.compile template string into a executable function. 
     * For EX: We have expression evolution as like ES6 expression string literals.
     * @default null
     */
    itemTemplate?: string;
    /**
     * To enable the filtering option in this component. 
     * Filter action performs when type in search box and collect the matched item through `filtering` event.
     * If searching character does not match, `noRecordsTemplate` property value will be shown.
     * 
     * {% codeBlock src="multiselect/allow-filtering-api/index.ts" %}{% endcodeBlock %}
     * 
     * {% codeBlock src="multiselect/allow-filtering-api/index.html" %}{% endcodeBlock %}
     * 
     * @default null
     */
    allowFiltering?: boolean;
    /**
     * Allows user to add a 
     * [`custom value`](../../multi-base.select/custom-value), the value which is not present in the suggestion list.
     * @default false
     */
    allowCustomValue?: boolean;
    /**
     * Enables close icon with the each selected item.
     * @default true
     */
    showClearButton?: boolean;
    /**
     * Sets limitation to the value selection.
     * based on the limitation, list selection will be prevented.
     * @default 1000
     * @blazorType int
     */
    maximumSelectionLength?: number;
    /**
     * Gets or sets the `readonly` to input or not. Once enabled, just you can copy or highlight 
     * the text however tab key action will perform.
     * 
     * @default false
     */
    readonly?: boolean;
    /**
     * Selects the list item which maps the data `text` field in the component.
     * @default null
     */
    text?: string;
    /**
     * Selects the list item which maps the data `value` field in the component.
     * @default null
     * @isGenericType true
     */
    value?: number[] | string[] | boolean[];
    /**
     * Hides the selected item from the list item.
     * @default true
     */
    hideSelectedItem?: boolean;
    /**
     * Based on the property, when item get base.select popup visibility state will changed.
     * @default true
     */
    closePopupOnSelect?: boolean;
    /**
     * configures visibility mode for component interaction.
     * 
     *   - `Box` - selected items will be visualized in chip.
     * 
     *   - `Delimiter` - selected items will be visualized in text content.
     * 
     *   - `Default` - on `focus in` component will act in `box` mode.
     *    on `blur` component will act in `delimiter` mode.
     * 
     *   - `CheckBox` - The 'checkbox' will be visualized in list item.
     * 
     * {% codeBlock src="multiselect/visual-mode-api/index.ts" %}{% endcodeBlock %}
     * 
     * {% codeBlock src="multiselect/visual-mode-api/index.html" %}{% endcodeBlock %}
     * 
     * @default Default
     */
    mode?: visualMode;
    /**
     * Sets the delimiter character for 'default' and 'delimiter' visibility modes.
     * @default ','
     */
    delimiterChar?: string;
    /**
     * Sets [`case sensitive`](../../multi-base.select/filtering/#case-sensitive-filtering)
     * option for filter operation.
     * @default true
     */
    ignoreCase?: boolean;
    /**
     * Allows you to either show or hide the DropDown button on the component
     * 
     * @default false
     */
    showDropDownIcon?: boolean;
    /**
     * Specifies whether to display the floating label above the input element.
     * Possible values are:
     * * Never: The label will never float in the input when the placeholder is available.
     * * Always: The floating label will always float above the input.
     * * Auto: The floating label will float above the input after focusing or entering a value in the input.
     * 
     * @default Syncfusion.EJ2.Inputs.inputs.FloatLabelType.Never
     * @aspType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     * @isEnumeration true
     * @blazorType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     */
    floatLabelType?: inputs.FloatLabelType;
    /**
     * Allows you to either show or hide the selectAll option on the component.
     * 
     * @default false
     */
    showSelectAll?: boolean;
    /**
     * Specifies the selectAllText to be displayed on the component.
     * 
     * @default 'base.select All'
     */
    selectAllText?: string;
    /**
     * Specifies the UnSelectAllText to be displayed on the component.
     * 
     * @default 'base.select All'
     */
    unSelectAllText?: string;
    /**
     * Reorder the selected items in popup visibility state.
     * 
     * @default true
     */
    enableSelectionOrder?: boolean;
    /**
     * Whether to automatically open the popup when the control is clicked.
     * @default true
     */
    openOnClick?: boolean;
    /**
     * Fires each time when selection changes happened in list items after model and input value get affected.
     * @event
     * @blazorProperty 'ValueChange'
     */
    change?: base.EmitType<MultiSelectChangeEventArgs>;
    /**
     * Fires before the selected item removed from the widget.
     * @event
     * @blazorProperty 'OnValueRemove'
     */
    removing?: base.EmitType<RemoveEventArgs>;
    /**
     * Fires after the selected item removed from the widget.
     * @event
     * @blazorProperty 'ValueRemoved'
     */
    removed?: base.EmitType<RemoveEventArgs>;
    /**
     * Fires after base.select all process completion.
     * @event
     * @blazorProperty 'SelectedAll'
     */
    selectedAll?: base.EmitType<ISelectAllEventArgs>;
    /**
     * Fires when popup opens before animation.
     * @event
     * @blazorProperty 'OnOpen'
     * @blazorType BeforeOpenEventArgs
     */
    beforeOpen?: base.EmitType<Object>;
    /**
     * Fires when popup opens after animation completion.
     * @event
     * @blazorProperty 'Opened'
     */
    open?: base.EmitType<PopupEventArgs>;
    /**
     * Fires when popup close after animation completion.
     * @event
     * @blazorProperty 'OnClose'
     */
    close?: base.EmitType<PopupEventArgs>;
    /**
     * base.Event triggers when the input get focus-out.
     * @event
     */
    blur?: base.EmitType<Object>;
    /**
     * base.Event triggers when the input get focused.
     * @event
     */
    focus?: base.EmitType<Object>;
    /**
     * base.Event triggers when the chip selection.
     * @event
     * @blazorProperty 'ChipSelected'
     */
    chipSelection?: base.EmitType<Object>;
    /**
     * Triggers event,when user types a text in search box.
     * > For more details about filtering, refer to [`Filtering`](../../multi-base.select/filtering) documentation.
     * 
     * @event
     * @blazorProperty 'Filtering'
     */
    filtering?: base.EmitType<FilteringEventArgs>;
    /**
     * Fires before set the selected item as chip in the component.
     * > For more details about chip customization refer [`Chip Customization`](../../multi-base.select/chip-customization)
     * 
     * @event
     * @blazorProperty 'OnChipTag'
     */
    tagging?: base.EmitType<TaggingEventArgs>;
    /**
     * Triggers when the [`customValue`](../../multi-base.select/custom-value) is selected.
     * @event
     * @blazorProperty 'CustomValueSpecifier'
     */
    customValueSelection?: base.EmitType<CustomValueEventArgs>;
}
//node_modules/@syncfusion/ej2-dropdowns/src/multi-select/multi-select.d.ts

export interface RemoveEventArgs extends SelectEventArgs {
}
/**
 * The Multiselect allows the user to pick a more than one value from list of predefined values.
 * ```html
 * <select id="list">
 *      <option value='1'>Badminton</option>
 *      <option value='2'>Basketball</option>
 *      <option value='3'>Cricket</option>
 *      <option value='4'>Football</option>
 *      <option value='5'>Tennis</option>
 * </select>
 * ```
 * ```typescript
 * <script>
 *   var multiselectObj = new Multiselect();
 *   multiselectObj.appendTo("#list");
 * </script>
 * ```
 */
export  class MultiSelect extends DropDownBase implements inputs.IInput {
    private spinnerElement;
    private selectAllAction;
    private setInitialValue;
    private setDynValue;
    private listCurrentOptions;
    private targetInputElement;
    private selectAllHeight?;
    private searchBoxHeight?;
    private mobFilter?;
    private isFiltered;
    private isFirstClick;
    private focused;
    private initial;
    private backCommand;
    private keyAction;
    /**
     * Specifies a Boolean value that indicates the whether the grouped list items are
     * allowed to check by checking the group header in checkbox mode.
     * By default, there is no checkbox provided for group headers.
     * This property allows you to render checkbox for group headers and to select
     * all the grouped items at once
     * @default false
     */
    enableGroupCheckBox: boolean;
    /**
     * Sets the CSS classes to root element of this component which helps to customize the
     * complete styles.
     * @default null
     */
    cssClass: string;
    /**
     * Gets or sets the width of the component. By default, it sizes based on its parent.
     * container dimension.
     * @default '100%'
     * @aspType string
     * @blazorType string
     */
    width: string | number;
    /**
     * Gets or sets the height of the popup list. By default it renders based on its list item.
     * > For more details about the popup configuration refer to
     * [`Popup Configuration`](../../multi-select/getting-started/#configure-the-popup-list) documentation.
     *
     * @default '300px'
     * @aspType string
     * @blazorType string
     */
    popupHeight: string | number;
    /**
     * Gets or sets the width of the popup list and percentage values has calculated based on input width.
     * > For more details about the popup configuration refer to
     * [`Popup Configuration`](../../multi-select/getting-started/#configure-the-popup-list) documentation.
     *
     * @default '100%'
     * @aspType string
     * @blazorType string
     */
    popupWidth: string | number;
    /**
     * Gets or sets the placeholder in the component to display the given information
     * in input when no item selected.
     * @default null
     */
    placeholder: string;
    /**
     * Accepts the value to be displayed as a watermark text on the filter bar.
     * @default null
     */
    filterBarPlaceholder: string;
    /**
     * Gets or sets the additional attribute to `HtmlAttributes` property in MultiSelect,
     * which helps to add attribute like title, name etc, input should be key value pair.
     *
     * {% codeBlock src="multiselect/html-attributes-api/index.ts" %}{% endcodeBlock %}
     *
     * {% codeBlock src="multiselect/html-attributes-api/index.html" %}{% endcodeBlock %}
     * @default {}
     */
    htmlAttributes: {
        [key: string]: string;
    };
    /**
     * Accepts the template design and assigns it to the selected list item in the input element of the component.
     * For more details about the available template options refer to
     * [`Template`](../../multi-select/templates) documentation.
     *
     * We have built-in `template engine`
     * which provides options to compile template string into a executable function.
     * For EX: We have expression evolution as like ES6 expression string literals.
     * @default null
     */
    valueTemplate: string;
    /**
     * Accepts the template design and assigns it to the header container of the popup list.
     * > For more details about the available template options refer to [`Template`](../../multi-select/templates) documentation.
     *
     * @default null
     */
    headerTemplate: string;
    /**
     * Accepts the template design and assigns it to the footer container of the popup list.
     * > For more details about the available template options refer to [`Template`](../../multi-select/templates) documentation.
     *
     * @default null
     */
    footerTemplate: string;
    /**
     * Accepts the template design and assigns it to each list item present in the popup.
     * > For more details about the available template options refer to [`Template`](../../multi-select/templates) documentation.
     *
     * We have built-in `template engine`
     * which provides options to compile template string into a executable function.
     * For EX: We have expression evolution as like ES6 expression string literals.
     * @default null
     */
    itemTemplate: string;
    /**
     * To enable the filtering option in this component.
     * Filter action performs when type in search box and collect the matched item through `filtering` event.
     * If searching character does not match, `noRecordsTemplate` property value will be shown.
     *
     * {% codeBlock src="multiselect/allow-filtering-api/index.ts" %}{% endcodeBlock %}
     *
     * {% codeBlock src="multiselect/allow-filtering-api/index.html" %}{% endcodeBlock %}
     *
     * @default null
     */
    allowFiltering: boolean;
    /**
     * Allows user to add a
     * [`custom value`](../../multi-select/custom-value), the value which is not present in the suggestion list.
     * @default false
     */
    allowCustomValue: boolean;
    /**
     * Enables close icon with the each selected item.
     * @default true
     */
    showClearButton: boolean;
    /**
     * Sets limitation to the value selection.
     * based on the limitation, list selection will be prevented.
     * @default 1000
     * @blazorType int
     */
    maximumSelectionLength: number;
    /**
     * Gets or sets the `readonly` to input or not. Once enabled, just you can copy or highlight
     * the text however tab key action will perform.
     *
     * @default false
     */
    readonly: boolean;
    /**
     * Selects the list item which maps the data `text` field in the component.
     * @default null
     */
    text: string;
    /**
     * Selects the list item which maps the data `value` field in the component.
     * @default null
     * @isGenericType true
     */
    value: number[] | string[] | boolean[];
    /**
     * Hides the selected item from the list item.
     * @default true
     */
    hideSelectedItem: boolean;
    /**
     * Based on the property, when item get select popup visibility state will changed.
     * @default true
     */
    closePopupOnSelect: boolean;
    /**
     * configures visibility mode for component interaction.
     *
     *   - `Box` - selected items will be visualized in chip.
     *
     *   - `Delimiter` - selected items will be visualized in text content.
     *
     *   - `Default` - on `focus in` component will act in `box` mode.
     *    on `blur` component will act in `delimiter` mode.
     *
     *   - `CheckBox` - The 'checkbox' will be visualized in list item.
     *
     * {% codeBlock src="multiselect/visual-mode-api/index.ts" %}{% endcodeBlock %}
     *
     * {% codeBlock src="multiselect/visual-mode-api/index.html" %}{% endcodeBlock %}
     *
     * @default Default
     */
    mode: visualMode;
    /**
     * Sets the delimiter character for 'default' and 'delimiter' visibility modes.
     * @default ','
     */
    delimiterChar: string;
    /**
     * Sets [`case sensitive`](../../multi-select/filtering/#case-sensitive-filtering)
     * option for filter operation.
     * @default true
     */
    ignoreCase: boolean;
    /**
     * Allows you to either show or hide the DropDown button on the component
     *
     * @default false
     */
    showDropDownIcon: boolean;
    /**
     * Specifies whether to display the floating label above the input element.
     * Possible values are:
     * * Never: The label will never float in the input when the placeholder is available.
     * * Always: The floating label will always float above the input.
     * * Auto: The floating label will float above the input after focusing or entering a value in the input.
     *
     * @default Syncfusion.EJ2.Inputs.inputs.FloatLabelType.Never
     * @aspType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     * @isEnumeration true
     * @blazorType Syncfusion.EJ2.Inputs.inputs.FloatLabelType
     */
    floatLabelType: inputs.FloatLabelType;
    /**
     * Allows you to either show or hide the selectAll option on the component.
     *
     * @default false
     */
    showSelectAll: boolean;
    /**
     * Specifies the selectAllText to be displayed on the component.
     *
     * @default 'select All'
     */
    selectAllText: string;
    /**
     * Specifies the UnSelectAllText to be displayed on the component.
     *
     * @default 'select All'
     */
    unSelectAllText: string;
    /**
     * Reorder the selected items in popup visibility state.
     *
     * @default true
     */
    enableSelectionOrder: boolean;
    /**
     * Whether to automatically open the popup when the control is clicked.
     * @default true
     */
    openOnClick: boolean;
    /**
     * Fires each time when selection changes happened in list items after model and input value get affected.
     * @event
     * @blazorProperty 'ValueChange'
     */
    change: base.EmitType<MultiSelectChangeEventArgs>;
    /**
     * Fires before the selected item removed from the widget.
     * @event
     * @blazorProperty 'OnValueRemove'
     */
    removing: base.EmitType<RemoveEventArgs>;
    /**
     * Fires after the selected item removed from the widget.
     * @event
     * @blazorProperty 'ValueRemoved'
     */
    removed: base.EmitType<RemoveEventArgs>;
    /**
     * Fires after select all process completion.
     * @event
     * @blazorProperty 'SelectedAll'
     */
    selectedAll: base.EmitType<ISelectAllEventArgs>;
    /**
     * Fires when popup opens before animation.
     * @event
     * @blazorProperty 'OnOpen'
     * @blazorType BeforeOpenEventArgs
     */
    beforeOpen: base.EmitType<Object>;
    /**
     * Fires when popup opens after animation completion.
     * @event
     * @blazorProperty 'Opened'
     */
    open: base.EmitType<PopupEventArgs>;
    /**
     * Fires when popup close after animation completion.
     * @event
     * @blazorProperty 'OnClose'
     */
    close: base.EmitType<PopupEventArgs>;
    /**
     * Event triggers when the input get focus-out.
     * @event
     */
    blur: base.EmitType<Object>;
    /**
     * Event triggers when the input get focused.
     * @event
     */
    focus: base.EmitType<Object>;
    /**
     * Event triggers when the chip selection.
     * @event
     * @blazorProperty 'ChipSelected'
     */
    chipSelection: base.EmitType<Object>;
    /**
     * Triggers event,when user types a text in search box.
     * > For more details about filtering, refer to [`Filtering`](../../multi-select/filtering) documentation.
     *
     * @event
     * @blazorProperty 'Filtering'
     */
    filtering: base.EmitType<FilteringEventArgs>;
    /**
     * Fires before set the selected item as chip in the component.
     * > For more details about chip customization refer [`Chip Customization`](../../multi-select/chip-customization)
     *
     * @event
     * @blazorProperty 'OnChipTag'
     */
    tagging: base.EmitType<TaggingEventArgs>;
    /**
     * Triggers when the [`customValue`](../../multi-select/custom-value) is selected.
     * @event
     * @blazorProperty 'CustomValueSpecifier'
     */
    customValueSelection: base.EmitType<CustomValueEventArgs>;
    /**
     * Constructor for creating the DropDownList widget.
     */
    constructor(option?: MultiSelectModel, element?: string | HTMLElement);
    private isValidKey;
    private mainList;
    ulElement: HTMLElement;
    private mainData;
    private mainListCollection;
    private customValueFlag;
    private inputElement;
    private componentWrapper;
    private overAllWrapper;
    private searchWrapper;
    private viewWrapper;
    private chipCollectionWrapper;
    private overAllClear;
    private dropIcon;
    private hiddenElement;
    private delimiterWrapper;
    private popupObj;
    private inputFocus;
    private header;
    private footer;
    private initStatus;
    private popupWrapper;
    private keyCode;
    private beforePopupOpen;
    private remoteCustomValue;
    private filterAction;
    private remoteFilterAction;
    private selectAllEventData;
    private selectAllEventEle;
    private filterParent;
    private removeIndex;
    private enableRTL;
    requiredModules(): base.ModuleDeclaration[];
    private updateHTMLAttribute;
    private updateReadonly;
    private updateClearButton;
    private updateCssClass;
    private onPopupShown;
    private updateListItems;
    private loadTemplate;
    private setScrollPosition;
    private focusAtFirstListItem;
    private focusAtLastListItem;
    protected getAriaAttributes(): {
        [key: string]: string;
    };
    private updateListARIA;
    private ensureAriaDisabled;
    private removelastSelection;
    protected onActionFailure(e: Object): void;
    protected targetElement(): string;
    private getForQuery;
    protected onActionComplete(ulElement: HTMLElement, list: {
        [key: string]: Object;
    }[] | number[] | boolean[] | string[], e?: Object, isUpdated?: boolean): void;
    private updateActionList;
    private refreshSelection;
    private hideGroupItem;
    private checkSelectAll;
    private openClick;
    private KeyUp;
    /**
     * To filter the data from given data source by using query
     * @param  {Object[] | data.DataManager } dataSource - Set the data source to filter.
     * @param  {data.Query} query - Specify the query to filter the data.
     * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.
     * @return {void}.
     */
    filter(dataSource: {
        [key: string]: Object;
    }[] | data.DataManager | string[] | number[] | boolean[], query?: data.Query, fields?: FieldSettingsModel): void;
    protected getQuery(query: data.Query): data.Query;
    private dataUpdater;
    private tempQuery;
    private tempValues;
    private checkForCustomValue;
    protected getNgDirective(): string;
    private wrapperClick;
    private enable;
    private scrollFocusStatus;
    private keyDownStatus;
    private onBlur;
    private checkPlaceholderSize;
    private setPlaceholderSize;
    private refreshInputHight;
    private validateValues;
    private updateValueState;
    private updateTempValue;
    private getPagingCount;
    private pageUpSelection;
    private pageDownSelection;
    getItems(): Element[];
    private focusInHandler;
    private showDelimWrapper;
    private hideDelimWrapper;
    private expandTextbox;
    private isPopupOpen;
    private refreshPopup;
    private checkTextLength;
    private popupKeyActions;
    private updateAriaAttribute;
    private homeNavigation;
    private onKeyDown;
    private arrowDown;
    private arrowUp;
    private spaceKeySelection;
    private checkBackCommand;
    private keyNavigation;
    private selectByKey;
    private escapeAction;
    private scrollBottom;
    private scrollTop;
    private selectListByKey;
    private refreshListItems;
    private removeSelectedChip;
    private moveByTop;
    private moveByList;
    private updateCheck;
    private moveBy;
    private chipClick;
    private removeChipSelection;
    private addChipSelection;
    private onChipRemove;
    private makeTextBoxEmpty;
    private refreshPlaceHolder;
    private removeValue;
    private updateMainList;
    private removeChip;
    private updateChipStatus;
    private addValue;
    private checkMaxSelection;
    private dispatchSelect;
    private addChip;
    private removeChipFocus;
    private onMobileChipInteraction;
    private getChip;
    private calcPopupWidth;
    private mouseIn;
    private mouseOut;
    protected listOption(dataSource: {
        [key: string]: Object;
    }[], fields: FieldSettingsModel): FieldSettingsModel;
    private renderPopup;
    private setHeaderTemplate;
    private setFooterTemplate;
    private ClearAll;
    private clearAllCallback;
    private windowResize;
    private resetValueHandler;
    protected wireEvent(): void;
    private onInput;
    protected preRender(): void;
    protected getLocaleName(): string;
    private initializeData;
    private updateData;
    private initialTextUpdate;
    protected renderList(isEmptyData?: boolean): void;
    private initialValueUpdate;
    protected updateActionCompleteData(li: HTMLElement, item: {
        [key: string]: Object;
    }): void;
    protected isValidLI(li: Element | HTMLElement): boolean;
    protected updateListSelection(li: Element, e: MouseEvent | base.KeyboardEventArgs, length?: number): void;
    private updateListSelectEventCallback;
    protected removeListSelection(): void;
    private removeHover;
    private removeFocus;
    private addListHover;
    private addListFocus;
    private addListSelection;
    private updateDelimeter;
    private onMouseClick;
    private findGroupStart;
    private findGroupAttrtibutes;
    private updateCheckBox;
    private onMouseOver;
    private onMouseLeave;
    private onListMouseDown;
    private onDocumentClick;
    private wireListEvents;
    private unwireListEvents;
    private hideOverAllClear;
    private showOverAllClear;
    /**
     * Sets the focus to widget for interaction.
     * @returns void
     */
    focusIn(): void;
    /**
     * Remove the focus from widget, if the widget is in focus state.
     * @returns void
     */
    focusOut(): void;
    /**
     * Shows the spinner loader.
     * @returns void.
     */
    showSpinner(): void;
    /**
     * Hides the spinner loader.
     * @returns void.
     */
    hideSpinner(): void;
    private updateDelimView;
    private updateRemainWidth;
    private updateRemainTemplate;
    private updateRemainingText;
    private getOverflowVal;
    private unWireEvent;
    private selectAllItem;
    private updateValue;
    private textboxValueUpdate;
    protected setZIndex(): void;
    protected updateDataSource(prop?: MultiSelectModel): void;
    private onLoadSelect;
    protected selectAllItems(state: boolean, event?: MouseEvent): void;
    /**
     * Get the properties to be maintained in the persisted state.
     */
    protected getPersistData(): string;
    /**
     * Dynamically change the value of properties.
     * @private
     */
    onPropertyChanged(newProp: MultiSelectModel, oldProp: MultiSelectModel): void;
    private reInitializePoup;
    private updateVal;
    /**
     * Hides the popup, if the popup in a open state.
     * @returns void
     */
    hidePopup(): void;
    /**
     * Shows the popup, if the popup in a closed state.
     * @returns void
     */
    showPopup(): void;
    /**
     * Based on the state parameter, entire list item will be selected/deselected.
     * parameter
     * `true`   - Selects entire list items.
     * `false`  - Un Selects entire list items.
     * @returns void
     */
    selectAll(state: boolean): void;
    getModuleName(): string;
    /**
     * To Initialize the control rendering
     * @private
     */
    render(): void;
    private checkInitialValue;
    private checkAutoFocus;
    private setFloatLabelType;
    private dropDownIcon;
    private initialUpdate;
    /**
     * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.
     * @method destroy
     * @return {void}
     */
    destroy(): void;
}
export interface CustomValueEventArgs {
    /**
     * Gets the newly added data.
     * @blazorType object
     */
    newData: Object;
    /**
     * Illustrates whether the current action needs to be prevented or not.
     */
    cancel: boolean;
}
export interface TaggingEventArgs {
    /**
     * If the event is triggered by interaction, it returns true. Otherwise, it returns false.
     */
    isInteracted: boolean;
    /**
     * Returns the selected item as JSON Object from the data source.
     * @blazorType object
     */
    itemData: FieldSettingsModel;
    /**
     * Specifies the original event arguments.
     */
    e: MouseEvent | KeyboardEvent | TouchEvent;
    /**
     * To set the classes to chip element
     * @param  { string } classes - Specify the classes to chip element.
     * @return {void}.
     * @blazorType string
     */
    setClass: Function;
    /**
     * Illustrates whether the current action needs to be prevented or not.
     */
    cancel: boolean;
}
export interface MultiSelectChangeEventArgs {
    /**
     * If the event is triggered by interaction, it returns true. Otherwise, it returns false.
     */
    isInteracted: boolean;
    /**
     * Returns the component initial Value.
     * @isGenericType true
     */
    oldValue: number[] | string[] | boolean[];
    /**
     * Returns the updated component Values.
     * @isGenericType true
     */
    value: number[] | string[] | boolean[];
    /**
     * Specifies the original event arguments.
     */
    e: MouseEvent | KeyboardEvent | TouchEvent;
    /**
     * Returns the root element of the component.
     */
    element: HTMLElement;
}
export  type visualMode = 'Default' | 'Delimiter' | 'Box' | 'CheckBox';
export interface ISelectAllEventArgs {
    /**
     * If the event is triggered by interaction, it returns true. Otherwise, it returns false.
     */
    isInteracted: boolean;
    /**
     * Returns the selected list items.
     */
    items: HTMLLIElement[];
    /**
     * Returns the selected items as JSON Object from the data source.
     * @blazorType object
     */
    itemData: FieldSettingsModel[];
    /**
     * Specifies the original event arguments.
     */
    event: MouseEvent | KeyboardEvent | TouchEvent;
    /**
     * Specifies whether it is selectAll or deSelectAll.
     */
    isChecked?: boolean;
}
 }
export namespace excelExport { 

//node_modules/@syncfusion/ej2-excel-export/src/blob-helper.d.ts
/**
 * BlobHelper class
 * @private
 */
export  class BlobHelper {
    private parts;
    private blob;
    append(part: any): void;
    getBlob(): Blob;
}
//node_modules/@syncfusion/ej2-excel-export/src/cell-style.d.ts
/**
 * CellStyle class
 * @private
 */
export  class CellStyle {
    name: string;
    index: number;
    backColor: string;
    numFmtId: number;
    borders: Borders;
    fontName: string;
    fontSize: number;
    fontColor: string;
    italic: boolean;
    bold: boolean;
    hAlign: HAlignType;
    indent: number;
    rotation: number;
    vAlign: VAlignType;
    underline: boolean;
    wrapText: boolean;
    numberFormat: string;
    type: string;
    isGlobalStyle: boolean;
    constructor();
}
/**
 * Font Class
 * @private
 */
export  class Font {
    b: boolean;
    i: boolean;
    u: boolean;
    sz: number;
    name: string;
    color: string;
    constructor();
}
/**
 * CellXfs class
 * @private
 */
export  class CellXfs {
    numFmtId: number;
    fontId: number;
    fillId: number;
    borderId: number;
    xfId: number;
    applyAlignment: number;
    alignment: Alignment;
}
/**
 * Alignment class
 * @private
 */
export  class Alignment {
    horizontal: string;
    vertical: string;
    wrapText: number;
    indent: number;
    rotation: number;
}
/**
 * CellStyleXfs class
 * @private
 */
export  class CellStyleXfs {
    numFmtId: number;
    fontId: number;
    fillId: number;
    borderId: number;
    alignment: Alignment;
}
/**
 * CellStyles class
 * @private
 */
export  class CellStyles {
    name: string;
    xfId: number;
    constructor();
}
/**
 * NumFmt class
 * @private
 */
export  class NumFmt {
    numFmtId: number;
    formatCode: string;
    constructor();
    constructor(id: number, code: string);
}
/**
 * Border class
 * @private
 */
export  class Border {
    lineStyle: LineStyle;
    color: string;
    constructor();
    constructor(mLine: LineStyle, mColor: string);
}
/**
 * Borders class
 * @private
 */
export  class Borders {
    left: Border;
    right: Border;
    bottom: Border;
    top: Border;
    all: Border;
    constructor();
}
//node_modules/@syncfusion/ej2-excel-export/src/cell.d.ts
/**
 * Worksheet class
 * @private
 */
export  class Cell {
    index: number;
    rowSpan: number;
    colSpan: number;
    value: string | Date | number | boolean;
    formula: string;
    cellStyle: CellStyle;
    styleIndex: number;
    sharedStringIndex: number;
    saveType: string;
    type: string;
    refName: string;
}
/**
 * Cells class
 * @private
 */
export  class Cells extends Array {
    add: (cell: Cell) => void;
}
//node_modules/@syncfusion/ej2-excel-export/src/column.d.ts
/**
 * Column class
 * @private
 */
export  class Column {
    index: number;
    width: number;
}
//node_modules/@syncfusion/ej2-excel-export/src/csv-helper.d.ts
/**
 * CsvHelper class
 * @private
 */
export  class CsvHelper {
    private isMicrosoftBrowser;
    private buffer;
    private csvStr;
    private formatter;
    private globalStyles;
    constructor(json: any);
    private parseWorksheet;
    private parseRows;
    private parseRow;
    private parseCell;
    private parseCellValue;
    /**
     * Saves the file with specified name and sends the file to client browser
     * @param  {string} fileName- file name to save.
     * @param  {Blob} buffer- the content to write in file
     */
    save(fileName: string): void;
    saveAsBlob(): Blob;
}
//node_modules/@syncfusion/ej2-excel-export/src/enum.d.ts
/**
 * LineStyle
 */
export  type LineStyle = 'thin' | 'thick' | 'medium' | 'none';
/**
 * HAlignType
 */
export  type HAlignType = 'center ' | 'justify' | 'left' | 'right' | 'general';
/**
 * VAlignType
 */
export  type VAlignType = 'bottom' | 'center' | 'top';
/**
 * HyperLinkType
 */
export  type HyperLinkType = 'none' | 'url' | 'file' | 'unc' | 'workbook';
/**
 * SaveType
 */
export  type SaveType = 'xlsx' | 'csv';
/**
 * CellType
 * @private
 */
export  type CellType = 
/**
 * Cell containing a boolean.
 */
'b' | 
/**
 * Cell containing an error.
 */
'e' | 
/**
 * Cell containing an (inline) rich string.
 */
'inlineStr' | 
/**
 * Cell containing a number.
 */
'n' | 
/**
 * Cell containing a shared string.
 */
's' | 
/**
 * Cell containing a formula string.
 */
'str' | 
/**
 * Cell containing a formula.
 */
'f';
/**
 * BlobSaveType
 */
export  type BlobSaveType = 
/**
 * MIME Type for .csv file
 */
'text/csv' | 
/**
 * MIME Type for .xlsx file
 */
'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
//node_modules/@syncfusion/ej2-excel-export/src/image.d.ts
/**
 * Image class
 * @private
 */
export  class Image {
    image: string;
    row: number;
    column: number;
    lastRow: number;
    lastColumn: number;
    width: number;
    height: number;
    horizontalFlip: boolean;
    verticalFlip: boolean;
    rotation: number;
    lastRowOffset: number;
    lastColOffset: number;
}
//node_modules/@syncfusion/ej2-excel-export/src/index.d.ts
/**
 * index class
 */
//node_modules/@syncfusion/ej2-excel-export/src/row.d.ts
/**
 * Row class
 * @private
 */
export  class Row {
    height: number;
    index: number;
    cells: Cells;
    spans: string;
    grouping: Grouping;
}
/**
 * Rows class
 * @private
 */
export  class Rows extends Array {
    add: (row: Row) => void;
}
//node_modules/@syncfusion/ej2-excel-export/src/value-formatter.d.ts
/**
 * ValueFormatter class to globalize the value.
 * @private
 */
export  class ValueFormatter {
    private intl;
    constructor(cultureName?: string);
    getFormatFunction(format: base.NumberFormatOptions | base.DateFormatOptions): Function;
    toView(value: number | Date, format: Function): string | Object;
    displayText(value: any, format: base.NumberFormatOptions | base.DateFormatOptions): string;
}
//node_modules/@syncfusion/ej2-excel-export/src/workbook.d.ts
/**
 * Workbook class
 */
export  class Workbook {
    private mArchive;
    private sharedString;
    private sharedStringCount;
    cellStyles: Map<string, CellStyles>;
    mergedCellsStyle: Map<string, {
        x: number;
        y: number;
        styleIndex: number;
    }>;
    private worksheets;
    private builtInProperties;
    private mFonts;
    private mBorders;
    private mFills;
    private mNumFmt;
    private mStyles;
    private mCellXfs;
    private mCellStyleXfs;
    private mergeCells;
    private csvHelper;
    private mSaveType;
    private mHyperLinks;
    private unitsProportions;
    private hyperlinkStyle;
    private printTitles;
    private culture;
    private currency;
    private intl;
    private globalStyles;
    private rgbColors;
    private drawingCount;
    private imageCount;
    constructor(json: any, saveType: SaveType, culture?: string, currencyString?: string);
    private parserBuiltInProperties;
    private parserWorksheets;
    private mergeOptions;
    private applyProperties;
    private getCellName;
    private getColumnName;
    private parserPrintTitle;
    private parserFreezePanes;
    private parserColumns;
    private parserRows;
    private insertMergedCellsStyle;
    private createCell;
    private parserRow;
    private parseGrouping;
    private parseCells;
    private GetColors;
    private processColor;
    private processCellValue;
    private applyGlobalStyle;
    private parserCellStyle;
    private switchNumberFormat;
    private getNumberFormat;
    private parserBorder;
    private processCellStyle;
    private processNumFormatId;
    private isNewFont;
    private isNewBorder;
    private isAllBorder;
    private compareStyle;
    private contains;
    private getCellValueType;
    private parseCellType;
    private parserImages;
    private parserImage;
    saveAsBlob(blobSaveType: BlobSaveType): Promise<{
        blobData: Blob;
    }>;
    save(fileName: string, proxyUrl?: string): void;
    private saveInternal;
    private saveWorkbook;
    private saveWorksheets;
    private saveWorksheet;
    private saveDrawings;
    private updatelastRowOffset;
    private updatelastColumnOffSet;
    private convertToPixels;
    private convertBase64toImage;
    private saveDrawingRelations;
    private pixelsToColumnWidth;
    private ColumnWidthToPixels;
    private trunc;
    private pixelsToRowHeight;
    private saveSheetRelations;
    private saveSheetView;
    private saveSharedString;
    private processString;
    private saveStyles;
    private updateCellXfsStyleXfs;
    private saveNumberFormats;
    private saveFonts;
    private saveFills;
    private saveBorders;
    private saveCellStyles;
    private saveCellStyleXfs;
    private saveCellXfs;
    private saveAlignment;
    private saveApp;
    private saveCore;
    private saveTopLevelRelation;
    private saveWorkbookRelation;
    private saveContentType;
    private addToArchive;
    private processMergeCells;
    private updatedMergedCellStyles;
    /**
     * Returns the tick count corresponding to the given year, month, and day.
     * @param year number value of year
     * @param month number value of month
     * @param day number value of day
     */
    private dateToTicks;
    /**
     * Return the tick count corresponding to the given hour, minute, second.
     * @param hour number value of hour
     * @param minute number value if minute
     * @param second number value of second
     */
    private timeToTicks;
    /**
     * Checks if given year is a leap year.
     * @param year Year value.
     */
    isLeapYear(year: number): boolean;
    /**
     * Converts `DateTime` to the equivalent OLE Automation date.
     */
    private toOADate;
}
/**
 * BuiltInProperties Class
 * @private
 */
export  class BuiltInProperties {
    author: string;
    comments: string;
    category: string;
    company: string;
    manager: string;
    subject: string;
    title: string;
    createdDate: Date;
    modifiedDate: Date;
    tags: string;
    status: string;
}
//node_modules/@syncfusion/ej2-excel-export/src/worksheet.d.ts
/**
 * Worksheet class
 * @private
 */
export  class Worksheet {
    isSummaryRowBelow: boolean;
    index: number;
    columns: Column[];
    rows: Rows;
    freezePanes: FreezePane;
    name: string;
    showGridLines: boolean;
    mergeCells: MergeCells;
    hyperLinks: HyperLink[];
    images: Image[];
}
/**
 * Hyperlink class
 * @private
 */
export  class HyperLink {
    ref: string;
    rId: number;
    toolTip: string;
    location: string;
    display: string;
    target: string;
    type: HyperLinkType;
}
/**
 * Grouping class
 * @private
 */
export  class Grouping {
    outlineLevel: number;
    isCollapsed: boolean;
    isHidden: boolean;
}
/**
 * FreezePane class
 * @private
 */
export  class FreezePane {
    row: number;
    column: number;
    leftCell: string;
}
/**
 * MergeCell
 * @private
 */
export  class MergeCell {
    ref: string;
    x: number;
    width: number;
    y: number;
    height: number;
}
/**
 * MergeCells class
 * @private
 */
export  class MergeCells extends Array {
    add: (mergeCell: MergeCell) => MergeCell;
    static isIntersecting(base: MergeCell, compare: MergeCell): boolean;
}
//node_modules/@syncfusion/ej2-excel-export/src/worksheets.d.ts
/**
 * Worksheets class
 * @private
 */
export  class Worksheets extends Array<Worksheet> {
}
 }
export namespace fileUtils { 

//node_modules/@syncfusion/ej2-file-utils/src/encoding.d.ts
/**
 * Encoding class: Contains the details about encoding type, whether to write a Unicode byte order mark (BOM).
 * ```typescript
 * let encoding : Encoding = new Encoding();
 * encoding.type = 'Utf8';
 * encoding.getBytes('Encoding', 0, 5);
 * ```
 */
export  class Encoding {
    private emitBOM;
    private encodingType;
    /**
     * Gets a value indicating whether to write a Unicode byte order mark
     * @returns boolean- true to specify that a Unicode byte order mark is written;
 otherwise, false
     */
    readonly includeBom: boolean;
    /**
     * Gets the encoding type.
     * @returns EncodingType
     */
    /**
    * Sets the encoding type.
    * @param  {EncodingType} value
    */
    type: EncodingType;
    /**
     * Initializes a new instance of the Encoding class. A parameter specifies whether to write a Unicode byte order mark
     * @param  {boolean} includeBom?-true to specify that a Unicode byte order mark is written;
 otherwise, false.
     */
    constructor(includeBom?: boolean);
    /**
     * Initialize the includeBom to emit BOM or Not
     * @param  {boolean} includeBom
     */
    private initBOM;
    /**
     * Calculates the number of bytes produced by encoding the characters in the specified string
     * @param  {string} chars - The string containing the set of characters to encode
     * @returns {number} - The number of bytes produced by encoding the specified characters
     */
    getByteCount(chars: string): number;
    /**
     * Return the Byte of character
     * @param  {number} codePoint
     * @returns {number}
     */
    private utf8Len;
    /**
     * for 4 byte character return surrogate pair true, otherwise false
     * @param  {number} codeUnit
     * @returns {boolean}
     */
    private isHighSurrogate;
    /**
     * for 4byte character generate the surrogate pair
     * @param  {number} highCodeUnit
     * @param  {number} lowCodeUnit
     */
    private toCodepoint;
    /**
     * private method to get the byte count for specific charindex and count
     * @param  {string} chars
     * @param  {number} charIndex
     * @param  {number} charCount
     */
    private getByteCountInternal;
    /**
     * Encodes a set of characters from the specified string into the ArrayBuffer.
     * @param  {string} s- The string containing the set of characters to encode
     * @param  {number} charIndex-The index of the first character to encode.
     * @param  {number} charCount- The number of characters to encode.
     * @returns {ArrayBuffer} - The ArrayBuffer that contains the resulting sequence of bytes.
     */
    getBytes(s: string, charIndex: number, charCount: number): ArrayBuffer;
    /**
     * Decodes a sequence of bytes from the specified ArrayBuffer into the string.
     * @param  {ArrayBuffer} bytes- The ArrayBuffer containing the sequence of bytes to decode.
     * @param  {number} index- The index of the first byte to decode.
     * @param  {number} count- The number of bytes to decode.
     * @returns {string} - The string that contains the resulting set of characters.
     */
    getString(bytes: ArrayBuffer, index: number, count: number): string;
    private getBytesOfAnsiEncoding;
    private getBytesOfUtf8Encoding;
    private getBytesOfUnicodeEncoding;
    private getStringOfUtf8Encoding;
    private getStringofUnicodeEncoding;
    /**
     * To clear the encoding instance
     * @return {void}
     */
    destroy(): void;
}
/**
 * EncodingType : Specifies the encoding type
 */
export  type EncodingType = 
/**
 * Specifies the Ansi encoding
 */
'Ansi' | 
/**
 * Specifies the utf8 encoding
 */
'Utf8' | 
/**
 * Specifies the Unicode encoding
 */
'Unicode';
/**
 * To check the object is null or undefined and throw error if it is null or undefined
 * @param {Object} value - object to check is null or undefined
 * @return {boolean}
 * @throws {ArgumentException} - if the value is null or undefined
 * @private
 */
export  function validateNullOrUndefined(value: Object, message: string): void;
//node_modules/@syncfusion/ej2-file-utils/src/index.d.ts
/**
 * file utils modules
 */
//node_modules/@syncfusion/ej2-file-utils/src/save.d.ts
/**
 * Save class provide method to save file
 * ```typescript
 * let blob : Blob = new Blob([''], { type: 'text/plain' });
 * Save.save('fileName.txt',blob);
 */
export  class Save {
    static isMicrosoftBrowser: boolean;
    /**
     * Initialize new instance of {save}
     */
    constructor();
    /**
     * Saves the file with specified name and sends the file to client browser
     * @param  {string} fileName- file name to save.
     * @param  {Blob} buffer- the content to write in file
     * @param  {boolean} isMicrosoftBrowser- specify whether microsoft browser or not
     * @returns {void}
     */
    static save(fileName: string, buffer: Blob): void;
    private static saveInternal;
    /**
     *
     * @param {string} extension - get mime type of the specified extension
     * @private
     */
    static getMimeType(extension: string): string;
}
//node_modules/@syncfusion/ej2-file-utils/src/stream-writer.d.ts
/**
 * StreamWriter class contains the implementation for writing characters to a file in a particular encoding
 * ```typescript
 * let writer = new StreamWriter();
 * writer.write('Hello World');
 * writer.save('Sample.txt');
 * writer.dispose();
 * ```
 */
export  class StreamWriter {
    private bufferBlob;
    private bufferText;
    private enc;
    /**
     * Gets the content written to the StreamWriter as Blob.
     * @returns Blob
     */
    readonly buffer: Blob;
    /**
     * Gets the encoding.
     * @returns Encoding
     */
    readonly encoding: Encoding;
    /**
     * Initializes a new instance of the StreamWriter class by using the specified encoding.
     * @param  {Encoding} encoding?- The character encoding to use.
     */
    constructor(encoding?: Encoding);
    private init;
    /**
     * Private method to set Byte Order Mark(BOM) value based on EncodingType
     */
    private setBomByte;
    /**
     * Saves the file with specified name and sends the file to client browser
     * @param  {string} fileName - The file name to save
     * @returns {void}
     */
    save(fileName: string): void;
    /**
     * Writes the specified string.
     * @param  {string} value - The string to write. If value is null or undefined, nothing is written.
     * @returns {void}
     */
    write(value: string): void;
    private flush;
    /**
     * Writes the specified string followed by a line terminator
     * @param  {string} value - The string to write. If value is null or undefined, nothing is written
     * @returns {void}
     */
    writeLine(value: string): void;
    /**
     * Releases the resources used by the StreamWriter
     * @returns {void}
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-file-utils/src/xml-writer.d.ts
/**
 * specifies current write state of XmlWriter
 */
export  type XmlWriteState = 'Initial' | 'StartDocument' | 'EndDocument' | 'StartElement' | 'EndElement' | 'ElementContent';
/**
 * specifies namespace kind
 */
export  type NamespaceKind = 'Written' | 'NeedToWrite' | 'Implied' | 'Special';
/**
 * XmlWriter class provide method to create XML data
 */
export  class XmlWriter {
    private bufferText;
    private bufferBlob;
    private currentState;
    private namespaceStack;
    private elementStack;
    private contentPos;
    private attributeStack;
    /**
     * Gets the content written to the {XmlWriter} as Blob.
     * @returns {Blob}
     */
    readonly buffer: Blob;
    /**
     * Initialize new instance of {XmlWriter}
     */
    constructor();
    /**
     * Writes processing instruction with a space between the name and text
     * @param {string} name - name of the processing instruction
     * @param {string} text - text to write in the processing instruction
     * @throws ArgumentException
     * @throws InvalidArgumentException
     * @throws InvalidOperationException
     */
    writeProcessingInstruction(name: string, text: string): void;
    /**
     * Writes Xml declaration with version and standalone attribute
     * @param {boolean} standalone - if true it write standalone=yes else standalone=no
     * @throws InvalidOperation
     */
    writeStartDocument(standalone?: boolean): void;
    /**
     * Closes any open tag or attribute and write the state back to start
     */
    writeEndDocument(): void;
    /**
     * Writes the specified start tag and associates it with the given namespace and prefix.
     * @param {string} prefix - namespace prefix of element
     * @param {string} localName -localName of element
     * @param {string} namespace - namespace URI associate with element
     * @throws ArgumentException
     * @throws InvalidOperationException
     */
    writeStartElement(prefix: string, localName: string, namespace: string): void;
    /**
     * Closes one element and pop corresponding namespace scope
     */
    writeEndElement(): void;
    /**
     * Writes an element with the specified prefix, local name, namespace URI, and value.
     * @param {string} prefix - namespace prefix of element
     * @param {string} localName - localName of element
     * @param {string} namespace - namespace URI associate with element
     * @param {string} value - value of element
     */
    writeElementString(prefix: string, localName: string, namespace: string, value: string): void;
    /**
     * Writes out the attribute with the specified prefix, local name, namespace URI, and value
     * @param {string} prefix - namespace prefix of element
     * @param {string} localName - localName of element
     * @param {string} namespace - namespace URI associate with element
     * @param {string} value - value of element
     */
    writeAttributeString(prefix: string, localName: string, namespace: string, value: string): void;
    /**
     * Writes the given text content
     * @param {string} text - text to write
     * @throws InvalidOperationException
     */
    writeString(text: string): void;
    /**
     * Write given text as raw data
     * @param {string} text - text to write
     * @throws InvalidOperationException
     */
    writeRaw(text: string): void;
    private writeInternal;
    /**
     * Saves the file with specified name and sends the file to client browser
     * @param {string} fileName - file name
     */
    save(fileName: string): void;
    /**
     * Releases the resources used by XmlWriter.
     */
    destroy(): void;
    private flush;
    private writeProcessingInstructionInternal;
    private writeStartAttribute;
    private writeStartAttributePrefixAndNameSpace;
    private writeStartAttributeSpecialAttribute;
    private writeEndAttribute;
    private writeStartElementInternal;
    private writeEndElementInternal;
    private writeStartAttributeInternal;
    private writeNamespaceDeclaration;
    private writeStartNamespaceDeclaration;
    private writeStringInternal;
    private startElementContent;
    private rawText;
    private addNamespace;
    private lookupPrefix;
    private lookupNamespace;
    private lookupNamespaceIndex;
    private pushNamespaceImplicit;
    private pushNamespaceExplicit;
    private addAttribute;
    private skipPushAndWrite;
    private checkName;
}
/**
 * class for managing namespace collection
 */
export  class Namespace {
    /**
     * specifies namespace's prefix
     */
    prefix: string;
    /**
     * specifies namespace URI
     */
    namespaceUri: string;
    /**
     * specifies namespace kind
     */
    kind: NamespaceKind;
    /**
     * set value for current namespace instance
     * @param {string} prefix namespace's prefix
     * @param {string} namespaceUri namespace URI
     * @param {string} kind namespace kind
     */
    set(prefix: string, namespaceUri: string, kind: NamespaceKind): void;
    /**
     * Releases the resources used by Namespace
     */
    destroy(): void;
}
/**
 * class for managing element collection
 */
export  class XmlElement {
    /**
     * specifies previous namespace top
     */
    previousTop: number;
    /**
     * specifies element prefix
     */
    prefix: string;
    /**
     * specifies element localName
     */
    localName: string;
    /**
     * specified namespace URI
     */
    namespaceUri: string;
    /**
     * set value of current element
     * @param {string} prefix - element prefix
     * @param {string} localName - element local name
     * @param {string} namespaceUri -namespace URI
     * @param {string} previousTop - previous namespace top
     */
    set(prefix: string, localName: string, namespaceUri: string, previousTop: number): void;
    /**
     * Releases the resources used by XmlElement
     */
    destroy(): void;
}
/**
 * class for managing attribute collection
 */
export  class XmlAttribute {
    /**
     * specifies namespace's prefix
     */
    prefix: string;
    /**
     * specifies namespace URI
     */
    namespaceUri: string;
    /**
     * specifies attribute local name
     */
    localName: string;
    /**
     * set value of current attribute
     * @param {string} prefix - namespace's prefix
     * @param {string} namespaceUri - namespace URI
     * @param {string} localName - attribute localName
     */
    set(prefix: string, localName: string, namespaceUri: string): void;
    /**
     * get whether the attribute is duplicate or not
     * @param {string} prefix - namespace's prefix
     * @param {string} namespaceUri - namespace URI
     * @param {string} localName - attribute localName
     */
    isDuplicate(prefix: string, localName: string, namespaceUri: string): boolean;
    /**
     * Releases the resources used by XmlAttribute
     */
    destroy(): void;
}
 }
export namespace filemanager { 

//node_modules/@syncfusion/ej2-filemanager/src/file-manager/actions/breadcrumb-bar.d.ts
/**
 * BreadCrumbBar module
 */
export  class BreadCrumbBar {
    private parent;
    addressPath: string;
    addressBarLink: string;
    searchObj: inputs.TextBox;
    private subMenuObj;
    private keyboardModule;
    private searchTimer;
    private keyConfigs;
    private searchWrapWidth;
    /**
     * constructor for addressbar module
     * @hidden
     */
    constructor(parent?: IFileManager);
    private onPropertyChanged;
    private render;
    onPathChange(): void;
    private updateBreadCrumbBar;
    private onFocus;
    private onKeyUp;
    private onBlur;
    private subMenuSelectOperations;
    private addSubMenuAttributes;
    private searchEventBind;
    private searchChangeHandler;
    private addressPathClickHandler;
    private triggerFileOpen;
    private onShowInput;
    private updatePath;
    private onUpdatePath;
    private onCreateEnd;
    private onRenameEnd;
    private onDeleteEnd;
    private removeSearchValue;
    private onResize;
    private onPasteEnd;
    private addEventListener;
    private keyActionHandler;
    private removeEventListener;
    private onDropInit;
    /**
     * For internal use only - Get the module name.
     *  @private
     */
    private getModuleName;
    destroy(): void;
    private onSearchTextChange;
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/actions/index.d.ts
/**
 * File Manager actions modules
 */
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/actions/toolbar.d.ts
/**
 * Toolbar module
 */
export  class Toolbar {
    private parent;
    private items;
    private buttonObj;
    private layoutBtnObj;
    private default;
    private single;
    private multiple;
    private selection;
    toolbarObj: navigations.Toolbar;
    /**
     * Constructor for the Toolbar module
     * @hidden
     */
    constructor(parent?: IFileManager);
    private render;
    getItemIndex(item: string): number;
    private getItems;
    private onClicked;
    private toolbarCreateHandler;
    private updateSortByButton;
    private getPupupId;
    private layoutChange;
    private toolbarItemData;
    private getId;
    private addEventListener;
    private reRenderToolbar;
    private onSelectionChanged;
    private hideItems;
    private hideStatus;
    private showPaste;
    private hidePaste;
    private onLayoutChange;
    private removeEventListener;
    /**
     * For internal use only - Get the module name.
     * @private
     */
    private getModuleName;
    private onPropertyChanged;
    destroy(): void;
    enableItems(items: string[], isEnable?: boolean): void;
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/base/classes.d.ts
/**
 * Specifies the File Manager internal ID's
 */
/** @hidden */
export  const TOOLBAR_ID: string;
/** @hidden */
export  const LAYOUT_ID: string;
/** @hidden */
export  const NAVIGATION_ID: string;
/** @hidden */
export  const TREE_ID: string;
/** @hidden */
export  const GRID_ID: string;
/** @hidden */
export  const LARGEICON_ID: string;
/** @hidden */
export  const DIALOG_ID: string;
/** @hidden */
export  const ALT_DIALOG_ID: string;
/** @hidden */
export  const IMG_DIALOG_ID: string;
/** @hidden */
export  const EXTN_DIALOG_ID: string;
/** @hidden */
export  const UPLOAD_DIALOG_ID: string;
/** @hidden */
export  const RETRY_DIALOG_ID: string;
/** @hidden */
export  const CONTEXT_MENU_ID: string;
/** @hidden */
export  const SORTBY_ID: string;
/** @hidden */
export  const VIEW_ID: string;
/** @hidden */
export  const SPLITTER_ID: string;
/** @hidden */
export  const CONTENT_ID: string;
/** @hidden */
export  const BREADCRUMBBAR_ID: string;
/** @hidden */
export  const UPLOAD_ID: string;
/** @hidden */
export  const RETRY_ID: string;
/** @hidden */
export  const SEARCH_ID: string;
/**
 * Specifies the File Manager internal class names
 */
/** @hidden */
export  const ROOT: string;
/** @hidden */
export  const CONTROL: string;
/** @hidden */
export  const CHECK_SELECT: string;
/** @hidden */
export  const ROOT_POPUP: string;
/** @hidden */
export  const MOBILE: string;
/** @hidden */
export  const MULTI_SELECT: string;
/** @hidden */
export  const FILTER: string;
/** @hidden */
export  const LAYOUT: string;
/** @hidden */
export  const NAVIGATION: string;
/** @hidden */
export  const LAYOUT_CONTENT: string;
/** @hidden */
export  const LARGE_ICONS: string;
/** @hidden */
export  const TB_ITEM: string;
/** @hidden */
export  const LIST_ITEM: string;
/** @hidden */
export  const LIST_TEXT: string;
/** @hidden */
export  const LIST_PARENT: string;
/** @hidden */
export  const TB_OPTION_TICK: string;
/** @hidden */
export  const TB_OPTION_DOT: string;
/** @hidden */
export  const BLUR: string;
/** @hidden */
export  const ACTIVE: string;
/** @hidden */
export  const HOVER: string;
/** @hidden */
export  const FOCUS: string;
/** @hidden */
export  const FOCUSED: string;
/** @hidden */
export  const CHECK: string;
/** @hidden */
export  const FRAME: string;
/** @hidden */
export  const CB_WRAP: string;
/** @hidden */
export  const ROW: string;
/** @hidden */
export  const ROWCELL: string;
/** @hidden */
export  const EMPTY: string;
/** @hidden */
export  const EMPTY_CONTENT: string;
/** @hidden */
export  const EMPTY_INNER_CONTENT: string;
/** @hidden */
export  const CLONE: string;
/** @hidden */
export  const DROP_FOLDER: string;
/** @hidden */
export  const DROP_FILE: string;
/** @hidden */
export  const FOLDER: string;
/** @hidden */
export  const ICON_IMAGE: string;
/** @hidden */
export  const ICON_MUSIC: string;
/** @hidden */
export  const ICON_VIDEO: string;
/** @hidden */
export  const LARGE_ICON: string;
/** @hidden */
export  const LARGE_EMPTY_FOLDER: string;
/** @hidden */
export  const LARGE_EMPTY_FOLDER_TWO: string;
/** @hidden */
export  const LARGE_ICON_FOLDER: string;
/** @hidden */
export  const SELECTED_ITEMS: string;
/** @hidden */
export  const TEXT_CONTENT: string;
/** @hidden */
export  const GRID_HEADER: string;
/** @hidden */
export  const TEMPLATE_CELL: string;
/** @hidden */
export  const TREE_VIEW: string;
/** @hidden */
export  const MENU_ITEM: string;
/** @hidden */
export  const MENU_ICON: string;
/** @hidden */
export  const SUBMENU_ICON: string;
/** @hidden */
export  const GRID_VIEW: string;
/** @hidden */
export  const ICON_VIEW: string;
/** @hidden */
export  const ICON_OPEN: string;
/** @hidden */
export  const ICON_UPLOAD: string;
/** @hidden */
export  const ICON_CUT: string;
/** @hidden */
export  const ICON_COPY: string;
/** @hidden */
export  const ICON_PASTE: string;
/** @hidden */
export  const ICON_DELETE: string;
/** @hidden */
export  const ICON_RENAME: string;
/** @hidden */
export  const ICON_NEWFOLDER: string;
/** @hidden */
export  const ICON_DETAILS: string;
/** @hidden */
export  const ICON_SHORTBY: string;
/** @hidden */
export  const ICON_REFRESH: string;
/** @hidden */
export  const ICON_SELECTALL: string;
/** @hidden */
export  const ICON_DOWNLOAD: string;
/** @hidden */
export  const ICON_OPTIONS: string;
/** @hidden */
export  const ICON_GRID: string;
/** @hidden */
export  const ICON_LARGE: string;
/** @hidden */
export  const ICON_BREADCRUMB: string;
/** @hidden */
export  const ICON_CLEAR: string;
/** @hidden */
export  const ICON_DROP_IN: string;
/** @hidden */
export  const ICON_DROP_OUT: string;
/** @hidden */
export  const ICON_NO_DROP: string;
/** @hidden */
export  const ICONS: string;
/** @hidden */
export  const DETAILS_LABEL: string;
/** @hidden */
export  const ERROR_CONTENT: string;
/** @hidden */
export  const STATUS: string;
/** @hidden */
export  const BREADCRUMBS: string;
/** @hidden */
export  const RTL: string;
/** @hidden */
export  const DISPLAY_NONE: string;
/** @hidden */
export  const COLLAPSED: string;
/** @hidden */
export  const FULLROW: string;
/** @hidden */
export  const ICON_COLLAPSIBLE: string;
/** @hidden */
export  const SPLIT_BAR: string;
/** @hidden */
export  const HEADER_CHECK: string;
/** @hidden */
export  const OVERLAY: string;
/** @hidden */
export  const VALUE: string;
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/base/constant.d.ts
/**
 * Specifies the File Manager internal variables
 */
/** @hidden */
export  const isFile: string;
/**
 * Specifies the File Manager internal events
 */
/** @hidden */
export  const modelChanged: string;
/** @hidden */
export  const initialEnd: string;
/** @hidden */
export  const finalizeEnd: string;
/** @hidden */
export  const createEnd: string;
/** @hidden */
export  const filterEnd: string;
/** @hidden */
export  const beforeDelete: string;
/** @hidden */
export  const pathDrag: string;
/** @hidden */
export  const deleteInit: string;
/** @hidden */
export  const deleteEnd: string;
/** @hidden */
export  const refreshEnd: string;
/** @hidden */
export  const resizeEnd: string;
/** @hidden */
export  const splitterResize: string;
/** @hidden */
export  const pathChanged: string;
/** @hidden */
export  const destroy: string;
/** @hidden */
export  const beforeRequest: string;
/** @hidden */
export  const upload: string;
/** @hidden */
export  const afterRequest: string;
/** @hidden */
export  const download: string;
/** @hidden */
export  const layoutRefresh: string;
/** @hidden */
export  const actionFailure: string;
/** @hidden */
export  const search: string;
/** @hidden */
export  const openInit: string;
/** @hidden */
export  const openEnd: string;
/** @hidden */
export  const selectionChanged: string;
/** @hidden */
export  const selectAllInit: string;
/** @hidden */
export  const clearAllInit: string;
/** @hidden */
export  const clearPathInit: string;
/** @hidden */
export  const layoutChange: string;
/** @hidden */
export  const sortByChange: string;
/** @hidden */
export  const nodeExpand: string;
/** @hidden */
export  const detailsInit: string;
/** @hidden */
export  const menuItemData: string;
/** @hidden */
export  const renameInit: string;
/** @hidden */
export  const renameEndParent: string;
/** @hidden */
export  const renameEnd: string;
/** @hidden */
export  const showPaste: string;
/** @hidden */
export  const hidePaste: string;
/** @hidden */
export  const selectedData: string;
/** @hidden */
export  const cutCopyInit: string;
/** @hidden */
export  const pasteInit: string;
/** @hidden */
export  const pasteEnd: string;
/** @hidden */
export  const cutEnd: string;
/** @hidden */
export  const hideLayout: string;
/** @hidden */
export  const updateTreeSelection: string;
/** @hidden */
export  const treeSelect: string;
/** @hidden */
export  const sortColumn: string;
/** @hidden */
export  const pathColumn: string;
/** @hidden */
export  const searchTextChange: string;
/** @hidden */
export  const beforeDownload: string;
/** @hidden */
export  const downloadInit: string;
/** @hidden */
export  const dropInit: string;
/** @hidden */
export  const dragEnd: string;
/** @hidden */
export  const dropPath: string;
/** @hidden */
export  const dragHelper: string;
/** @hidden */
export  const dragging: string;
/** @hidden */
export  const updateSelectionData: string;
/** @hidden */
export  const methodCall: string;
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/base/file-manager-model.d.ts
/**
 * Interface for a class FileManager
 */
export interface FileManagerModel extends base.ComponentModel{
    /**
     * Specifies the AJAX settings of the file manager.
     * @default {
     *  getImageUrl: null;
     *  url: null;
     *  uploadUrl: null;
     *  downloadUrl: null;
     * }
     */
    ajaxSettings?: AjaxSettingsModel;
    /**
     * Enables or disables drag-and-drop of files.
     * @default false
     */
    allowDragAndDrop?: boolean;
    /**
     * Enables or disables the multiple files selection of the file manager.
     * @default true
     */
    allowMultiSelection?: boolean;
    /**
     * Specifies the context menu settings of the file manager.
     * @default {
     *  file: ['Open','|', 'Cut', 'Copy', '|', 'Delete', 'Rename', '|', 'Details'],
     *  folder: ['Open','|', 'Cut', 'Copy', 'Paste', '|', 'Delete', 'Rename', '|', 'Details'],
     *  layout: ['SortBy', 'View', 'Refresh', '|', 'Paste', '|', 'NewFolder', 'Upload', '|', 'Details', '|', 'SelectAll'],
     *  visible: true,
     * }
     */
    contextMenuSettings?: ContextMenuSettingsModel;
    /**
     * Specifies the root CSS class of the file manager that allows you to customize the appearance by overriding the styles.
     * @default ''
     */
    cssClass?: string;
    /**
     * Specifies the details view settings of the file manager.
     * @default {     
     * columns: [{
     * field: 'name', headerText: 'Name', minWidth: 120, width: 'auto', template: '<span class="e-fe-text">${name}</span>',
     * customAttributes: { class: 'e-fe-grid-name'}}, { field: '_fm_modified', headerText: 'DateModified',
     * minWidth: 120, width: '190' }, { field: 'size', headerText: 'Size', minWidth: 90, width: '110',
     * template: '<span class="e-fe-size">${size}</span>' }
     * ]
     * }
     */
    detailsViewSettings?: DetailsViewSettingsModel;
    /**
     * Enables or disables persisting component's state between page reloads. If enabled, the following APIs will persist:
     * 1. `view`: Represents the previous view of the file manager.
     * 2. `path`: Represents the previous path of the file manager.
     * 3. `selectedItems`: Represents the previous selected items in the file manager.
     * @default false
     */
    enablePersistence?: boolean;
    /**
     * Specifies the height of the file manager.
     * @default '400px'
     */
    height?: string | number;
    /**
     * Specifies the initial view of the file manager. 
     * With the help of this property, initial view can be changed to details or largeicons view. The available views are:
     * * `LargeIcons`
     * * `Details`
     * @default 'LargeIcons'
     */
    view?: ViewType;
    /**
     * Specifies the navigationpane settings of the file manager.
     * @default {
     *  maxWidth: '650px',
     *  minWidth: '240px',
     *  visible: true,
     * }
     */
    navigationPaneSettings?: NavigationPaneSettingsModel;
    /**
     * Specifies the current path of the file manager.
     * @default '/'
     */
    path?: string;
    /**
     * Specifies the search settings of the file manager.
     * @default {
     *  allowSearchOnTyping: true,
     *  filterType: 'contains',
     *  ignoreCase: true
     * }
     */
    searchSettings?: SearchSettingsModel;
    /**
     * Specifies the selected folders and files name of the  file manager.
     * @default []
     */
    selectedItems?: string[];
    /**
     * Shows or hides the file extension in file manager.
     * @default true
     */
    showFileExtension?: boolean;
    /**
     * Shows or hides the files and folders that are marked as hidden.
     * @default false
     */
    showHiddenItems?: boolean;
    /**
     * Shows or hides the thumbnail images in largeicons view.
     * @default true
     */
    showThumbnail?: boolean;
    /**
     * Specifies the group of items aligned horizontally in the toolbar.
     * @default {
     *  items: ['NewFolder', 'Upload', 'Cut', 'Copy', 'Paste', 'Delete',
     *  'Download', 'Rename', 'SortBy', 'Refresh', 'Selection', 'View', 'Details'],
     *  visible: true
     * }
     */
    toolbarSettings?: ToolbarSettingsModel;
    /**
     * Specifies the upload settings for the file manager.
     * @default {
     *  autoUpload: true,
     *  minFileSize: 0,
     *  maxFileSize: 30000000,
     *  allowedExtensions: ''
     * }
     */
    uploadSettings?: UploadSettingsModel;
    /**
     * Specifies the width of the file manager.
     * @default '100%'
     */
    width?: string | number;
    /**
     * Triggers before the file/folder is rendered.
     * @event
     * @blazorproperty 'OnFileLoad'
     */
    fileLoad?: base.EmitType<FileLoadEventArgs>;
    /**
     * Triggers before the file/folder is opened.
     * @event
     * @blazorproperty 'OnFileOpen'
     */
    fileOpen?: base.EmitType<FileOpenEventArgs>;
    /**
     * Triggers before the dialog is closed.
     * @event
     * @blazorproperty 'BeforePopupClose'
     */
    beforePopupClose?: base.EmitType<BeforePopupOpenCloseEventArgs>;
    /**
     * Triggers before the dialog is opened.
     * @event
     * @blazorproperty 'BeforePopupOpen'
     */
    beforePopupOpen?: base.EmitType<BeforePopupOpenCloseEventArgs>;
    /**
     * Triggers before sending the AJAX request to the server.
     * @event
     * @blazorproperty 'OnSend'
     */
    beforeSend?: base.EmitType<BeforeSendEventArgs>;
    /**
     * Triggers when the file manager component is created.
     * @event
     * @blazorproperty 'Created'
     */
    created?: base.EmitType<Object>;
    /**
     * Triggers when the file manager component is destroyed.
     * @event
     * @blazorproperty 'Destroyed'
     */
    destroyed?: base.EmitType<Object>;
    /**
     * Triggers when the file/folder dragging is started.
     * @event
     * @blazorproperty 'OnFileDragStart'
     */
    fileDragStart?: base.EmitType<FileDragEventArgs>;
    /**
     * Triggers while dragging the file/folder.
     * @event
     * @blazorproperty 'FileDragging'
     */
    fileDragging?: base.EmitType<FileDragEventArgs>;
    /**
     * Triggers when the file/folder is about to be dropped at the target.
     * @event
     * @blazorproperty 'OnFileDragStop'
     */
    fileDragStop?: base.EmitType<FileDragEventArgs>;
    /**
     * Triggers when the file/folder is dropped.
     * @event
     * @blazorproperty 'FileDropped'
     */
    fileDropped?: base.EmitType<FileDragEventArgs>;
    /**
     * Triggers when the file/folder is selected/unselected.
     * @event
     * @blazorproperty 'FileSelected'
     */
    fileSelect?: base.EmitType<FileSelectEventArgs>;
    /**
     * Triggers when the context menu item is clicked.
     * @event
     * @blazorproperty 'OnMenuClick'
     */
    menuClick?: base.EmitType<MenuClickEventArgs>;
    /**
     * Triggers before the context menu is opened.
     * @event
     * @blazorproperty 'MenuOpened'
     */
    menuOpen?: base.EmitType<MenuOpenEventArgs>;
    /**
     * Triggers when the AJAX request is failed.
     * @event
     * @blazorproperty 'OnError'
     */
    failure?: base.EmitType<FailureEventArgs>;
    /**
     * Triggers when the dialog is closed.
     * @event
     * @blazorproperty 'PopupClosed'
     */
    popupClose?: base.EmitType<PopupOpenCloseEventArgs>;
    /**
     * Triggers when the dialog is opened.
     * @event
     * @blazorproperty 'PopupOpened'
     */
    popupOpen?: base.EmitType<PopupOpenCloseEventArgs>;
    /**
     * Triggers when the AJAX request is success.
     * @event
     * @blazorproperty 'OnSuccess'
     */
    success?: base.EmitType<SuccessEventArgs>;
    /**
     * Triggers when the toolbar item is clicked.
     * @event
     * @blazorproperty 'ToolbarItemClicked'
     */
    toolbarClick?: base.EmitType<ToolbarClickEventArgs>;
    /**
     * Triggers before creating the toolbar.
     * @event
     * @blazorproperty 'ToolbarCreated'
     */
    toolbarCreate?: base.EmitType<ToolbarCreateEventArgs>;
    /**
     * Triggers before rendering each file item in upload dialog box.
     * @event
     * @blazorproperty 'UploadListCreated'
     */
    uploadListCreate?: base.EmitType<UploadListCreateArgs>;
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/base/file-manager.d.ts
/**
 * The FileManager component allows users to access and manage the file system through the web  browser. It can performs the
 * functionalities like add, rename, search, sort, upload and delete files or folders. And also it
 * provides an easy way of  dynamic injectable modules like toolbar, navigationpane, detailsview, largeiconsview.
 * ```html
 *  <div id="file"></div>
 * ```
 * ```typescript,
 *  let feObj: FileManager = new FileManager();
 *  feObj.appendTo('#file');
 * ```
 */
export  class FileManager extends base.Component<HTMLElement> implements base.INotifyPropertyChanged {
    /** @hidden */
    toolbarModule: Toolbar;
    /** @hidden */
    detailsviewModule: DetailsView;
    /** @hidden */
    navigationpaneModule: ITreeView;
    /** @hidden */
    largeiconsviewModule: LargeIconsView;
    /** @hidden */
    contextmenuModule: IContextMenu;
    /** @hidden */
    breadcrumbbarModule: BreadCrumbBar;
    private keyboardModule;
    private keyConfigs;
    filterData: Object;
    originalPath: string;
    filterPath: string;
    filterId: string;
    hasId: boolean;
    pathNames: string[];
    pathId: string[];
    expandedId: string;
    itemData: Object[];
    visitedData: Object;
    visitedItem: Element;
    toolbarSelection: boolean;
    targetPath: string;
    feParent: Object[];
    feFiles: Object[];
    activeElements: Element[];
    activeModule: string;
    targetModule: string;
    treeObj: navigations.TreeView;
    dialogObj: popups.Dialog;
    viewerObj: popups.Dialog;
    extDialogObj: popups.Dialog;
    selectedNodes: string[];
    duplicateItems: string[];
    duplicateRecords: Object[];
    previousPath: string[];
    nextPath: string[];
    fileAction: string;
    pasteNodes: string[];
    isLayoutChange: boolean;
    replaceItems: string[];
    createdItem: {
        [key: string]: Object;
    };
    layoutSelectedItems: string[];
    renamedItem: {
        [key: string]: Object;
    };
    renamedId: string;
    uploadItem: string[];
    fileLength: number;
    deleteRecords: string[];
    fileView: string;
    isDevice: Boolean;
    isMobile: Boolean;
    isBigger: Boolean;
    isFile: boolean;
    sortOrder: SortOrder;
    sortBy: string;
    actionRecords: Object[];
    activeRecords: Object[];
    isCut: boolean;
    isSearchCut: boolean;
    isSearchDrag: boolean;
    isPasteError: boolean;
    folderPath: string;
    isSameAction: boolean;
    currentItemText: string;
    renameText: string;
    isFiltered: boolean;
    enablePaste: boolean;
    splitterObj: layouts.Splitter;
    persistData: boolean;
    breadCrumbBarNavigation: HTMLElement;
    localeObj: base.L10n;
    uploadObj: inputs.Uploader;
    uploadDialogObj: popups.Dialog;
    retryArgs: RetryArgs[];
    private isOpened;
    isRetryOpened: boolean;
    isPathDrag: boolean;
    searchedItems: {
        [key: string]: Object;
    }[];
    searchWord: string;
    retryFiles: inputs.FileInfo[];
    isApplySame: boolean;
    uploadEventArgs: BeforeSendEventArgs;
    dragData: {
        [key: string]: Object;
    }[];
    dragNodes: string[];
    dragPath: string;
    dropPath: string;
    isDragDrop: boolean;
    virtualDragElement: HTMLElement;
    dropData: Object;
    treeExpandTimer: number;
    dragCursorPosition: base.PositionModel;
    isDropEnd: boolean;
    droppedObjects: Object[];
    destinationPath: string;
    /**
     * Specifies the AJAX settings of the file manager.
     * @default {
     *  getImageUrl: null;
     *  url: null;
     *  uploadUrl: null;
     *  downloadUrl: null;
     * }
     */
    ajaxSettings: AjaxSettingsModel;
    /**
     * Enables or disables drag-and-drop of files.
     * @default false
     */
    allowDragAndDrop: boolean;
    /**
     * Enables or disables the multiple files selection of the file manager.
     * @default true
     */
    allowMultiSelection: boolean;
    /**
     * Specifies the context menu settings of the file manager.
     * @default {
     *  file: ['Open','|', 'Cut', 'Copy', '|', 'Delete', 'Rename', '|', 'Details'],
     *  folder: ['Open','|', 'Cut', 'Copy', 'Paste', '|', 'Delete', 'Rename', '|', 'Details'],
     *  layout: ['SortBy', 'View', 'Refresh', '|', 'Paste', '|', 'NewFolder', 'Upload', '|', 'Details', '|', 'SelectAll'],
     *  visible: true,
     * }
     */
    contextMenuSettings: ContextMenuSettingsModel;
    /**
     * Specifies the root CSS class of the file manager that allows you to customize the appearance by overriding the styles.
     * @default ''
     */
    cssClass: string;
    /**
     * Specifies the details view settings of the file manager.
     * @default {
     * columns: [{
     * field: 'name', headerText: 'Name', minWidth: 120, width: 'auto', template: '<span class="e-fe-text">${name}</span>',
     * customAttributes: { class: 'e-fe-grid-name'}}, { field: '_fm_modified', headerText: 'DateModified',
     * minWidth: 120, width: '190' }, { field: 'size', headerText: 'Size', minWidth: 90, width: '110',
     * template: '<span class="e-fe-size">${size}</span>' }
     * ]
     * }
     */
    detailsViewSettings: DetailsViewSettingsModel;
    /**
     * Enables or disables persisting component's state between page reloads. If enabled, the following APIs will persist:
     * 1. `view`: Represents the previous view of the file manager.
     * 2. `path`: Represents the previous path of the file manager.
     * 3. `selectedItems`: Represents the previous selected items in the file manager.
     * @default false
     */
    enablePersistence: boolean;
    /**
     * Specifies the height of the file manager.
     * @default '400px'
     */
    height: string | number;
    /**
     * Specifies the initial view of the file manager.
     * With the help of this property, initial view can be changed to details or largeicons view. The available views are:
     * * `LargeIcons`
     * * `Details`
     * @default 'LargeIcons'
     */
    view: ViewType;
    /**
     * Specifies the navigationpane settings of the file manager.
     * @default {
     *  maxWidth: '650px',
     *  minWidth: '240px',
     *  visible: true,
     * }
     */
    navigationPaneSettings: NavigationPaneSettingsModel;
    /**
     * Specifies the current path of the file manager.
     * @default '/'
     */
    path: string;
    /**
     * Specifies the search settings of the file manager.
     * @default {
     *  allowSearchOnTyping: true,
     *  filterType: 'contains',
     *  ignoreCase: true
     * }
     */
    searchSettings: SearchSettingsModel;
    /**
     * Specifies the selected folders and files name of the  file manager.
     * @default []
     */
    selectedItems: string[];
    /**
     * Shows or hides the file extension in file manager.
     * @default true
     */
    showFileExtension: boolean;
    /**
     * Shows or hides the files and folders that are marked as hidden.
     * @default false
     */
    showHiddenItems: boolean;
    /**
     * Shows or hides the thumbnail images in largeicons view.
     * @default true
     */
    showThumbnail: boolean;
    /**
     * Specifies the group of items aligned horizontally in the toolbar.
     * @default {
     *  items: ['NewFolder', 'Upload', 'Cut', 'Copy', 'Paste', 'Delete',
     *  'Download', 'Rename', 'SortBy', 'Refresh', 'Selection', 'View', 'Details'],
     *  visible: true
     * }
     */
    toolbarSettings: ToolbarSettingsModel;
    /**
     * Specifies the upload settings for the file manager.
     * @default {
     *  autoUpload: true,
     *  minFileSize: 0,
     *  maxFileSize: 30000000,
     *  allowedExtensions: ''
     * }
     */
    uploadSettings: UploadSettingsModel;
    /**
     * Specifies the width of the file manager.
     * @default '100%'
     */
    width: string | number;
    /**
     * Triggers before the file/folder is rendered.
     * @event
     * @blazorproperty 'OnFileLoad'
     */
    fileLoad: base.EmitType<FileLoadEventArgs>;
    /**
     * Triggers before the file/folder is opened.
     * @event
     * @blazorproperty 'OnFileOpen'
     */
    fileOpen: base.EmitType<FileOpenEventArgs>;
    /**
     * Triggers before the dialog is closed.
     * @event
     * @blazorproperty 'BeforePopupClose'
     */
    beforePopupClose: base.EmitType<BeforePopupOpenCloseEventArgs>;
    /**
     * Triggers before the dialog is opened.
     * @event
     * @blazorproperty 'BeforePopupOpen'
     */
    beforePopupOpen: base.EmitType<BeforePopupOpenCloseEventArgs>;
    /**
     * Triggers before sending the AJAX request to the server.
     * @event
     * @blazorproperty 'OnSend'
     */
    beforeSend: base.EmitType<BeforeSendEventArgs>;
    /**
     * Triggers when the file manager component is created.
     * @event
     * @blazorproperty 'Created'
     */
    created: base.EmitType<Object>;
    /**
     * Triggers when the file manager component is destroyed.
     * @event
     * @blazorproperty 'Destroyed'
     */
    destroyed: base.EmitType<Object>;
    /**
     * Triggers when the file/folder dragging is started.
     * @event
     * @blazorproperty 'OnFileDragStart'
     */
    fileDragStart: base.EmitType<FileDragEventArgs>;
    /**
     * Triggers while dragging the file/folder.
     * @event
     * @blazorproperty 'FileDragging'
     */
    fileDragging: base.EmitType<FileDragEventArgs>;
    /**
     * Triggers when the file/folder is about to be dropped at the target.
     * @event
     * @blazorproperty 'OnFileDragStop'
     */
    fileDragStop: base.EmitType<FileDragEventArgs>;
    /**
     * Triggers when the file/folder is dropped.
     * @event
     * @blazorproperty 'FileDropped'
     */
    fileDropped: base.EmitType<FileDragEventArgs>;
    /**
     * Triggers when the file/folder is selected/unselected.
     * @event
     * @blazorproperty 'FileSelected'
     */
    fileSelect: base.EmitType<FileSelectEventArgs>;
    /**
     * Triggers when the context menu item is clicked.
     * @event
     * @blazorproperty 'OnMenuClick'
     */
    menuClick: base.EmitType<MenuClickEventArgs>;
    /**
     * Triggers before the context menu is opened.
     * @event
     * @blazorproperty 'MenuOpened'
     */
    menuOpen: base.EmitType<MenuOpenEventArgs>;
    /**
     * Triggers when the AJAX request is failed.
     * @event
     * @blazorproperty 'OnError'
     */
    failure: base.EmitType<FailureEventArgs>;
    /**
     * Triggers when the dialog is closed.
     * @event
     * @blazorproperty 'PopupClosed'
     */
    popupClose: base.EmitType<PopupOpenCloseEventArgs>;
    /**
     * Triggers when the dialog is opened.
     * @event
     * @blazorproperty 'PopupOpened'
     */
    popupOpen: base.EmitType<PopupOpenCloseEventArgs>;
    /**
     * Triggers when the AJAX request is success.
     * @event
     * @blazorproperty 'OnSuccess'
     */
    success: base.EmitType<SuccessEventArgs>;
    /**
     * Triggers when the toolbar item is clicked.
     * @event
     * @blazorproperty 'ToolbarItemClicked'
     */
    toolbarClick: base.EmitType<ToolbarClickEventArgs>;
    /**
     * Triggers before creating the toolbar.
     * @event
     * @blazorproperty 'ToolbarCreated'
     */
    toolbarCreate: base.EmitType<ToolbarCreateEventArgs>;
    /**
     * Triggers before rendering each file item in upload dialog box.
     * @event
     * @blazorproperty 'UploadListCreated'
     */
    uploadListCreate: base.EmitType<UploadListCreateArgs>;
    constructor(options?: FileManagerModel, element?: string | HTMLElement);
    /**
     * Get component name.
     * @returns string
     * @private
     */
    getModuleName(): string;
    /**
     * Initialize the event handler
     */
    protected preRender(): void;
    /**
     * Gets the properties to be maintained upon browser refresh..
     * @returns string
     * @hidden
     */
    getPersistData(): string;
    /**
     * To provide the array of modules needed for component rendering
     * @return {base.ModuleDeclaration[]}
     * @hidden
     */
    requiredModules(): base.ModuleDeclaration[];
    /**
     * To Initialize the control rendering
     * @private
     */
    protected render(): void;
    private ensurePath;
    private initialize;
    private addWrapper;
    private adjustHeight;
    private splitterResize;
    private splitterAdjust;
    private addCssClass;
    private showSpinner;
    private hideSpinner;
    private onContextMenu;
    private checkMobile;
    private renderFileUpload;
    private renderUploadBox;
    private onFileListRender;
    private updateUploader;
    private onBeforeOpen;
    private onBeforeClose;
    private onOpen;
    private onClose;
    private onUploading;
    private onRemoving;
    private onClearing;
    private onSelected;
    private onUploadSuccess;
    private onUploadFailure;
    private onInitialEnd;
    private addEventListeners;
    private removeEventListeners;
    private onDetailsInit;
    private resizeHandler;
    private keyActionHandler;
    private wireEvents;
    private unWireEvents;
    private setPath;
    /**
     * Called internally if any of the property value changed.
     * @param  {FileManager} newProp
     * @param  {FileManager} oldProp
     * @returns void
     * @private
     */
    onPropertyChanged(newProp: FileManagerModel, oldProp: FileManagerModel): void;
    private ajaxSettingSetModel;
    private localeSetModelOption;
    /**
     * Triggers when the component is destroyed.
     * @returns void
     */
    destroy(): void;
    /**
     * Creates a new folder in file manager.
     * @param {name: string} name – Specifies the name of new folder in current path.
     * If it is not specified, then the default new folder dialog will be opened.
     * @returns void
     */
    createFolder(name?: string): void;
    /**
     * Deletes the folders or files from the given unique identifiers.
     * @param {ids: string} ids - Specifies the name of folders or files in current path. If you want to delete the nested level folders or
     * files, then specify the filter path along with name of the folders or files when performing the search or custom filtering.
     * For ID based file provider, specify the unique identifier of folders or files.
     * If it is not specified, then delete confirmation dialog will be opened for selected item.
     * @returns void
     */
    deleteFiles(ids?: string[]): void;
    /**
     * Disables the specified toolbar items of the file manager.
     * @param {items: string[]} items - Specifies an array of items to be disabled.
     * @returns void
     */
    disableToolbarItems(items: string[]): void;
    /**
     * Downloads the folders or files from the given unique identifiers.
     * @param {ids: string} ids - Specifies the name of folders or files in current path. If you want to download the nested level folders
     * or files, then specify the filter path along with name of the folders or files when performing search or custom filtering.
     * For ID based file provider, specify the unique identifier of folders or files.
     * If it is not specified, then the selected items will be downloaded.
     * @returns void
     */
    downloadFiles(ids?: string[]): void;
    /**
     * Enables the specified toolbar items of the file manager.
     * @param {items: string[]} items - Specifies an array of items to be enabled.
     * @returns void
     */
    enableToolbarItems(items: string[]): void;
    /**
     * Disables the specified context menu items in file manager. This method is used only in the menuOpen event.
     * @param {items: string[]} items - Specifies an array of items to be disabled.
     * @returns void
     */
    disableMenuItems(items: string[]): void;
    /**
     * Returns the index position of given current context menu item in file manager.
     * @param {item: string} item - Specifies an item to get the index position.
     * @returns number
     */
    getMenuItemIndex(item: string): number;
    /**
     * Returns the index position of given toolbar item in file manager.
     * @param {item: string} item - Specifies an item to get the index position.
     * @returns number
     */
    getToolbarItemIndex(item: string): number;
    /**
     * Display the custom filtering files in file manager.
     * @param {filterData: Object} filterData - Specifies the custom filter details along with custom file action name,
     * which needs to be sent to the server side. If you do not specify the details, then default action name will be `filter`.
     * @returns void
     */
    filterFiles(filterData?: Object): void;
    /**
     * Gets the details of the selected files in the file manager.
     * @returns Object[]
     */
    getSelectedFiles(): Object[];
    /**
     * Opens the corresponding file or folder from the given unique identifier.
     * @param {id: string} id - Specifies the name of folder or file in current path. If you want to open the nested level folder or
     * file, then specify the filter path along with name of the folder or file when performing search or custom filtering. For ID based
     * file provider, specify the unique identifier of folder or file.
     * @returns void
     */
    openFile(id: string): void;
    /**
     * Refreshes the folder files of the file manager.
     * @returns void
     */
    refreshFiles(): void;
    /**
     * Refreshes the layout of the file manager.
     * @returns void
     */
    refreshLayout(): void;
    /**
     * Selects the entire folders and files in current path.
     * @returns void
     */
    selectAll(): void;
    /**
     * Deselects the currently selected folders and files in current path.
     * @returns void
     */
    clearSelection(): void;
    /**
     * Renames the file or folder with given new name in file manager.
     * @param {id: string} id - Specifies the name of folder or file in current path. If you want to rename the nested level folder or
     * file, then specify the filter path along with name of the folder or file when performing search or custom filtering. For ID based
     * file provider, specify the unique identifier of folder or file.
     * If it is not specified, then rename dialog will be opened for selected item.
     * @param {name: string} name – Specifies the new name of the file or folder in current path. If it is not specified, then rename dialog
     * will be opened for given identifier.
     * @returns void
     */
    renameFile(id?: string, name?: string): void;
    /**
     * Opens the upload dialog in file manager.
     * @returns void
     */
    uploadFiles(): void;
    /**
     * Specifies the direction of FileManager
     */
    private setRtl;
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/base/index.d.ts
/**
 * File Manager base modules
 */
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/base/interface.d.ts
export  type ViewType = 'LargeIcons' | 'Details';
export  type SortOrder = 'Ascending' | 'Descending';
export  type ToolBarItems = 'NewFolder' | 'Upload' | 'Cut' | 'Copy' | 'Paste' | 'Delete' | 'Download' | 'Rename' | 'SortBy' | 'Refresh' | 'Selection' | 'View' | 'Details';
export  type MenuItems = 'NewFolder' | 'Upload' | 'Cut' | 'Copy' | 'Paste' | 'Delete' | 'Download' | 'Rename' | 'SortBy' | 'Refresh' | 'SelectAll' | 'View' | 'Details' | 'Open';
/**
 * Interfaces for File Manager
 */
export interface IToolBarItems {
    template?: string;
    tooltipText?: string;
}
export interface NotifyArgs {
    module?: string;
    newProp?: FileManagerModel;
    oldProp?: FileManagerModel;
    target?: Element;
    selectedNode?: string;
}
export interface ReadArgs {
    cwd?: {
        [key: string]: Object;
    };
    files?: {
        [key: string]: Object;
    }[];
    error?: ErrorArgs;
    details?: Object;
    id?: string;
}
export interface MouseArgs {
    target?: Element;
}
export interface UploadArgs {
    files?: {
        [key: string]: Object;
    }[];
    error?: Object[];
    details?: Object;
}
export interface RetryArgs {
    action: string;
    file: FileInfo;
}
export interface ErrorArgs {
    code?: string;
    message?: string;
    fileExists?: string[];
}
export interface DialogOptions {
    dialogName?: string;
    header?: string;
    content?: string;
    buttons?: popups.ButtonPropsModel[];
    open?: base.EmitType<Object>;
    close?: base.EmitType<Object>;
}
export interface SearchArgs {
    files?: {
        [key: string]: Object;
    }[];
    error?: Object[];
    details?: Object;
}
export interface FileDetails {
    created?: string;
    isFile: boolean;
    location: string;
    modified: string;
    name: string;
    size: number;
    icon: string;
    multipleFiles: boolean;
    permission: Object;
}
export interface DownloadArgs {
    files?: {
        [key: string]: Object;
    }[];
    error?: Object[];
    details?: Object;
}
/**
 * Drag Event arguments
 */
export interface FileDragEventArgs {
    /**
     * Return the current items as an array of JSON object.
     */
    fileDetails?: Object[];
    /**
     * Specifies the actual event.
     */
    event?: MouseEvent & TouchEvent;
    /**
     * Specifies the current drag element.
     */
    element?: HTMLElement;
    /**
     * Specifies the current target element.
     */
    target?: HTMLElement;
    /**
     * If you want to cancel this event then, set cancel to true. Otherwise, false.
     */
    cancel?: Boolean;
}
export interface BeforeSendEventArgs {
    /**
     * Return the name of the AJAX action will be performed.
     */
    action?: string;
    /**
     * Return the AJAX details, which are send to server.
     */
    ajaxSettings?: Object;
    /**
     * If you want to cancel this event then, set cancel to true. Otherwise, false.
     */
    cancel?: boolean;
}
export interface SuccessEventArgs {
    /**
     * Return the name of the AJAX action will be performed.
     */
    action?: string;
    /**
     * Return the AJAX details which are send to server.
     */
    result?: Object;
}
export interface FailureEventArgs {
    /**
     * Return the name of the AJAX action will be performed.
     */
    action?: string;
    /**
     * Return the AJAX details, which are send to server.
     */
    error?: Object;
}
export interface FileLoadEventArgs {
    /**
     * Return the current rendering item.
     */
    element?: HTMLElement;
    /**
     * Return the current rendering item as JSON object.
     */
    fileDetails?: Object;
    /**
     * Return the name of the rendering module in File Manager.
     */
    module?: string;
}
export interface FileOpenEventArgs {
    /**
     * If you want to cancel this event then, set cancel to true. Otherwise, false.
     */
    cancel?: boolean;
    /**
     * Return the currently selected item as JSON object.
     */
    fileDetails?: Object;
    /**
     * Return the name of the target module in File Manager.
     */
    module?: string;
}
export interface PopupOpenCloseEventArgs {
    /**
     * Returns the current dialog component instance.
     */
    popupModule?: popups.Dialog;
    /**
     * Returns the current dialog element.
     */
    element: HTMLElement;
    /**
     * Returns the current dialog action name.
     */
    popupName: string;
}
export interface BeforePopupOpenCloseEventArgs {
    /**
     * Returns the current dialog component instance.
     */
    popupModule: popups.Dialog;
    /**
     * Returns the current dialog action name.
     */
    popupName: string;
    /**
     * Prevents the dialog from opening when it is set to true.
     */
    cancel: boolean;
}
export interface FileSelectEventArgs {
    /**
     * Return the name of action like select or unselect.
     */
    action?: string;
    /**
     * Return the currently selected item as JSON object.
     */
    fileDetails?: Object;
    /**
     * Defines whether event is triggered by interaction or not.
     */
    isInteracted?: boolean;
}
export interface ToolbarCreateEventArgs {
    /**
     * Return an array of items that is used to configure toolbar content.
     * @blazorType List<Syncfusion.EJ2.Blazor.Navigations.navigations.ItemModel>
     */
    items: navigations.ItemModel[];
}
export interface ToolbarClickEventArgs {
    /**
     * If you want to cancel this event then, set cancel to true. Otherwise, false.
     */
    cancel: boolean;
    /**
     * Return the currently selected folder/file items as an array of JSON object.
     */
    fileDetails: Object[];
    /**
     * Return the currently clicked toolbar item as JSON object.
     * @blazorType Syncfusion.EJ2.Blazor.Navigations.navigations.ItemModel
     */
    item: navigations.ItemModel;
}
export interface MenuClickEventArgs {
    /**
     * If you want to cancel this event then, set cancel to true. Otherwise, false.
     */
    cancel?: Boolean;
    /**
     * Return the currently clicked context menu item.
     */
    element?: HTMLElement;
    /**
     * Return the currently selected folder/file items as an array of JSON object.
     */
    fileDetails?: Object[];
    /**
     * Return the currently clicked context menu item as JSON object.
     * @blazorType Syncfusion.EJ2.Blazor.Navigations.navigations.MenuItemModel
     */
    item?: navigations.MenuItemModel;
}
export interface MenuOpenEventArgs {
    /**
     * If you want to cancel this event then, set cancel to true. Otherwise, false.
     */
    cancel?: boolean;
    /**
     * Returns the current context menu element.
     */
    element?: HTMLElement;
    /**
     * Returns the target folder/file item as an array of JSON object.
     */
    fileDetails?: Object[];
    /**
     * Returns the current context menu items as JSON object.
     * @blazorType List<Syncfusion.EJ2.Blazor.Navigations.navigations.MenuItemModel>
     */
    items?: navigations.MenuItemModel[];
    /**
     * Returns the instance of context menu component.
     * @blazorType Syncfusion.EJ2.Blazor.Navigations.ContextMenuModel
     */
    menuModule?: navigations.ContextMenu;
    /**
     * Returns whether the current context menu is sub-menu or not.
     */
    isSubMenu?: boolean;
    /**
     * Returns the target element of context menu.
     */
    target?: Element;
    /**
     * Returns the current context menu type based on current target.
     */
    menuType?: string;
}
export interface UploadListCreateArgs {
    /**
     * Return the current file item element.
     */
    element: HTMLElement;
    /**
     * Return the current rendering file item data as file object.
     */
    fileInfo: FileInfo;
    /**
     * Return the index of the file item in the file list.
     */
    index: number;
    /**
     * Return whether the file is preloaded.
     */
    isPreload: boolean;
}
export interface FileInfo {
    /**
     * Returns the upload file name.
     */
    name: string;
    /**
     * Returns the details about upload file.
     */
    rawFile: string | Blob;
    /**
     * Returns the size of file in bytes.
     */
    size: number;
    /**
     * Returns the status of the file.
     */
    status: string;
    /**
     * Returns the MIME type of file as a string. Returns empty string if the file's type is not determined.
     */
    type: string;
    /**
     * Returns the list of validation errors (if any).
     */
    validationMessages: ValidationMessages;
    /**
     * Returns the current state of the file such as Failed, Canceled, Selected, Uploaded, or Uploading.
     */
    statusCode: string;
    /**
     * Returns where the file selected from, to upload.
     */
    fileSource?: string;
}
export interface ValidationMessages {
    /**
     * Returns the minimum file size validation message, if selected file size is less than the specified minFileSize property.
     */
    minSize?: string;
    /**
     * Returns the maximum file size validation message, if selected file size is less than specified maxFileSize property.
     */
    maxSize?: string;
}
/** @hidden */
export interface IFileManager extends base.Component<HTMLElement> {
    hasId: boolean;
    pathNames: string[];
    pathId: string[];
    originalPath: string;
    filterPath: string;
    filterId: string;
    expandedId: string;
    itemData: Object[];
    visitedData: Object;
    visitedItem: Element;
    feParent: Object[];
    feFiles: Object[];
    ajaxSettings: AjaxSettingsModel;
    toolbarSettings: ToolbarSettingsModel;
    dialogObj: popups.Dialog;
    viewerObj: popups.Dialog;
    extDialogObj: popups.Dialog;
    splitterObj: layouts.Splitter;
    breadCrumbBarNavigation: HTMLElement;
    searchSettings: SearchSettingsModel;
    activeElements: Element[];
    contextMenuSettings: ContextMenuSettingsModel;
    contextmenuModule?: IContextMenu;
    navigationPaneSettings: NavigationPaneSettingsModel;
    targetPath: string;
    activeModule: string;
    selectedNodes: string[];
    previousPath: string[];
    nextPath: string[];
    navigationpaneModule: ITreeView;
    largeiconsviewModule: LargeIconsView;
    breadcrumbbarModule: BreadCrumbBar;
    toolbarSelection: boolean;
    duplicateItems: string[];
    duplicateRecords: Object[];
    fileAction: string;
    replaceItems: string[];
    createdItem: {
        [key: string]: Object;
    };
    renamedItem: {
        [key: string]: Object;
    };
    renamedId: string;
    uploadItem: string[];
    fileLength: number;
    detailsviewModule: DetailsView;
    toolbarModule: Toolbar;
    fileView: string;
    isDevice: Boolean;
    isMobile: Boolean;
    isBigger: Boolean;
    isFile: boolean;
    allowMultiSelection: boolean;
    selectedItems: string[];
    layoutSelectedItems: string[];
    sortOrder: SortOrder;
    sortBy: string;
    actionRecords: Object[];
    activeRecords: Object[];
    pasteNodes: string[];
    isCut: boolean;
    filterData: Object;
    isFiltered: boolean;
    isLayoutChange: boolean;
    isSearchCut: boolean;
    isPasteError: boolean;
    isSameAction: boolean;
    currentItemText: string;
    renameText: string;
    view: ViewType;
    isPathDrag: boolean;
    enablePaste: boolean;
    showThumbnail: boolean;
    allowDragAndDrop: boolean;
    enableRtl: boolean;
    path: string;
    folderPath: string;
    showFileExtension: boolean;
    enablePersistence: boolean;
    showHiddenItems: boolean;
    persistData: boolean;
    localeObj: base.L10n;
    uploadObj: inputs.Uploader;
    cssClass: string;
    searchedItems: Object[];
    searchWord: string;
    retryFiles: FileInfo[];
    retryArgs: RetryArgs[];
    isApplySame: boolean;
    isRetryOpened: boolean;
    dragData: {
        [key: string]: Object;
    }[];
    dragNodes: string[];
    dragPath: string;
    dropPath: string;
    dropData: Object;
    virtualDragElement: HTMLElement;
    isDragDrop: boolean;
    isSearchDrag: boolean;
    targetModule: string;
    treeExpandTimer: number;
    dragCursorPosition: base.PositionModel;
    isDropEnd: boolean;
    droppedObjects: Object[];
    uploadEventArgs: BeforeSendEventArgs;
    destinationPath: string;
    refreshLayout(): void;
}
/** @hidden */
export interface ITreeView extends base.Component<HTMLElement> {
    treeObj: navigations.TreeView;
    removeNode: Function;
    removeNodes: string[];
    duplicateFiles: Function;
    rootID: string;
    activeNode: Element;
}
/** @hidden */
export interface IContextMenu extends base.Component<HTMLElement> {
    disableItem(items: string[]): void;
    getItemIndex(item: string): number;
    contextMenu: navigations.ContextMenu;
    contextMenuBeforeOpen: Function;
    items: navigations.MenuItemModel[];
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/common/index.d.ts
/**
 * File Manager common operations
 */
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/common/operations.d.ts
/**
 * Function to read the content from given path in File Manager.
 * @private
 */
export  function read(parent: IFileManager, event: string, path: string): void;
/**
 * Function to create new folder in File Manager.
 * @private
 */
export  function createFolder(parent: IFileManager, itemName: string): void;
/**
 * Function to filter the files in File Manager.
 * @private
 */
export  function filter(parent: IFileManager, event: string): void;
/**
 * Function to rename the folder/file in File Manager.
 * @private
 */
export  function rename(parent: IFileManager, path: string, itemNewName: string): void;
/**
 * Function to paste file's and folder's in File Manager.
 * @private
 */
export  function paste(parent: IFileManager, path: string, names: string[], targetPath: string, pasteOperation: string, renameItems?: string[], actionRecords?: Object[]): void;
/**
 * Function to delete file's and folder's in File Manager.
 * @private
 */
export  function Delete(parent: IFileManager, items: string[], path: string, operation: string): void;
/**
 * Function to get details of file's and folder's in File Manager.
 * @private
 */
export  function GetDetails(parent: IFileManager, names: string[], path: string, operation: string): void;
export  function Search(parent: IFileManager, event: string, path: string, searchString: string, showHiddenItems?: boolean, caseSensitive?: boolean): void;
export  function Download(parent: IFileManager, path: string, items: string[]): void;
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/common/utility.d.ts
/**
 * Utility file for common actions
 * @private
 */
export  function updatePath(node: HTMLLIElement, data: Object, instance: IFileManager): void;
export  function getPath(element: Element | Node, text: string, hasId: boolean): string;
export  function getPathId(node: Element): string[];
export  function getPathNames(element: Element, text: string): string[];
export  function getParents(element: Element, text: string, isId: boolean, hasId?: boolean): string[];
export  function generatePath(parent: IFileManager): void;
export  function removeActive(parent: IFileManager): void;
export  function activeElement(action: string, parent: IFileManager): boolean;
export  function addBlur(nodes: Element): void;
export  function removeBlur(parent?: IFileManager, hover?: string): void;
export  function getModule(parent: IFileManager, element: Element): void;
export  function searchWordHandler(parent: IFileManager, value: string, isLayoutChange: boolean): void;
export  function updateLayout(parent: IFileManager, view: string): void;
export  function getTargetModule(parent: IFileManager, element: Element): void;
export  function refresh(parent: IFileManager): void;
export  function openAction(parent: IFileManager): void;
export  function getPathObject(parent: IFileManager): Object;
export  function copyFiles(parent: IFileManager): void;
export  function cutFiles(parent: IFileManager): void;
export  function fileType(file: Object): string;
export  function getImageUrl(parent: IFileManager, item: Object): string;
export  function getFullPath(parent: IFileManager, data: Object, path: string): string;
export  function getFullName(item: Object): string;
export  function getName(parent: IFileManager, data: Object): string;
export  function getSortedData(parent: IFileManager, items: Object[]): Object[];
export  function getObject(parent: IFileManager, key: string, value: string): Object;
export  function createEmptyElement(parent: IFileManager, element: HTMLElement, args: ReadArgs | SearchArgs): void;
export  function getDirectories(files: Object[]): Object[];
export  function setNodeId(result: ReadArgs, rootId: string): void;
export  function setDateObject(args: Object[]): void;
export  function getLocaleText(parent: IFileManager, text: string): string;
export  function getCssClass(parent: IFileManager, css: string): string;
export  function sortbyClickHandler(parent: IFileManager, args: navigations.MenuEventArgs): void;
export  function getSortField(id: string): string;
export  function setNextPath(parent: IFileManager, path: string): void;
export  function openSearchFolder(parent: IFileManager, data: Object): void;
export  function pasteHandler(parent: IFileManager): void;
export  function validateSubFolder(parent: IFileManager, data: {
    [key: string]: Object;
}[], dropPath: string, dragPath: string): boolean;
export  function dropHandler(parent: IFileManager): void;
export  function getParentPath(oldPath: string): string;
export  function getDirectoryPath(parent: IFileManager, args: ReadArgs): string;
export  function doPasteUpdate(parent: IFileManager, operation: string, result: ReadArgs): void;
export  function readDropPath(parent: IFileManager): void;
export  function getDuplicateData(parent: IFileManager, name: string): object;
export  function createVirtualDragElement(parent: IFileManager): void;
export  function dragStopHandler(parent: IFileManager, args: base.DragEventArgs): void;
export  function dragStartHandler(parent: IFileManager, args: base.DragEventArgs & base.BlazorDragEventArgs): void;
export  function dragCancel(parent: IFileManager): void;
export  function removeDropTarget(parent: IFileManager): void;
export  function removeItemClass(parent: IFileManager, value: string): void;
export  function draggingHandler(parent: IFileManager, args: base.DragEventArgs): void;
export  function objectToString(data: Object): string;
export  function getItemName(parent: IFileManager, data: Object): string;
export  function updateRenamingData(parent: IFileManager, data: Object): void;
export  function doRename(parent: IFileManager): void;
export  function doDownload(parent: IFileManager): void;
export  function doDeleteFiles(parent: IFileManager, data: Object[], newIds: string[]): void;
export  function doDownloadFiles(parent: IFileManager, data: Object[], newIds: string[]): void;
export  function createDeniedDialog(parent: IFileManager, data: Object): void;
export  function getAccessClass(data: Object): string;
export  function hasReadAccess(data: Object): boolean;
export  function hasEditAccess(data: Object): boolean;
export  function hasContentAccess(data: Object): boolean;
export  function hasUploadAccess(data: Object): boolean;
export  function hasDownloadAccess(data: Object): boolean;
export  function createNewFolder(parent: IFileManager): void;
export  function uploadItem(parent: IFileManager): void;
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/index.d.ts
/**
 * File Manager modules
 */
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/layout/details-view.d.ts
/**
 * DetailsView module
 */
export  class DetailsView {
    element: HTMLElement;
    private parent;
    private keyboardModule;
    private keyboardDownModule;
    private keyConfigs;
    private sortItem;
    private isInteracted;
    private interaction;
    private isPasteOperation;
    private isColumnRefresh;
    private clickObj;
    private sortSelectedNodes;
    private emptyArgs;
    private dragObj;
    private startIndex;
    private firstItemIndex;
    private isSelectionUpdate;
    private currentSelectedItem;
    private count;
    private isRendered;
    private isLoaded;
    gridObj: grids.Grid;
    pasteOperation: boolean;
    uploadOperation: boolean;
    /**
     * Constructor for the GridView module
     * @hidden
     */
    constructor(parent?: FileManager);
    private render;
    private adjustWidth;
    private getColumns;
    private adjustHeight;
    private renderCheckBox;
    private onRowDataBound;
    private onActionBegin;
    private onHeaderCellInfo;
    private onBeforeDataBound;
    private onDataBound;
    private selectRecords;
    private addSelection;
    private onSortColumn;
    private onPropertyChanged;
    private onPathChanged;
    private updatePathColumn;
    private checkEmptyDiv;
    private onOpenInit;
    DblClickEvents(args: grids.RecordDoubleClickEventArgs): void;
    openContent(data: Object): void;
    private onLayoutChange;
    private onSearchFiles;
    private removePathColumn;
    private changeData;
    private onFinalizeEnd;
    private onCreateEnd;
    private onRenameInit;
    private onSelectedData;
    private onDeleteInit;
    private onDeleteEnd;
    private onRefreshEnd;
    private onHideLayout;
    private onSelectAllInit;
    private onClearAllInit;
    private onSelectionChanged;
    private onLayoutRefresh;
    private onBeforeRequest;
    private onAfterRequest;
    private onUpdateSelectionData;
    private addEventListener;
    private removeEventListener;
    private onActionFailure;
    private onMenuItemData;
    private onPasteInit;
    private onDetailsInit;
    dragHelper(args: {
        element: HTMLElement;
        sender: MouseEvent & TouchEvent;
    }): HTMLElement;
    private onDetailsResize;
    private createDragObj;
    private onDropInit;
    private oncutCopyInit;
    private onpasteEnd;
    private onDropPath;
    /**
     * For internal use only - Get the module name.
     * @private
     */
    private getModuleName;
    destroy(): void;
    private onSelected;
    private onPathColumn;
    private selectedRecords;
    private onDeSelection;
    private triggerSelect;
    private wireEvents;
    private unWireEvents;
    private wireClickEvent;
    private removeSelection;
    private removeFocus;
    private getFocusedItemIndex;
    private keydownHandler;
    private keyupHandler;
    gridSelectNodes(): Object[];
    private doDownload;
    private performDelete;
    private performRename;
    private updateRenameData;
    private shiftMoveMethod;
    private moveFunction;
    private spaceSelection;
    private ctrlMoveFunction;
    private checkRowsKey;
    private InnerItems;
    private shiftSelectFocusItem;
    private addFocus;
    private getFocusedItem;
    private isSelected;
    private shiftSelectedItem;
    private onMethodCall;
    private getRecords;
    private deleteFiles;
    private downloadFiles;
    private openFile;
    private renameFile;
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/layout/index.d.ts
/**
 * File Manager layout modules
 */
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/layout/large-icons-view.d.ts
/**
 * LargeIconsView module
 */
export  class LargeIconsView {
    private parent;
    element: HTMLElement;
    listObj: lists.ListBaseOptions;
    private keyboardModule;
    private keyboardDownModule;
    private keyConfigs;
    private itemList;
    private items;
    private clickObj;
    private perRow;
    private startItem;
    private multiSelect;
    listElements: HTMLElement;
    uploadOperation: boolean;
    private count;
    private isRendered;
    private tapCount;
    private tapEvent;
    private isPasteOperation;
    private dragObj;
    private isInteracted;
    /**
     * Constructor for the LargeIcons module
     * @hidden
     */
    constructor(parent?: IFileManager);
    private render;
    private preventImgDrag;
    private createDragObj;
    dragHelper(args: {
        element: HTMLElement;
        sender: MouseEvent & TouchEvent;
    }): HTMLElement;
    private onDropInit;
    /**
     * For internal use only - Get the module name.
     * @private
     */
    private getModuleName;
    private adjustHeight;
    private onItemCreated;
    private renderCheckbox;
    private onLayoutChange;
    private checkItem;
    private renderList;
    private onFinalizeEnd;
    private onCreateEnd;
    private onSelectedData;
    private onDeleteInit;
    private onDeleteEnd;
    private onRefreshEnd;
    private onRenameInit;
    private onPathChanged;
    private onOpenInit;
    private onHideLayout;
    private onSelectAllInit;
    private onClearAllInit;
    private onBeforeRequest;
    private onAfterRequest;
    private onSearch;
    private onLayoutRefresh;
    private onUpdateSelectionData;
    private removeEventListener;
    private addEventListener;
    private onActionFailure;
    private onMenuItemData;
    private onDetailsInit;
    private onpasteInit;
    private oncutCopyInit;
    private onpasteEnd;
    private onDropPath;
    private onPropertyChanged;
    destroy(): void;
    private wireEvents;
    private unWireEvents;
    private onMouseOver;
    private wireClickEvent;
    private doTapAction;
    private clickHandler;
    /** @hidden */
    doSelection(target: Element, e: base.TouchEventArgs | base.MouseEventArgs | base.KeyboardEventArgs): void;
    private dblClickHandler;
    private clearSelection;
    private resetMultiSelect;
    private doOpenAction;
    private updateType;
    private keydownActionHandler;
    private keyActionHandler;
    private doDownload;
    private performDelete;
    private performRename;
    private updateRenameData;
    private getVisitedItem;
    private getFocusedItem;
    private getActiveItem;
    private getFirstItem;
    private getLastItem;
    private navigateItem;
    private navigateDown;
    private navigateRight;
    private getNextItem;
    private setFocus;
    private spaceKey;
    private ctrlAKey;
    private csEndKey;
    private csHomeKey;
    private csDownKey;
    private csLeftKey;
    private csRightKey;
    private csUpKey;
    private addActive;
    private removeActive;
    private getDataName;
    private addFocus;
    private checkState;
    private clearSelect;
    private resizeHandler;
    private getItemCount;
    private triggerSelect;
    private selectItems;
    private getIndexes;
    private getItemObject;
    private addSelection;
    private updateSelectedData;
    private onMethodCall;
    private getItemsIndex;
    private deleteFiles;
    private downloadFiles;
    private openFile;
    private renameFile;
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/layout/navigation-pane.d.ts
/**
 * NavigationPane module
 */
export  class NavigationPane {
    private parent;
    treeObj: navigations.TreeView;
    activeNode: Element;
    private keyboardModule;
    private keyConfigs;
    private expandNodeTarget;
    removeNodes: string[];
    moveNames: string[];
    touchClickObj: base.Touch;
    private expandTree;
    private isDrag;
    private dragObj;
    private isPathDragged;
    private isRenameParent;
    private renameParent;
    /**
     * Constructor for the TreeView module
     * @hidden
     */
    constructor(parent?: IFileManager);
    private onInit;
    private addDragDrop;
    dragHelper(args: {
        element: HTMLElement;
        sender: MouseEvent & TouchEvent;
    }): HTMLElement;
    private getDragPath;
    private getDropPath;
    private onDrowNode;
    private addChild;
    private onNodeSelected;
    private onPathDrag;
    private onNodeExpand;
    private onNodeExpanded;
    private onNodeClicked;
    private onNodeEditing;
    private onPathChanged;
    private updateTree;
    private updateTreeNode;
    private removeChildNodes;
    private onOpenEnd;
    private onOpenInit;
    private onInitialEnd;
    private onFinalizeEnd;
    private onCreateEnd;
    private onSelectedData;
    private onDeleteInit;
    private onDeleteEnd;
    private onRefreshEnd;
    private onRenameInit;
    private onRenameEndParent;
    private onRenameEnd;
    private onPropertyChanged;
    private onDownLoadInit;
    private onSelectionChanged;
    private onClearPathInit;
    private onDragEnd;
    private getMoveNames;
    private onCutEnd;
    private selectResultNode;
    private onDropPath;
    private onpasteEnd;
    private checkDropPath;
    private onpasteInit;
    private oncutCopyInit;
    private addEventListener;
    private removeEventListener;
    private onDetailsInit;
    private onMenuItemData;
    private onDragging;
    private onDropInit;
    /**
     * For internal use only - Get the module name.
     * @private
     */
    private getModuleName;
    destroy(): void;
    private wireEvents;
    private unWireEvents;
    private keyDown;
    private getTreeData;
    private updateRenameData;
    private updateItemData;
    private updateActionData;
    private doDownload;
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/ajax-settings-model.d.ts
/**
 * Interface for a class AjaxSettings
 */
export interface AjaxSettingsModel {
    /**
     * Specifies URL to download the files from server.
     * @default null
     */
    downloadUrl?: string;
    /**
     * Specifies URL to get the images from server.
     * @default null
     */
    getImageUrl?: string;
    /**
     * Specifies URL to upload the files to server.
     * @default null
     */
    uploadUrl?: string;
    /**
     * Specifies URL to read the files from server.
     * @default null
     */
    url?: string;
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/ajax-settings.d.ts
/**
 * Specifies the Ajax settings of the File Manager.
 */
export  class AjaxSettings extends base.ChildProperty<AjaxSettings> {
    /**
     * Specifies URL to download the files from server.
     * @default null
     */
    downloadUrl: string;
    /**
     * Specifies URL to get the images from server.
     * @default null
     */
    getImageUrl: string;
    /**
     * Specifies URL to upload the files to server.
     * @default null
     */
    uploadUrl: string;
    /**
     * Specifies URL to read the files from server.
     * @default null
     */
    url: string;
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/column-model.d.ts
/**
 * Interface for a class Column
 */
export interface ColumnModel {
    /**
     * Defines the field name of column which is mapped with mapping name of DataSource.
     * The bounded columns can be sort, filter and group etc.,
     * The `field` name must be a valid JavaScript identifier,
     * the first character must be an alphabet and should not contain spaces and special characters.
     * @default ''
     */
    field?: string;
    /**
     * Defines the header text of column which is used to display in column header.
     * If `headerText` is not defined, then field name value will be assigned to header text.
     * @default ''
     */
    headerText?: string;
    /**
     * Defines the width of the column in pixels or percentage.
     * @default ''
     */
    width?: string | number;
    /**
     * Defines the minimum width of the column in pixels or percentage.
     * @default ''
     */
    minWidth?: string | number;
    /**
     * Defines the maximum width of the column in pixel or percentage, which will restrict resizing beyond this pixel or percentage.
     * @default ''
     */
    maxWidth?: string | number;
    /**
     * Defines the alignment of the column in both header and content cells.
     * @default Left
     */
    textAlign?: TextAlign;
    /**
     * Define the alignment of column header which is used to align the text of column header.
     * @default null
     */
    headerTextAlign?: TextAlign;
    /**
     * Defines the data type of the column.    
     * @default null    
     */
    type?: string;
    /**
     * It is used to change display value with the given format and does not affect the original data.
     * Gets the format from the user which can be standard or custom
     * [`number`](../common/intl.html#number-formatter-and-parser)
     * and [`date`](../common/intl.html#date-formatter-and-parser) formats.
     * @default null
     * @aspType string
     */
    format?: string | base.NumberFormatOptions | base.DateFormatOptions;
    /**
     * Defines the column template that renders customized element in each cell of the column.
     * It accepts either [template string](../common/template-engine.html) or HTML element ID.
     * @default null
     */
    template?: string;
    /**
     * Defines the column template as string or HTML element ID which is used to add customized element in the column header.
     * @default null
     */
    headerTemplate?: string;
    /**
     * If `allowSorting` set to false, then it disables sorting option of a particular column.  
     * By default all columns are sortable. 
     * @default true    
     */
    allowSorting?: boolean;
    /**
     * If `allowResizing` set to false, it disables resize option of a particular column. 
     * @default true    
     */
    allowResizing?: boolean;
    /**
     * The CSS styles and attributes of the content cells of a particular column can be customized.
     * @default null
     */
    customAttributes?: { [x: string]: Object };
    /**
     * Column visibility can change based on [`Media Queries`](http://cssmediaqueries.com/what-are-css-media-queries.html).
     * `hideAtMedia` accepts only valid Media Queries.
     * @default ''
     */
    hideAtMedia?: string;
    /**
     * It is used to change display value with the given format and does not affect the original data.
     * Gets the format from the user which can be standard or custom
     * [`number`](../common/intl.html#number-formatter-and-parser)
     * and [`date`](../common/intl.html#date-formatter-and-parser) formats.
     * @default null
     */
    customFormat?: { [x: string]: Object };
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/column.d.ts
/**
 * Defines alignments of text, they are
 * * Left
 * * Right
 * * Center
 * * Justify
 */
export  type TextAlign = 
/**  Defines Left alignment */
'Left' | 
/**  Defines Right alignment */
'Right' | 
/**  Defines Center alignment */
'Center' | 
/**  Defines Justify alignment */
'Justify';
/**
 * Defines the cell content's overflow mode. The available modes are
 * * `Clip` -  Truncates the cell content when it overflows its area.
 * * `Ellipsis` -  Displays ellipsis when the cell content overflows its area.
 * * `EllipsisWithTooltip` - Displays ellipsis when the cell content overflows its area
 * also it will display tooltip while hover on ellipsis applied cell.
 */
export  type ClipMode = 
/**  Truncates the cell content when it overflows its area */
'Clip' | 
/** Displays ellipsis when the cell content overflows its area */
'Ellipsis' | 
/** Displays ellipsis when the cell content overflows its area also it will display tooltip while hover on ellipsis applied cell. */
'EllipsisWithTooltip';
/**
 * Interface for a class Column
 */
export  class Column extends base.ChildProperty<Column> {
    /**
     * Defines the field name of column which is mapped with mapping name of DataSource.
     * The bounded columns can be sort, filter and group etc.,
     * The `field` name must be a valid JavaScript identifier,
     * the first character must be an alphabet and should not contain spaces and special characters.
     * @default ''
     */
    field: string;
    /**
     * Defines the header text of column which is used to display in column header.
     * If `headerText` is not defined, then field name value will be assigned to header text.
     * @default ''
     */
    headerText: string;
    /**
     * Defines the width of the column in pixels or percentage.
     * @default ''
     */
    width: string | number;
    /**
     * Defines the minimum width of the column in pixels or percentage.
     * @default ''
     */
    minWidth: string | number;
    /**
     * Defines the maximum width of the column in pixel or percentage, which will restrict resizing beyond this pixel or percentage.
     * @default ''
     */
    maxWidth: string | number;
    /**
     * Defines the alignment of the column in both header and content cells.
     * @default Left
     */
    textAlign: TextAlign;
    /**
     * Defines the cell content's overflow mode. The available modes are
     * * `Clip` -  Truncates the cell content when it overflows its area.
     * * `Ellipsis` -  Displays ellipsis when the cell content overflows its area.
     * * `EllipsisWithTooltip` - Displays ellipsis when the cell content overflows its area
     * also it will display tooltip while hover on ellipsis applied cell.
     * @default Ellipsis
     */
    clipMode: ClipMode;
    /**
     * Define the alignment of column header which is used to align the text of column header.
     * @default null
     */
    headerTextAlign: TextAlign;
    /**
     * Defines the data type of the column.
     * @default null
     */
    type: string;
    /**
     * It is used to change display value with the given format and does not affect the original data.
     * Gets the format from the user which can be standard or custom
     * [`number`](../common/intl.html#number-formatter-and-parser)
     * and [`date`](../common/intl.html#date-formatter-and-parser) formats.
     * @default null
     * @aspType string
     */
    format: string | base.NumberFormatOptions | base.DateFormatOptions;
    /**
     * Defines the column template that renders customized element in each cell of the column.
     * It accepts either [template string](../common/template-engine.html) or HTML element ID.
     * @default null
     */
    template: string;
    /**
     * Defines the column template as string or HTML element ID which is used to add customized element in the column header.
     * @default null
     */
    headerTemplate: string;
    /**
     * If `allowSorting` set to false, then it disables sorting option of a particular column.
     * By default all columns are sortable.
     * @default true
     */
    allowSorting: boolean;
    /**
     * If `allowResizing` set to false, it disables resize option of a particular column.
     * @default true
     */
    allowResizing: boolean;
    /**
     * The CSS styles and attributes of the content cells of a particular column can be customized.
     * @default null
     */
    customAttributes: {
        [x: string]: Object;
    };
    /**
     * Column visibility can change based on [`Media Queries`](http://cssmediaqueries.com/what-are-css-media-queries.html).
     * `hideAtMedia` accepts only valid Media Queries.
     * @default ''
     */
    hideAtMedia: string;
    /**
     * It is used to change display value with the given format and does not affect the original data.
     * Gets the format from the user which can be standard or custom
     * [`number`](../common/intl.html#number-formatter-and-parser)
     * and [`date`](../common/intl.html#date-formatter-and-parser) formats.
     * @default null
     */
    customFormat: {
        [x: string]: Object;
    };
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/contextMenu-settings-model.d.ts
/**
 * Interface for a class ContextMenuSettings
 */
export interface ContextMenuSettingsModel {
    /**
     * Specifies the array of string or object that is used to configure file items.
     * @default fileItems
     */
    file?: string[];
    /**
     * An array of string or object that is used to configure folder items.
     * @default folderItems
     */
    folder?: string[];
    /**
     * An array of string or object that is used to configure layout items.
     * @default layoutItems
     */
    layout?: string[];
    /**
     * Enables or disables the ContextMenu.
     * @default true
     */
    visible?: boolean;
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/contextMenu-settings.d.ts
export  const fileItems: string[];
export  const folderItems: string[];
export  const layoutItems: string[];
/**
 * Specifies the ContextMenu settings of the File Manager.
 */
export  class ContextMenuSettings extends base.ChildProperty<ContextMenuSettings> {
    /**
     * Specifies the array of string or object that is used to configure file items.
     * @default fileItems
     */
    file: string[];
    /**
     * An array of string or object that is used to configure folder items.
     * @default folderItems
     */
    folder: string[];
    /**
     * An array of string or object that is used to configure layout items.
     * @default layoutItems
     */
    layout: string[];
    /**
     * Enables or disables the ContextMenu.
     * @default true
     */
    visible: boolean;
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/default-locale.d.ts
/**
 * Specifies the default locale of FileManager component
 */
export  let defaultLocale: Object;
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/details-view-settings-model.d.ts
/**
 * Interface for a class DetailsViewSettings
 */
export interface DetailsViewSettingsModel {
    /**
     * If `columnResizing` is set to true, Grid columns can be resized.      
     * @default true  
     */
    columnResizing?: boolean;
    /**
     * Specifies the customizable details view.
     * @default {     
     * columns: [{
     * field: 'name', headerText: 'Name', minWidth: 120, width: 'auto', customAttributes: { class: 'e-fe-grid-name' },
     * template: '<span class="e-fe-text">${name}</span>'},{field: 'size', headerText: 'Size', 
     * minWidth: 50, width: '110', template: '<span class="e-fe-size">${size}</span>'},
     * { field: '_fm_modified', headerText: 'DateModified',
     * minWidth: 50, width: '190'}
     * ]
     * }
     */
    columns?: ColumnModel[];
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/details-view-settings.d.ts
/**
 * Specifies the columns in the details view of the file manager.
 */
export  const columnArray: ColumnModel[];
/**
 * Specifies the grid settings of the File Manager.
 */
export  class DetailsViewSettings extends base.ChildProperty<DetailsViewSettings> {
    /**
     * If `columnResizing` is set to true, Grid columns can be resized.
     * @default true
     */
    columnResizing: boolean;
    /**
     * Specifies the customizable details view.
     * @default {
     * columns: [{
     * field: 'name', headerText: 'Name', minWidth: 120, width: 'auto', customAttributes: { class: 'e-fe-grid-name' },
     * template: '<span class="e-fe-text">${name}</span>'},{field: 'size', headerText: 'Size',
     * minWidth: 50, width: '110', template: '<span class="e-fe-size">${size}</span>'},
     * { field: '_fm_modified', headerText: 'DateModified',
     * minWidth: 50, width: '190'}
     * ]
     * }
     */
    columns: ColumnModel[];
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/index.d.ts
/**
 * FileExplorer common modules
 */
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/navigation-pane-settings-model.d.ts
/**
 * Interface for a class NavigationPaneSettings
 */
export interface NavigationPaneSettingsModel {
    /**
     * Specifies the maximum width of navigationpane.
     * @default '650px'
     */
    maxWidth?: string | number;
    /**
     * Specifies the minimum width of navigationpane.
     * @default '240px'
     */
    minWidth?: string | number;
    /**
     * Enables or disables the navigation pane.
     * @default true
     */
    visible?: boolean;
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/navigation-pane-settings.d.ts
/**
 * Specifies the navigationpane settings of the File Manager.
 */
export  class NavigationPaneSettings extends base.ChildProperty<NavigationPaneSettings> {
    /**
     * Specifies the maximum width of navigationpane.
     * @default '650px'
     */
    maxWidth: string | number;
    /**
     * Specifies the minimum width of navigationpane.
     * @default '240px'
     */
    minWidth: string | number;
    /**
     * Enables or disables the navigation pane.
     * @default true
     */
    visible: boolean;
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/search-settings-model.d.ts
/**
 * Interface for a class SearchSettings
 */
export interface SearchSettingsModel {
    /**
     * Enables or disables the allowSearchOnTyping.
     * @default true
     */
    allowSearchOnTyping?: boolean;
    /**
     * Specifies the filter type while searching the content. The available filter types are:
     * * `contains`
     * * `startsWith`
     * * `endsWith`
     * @default 'contains'
     */
    filterType?: FilterType;
    /**
     * If ignoreCase is set to false, searches files that match exactly,
     * else searches files that are case insensitive(uppercase and lowercase letters treated the same).
     * @default true
     */
    ignoreCase?: boolean;
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/search-settings.d.ts
export  type FilterType = 'contains' | 'startsWith' | 'endsWith';
/**
 * Specifies the Search settings of the File Manager.
 */
export  class SearchSettings extends base.ChildProperty<SearchSettings> {
    /**
     * Enables or disables the allowSearchOnTyping.
     * @default true
     */
    allowSearchOnTyping: boolean;
    /**
     * Specifies the filter type while searching the content. The available filter types are:
     * * `contains`
     * * `startsWith`
     * * `endsWith`
     * @default 'contains'
     */
    filterType: FilterType;
    /**
     * If ignoreCase is set to false, searches files that match exactly,
     * else searches files that are case insensitive(uppercase and lowercase letters treated the same).
     * @default true
     */
    ignoreCase: boolean;
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/toolbar-settings-model.d.ts
/**
 * Interface for a class ToolbarSettings
 */
export interface ToolbarSettingsModel {
    /**
     * An array of string or object that is used to configure the toolbar items.
     * @default toolbarItems
     */
    items?: string[];
    /**
     * Enables or disables the toolbar rendering in the file manager component.
     * @default true
     */
    visible?: boolean;
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/toolbar-settings.d.ts
export  const toolbarItems: string[];
/**
 * Specifies the Toolbar settings of the FileManager.
 */
export  class ToolbarSettings extends base.ChildProperty<ToolbarSettings> {
    /**
     * An array of string or object that is used to configure the toolbar items.
     * @default toolbarItems
     */
    items: string[];
    /**
     * Enables or disables the toolbar rendering in the file manager component.
     * @default true
     */
    visible: boolean;
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/upload-settings-model.d.ts
/**
 * Interface for a class UploadSettings
 */
export interface UploadSettingsModel {
    /**
     * Specifies the extensions of the file types allowed in the file manager component and pass the extensions with comma separators.
     * For example, if you want to upload specific image files, pass allowedExtensions as ".jpg,.png".
     * @defaults ''
     */
    allowedExtensions?: string;
    /**
     * By default, the FileManager component initiates automatic upload when the files are added in upload queue.
     * If you want to manipulate the files before uploading to server, disable the autoUpload property.
     * The buttons "upload" and "clear" will be hided from file list when the autoUpload property is true.
     * @default true
     */
    autoUpload?: boolean;
    /**
     * Specifies the minimum file size to be uploaded in bytes.
     * The property is used to make sure that you cannot upload empty files and small files.
     * @default 0
     */
    minFileSize?: number;
    /**
     * Specifies the maximum allowed file size to be uploaded in bytes.
     * The property is used to make sure that you cannot upload too large files.
     * @default 30000000
     */
    maxFileSize?: number;
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/upload-settings.d.ts
/**
 * Specifies the Ajax settings of the File Manager.
 */
export  class UploadSettings extends base.ChildProperty<UploadSettings> {
    /**
     * Specifies the extensions of the file types allowed in the file manager component and pass the extensions with comma separators.
     * For example, if you want to upload specific image files, pass allowedExtensions as ".jpg,.png".
     * @defaults ''
     */
    allowedExtensions: string;
    /**
     * By default, the FileManager component initiates automatic upload when the files are added in upload queue.
     * If you want to manipulate the files before uploading to server, disable the autoUpload property.
     * The buttons "upload" and "clear" will be hided from file list when the autoUpload property is true.
     * @default true
     */
    autoUpload: boolean;
    /**
     * Specifies the minimum file size to be uploaded in bytes.
     * The property is used to make sure that you cannot upload empty files and small files.
     * @default 0
     */
    minFileSize: number;
    /**
     * Specifies the maximum allowed file size to be uploaded in bytes.
     * The property is used to make sure that you cannot upload too large files.
     * @default 30000000
     */
    maxFileSize: number;
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/pop-up/context-menu.d.ts
/**
 * ContextMenu module
 */
export  class ContextMenu {
    private parent;
    private targetElement;
    contextMenu: navigations.ContextMenu;
    menuTarget: HTMLElement;
    private keyConfigs;
    private keyboardModule;
    private menuType;
    private currentItems;
    private currentElement;
    private disabledItems;
    menuItemData: object;
    /**
     * Constructor for the ContextMenu module
     * @hidden
     */
    constructor(parent?: IFileManager);
    private render;
    onBeforeItemRender(args: splitbuttons.MenuEventArgs): void;
    onBeforeClose(): void;
    onBeforeOpen(args: navigations.BeforeOpenCloseMenuEventArgs): void;
    private updateActiveModule;
    /** @hidden */
    getTargetView(target: Element): string;
    getItemIndex(item: string): number;
    disableItem(items: string[]): void;
    private enableItems;
    private setFolderItem;
    private setFileItem;
    private setLayoutItem;
    private checkValidItem;
    private getMenuItemData;
    private onSelect;
    private onPropertyChanged;
    private addEventListener;
    private removeEventListener;
    private keyActionHandler;
    /**
     * For internal use only - Get the module name.
     * @private
     */
    private getModuleName;
    private destroy;
    private getItemData;
    private getMenuId;
}
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/pop-up/dialog.d.ts
export  function createDialog(parent: IFileManager, text: string, e?: ReadArgs | inputs.SelectedEventArgs, details?: FileDetails, replaceItems?: string[]): void;
export  function createExtDialog(parent: IFileManager, text: string, replaceItems?: string[], newPath?: string): void;
export  function createImageDialog(parent: IFileManager, header: string, imageUrl: string): void;
//node_modules/@syncfusion/ej2-filemanager/src/file-manager/pop-up/index.d.ts
/**
 * File Manager pop-up modules
 */
//node_modules/@syncfusion/ej2-filemanager/src/index.d.ts
/**
 * File Manager all modules
 */
 }
export namespace gantt { 

//node_modules/@syncfusion/ej2-gantt/src/components.d.ts
/**
 * Gantt Component
 */
//node_modules/@syncfusion/ej2-gantt/src/gantt/actions/actions.d.ts
/**
 * Gantt Action Modules
 */
//node_modules/@syncfusion/ej2-gantt/src/gantt/actions/cell-edit.d.ts
/**
 * To handle cell edit action on default columns and custom columns
 */
export  class CellEdit {
    private parent;
    /**
     * @private
     */
    isCellEdit: boolean;
    constructor(ganttObj: Gantt);
    /**
     * Bind all editing related properties from Gantt to TreeGrid
     */
    private bindTreeGridProperties;
    /**
     * Ensure current cell was editable or not
     * @param args
     */
    private ensureEditCell;
    /**
     * To render edit dialog and to focus on notes tab
     * @param args
     */
    private openNotesEditor;
    private isValueChange;
    /**
     * Initiate cell save action on Gantt with arguments from TreeGrid
     * @param args
     * @param editedObj
     * @private
     */
    initiateCellEdit(args: object, editedObj: object): void;
    /**
     * To update task name cell with new value
     * @param args
     */
    private taskNameEdited;
    /**
     * To update task notes cell with new value
     * @param args
     */
    private notedEdited;
    /**
     * To update task start date cell with new value
     * @param args
     */
    private startDateEdited;
    /**
     * To update task end date cell with new value
     * @param args
     */
    private endDateEdited;
    /**
     * To update duration cell with new value
     * @param args
     */
    private durationEdited;
    /**
     * To update progress cell with new value
     * @param args
     */
    private progressEdited;
    /**
     * To update baselines with new baseline start date and baseline end date
     * @param args
     */
    private baselineEdited;
    /**
     * To update task's resource cell with new value
     * @param args
     * @param editedObj
     */
    private resourceEdited;
    /**
     * To update task's predecessor cell with new value
     * @param editedArgs
     * @param cellEditArgs
     */
    private dependencyEdited;
    /**
     * To compare start date and end date from Gantt record
     * @param ganttRecord
     */
    private compareDatesFromRecord;
    /**
     * To start method save action with edited cell value
     * @param args
     */
    private updateEditedRecord;
    /**
     * To remove all public private properties
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-gantt/src/gantt/actions/chart-scroll.d.ts
/**
 * To handle scroll event on chart and from TreeGrid
 * @hidden
 */
export  class ChartScroll {
    private parent;
    private element;
    previousScroll: {
        top: number;
        left: number;
    };
    /**
     * Constructor for the scrolling.
     * @hidden
     */
    constructor(parent: Gantt);
    /**
     * Bind event
     */
    private addEventListeners;
    /**
     * Unbind events
     */
    private removeEventListeners;
    /**
     *
     * @param args
     */
    private gridScrollHandler;
    /**
     * Scroll event handler
     */
    private onScroll;
    /**
     * To set height for chart scroll container
     * @param height - To set height for scroll container in chart side
     * @private
     */
    setHeight(height: string | number): void;
    /**
     * To set width for chart scroll container
     * @param width - To set width to scroll container
     * @private
     */
    setWidth(width: string | number): void;
    /**
     * To set scroll top for chart scroll container
     * @param scrollTop - To set scroll top for scroll container
     * @private
     */
    setScrollTop(scrollTop: number): void;
    /**
     * To set scroll left for chart scroll container
     * @param scrollLeft  - To set scroll left for scroll container
     */
    setScrollLeft(scrollLeft: number): void;
    /**
     * Destroy scroll related elements and unbind the events
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-gantt/src/gantt/actions/column-menu.d.ts
/**
 * Gantt ColumnMenu module
 *
 */
export  class ColumnMenu {
    private parent;
    /**
     * Constructor for render module
     */
    constructor(parent?: Gantt);
    getColumnMenu(): HTMLElement;
    destroy(): void;
    /**
     * For internal use only - Get the module name.
     * @private
     */
    private getModuleName;
}
//node_modules/@syncfusion/ej2-gantt/src/gantt/actions/column-reorder.d.ts
/**
 * To handle column reorder action from TreeGrid
 */
export  class Reorder {
    parent: Gantt;
    constructor(gantt: Gantt);
    /**
     * Get module name
     */
    private getModuleName;
    /**
     * To bind reorder events.
     * @return {void}
     * @private
     */
    private bindEvents;
    /**
     * To destroy the column-reorder.
     * @return {void}
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-gantt/src/gantt/actions/column-resize.d.ts
/**
 * Column resize action related code goes here
 */
export  class Resize {
    parent: Gantt;
    constructor(gantt: Gantt);
    /**
     * Get module name
     */
    private getModuleName;
    /**
     * To bind resize events.
     * @return {void}
     * @private
     */
    private bindEvents;
    /**
     * To destroy the column-resizer.
     * @return {void}
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-gantt/src/gantt/actions/connector-line-edit.d.ts
/**
 * File for handling connector line edit operation in Gantt.
 */
export  class ConnectorLineEdit {
    private parent;
    private connectorLineElement;
    /**
     * @private
     */
    validationPredecessor: IPredecessor[];
    /** @private */
    confirmPredecessorDialog: popups.Dialog;
    /** @private */
    predecessorIndex: number;
    /** @private */
    childRecord: IGanttData;
    private dateValidateModule;
    constructor(ganttObj?: Gantt);
    /**
     * To update connector line edit element.
     * @return {void}
     * @private
     */
    updateConnectorLineEditElement(e: PointerEvent): void;
    /**
     * To get hovered connector line element.
     * @return {void}
     * @private
     */
    private getConnectorLineHoverElement;
    /**
     * To highlight connector line while hover.
     * @return {void}
     * @private
     */
    private highlightConnectorLineElements;
    /**
     * To add connector line highlight class.
     * @return {void}
     * @private
     */
    private addHighlight;
    /**
     * To remove connector line highlight class.
     * @return {void}
     * @private
     */
    private removeHighlight;
    /**
     * To remove connector line highlight class.
     * @return {void}
     * @private
     */
    getEditedConnectorLineString(records: IGanttData[]): string;
    /**
     * Tp refresh connector lines of edited records
     * @param editedRecord
     * @private
     */
    refreshEditedRecordConnectorLine(editedRecord: IGanttData[]): void;
    /**
     * Method to remove connector line from DOM
     * @param records
     * @private
     */
    removePreviousConnectorLines(records: IGanttData[] | object): void;
    private removeConnectorLineById;
    private idFromPredecessor;
    private predecessorValidation;
    /**
     * To validate predecessor relations
     * @param ganttRecord
     * @param predecessorString
     * @private
     */
    validatePredecessorRelation(ganttRecord: IGanttData, predecessorString: string): boolean;
    /**
     * To add dependency for Task
     * @param ganttRecord
     * @param predecessorString
     * @private
     */
    addPredecessor(ganttRecord: IGanttData, predecessorString: string): void;
    /**
     * To remove dependency from task
     * @param ganttRecord
     * @private
     */
    removePredecessor(ganttRecord: IGanttData): void;
    /**
     * To modify current dependency values of Task
     * @param ganttRecord
     * @param predecessorString
     * @private
     */
    updatePredecessor(ganttRecord: IGanttData, predecessorString: string): boolean;
    private updatePredecessorHelper;
    private checkParentRelation;
    private initPredecessorValidationDialog;
    /**
     * To render validation dialog
     * @return {void}
     * @private
     */
    renderValidationDialog(): void;
    private validationDialogOkButton;
    private validationDialogCancelButton;
    private validationDialogClose;
    /**
     * Validate and apply the predecessor option from validation dialog
     * @param buttonType
     * @return {void}
     * @private
     */
    applyPredecessorOption(): void;
    private calculateOffset;
    /**
     * Update predecessor value with user selection option in predecessor validation dialog
     * @param args
     * @return {void}
     */
    private removePredecessors;
    /**
     * To open predecessor validation dialog
     * @param args
     * @return {void}
     * @private
     */
    openValidationDialog(args: object): void;
    /**
     * Predecessor link validation dialog template
     * @param args
     * @private
     */
    validationDialogTemplate(args: object): HTMLElement;
    /**
     * To validate the types while editing the taskbar
     * @param args
     * @return {boolean}
     * @private
     */
    validateTypes(ganttRecord: IGanttData): object;
    /**
     * Method to remove and update new predecessor collection in successor record
     * @param data
     * @private
     */
    addRemovePredecessor(data: IGanttData): void;
    /**
     * Method to remove a predecessor from a record.
     * @param childRecord
     * @param index
     * @private
     */
    removePredecessorByIndex(childRecord: IGanttData, index: number): void;
    /**
     * To render predecessor delete confirmation dialog
     * @return {void}
     * @private
     */
    renderPredecessorDeleteConfirmDialog(): void;
    private confirmCloseDialog;
    private confirmOkDeleteButton;
}
//node_modules/@syncfusion/ej2-gantt/src/gantt/actions/context-menu.d.ts
/**
 * To handle the context menu items & sub-menu items
 */
export  class ContextMenu {
    /**
     * @private
     */
    contextMenu: navigations.ContextMenu;
    private parent;
    private ganttID;
    private element;
    private headerMenuItems;
    private contentMenuItems;
    private rowData;
    /**
     * @private
     */
    isOpen: Boolean;
    private predecessors;
    private hideItems;
    private disableItems;
    constructor(parent?: Gantt);
    private addEventListener;
    private reRenderContextMenu;
    private render;
    private contextMenuItemClick;
    private convertToMilestone;
    private contextMenuBeforeOpen;
    private updateItemStatus;
    private updateItemVisibility;
    private contextMenuOpen;
    private getMenuItems;
    private createItemModel;
    private getLocale;
    private buildDefaultItems;
    private getIconCSS;
    private getPredecessorsItems;
    private headerContextMenuClick;
    private headerContextMenuOpen;
    private getDefaultItems;
    private getModuleName;
    private removeEventListener;
    private contextMenuOnClose;
    private revertItemStatus;
    private resetItems;
    private generateID;
    private getKeyFromId;
    /**
     * To destroy the contextmenu module.
     * @return {void}
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-gantt/src/gantt/actions/day-markers.d.ts
/**
 * DayMarkers module is used to render event markers, holidays and to highlight the weekend days.
 */
export  class DayMarkers {
    private parent;
    private nonworkingDayRender;
    private eventMarkerRender;
    constructor(parent: Gantt);
    private wireEvents;
    private propertyChanged;
    private refreshMarkers;
    private updateHeight;
    /**
     * To get module name
     */
    getModuleName(): string;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-gantt/src/gantt/actions/dependency.d.ts
/**
 * Predecessor calculation goes here
 */
export  class Dependency {
    private parent;
    private dateValidateModule;
    constructor(gantt: Gantt);
    /**
     * Method to populate predecessor collections in records
     * @private
     */
    ensurePredecessorCollection(): void;
    /**
     *
     * @param ganttData
     * @param ganttProp
     * @private
     */
    ensurePredecessorCollectionHelper(ganttData: IGanttData, ganttProp: ITaskData): void;
    /**
     *
     * @param ganttData Method to check parent dependency in predecessor
     * @param fromId
     */
    private checkIsParent;
    /**
     * Get predecessor collection object from predecessor string value
     * @param predecessorValue
     * @param ganttRecord
     * @private
     */
    calculatePredecessor(predecessorValue: string | number, ganttRecord?: IGanttData): IPredecessor[];
    /**
     * Get predecessor value as string with offset values
     * @param data
     * @private
     */
    getPredecessorStringValue(data: IGanttData): string;
    private getOffsetDurationUnit;
    /**
     * Update predecessor object in both from and to tasks collection
     * @private
     */
    updatePredecessors(): void;
    /**
     * To update predecessor collection to successor tasks
     * @param ganttRecord
     * @param predecessorsCollection
     * @private
     */
    updatePredecessorHelper(ganttRecord: IGanttData, predecessorsCollection?: IGanttData[]): void;
    /**
     * Method to validate date of tasks with predecessor values for all records
     * @private
     */
    updatedRecordsDateByPredecessor(): void;
    /**
     * To validate task date values with dependency
     * @param ganttRecord
     * @private
     */
    validatePredecessorDates(ganttRecord: IGanttData): void;
    /**
     * Method to validate task with predecessor
     * @param parentGanttRecord
     * @param childGanttRecord
     */
    private validateChildGanttRecord;
    /**
     *
     * @param ganttRecord
     * @param predecessorsCollection
     * @private
     */
    getPredecessorDate(ganttRecord: IGanttData, predecessorsCollection: IPredecessor[]): Date;
    /**
     * Get validated start date as per predecessor type
     * @param ganttRecord
     * @param parentGanttRecord
     * @param predecessor
     */
    private getValidatedStartDate;
    /**
     *
     * @param date
     * @param predecessor
     * @param isMilestone
     * @param record
     */
    private updateDateByOffset;
    /**
     *
     * @param records
     * @private
     */
    createConnectorLinesCollection(records: IGanttData[]): void;
    /**
     *
     * @param predecessorsCollection
     */
    private addPredecessorsCollection;
    /**
     * To refresh connector line object collections
     * @param parentGanttRecord
     * @param childGanttRecord
     * @param predecessor
     * @private
     */
    updateConnectorLineObject(parentGanttRecord: IGanttData, childGanttRecord: IGanttData, predecessor: IPredecessor): IConnectorLineObject;
    /**
     *
     * @param childGanttRecord
     * @param previousValue
     * @param validationOn
     * @private
     */
    validatePredecessor(childGanttRecord: IGanttData, previousValue: IPredecessor[], validationOn: string): void;
    /**
     * Method to get validate able predecessor alone from record
     * @param record
     * @private
     */
    getValidPredecessor(record: IGanttData): IPredecessor[];
}
//node_modules/@syncfusion/ej2-gantt/src/gantt/actions/dialog-edit.d.ts
/**
 *
 * @hidden
 */
export  class DialogEdit {
    private isEdit;
    /**
     * @private
     */
    dialog: HTMLElement;
    /**
     * @private
     */
    dialogObj: popups.Dialog;
    private preTableCollection;
    private preTaskIds;
    private localeObj;
    private parent;
    private rowIndex;
    private types;
    private editedRecord;
    private rowData;
    private beforeOpenArgs;
    private inputs;
    /**
     * @private
     */
    updatedEditFields: EditDialogFieldSettingsModel[];
    private updatedAddFields;
    private addedRecord;
    private dialogEditValidationFlag;
    private tabObj;
    private ganttResources;
    /**
     * Constructor for render module
     */
    constructor(parent: Gantt);
    private wireEvents;
    private dblClickHandler;
    /**
     * Method to validate add and edit dialog fields property.
     * @private
     */
    processDialogFields(): void;
    private validateDialogFields;
    /**
     * Method to get general column fields
     */
    private getGeneralColumnFields;
    /**
     * Method to get custom column fields
     */
    private getCustomColumnFields;
    /**
     * Get default dialog fields when fields are not defined for add and edit dialogs
     */
    private getDefaultDialogFields;
    /**
     * @private
     */
    openAddDialog(): void;
    /**
     *
     * @return {Date}
     * @private
     */
    getMinimumStartDate(): Date;
    /**
     * @private
     */
    composeAddRecord(): IGanttData;
    /**
     * @private
     */
    openToolbarEditDialog(): void;
    /**
     * @param taskId
     * @private
     */
    openEditDialog(taskId: number | string | Object): void;
    private createDialog;
    private buttonClick;
    /**
     * @private
     */
    dialogClose(): void;
    private resetValues;
    private destroyDialogInnerElements;
    private destroyCustomField;
    /**
     * @private
     */
    destroy(): void;
    /**
     * Method to get current edit dialog fields value
     */
    private getEditFields;
    private createTab;
    private tabSelectedEvent;
    private responsiveTabContent;
    private getFieldsModel;
    private createInputModel;
    private validateScheduleFields;
    private updateScheduleFields;
    private validateDuration;
    private validateStartDate;
    private validateEndDate;
    /**
     *
     * @param columnName
     * @param value
     * @param currentData
     * @private
     */
    validateScheduleValuesByCurrentField(columnName: string, value: string, currentData: IGanttData): boolean;
    private getPredecessorModel;
    private getResourcesModel;
    private getNotesModel;
    private createDivElement;
    private createInputElement;
    private renderTabItems;
    private renderGeneralTab;
    private isCheckIsDisabled;
    private renderPredecessorTab;
    private updateResourceCollection;
    private renderResourceTab;
    private renderCustomTab;
    private renderNotesTab;
    private renderInputElements;
    private taskNameCollection;
    private predecessorEditCollection;
    private updatePredecessorDropDownData;
    private validSuccessorTasks;
    private getPredecessorType;
    private initiateDialogSave;
    private updateGeneralTab;
    private updateScheduleProperties;
    private updatePredecessorTab;
    private updateResourceTab;
    private updateNotesTab;
    private updateCustomTab;
}
/**
 * @hidden
 */
export  type Inputs = buttons.CheckBox | dropdowns.DropDownList | inputs.TextBox | inputs.NumericTextBox | calendars.DatePicker | calendars.DateTimePicker | inputs.MaskedTextBox;
/**
 * @hidden
 */
export interface IPreData {
    id?: string;
    name?: string;
    type?: string;
    offset?: string;
}
//node_modules/@syncfusion/ej2-gantt/src/gantt/actions/edit.d.ts
/**
 * The Edit Module is used to handle editing actions.
 */
export  class Edit {
    private parent;
    validatedChildItems: IGanttData[];
    private isFromDeleteMethod;
    private targetedRecords;
    /**
     * @private
     */
    confirmDialog: popups.Dialog;
    private taskbarMoved;
    private predecessorUpdated;
    newlyAddedRecordBackup: IGanttData;
    isBreakLoop: Boolean;
    addRowSelectedItem: IGanttData;
    cellEditModule: CellEdit;
    taskbarEditModule: TaskbarEdit;
    dialogModule: DialogEdit;
    constructor(parent?: Gantt);
    private getModuleName;
    /**
     * Method to update default edit params and editors for Gantt
     */
    private updateDefaultColumnEditors;
    /**
     * Method to update editors for id column in Gantt
     */
    private updateIDColumnEditParams;
    /**
     * Method to update edit params of default progress column
     */
    private updateProgessColumnEditParams;
    /**
     * Assign edit params for id and progress columns
     */
    private updateEditParams;
    /**
     * Method to update resource column editor for default resource column
     */
    private updateResourceColumnEditor;
    /**
     * Method to create resource custom editor
     */
    private getResourceEditor;
    /**
     * @private
     */
    reUpdateEditModules(): void;
    private recordDoubleClick;
    /**
     * @private
     */
    destroy(): void;
    /**
     * @private
     */
    deletedTaskDetails: IGanttData[];
    /**
     * Method to update record with new values.
     * @param {Object} data - Defines new data to update.
     */
    updateRecordByID(data: Object): void;
    /**
     *
     * @param data
     * @param ganttData
     * @param isFromDialog
     * @private
     */
    validateUpdateValues(data: Object, ganttData: IGanttData, isFromDialog?: boolean): void;
    private validateScheduleValues;
    private validateScheduleByTwoValues;
    private isTaskbarMoved;
    private isPredecessorUpdated;
    /**
     * Method to check need to open predecessor validate dialog
     * @param data
     */
    private isCheckPredecessor;
    /**
     * Method to update all dependent record on edit action
     * @param args
     * @private
     */
    initiateUpdateAction(args: ITaskbarEditedEventArgs): void;
    /**
     *
     * @param data method to trigger validate predecessor link by dialog
     */
    private validateTaskEvent;
    private resetValidateArgs;
    /**
     *
     * @param args - Edited event args like taskbar editing, dialog editing, cell editing
     * @private
     */
    updateEditedTask(args: ITaskbarEditedEventArgs): void;
    /**
     * To update parent records while perform drag action.
     * @return {void}
     * @private
     */
    updateParentChildRecord(data: IGanttData): void;
    /**
     *
     * @param data
     * @param newStartDate
     */
    private calculateDateByRoundOffDuration;
    /**
     * To update progress value of parent tasks
     * @param cloneParent
     * @private
     */
    updateParentProgress(cloneParent: IParent): void;
    /**
     * Method to revert cell edit action
     * @param args
     * @private
     */
    revertCellEdit(args: object): void;
    /**
     *
     * @return {void}
     * @private
     */
    reUpdatePreviousRecords(isRefreshChart?: boolean, isRefreshGrid?: boolean): void;
    /**
     * Copy previous task data value to edited task data
     * @param existing
     * @param newValue
     */
    private copyTaskData;
    /**
     * To update schedule date on editing.
     * @return {void}
     * @private
     */
    private updateScheduleDatesOnEditing;
    /**
     *
     * @param ganttRecord
     */
    private updateChildItems;
    /**
     * To get updated child records.
     * @param parentRecord
     * @param childLists
     */
    private getUpdatableChildRecords;
    /**
     *
     * @private
     */
    initiateSaveAction(args: ITaskbarEditedEventArgs): void;
    private dmSuccess;
    private dmFailure;
    /**
     * Method for save action success for local and remote data
     */
    private saveSuccess;
    private resetEditProperties;
    /**
     * @private
     */
    endEditAction(args: ITaskbarEditedEventArgs): void;
    private saveFailed;
    /**
     * To render delete confirmation dialog
     * @return {void}
     */
    private renderDeleteConfirmDialog;
    private closeConfirmDialog;
    private confirmDeleteOkButton;
    /**
     * @private
     */
    startDeleteAction(): void;
    private deleteSelectedItems;
    /**
     * Method to delete record.
     * @param {number | string | number[] | string[] | IGanttData | IGanttData[]} taskDetail - Defines the details of data to delete.
     * @public
     */
    deleteRecord(taskDetail: number | string | number[] | string[] | IGanttData | IGanttData[]): void;
    /**
     * To update 'targetedRecords collection' from given array collection
     * @param taskDetailArray
     */
    private updateTargetedRecords;
    private deleteRow;
    private removePredecessorOnDelete;
    private updatePredecessorValues;
    private deleteChildRecords;
    private removeFromDataSource;
    private removeData;
    private initiateDeleteAction;
    private deleteSuccess;
    /**
     *
     * @return {number | string}
     * @private
     */
    getNewTaskId(): number | string;
    /**
     *
     * @return {void}
     * @private
     */
    private prepareNewlyAddedData;
    /**
     *
     * @return {IGanttData}
     * @private
     */
    private updateNewlyAddedDataBeforeAjax;
    /**
     *
     * @return {number}
     * @private
     */
    private getChildCount;
    /**
     *
     * @return {number}
     * @private
     */
    private getVisibleChildRecordCount;
    /**
     *
     * @return {void}
     * @private
     */
    private updatePredecessorOnIndentOutdent;
    /**
     *
     * @return {string}
     * @private
     */
    private predecessorToString;
    /**
     *
     * @return {void}
     * @private
     */
    private backUpAndPushNewlyAddedRecord;
    /**
     *
     * @return {ITaskAddedEventArgs}
     * @private
     */
    private recordCollectionUpdate;
    /**
     *
     * @return {ITaskAddedEventArgs}
     * @private
     */
    private constructTaskAddedEventArgs;
    /**
     *
     * @return {void}
     * @private
     */
    private addSuccess;
    /**
     *
     * @return {void}
     * @private
     */
    private updateRealDataSource;
    /**
     *
     * @return {boolean | void}
     * @private
     */
    private addDataInRealDataSource;
    /**
     * Method to add new record.
     * @param {Object | IGanttData} data - Defines the new data to add.
     * @param {RowPosition} rowPosition - Defines the position of row.
     * @param {number} rowIndex - Defines the row index.
     * @return {void}
     * @private
     */
    addRecord(data?: Object | IGanttData, rowPosition?: RowPosition, rowIndex?: number): void;
    /**
     * Method to update unique id collection in TreeGrid
     */
    private updateTreeGridUniqueID;
    private refreshNewlyAddedRecord;
    /**
     *
     * @return {void}
     * @private
     */
    private removeAddedRecord;
}
//node_modules/@syncfusion/ej2-gantt/src/gantt/actions/excel-export.d.ts
/**
 * Gantt Excel Export module
 * @hidden
 */
export  class ExcelExport {
    private parent;
    /**
     * Constructor for Excel Export module
     */
    constructor(gantt: Gantt);
    /**
     * For internal use only - Get the module name.
     * @private
     */
    protected getModuleName(): string;
    /**
     * To destroy excel export module.
     * @private
     */
    destroy(): void;
    /**
     * To bind excel exporting events.
     * @return {void}
     * @private
     */
    private bindEvents;
}
//node_modules/@syncfusion/ej2-gantt/src/gantt/actions/filter.d.ts
/**
 * The Filter module is used to handle filter action.
 */
export  class Filter {
    parent: Gantt;
    private filterMenuElement;
    constructor(gantt: Gantt);
    private getModuleName;
    /**
     * Update custom filter for default Gantt columns
     */
    private updateCustomFilters;
    private updateModel;
    private addEventListener;
    private initiateFiltering;
    /**
     * To get filter menu UI
     * @param column
     */
    private getCustomFilterUi;
    private getDatePickerFilter;
    private getDateTimePickerFilter;
    private getDurationFilter;
    /**
     * Remove filter menu while opening column chooser menu
     * @param args
     */
    private columnMenuOpen;
    private actionBegin;
    private actionComplete;
    private setPosition;
    private updateFilterMenuPosition;
    private removeEventListener;
    /**
     * To destroy module
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-gantt/src/gantt/actions/selection.d.ts
/**
 * The Selection module is used to handle cell and row selection.
 */
export  class Selection {
    parent: Gantt;
    selectedRowIndex: number;
    isMultiCtrlRequest: boolean;
    isMultiShiftRequest: boolean;
    isSelectionFromChart: Boolean;
    private actualTarget;
    private isInteracted;
    private prevRowIndex;
    selectedRowIndexes: number[];
    enableSelectMultiTouch: boolean;
    startIndex: number;
    endIndex: number;
    private openPopup;
    constructor(gantt: Gantt);
    /**
     * Get module name
     */
    private getModuleName;
    private wireEvents;
    /**
     * To update selected index.
     * @return {void}
     * @private
     */
    selectRowByIndex(): void;
    /**
     * To bind selection events.
     * @return {void}
     * @private
     */
    private bindEvents;
    private rowSelecting;
    private rowSelected;
    private rowDeselecting;
    private rowDeselected;
    private cellSelecting;
    private cellSelected;
    private cellDeselecting;
    private cellDeselected;
    /**
     * Selects a cell by given index.
     * @param  {grids.IIndex} cellIndex - Defines the row and column indexes.
     * @param  {boolean} isToggle - If set to true, then it toggles the selection.
     * @return {void}
     */
    selectCell(cellIndex: grids.IIndex, isToggle?: boolean): void;
    /**
     * Selects a collection of cells by row and column indexes.
     * @param  {grids.ISelectedCell[]} rowCellIndexes - Specifies the row and column indexes.
     * @return {void}
     */
    selectCells(rowCellIndexes: grids.ISelectedCell[]): void;
    /**
     * Selects a row by given index.
     * @param  {number} index - Defines the row index.
     * @param  {boolean} isToggle - If set to true, then it toggles the selection.
     * @return {void}
     */
    selectRow(index: number, isToggle?: boolean): void;
    /**
     * Selects a collection of rows by indexes.
     * @param  {number[]} records - Defines the collection of row indexes.
     * @return {void}
     */
    selectRows(records: number[]): void;
    /**
     * Gets the collection of selected row indexes.
     * @return {number[]}
     */
    getSelectedRowIndexes(): number[];
    /**
     * Gets the collection of selected row and cell indexes.
     * @return {number[]}
     */
    getSelectedRowCellIndexes(): grids.ISelectedCell[];
    /**
     * Gets the collection of selected records.
     * @return {Object[]}
     */
    getSelectedRecords(): Object[];
    /**
     * Get the selected records for cell selection.
     * @return {IGanttData[]}
     */
    getCellSelectedRecords(): IGanttData[];
    /**
     * Gets the collection of selected rows.
     * @return {Element[]}
     */
    getSelectedRows(): Element[];
    /**
     * Deselects the current selected rows and cells.
     * @return {void}
     */
    clearSelection(): void;
    private highlightSelectedRows;
    private getselectedrowsIndex;
    /**
     * Selects a range of rows from start and end row indexes.
     * @param  {number} startIndex - Defines the start row index.
     * @param  {number} endIndex - Defines the end row index.
     * @return {void}
     */
    selectRowsByRange(startIndex: number, endIndex?: number): void;
    private addClass;
    private removeClass;
    private showPopup;
    /** @private */
    hidePopUp(): void;
    private popUpClickHandler;
    /**
     * @return {void}
     * @private
     */
    private mouseUpHandler;
    /**
     * To destroy the selection module.
     * @return {void}
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-gantt/src/gantt/actions/sort.d.ts
/**
 * The Sort module is used to handle sorting action.
 */
export  class Sort {
    parent: Gantt;
    constructor(gantt: Gantt);
    /**
     * For internal use only - Get the module name.
     * @private
     */
    private getModuleName;
    /**
     * @private
     */
    private addEventListener;
    /**
     * @hidden
     */
    private removeEventListener;
    /**
     * Destroys the Sorting of TreeGrid.
     * @private
     */
    destroy(): void;
    /**
     * Sort a column with given options.
     * @param {string} columnName - Defines the column name to sort.
     * @param {grids.SortDirection} direction - Defines the direction of sort.
     * @param {boolean} isMultiSort - Defines whether the previously sorted columns are to be maintained.
     */
    sortColumn(columnName: string, direction: grids.SortDirection, isMultiSort?: boolean): void;
    /**
     * Method to clear all sorted columns.
     */
    clearSorting(): void;
    /**
     * The function used to update sortSettings of TreeGrid.
     * @return {void}
     * @hidden
     */
    private updateModel;
    /**
     * To clear sorting for specific column.
     * @param {string} columnName - Defines the sorted column name to remove.
     */
    removeSortColumn(columnName: string): void;
}
//node_modules/@syncfusion/ej2-gantt/src/gantt/actions/taskbar-edit.d.ts
/**
 * File for handling taskbar editing operation in Gantt.
 */
export  class TaskbarEdit {
    protected parent: Gantt;
    taskBarEditElement: Element;
    taskBarEditRecord: IGanttData;
    taskBarEditAction: string;
    roundOffDuration: boolean;
    private mouseDownX;
    private mouseDownY;
    mouseMoveX: number;
    mouseMoveY: number;
    previousItem: ITaskData;
    previousItemProperty: string[];
    taskbarEditedArgs: ITaskbarEditedEventArgs;
    private progressBorderRadius;
    private scrollTimer;
    timerCount: number;
    dragMouseLeave: boolean;
    tooltipPositionX: number;
    isMouseDragged: boolean;
    private falseLine;
    connectorSecondElement: Element;
    connectorSecondRecord: IGanttData;
    connectorSecondAction: string;
    fromPredecessorText: string;
    toPredecessorText: string;
    finalPredecessor: string;
    drawPredecessor: boolean;
    private highlightedSecondElement;
    private editTooltip;
    private canDrag;
    /** @private */
    tapPointOnFocus: boolean;
    private editElement;
    touchEdit: boolean;
    constructor(ganttObj?: Gantt);
    private wireEvents;
    /**
     * To initialize the public property.
     * @return {void}
     * @private
     */
    private initPublicProp;
    private mouseDownHandler;
    private mouseClickHandler;
    private showHideActivePredecessors;
    private applyActiveColor;
    private validateConnectorPoint;
    private mouseLeaveHandler;
    /**
     * To update taskbar edited elements on mouse down action.
     * @return {void}
     * @private
     */
    updateTaskBarEditElement(e: PointerEvent): void;
    /**
     * To show/hide taskbar editing elements.
     * @return {void}
     * @private
     */
    showHideTaskBarEditingElements(element: Element, secondElement: Element, fadeConnectorLine?: boolean): void;
    /**
     * To get taskbar edit actions.
     * @return {string}
     * @private
     */
    private getTaskBarAction;
    /**
     * To update property while perform mouse down.
     * @return {void}
     * @private
     */
    private updateMouseDownProperties;
    private isMouseDragCheck;
    /**
     * To handle mouse move action in chart
     * @param e
     * @private
     */
    mouseMoveAction(event: PointerEvent): void;
    /**
     * Method to update taskbar editing action on mous move.
     * @return {Boolean}
     * @private
     */
    taskBarEditingAction(e: PointerEvent, isMouseClick: boolean): void;
    /**
     * To update property while perform mouse move.
     * @return {void}
     * @private
     */
    private updateMouseMoveProperties;
    /**
     * To start the scroll timer.
     * @return {void}
     * @private
     */
    startScrollTimer(direction: string): void;
    /**
     * To stop the scroll timer.
     * @return {void}
     * @private
     */
    stopScrollTimer(): void;
    /**
     * To update left and width while perform taskbar drag operation.
     * @return {void}
     * @private
     */
    private enableDragging;
    /**
     * To update left and width while perform progress resize operation.
     * @return {void}
     * @private
     */
    private performProgressResize;
    /**
     * To update left and width while perform taskbar left resize operation.
     * @return {void}
     * @private
     */
    private enableLeftResizing;
    /**
     * Update mouse position and edited item value
     * @param e
     * @param item
     */
    private updateEditPosition;
    /**
     *  To update milestone property.
     * @return {void}
     * @private
     */
    private updateIsMilestone;
    /**
     * To update left and width while perform taskbar right resize operation.
     * @return {void}
     * @private
     */
    private enableRightResizing;
    /**
     * To updated startDate and endDate while perform taskbar edit operation.
     * @return {void}
     * @private
     */
    private updateEditedItem;
    /**
     * To get roundoff enddate.
     * @return {number}
     * @private
     */
    private getRoundOffEndLeft;
    /**
     * To get roundoff startdate.
     * @return {number}
     * @private
     */
    getRoundOffStartLeft(ganttRecord: ITaskData, isRoundOff: Boolean): number;
    /**
     * To get date by left value.
     * @return {Date}
     * @private
     */
    getDateByLeft(left: number): Date;
    /**
     * To get timezone offset.
     * @return {number}
     * @private
     */
    private getDefaultTZOffset;
    /**
     * To check whether the date is in DST.
     * @return {boolean}
     * @private
     */
    private isInDst;
    /**
     * To set item position.
     * @return {void}
     * @private
     */
    private setItemPosition;
    /**
     * To handle mouse up event in chart
     * @param e
     * @private
     */
    mouseUpHandler(e: PointerEvent): void;
    /**
     * To perform taskbar edit operation.
     * @return {void}
     * @private
     */
    taskBarEditedAction(event: PointerEvent): void;
    /**
     * To cancel the taskbar edt action.
     * @return {void}
     * @private
     */
    cancelTaskbarEditActionInMouseLeave(): void;
    /**
     * To trigger taskbar edited event.
     * @return {void}
     * @private
     */
    taskbarEdited(arg: ITaskbarEditedEventArgs): void;
    /**
     * To get progress in percentage.
     * @return {number}
     * @private
     */
    private getProgressPercent;
    /**
     * false line implementation.
     * @return {void}
     * @private
     */
    private drawFalseLine;
    /**
     *
     * @param isRemoveConnectorPointDisplay
     * @private
     */
    removeFalseLine(isRemoveConnectorPointDisplay: boolean): void;
    /**
     *
     * @param e
     * @private
     */
    updateConnectorLineSecondProperties(e: PointerEvent): void;
    private triggerDependencyEvent;
    private getCoordinate;
    private getElementByPosition;
    private multipleSelectionEnabled;
    private unWireEvents;
    /**
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-gantt/src/gantt/actions/toolbar.d.ts
/**
 * Toolbar action related code goes here
 */
export  class Toolbar {
    private parent;
    private predefinedItems;
    private id;
    toolbar: navigations.Toolbar;
    private items;
    element: HTMLElement;
    private searchElement;
    constructor(parent: Gantt);
    private getModuleName;
    /**
     * @private
     */
    renderToolbar(): void;
    private createToolbar;
    private getSearchBarElement;
    private wireEvent;
    private propertyChanged;
    private unWireEvent;
    private keyUpHandler;
    private focusHandler;
    private blurHandler;
    /**
     * Method to set value for search input box
     * @hidden
     */
    updateSearchTextBox(): void;
    private getItems;
    private getItem;
    private getItemObject;
    private toolbarClickHandler;
    /**
     *
     * @return {void}
     * @private
     */
    zoomIn(): void;
    /**
     *
     * @return {void}
     * @private
     */
    zoomToFit(): void;
    /**
     *
     * @return {void}
     * @private
     */
    zoomOut(): void;
    /**
     * To refresh toolbar items bases current state of tasks
     */
    refreshToolbarItems(): void;
    /**
     * Enables or disables ToolBar items.
     * @param {string[]} items - Defines the collection of itemID of ToolBar items.
     * @param {boolean} isEnable - Defines the items to be enabled or disabled.
     * @return {void}
     * @hidden
     */
    enableItems(items: string[], isEnable: boolean): void;
    /**
     * Destroys the Sorting of TreeGrid.
     * @method destroy
     * @return {void}
     * @private
     */
    destroy(): void;
}
//node_modules/@syncfusion/ej2-gantt/src/gantt/base/common.d.ts
/**
 * Gantt base related properties
 */
//node_modules/@syncfusion/ej2-gantt/src/gantt/base/constant.d.ts
/**
 *  This file was to define all public and internal events
 */
/** @hidden */
export  const load: string;
/** @hidden */
export  const rowDataBound: string;
/** @hidden */
export  const queryCellInfo: string;
/** @hidden */
export  const toolbarClick: string;
/** @hidden */
export  const keyPressed: string;
//node_modules/@syncfusion/ej2-gantt/src/gantt/base/css-constants.d.ts
/**
 * CSS Constants
 */
/** @hidden */
export  const root: string;
export  const ganttChartPane: string;
export  const treeGridPane: string;
export  const splitter: string;
export  const ganttChart: string;
export  const chartBodyContainer: string;
export  const toolbar: string;
export  const chartScrollElement: string;
export  const chartBodyContent: string;
export  const scrollContent: string;
export  const adaptive: string;
export  const focusCell: string;
export  const taskTable: string;
export  const zeroSpacing: string;
export  const timelineHeaderContainer: string;
export  const timelineHeaderTableContainer: string;
export  const timelineHeaderTableBody: string;
export  const timelineTopHeaderCell: string;
export  const timelineHeaderCellLabel: string;
export  const weekendHeaderCell: string;
export  const timelineSingleHeaderCell: string;
export  const timelineSingleHeaderOuterDiv: string;
export  const leftLabelContainer: string;
export  const leftLabelTempContainer: string;
export  const leftLabelInnerDiv: string;
export  const rightLabelContainer: string;
export  const rightLabelTempContainer: string;
export  const rightLabelInnerDiv: string;
export  const taskBarMainContainer: string;
export  const parentTaskBarInnerDiv: string;
export  const parentProgressBarInnerDiv: string;
export  const taskLabel: string;
export  const childTaskBarInnerDiv: string;
export  const childProgressBarInnerDiv: string;
export  const milestoneTop: string;
export  const milestoneBottom: string;
export  const baselineBar: string;
export  const baselineMilestoneContainer: string;
export  const baselineMilestoneDiv: string;
export  const baselineMilestoneTop: string;
export  const baselineMilestoneBottom: string;
export  const chartRowCell: string;
export  const chartRow: string;
export  const rowExpand: string;
export  const rowCollapse: string;
export  const taskBarLeftResizer: string;
export  const taskBarRightResizer: string;
export  const childProgressResizer: string;
export  const progressBarHandler: string;
export  const progressHandlerElement: string;
export  const progressBarHandlerAfter: string;
export  const icon: string;
export  const traceMilestone: string;
export  const traceChildTaskBar: string;
export  const traceChildProgressBar: string;
export  const traceParentTaskBar: string;
export  const traceParentProgressBar: string;
export  const traceUnscheduledTask: string;
export  const taskIndicatorDiv: string;
export  const leftResizeGripper: string;
export  const rightResizeGripper: string;
export  const progressResizeGripper: string;
export  const label: string;
export  const eventMarkersContainer: string;
export  const eventMarkersChild: string;
export  const eventMarkersSpan: string;
export  const nonworkingContainer: string;
export  const holidayContainer: string;
export  const holidayElement: string;
export  const holidayLabel: string;
export  const weekendContainer: string;
export  const weekend: string;
export  const unscheduledTaskbarLeft: string;
export  const unscheduledTaskbarRight: string;
export  const unscheduledTaskbar: string;
export  const unscheduledMilestoneTop: string;
export  const unscheduledMilestoneBottom: string;
export  const dependencyViewContainer: string;
export  const connectorLineContainer: string;
export  const connectorLine: string;
export  const connectorLineRightArrow: string;
export  const connectorLineLeftArrow: string;
export  const connectorLineZIndex: string;
export  const connectorLineHover: string;
export  const connectorLineHoverZIndex: string;
export  const connectorLineRightArrowHover: string;
export  const connectorLineLeftArrowHover: string;
export  const connectorTouchPoint: string;
export  const connectorPointLeft: string;
export  const connectorPointRight: string;
export  const connectorPointLeftHover: string;
export  const connectorPointRightHover: string;
export  const falseLine: string;
export  const connectorTooltipTaskName: string;
export  const connectorTooltipFalse: string;
export  const connectorTooltipTrue: string;
export  const rightConnectorPointOuterDiv: string;
export  const leftConnectorPointOuterDiv: string;
export  const connectorPointAllowBlock: string;
export  const ganttTooltip: string;
export  const columnHeader: string;
export  const content: string;
export  const editForm: string;
export  const deleteIcon: string;
export  const saveIcon: string;
export  const cancelIcon: string;
export  const ascendingIcon: string;
export  const descendingIcon: string;
export  const editIcon: string;
export  const addIcon: string;
export  const addAboveIcon: string;
export  const addBelowIcon: string;
export  const activeParentTask: string;
export  const activeChildTask: string;
export  const activeConnectedTask: string;
export  const touchMode: string;
//node_modules/@syncfusion/ej2-gantt/src/gantt/base/date-processor.d.ts
/**
 *  Date processor is used to handle date of task data.
 */
export  class DateProcessor {
    protected parent: Gantt;
    constructor(parent: Gantt);
    /**
     *
     */
    private isValidateNonWorkDays;
    /**
     * Method to convert given date value as valid start date
     * @param date
     * @param ganttProp
     * @param validateAsMilestone
     * @private
     */
    checkStartDate(date: Date, ganttProp?: ITaskData, validateAsMilestone?: boolean): Date;
    /**
     * To update given date value to valid end date
     * @param date
     * @param ganttProp
     * @private
     */
    checkEndDate(date: Date, ganttProp?: ITaskData): Date;
    /**
     * To validate the baseline start date
     * @param date
     * @private
     */
    checkBaselineStartDate(date: Date): Date;
    /**
     * To validate baseline end date
     * @param date
     * @private
     */
    checkBaselineEndDate(date: Date): Date;
    /**
     * To calculate start date value from duration and end date
     * @param ganttData
     * @private
     */
    calculateStartDate(ganttData: IGanttData): void;
    /**
     *
     * @param ganttData
     * @private
     */
    calculateEndDate(ganttData: IGanttData): void;
    /**
     * To calculate duration from start date and end date
     * @param {IGanttData} ganttData - Defines the gantt data.
     */
    calculateDuration(ganttData: IGanttData): void;
    /**
     *
     * @param sDate Method to get total nonworking time between two date values
     * @param eDate
     * @param isAutoSchedule
     * @param isCheckTimeZone
     */
    private getNonworkingTime;
    /**
     *
     * @param startDate
     * @param endDate
     * @param durationUnit
     * @param isAutoSchedule
     * @param isCheckTimeZone
     * @private
     */
    getDuration(startDate: Date, endDate: Date, durationUnit: string, isAutoSchedule: boolean, isCheckTimeZone?: boolean): number;
    /**
     *
     * @param duration
     * @param durationUnit
     */
    private getDurationAsSeconds;
    /**
     * To get date from start date and duration
     * @param startDate
     * @param duration
     * @param durationUnit
     * @param ganttProp
     * @param validateAsMilestone
     * @private
     */
    getEndDate(startDate: Date, duration: number, durationUnit: string, ganttProp: ITaskData, validateAsMilestone: boolean): Date;
    /**
     *
     * @param endDate To calculate start date vale from end date and duration
     * @param duration
     * @param durationUnit
     * @param ganttProp
     * @private
     */
    getStartDate(endDate: Date, duration: number, durationUnit: string, ganttProp: ITaskData): Date;
    /**
     * @private
     */
    protected getProjectStartDate(ganttProp: ITaskData, isLoad?: boolean): Date;
    /**
     * @private
     * @param ganttProp
     */
    getValidStartDate(ganttProp: ITaskData): Date;
    /**
     *
     * @param ganttProp
     * @private
     */
    getValidEndDate(ganttProp: ITaskData): Date;
    /**
     * @private
     */
    getSecondsPerDay(): number;
    /**
     *
     * @param value
     * @param isFromDialog
     * @private
     */
    getDurationValue(value: string | number, isFromDialog?: boolean): Object;
    /**
     *
     * @param date
     */
    protected getNextWorkingDay(date: Date): Date;
    /**
     * get weekend days between two dates without including args dates
     * @param startDate
     * @param endDate
     */
    protected getWeekendCount(startDate: Date, endDate: Date): number;
    /**
     *
     * @param startDate
     * @param endDate
     * @param isCheckTimeZone
     */
    protected getNumberOfSeconds(startDate: Date, endDate: Date, isCheckTimeZone: boolean): number;
    /**
     *
     * @param startDate
     * @param endDate
     */
    protected getHolidaysCount(startDate: Date, endDate: Date): number;
    /**
     * @private
     */
    getHolidayDates(): number[];
    private isOnHolidayOrWeekEnd;
    /**
     * To calculate non working times in given date
     * @param startDate
     * @param endDate
     */
    protected getNonWorkingSecondsOnDate(startDate: Date, endDate: Date): number;
    /**
     *
     * @param date
     */
    protected getPreviousWorkingDay(date: Date): Date;
    /**
     * To get non-working day indexes.
     * @return {void}
     * @private
     */
    getNonWorkingDayIndex(): void;
    /**
     *
     * @param seconds
     * @param date
     * @private
     */
    setTime(seconds: number, date: Date): void;
    /**
     *
     */
    protected getTimeDifference(startDate: Date, endDate: Date, isCheckTimeZone?: boolean): number;
    /**
     *
     */
    protected updateDateWithTimeZone(sDate: Date, eDate: Date): void;
    /**
     *
     * @param date
     */
    protected getSecondsInDecimal(date: Date): number;
    /**
     * @param date
     * @private
     */
    getDateFromFormat(date: string | Date): Date;
    /**
     * @private
     */
    compareDates(date1: Date, date2: Date): number;
    /**
     *
     * @param duration
     * @param durationUnit
     * @private
     */
    getDurationString(duration: number, durationUnit: string): string;
    /**
     *
     * @param editArgs
     * @private
     */
    calculateProjectDates(editArgs?: Object): void;
}
//node_modules/@syncfusion/ej2-gantt/src/gantt/base/enum.d.ts
/**
 * To define duration unit for whole project
 */
export  type DurationUnit = 
/** To define unit value of duration as minute */
'Minute' | 
/** To define unit value of duration as hour */
'Hour' | 
/** To define unit value of duration as day */
'Day';
/**
 * To define grid lines in Gantt
 */
export  type GridLine = 
/** Define horizontal lines */
'Horizontal' | 
/** Define vertical lines */
'Vertical' | 
/** Define both horizontal and vertical lines */
'Both' | 
/** Define no lines */
'None';
/**
 * To define toolbar items in Gantt
 */
export  type ToolbarItem = 
/** Add new record */
'Add' | 
/** Delete selected record */
'Delete' | 
/** Update edited record */
'Update' | 
/** Cancel the edited state */
'Cancel' | 
/** Edit the selected record */
'Edit' | 
/** Searches the grid records by given key */
'Search' | 
/** Expand all the parents */
'ExpandAll' | 
/** Collapse all the parents */
'CollapseAll' | 
/** Move HScroll to PrevTimeSpan */
'PrevTimeSpan' | 
/** Move HScroll to nextTimeSpan */
'NextTimeSpan' | 
/** To perform Zoom in action on Gantt timeline */
'ZoomIn' | 
/** To perform zoom out action on Gantt timeline */
'ZoomOut' | 
/** To show all project task in available chart width */
'ZoomToFit' | 
/** To export Gantt in excel sheet */
'ExcelExport' | 
/** To export Gantt is CSV */
'CsvExport';
/**
 * Defines the schedule header mode. They are
 * * none - Define the default mode header.
 * * week - Define the week mode header.
 * * day - Define the day mode header.
 * * hours - Define the hours mode header.
 * * minute - Define the minutes mode header.
 */
export  type TimelineViewMode = 
/** Default. */
'None' | 
/** Define the week mode header. */
'Week' | 
/** Define the day mode header. */
'Day' | 
/** Define the hour mode header. */
'Hour' | 
/** Define the month mode header. */
'Month' | 
/** Define the year mode header. */
'Year' | 
/** Define the minutes mode header. */
'Minutes';
/**
 * Defines modes of editing.
 * * Auto
 * * Dialog
 */
export  type EditMode = 
/**  Defines Cell editing in TreeGrid and dialog in chart side */
'Auto' | 
/**  Defines EditMode as Dialog */
'Dialog';
/**
 * Defines the default items of Column menu
 */
export  type ColumnMenuItem = 
/**  Sort the current column in ascending order */
'SortAscending' | 
/**  Sort the current column in descending order */
'SortDescending' | 
/**  show the column chooser */
'ColumnChooser' | 
/**  show the Filter popup */
'Filter';
/**
 * Defines tab container type in add or edit dialog
 */
export  type DialogFieldType = 
/** Defines tab container type as general  */
'General' | 
/**  Defines tab as dependency editor */
'Dependency' | 
/** Defines tab as resources editor */
'Resources' | 
/** Defines tab as notes editor */
'Notes' | 
/** Defines tab as custom column editor */
'Custom';
/**
 * Defines filter type of Gantt
 */
export  type FilterType = 
/** Defines filter type as menu */
'Menu';
/**
 * To define hierarchy mode on filter action
 */
export  type FilterHierarchyMode = 
/** Shows the filtered record with parent record */
'Parent' | 
/** Shows the filtered record with child record */
'Child' | 
/** Shows the filtered record with both parent and child record */
'Both' | 
/** Shows only filtered record */
'None';
/**
 * To define hierarchy mode on search action
 */
export  type SearchHierarchyMode = 
/** Shows the filtered record with parent record */
'Parent' | 
/** Shows the filtered record with child record */
'Child' | 
/** Shows the filtered record with both parent and child record */
'Both' | 
/** Shows only filtered record */
'None';
/**
 * To define initial view of Gantt
 */
export  type SplitterView = 
/** Shows grid side and side of Gantt */
'Default' | 
/** Shows grid side alone in Gantt */
'Grid' | 
/** Shows chart side alone in Gantt */
'Chart';
/**
 * To define new position for add action
 */
export  type RowPosition = /**  Defines new row position as top of all rows */ 'Top' | 
/**  Defines new row position as bottom of all rows */
'Bottom' | 
/**  Defines new row position as above the selected row */
'Above' | 
/**  Defines new row position as below the selected row */
'Below' | 
/**  Defines new row position as child to the selected row */
'Child';
/**
 * Defines directions of Sorting. They are
 * * Ascending
 * * Descending
 */
export  type SortDirection = 
/**  Defines SortDirection as Ascending */
'Ascending' | 
/**  Defines SortDirection as Descending */
'Descending';
/**
 * Defines predefined contextmenu items.
 * @hidden
 */
export  type ContextMenuItem = 
/** Defines Auto fit the size of all columns. */
'AutoFitAll' | 
/** Defines Auto fit the current column. */
'AutoFit' | 
/** Defines SortDirection as Ascending  */
'SortAscending' | 
/** Defines SortDirection as Descending */
'SortDescending' | 
/** Defines the Task details */
'TaskInformation' | 
/** Defines the new record on add action */
'Add' | 
/** Defines the save the modified values */
'Save' | 
/** Defines the cancel the modified values */
'Cancel' | 
/** Defines the delete task */
'DeleteTask' | 
/** Defines the delete dependency task */
'DeleteDependency' | 
/** Defines the convert to task or milestone */
'Convert';
/**
 * Defines contextmenu types.
 * @hidden
 */
export  type ContextMenuType = 
/** Defines the header type context menu */
'Header' | 
/** Defines the content type context menu */
'Content';
/**
 * @hidden
 */
export  type CObject = {
    [key: string]: Object;
};
//node_modules/@syncfusion/ej2-gantt/src/gantt/base/gantt-chart.d.ts
/**
 * module to render gantt chart - project view
 */
export  class GanttChart {
    private parent;
    chartElement: HTMLElement;
    chartTimelineContainer: HTMLElement;
    chartBodyContainer: HTMLElement;
    chartBodyContent: HTMLElement;
    scrollElement: HTMLElement;
    scrollObject: ChartScroll;
    isExpandCollapseFromChart: boolean;
    isExpandAll: boolean;
    keyboardModule: base.KeyboardEvents;
    constructor(parent: Gantt);
    private addEventListener;
    private renderChartContents;
    /**
     * Method to render top level containers in Gantt chart
     * @private
     */
    renderChartContainer(): void;
    /**
     * method to render timeline, holidays, weekends at load time
     */
    private renderInitialContents;
    private renderChartElements;
    /**
     * @private
     */
    renderTimelineContainer(): void;
    /**
     * initiate chart container
     */
    private renderBodyContainers;
    private updateWidthAndHeight;
    /**
     * Method to update bottom border for chart rows
     */
    updateLastRowBottomWidth(): void;
    private removeEventListener;
    /**
     * Click event handler in chart side
     */
    private ganttChartMouseDown;
    private ganttChartMouseClick;
    private ganttChartMouseUp;
    /**
     *
     * @param e
     */
    private scrollToTarget;
    /**
     * To focus selected task in chart side
     * @private
     */
    updateScrollLeft(scrollLeft: number): void;
    /**
     *  Method trigger while perform mouse up action.
     * @return {void}
     * @private
     */
    private documentMouseUp;
    /**
     *  Method trigger while perform mouse leave action.
     * @return {void}
     * @private
     */
    private ganttChartLeave;
    /**
     *  Method trigger while perform mouse move action.
     * @return {void}
     * @private
     */
    private ganttChartMove;
    /**
     * Double click handler for chart
     * @param e
     */
    private doubleClickHandler;
    /**
     * @private
     */
    getRecordByTarget(e: PointerEvent): IGanttData;
    /**
     * To get gantt chart row elements
     * @return {NodeListOf<Element>}
     * @private
     */
    getChartRows(): NodeListOf<Element>;
    /**
     * Expand Collapse operations from gantt chart side
     * @return {void}
     * @param target
     * @private
     */
    private chartExpandCollapseRequest;
    /**
     * @private
     */
    reRenderConnectorLines(): void;
    /**
     * To collapse gantt rows
     * @return {void}
     * @param args
     * @private
     */
    collapseGanttRow(args: object, isCancel?: boolean): void;
    /**
     * @return {void}
     * @param args
     * @private
     */
    collapsedGanttRow(args: object): void;
    /**
     * To expand gantt rows
     * @return {void}
     * @param args
     * @private
     */
    expandGanttRow(args: object, isCancel?: boolean): void;
    /**
     * @return {void}
     * @param args
     * @private
     */
    expandedGanttRow(args: object): void;
    /**
     * On expand collapse operation row properties will be updated here.
     * @return {void}
     * @param action
     * @param rowElement
     * @param record
     * @param isChild
     * @private
     */
    private expandCollapseChartRows;
    /**
     * Public method to expand or collapse all the rows of Gantt
     * @return {void}
     * @param action
     * @private
     */
    expandCollapseAll(action: string): void;
    /**
     * Public method to expand particular level of rows.
     * @return {void}
     * @param level
     * @private
     */
    expandAtLevel(level: number): void;
    /**
     * Public method to collapse particular level of rows.
     * @return {void}
     * @param level
     * @private
     */
    collapseAtLevel(level: number): void;
    /**
     * Event Binding for gantt chart click
     */
    private wireEvents;
    private unWireEvents;
    /**
     * To get record by taskbar element.
     * @return {IGanttData}
     * @private
     */
    getRecordByTaskBar(target: Element): IGanttData;
    /**
     * To get index by taskbar element.
     * @return {number}
     * @private
     */
    getIndexByTaskBar(target: Element): number;
    private destroy;
}
//node_modules/@syncfusion/ej2-gantt/src/gantt/base/gantt-model.d.ts
/**
 * Interface for a class Gantt
 */
export interface GanttModel extends base.ComponentModel{
    /**
     * Enables or disables the key board interaction of Gantt.
     * @hidden
     * @default true
     */
    allowKeyboard?: boolean;
    /**
     * Enables or disables the focusing the task bar on click action.
     * 
     * @default true
     */
    autoFocusTasks?: boolean;
    /**
     * If `allowSelection` is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.
     * @default true
     */
    allowSelection?: boolean;
    /**
     * If `allowSorting` is set to true, it allows sorting of gantt chart tasks when column header is clicked.
     * @default false
     */
    allowSorting?: boolean;
    /**
     * If `enablePredecessorValidation` is set to true, it allows to validate the predecessor link.
     * @default true
     */
    enablePredecessorValidation?: boolean;
    /**
     * If `showColumnMenu` set to true, then it will enable the column menu options in each columns.
     * @default false
     */
    showColumnMenu?: boolean;
    /**
     * `columnMenuItems` defines both built-in and custom column menu items.
     * <br><br>
     * The available built-in items are,
     * * `ColumnChooser` - To show/hide the treegrid.TreeGrid columns.
     * * `SortAscending` - Sort the current column in ascending order.
     * * `SortDescending` - Sort the current column in descending order.
     * * `Filter` - Filter options will show based on filterSettings property.
     * @default null
     */
    columnMenuItems?: ColumnMenuItem[] | grids.ColumnMenuItemModel[];
    /**
     * If `collapseAllParentTasks` set to true, then root tasks are rendered with collapsed state.
     * @default false
     */
    collapseAllParentTasks?: boolean;
    /**
     * If `highlightWeekends` set to true, then all weekend days are highlighted in week - day timeline mode.
     * @default false
     */
    highlightWeekends?: boolean;
    /**
     * To define expander column index in Grid.
     * @default 0
     * @aspType int
     * @blazorType int
     */
    treeColumnIndex?: number;
    /**
     * It is used to render Gantt chart rows and tasks.
     * `dataSource` value was defined as array of JavaScript objects or instances of `data.DataManager`.
     * @isGenericType true
     * @default []
     */
    dataSource?: Object[] | data.DataManager;
    /**
     * `durationUnit` Specifies the duration unit for each tasks whether day or hour or minute.
     * * `day`: Sets the duration unit as day.
     * * `hour`: Sets the duration unit as hour.
     * * `minute`: Sets the duration unit as minute.
     * @default day
     */
    durationUnit?: DurationUnit;
    /**
     * Defines the external [`data.Query`](https://ej2.syncfusion.com/documentation/data/api-query.html) 
     * that will be executed along with data processing.    
     * @default null    
     */
    query?: data.Query;
    /**
     * Specifies the dateFormat for Gantt, given format is displayed in tooltip and Grid cells.
     */
    dateFormat?: string;
    /**
     * Defines the height of the Gantt component container.
     * @default 'auto'
     */
    height?: number | string;
    /**
     * If `renderBaseline` is set to `true`, then baselines are rendered for tasks.
     * @default false
     */
    renderBaseline?: boolean;
    /**
     * Configures the grid lines in tree grid and gantt chart.
     */
    gridLines?: GridLine;
    /**
     * Defines the right, left and inner task labels in task bar.
     */
    labelSettings?: LabelSettingsModel;
    /**
     * The task bar template that renders customized child task bars from the given template.
     * @default null
     */
    taskbarTemplate?: string;
    /**
     * The parent task bar template that renders customized parent task bars from the given template.
     * @default null
     */
    parentTaskbarTemplate?: string;
    /**
     * The milestone template that renders customized milestone task from the given template.
     * @default null
     */
    milestoneTemplate?: string;
    /**
     * Defines the baseline bar color.
     */
    baselineColor?: string;
    /**
     * Defines the width of the Gantt component container.
     * @default 'auto'
     */
    width?: number | string;
    /**
     * `toolbar` defines the toolbar items of the Gantt. 
     * It contains built-in and custom toolbar items.
     * If an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar. 
     * <br><br>     
     * The available built-in toolbar items are:
     * * Add: Adds a new record.
     * * Edit: Edits the selected task.
     * * Update: Updates the edited task.
     * * Delete: Deletes the selected task.
     * * Cancel: Cancels the edit state.
     * * Search: Searches tasks by the given key.
     * * ExpandAll: Expands all the task of Gantt.
     * * CollapseAll: Collapses all the task of Gantt.
     * * PrevTimeSpan: Extends timeline with one unit before the timeline start date.
     * * NextTimeSpan: Extends timeline with one unit after the timeline finish date.
     * * ZoomIn: ZoomIn the Gantt control.
     * * ZoomOut: ZoomOut the Gantt control.
     * * ZoomToFit: Display the all tasks within the viewable Gantt chart.
     * * ExcelExport: To export in Excel format
     * * CsvExport : To export in CSV format
     * @default null
     */
    toolbar?: (ToolbarItem | string | navigations.ItemModel)[];
    /**
     * Defines workweek of project.
     * @default ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
     */
    workWeek?: string[];
    /**
     * Defines weekend days are considered as working day or not.
     * @default false
     */
    includeWeekend?: boolean;
    /**
     * Enables or disables rendering of unscheduled tasks in Gantt.
     * @default false
     */
    allowUnscheduledTasks?: boolean;
    /**
     * To show notes column cell values inside the cell or in tooltip.
     * @default false
     * @deprecated
     */
    showInlineNotes?: boolean;
    /**
     * Defines height value for grid rows and chart rows in Gantt.
     * @default 36
     * @aspType int
     * @blazorType int
     */
    rowHeight?: number;
    /**
     * Defines height of taskbar element in Gantt.
     * @aspType int?
     * @blazorType int
     * @isBlazorNullableType true
     */
    taskbarHeight?: number;
    /**
     * Defines start date of the project, if `projectStartDate` value not set then it will be calculated from data source.
     * @default null
     */
    projectStartDate?: Date | string;
    /**
     * Defines end date of the project, if `projectEndDate` value not set then it will be calculated from data source.
     * @default null     
     */
    projectEndDate?: Date | string;
    /**
     * Defines mapping property to get resource id value from resource collection.
     * @default null
     */
    resourceIDMapping?: string;
    /**
     * Defines mapping property to get resource name value from resource collection.
     * @default null
     */
    resourceNameMapping?: string;
    /**
     * Defines resource collection assigned for projects.
     * @default []
     */
    resources?: Object[];
    /**
     * Defines background color of dependency lines.
     * @default null
     */
    connectorLineBackground?: string;
    /**
     * Defines width of dependency lines.
     * @default 1
     * @aspType int
     * @blazorType int
     */
    connectorLineWidth?: number;
    /**
     * Defines column collection displayed in grid
     * If the `columns` declaration was empty then `columns` are automatically populated from `taskSettings` value.
     * @default []
     */
    columns?: Column[] | string[] | ColumnModel[];
    /**
     * Defines the tabs and fields to be included in the add dialog.
     * If the value was empty, then it will be calculated from `taskSettings` and `columns` value.
     * @default []
     */
    addDialogFields?: AddDialogFieldSettingsModel[];
    /**
     * Defines the tabs and fields to be included in the edit dialog.
     * If the value was empty, then it will be calculated from `taskSettings` and `columns` value.
     * @default []
     */
    editDialogFields?: EditDialogFieldSettingsModel[];
    /**
     * The `selectedRowIndex` allows you to select a row at initial rendering. 
     * You can also get the currently selected row index.
     * @default -1
     * @aspType int
     * @blazorType int
     */
    selectedRowIndex?: number;
    /**
     * Defines customized working time of project.
     */
    dayWorkingTime?: DayWorkingTimeModel[];
    /**
     * Defines holidays presented in project timeline.
     * @default []
     */
    holidays?: HolidayModel[];
    /**
     * Defines events and status of project throughout the timeline.
     * @default []
     */
    eventMarkers?: EventMarkerModel[];
    /**
     * Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.
     */
    taskFields?: TaskFieldsModel;
    /**
     * Configures timeline settings of Gantt.
     * Defines default timeline modes or customized top tier mode and bottom tier mode or single tier only.
     */
    timelineSettings?: TimelineSettingsModel;
    /**
     * Configures the sort settings of the Gantt.
     * @default {columns:[]}
     */
    sortSettings?: SortSettingsModel;
    /**
     * Configures edit settings of Gantt.
     * @default { allowAdding: false, allowEditing: false, allowDeleting: false, mode:'Auto',
     * showDeleteConfirmDialog: false } 
     */
    editSettings?: EditSettingsModel;
    /**
     * Enables or disables default tooltip of Gantt element and defines customized tooltip for Gantt elements.
     * @default { showTooltip: true } 
     */
    tooltipSettings?: TooltipSettingsModel;
    /**
     * Configures the selection settings.
     * @default {mode: 'Row', type: 'Single'}
     */
    selectionSettings?: SelectionSettingsModel;
    /**
     * Enables or disables filtering support in Gantt.
     * @default false
     */
    allowFiltering?: boolean;
    /**
     * If `allowExcelExport` set to true, then it will allow the user to export Gantt to Excel and CSV file.
     * @default false
     */
    allowExcelExport?: boolean;
    /**
     * If `allowReordering` is set to true, Gantt columns can be reordered. 
     * Reordering can be done by drag and drop of a particular column from one index to another index.  
     * @default false
     */
    allowReordering?: boolean;
    /**
     * If `allowResizing` is set to true, Gantt columns can be resized.      
     * @default false
     */
    allowResizing?: boolean;
    /**
     * If `enableContextMenu` is set to true, Enable context menu in Gantt.
     * @default false
     */
    enableContextMenu?: boolean;
    /**
     * If `contextMenuItems` are array collection of menu items in Context Menu.
     * @default null
     */
    contextMenuItems?: ContextMenuItem[] | grids.ContextMenuItemModel[];
    /**
     * Configures the filter settings for Gantt.
     * @default {columns: [], type: 'Menu' }
     */
    filterSettings?: FilterSettingsModel;
    /**
     * Configures the search settings for Gantt.
     */
    searchSettings?: SearchSettingsModel;
    /**
     * Configures the splitter settings for Gantt.
     */
    splitterSettings?: SplitterSettingsModel;
    /**
     * This will be triggered after the taskbar element is appended to the Gantt element.
     * @event 
     */
    queryTaskbarInfo?: base.EmitType<IQueryTaskbarInfoEventArgs>;
    /**
     * Triggers before Gantt data is exported to Excel file.
     * @deprecated
     * @event
     */
    beforeExcelExport?: base.EmitType<Object>;
    /**
     * Triggers after Gantt data is exported to Excel file.
     * @deprecated
     * @event
     */
    excelExportComplete?: base.EmitType<grids.ExcelExportCompleteArgs>;
    /**
     * Triggers before exporting each cell to Excel file.
     * You can also customize the Excel cells.
     * @deprecated
     * @event
     */
    excelQueryCellInfo?: base.EmitType<grids.ExcelQueryCellInfoEventArgs>;
    /**
     * Triggers before exporting each header cell to Excel file.
     * You can also customize the Excel cells.
     * @deprecated
     * @event
     */
    excelHeaderQueryCellInfo?: base.EmitType<grids.ExcelHeaderQueryCellInfoEventArgs>;
    /**
     * This will be triggered before the row getting collapsed.
     * @event
     */
    collapsing?: base.EmitType<ICollapsingEventArgs>;
    /**
     * This will be triggered after the row getting collapsed.
     * @event
     */
    collapsed?: base.EmitType<ICollapsingEventArgs>;
    /**
     * This will be triggered before the row getting expanded.
     * @event 
     */
    expanding?: base.EmitType<ICollapsingEventArgs>;
    /**
     * This will be triggered after the row getting expanded.
     * @event
     */
    expanded?: base.EmitType<ICollapsingEventArgs>;
    /**
     * Triggers when Gantt actions such as sorting, filtering, searching etc., starts.
     * @blazorproperty 'OnActionBegin'
     * @blazorType Syncfusion.EJ2.Blazor.Gantt.ActionBeginArgs<TValue>
     * @event
     */
    /* tslint:disable-next-line */
    actionBegin?: base.EmitType<object | grids.PageEventArgs | grids.FilterEventArgs | grids.SortEventArgs | ITimeSpanEventArgs | IDependencyEventArgs | ITaskAddedEventArgs | ZoomEventArgs>;
    /**
     * Triggers when Gantt actions such as sorting, filtering, searching etc. are completed.
     * @event
     * @blazorproperty 'OnActionComplete'
     * @blazorType Syncfusion.EJ2.Blazor.Gantt.ActionCompleteArgs<TValue>
     */
    actionComplete?: base.EmitType<grids.FilterEventArgs | grids.SortEventArgs | ITaskAddedEventArgs | IKeyPressedEventArgs | ZoomEventArgs>;
    /**
     * Triggers when actions are failed.
     * @event
     * @blazorproperty 'OnActionFailure'
     * @blazorType Syncfusion.EJ2.Blazor.Grids.grids.FailureEventArgs
     */
    actionFailure?: base.EmitType<grids.FailureEventArgs>;
    /**
     * This will be triggered taskbar was dragged and dropped on new position.
     * @event
     */
    taskbarEdited?: base.EmitType<ITaskbarEditedEventArgs>;
    /**
     * This will be triggered when a task get saved by cell edit.
     * @event 
     */
    endEdit?: base.EmitType<ITaskbarEditedEventArgs>;
    /**
     * This will be triggered a cell get begins to edit.
     * @event
     * @blazorproperty 'OnCellEdit'
     */
    cellEdit?: base.EmitType<CellEditArgs>;
    /**
     * Triggered before the Gantt control gets rendered.
     * @event
     * @blazorProperty 'OnLoad'
     */
    load?: base.EmitType<Object>;
    /**
     * Triggers when the component is created.
     * @event
     */
    created?: base.EmitType<Object>;
    /**
     * Triggers when the component is destroyed.
     * @event
     */
    destroyed?: base.EmitType<Object>;
    /**
     * This event will be triggered when taskbar was in dragging state.
     * @event 
     */
    taskbarEditing?: base.EmitType<ITaskbarEditedEventArgs>;
    /**
     * Triggers when data source is populated in the Grid.
     * @event
     */
    dataBound?: base.EmitType<Object>;
    /**
     * Triggers when column resize starts.
     * @deprecated
     * @event
     */
    resizeStart?: base.EmitType<grids.ResizeArgs>;
    /**
     * Triggers on column resizing.
     * @deprecated
     * @event
     */
    resizing?: base.EmitType<grids.ResizeArgs>;
    /**
     * Triggers when column resize ends.
     * @deprecated
     * @event
     */
    resizeStop?: base.EmitType<grids.ResizeArgs>;
    /**
     * Triggers when splitter resizing starts.
     * @event
     * @blazorType Syncfusion.EJ2.Blazor.Layouts.layouts.ResizeEventArgs
     */
    splitterResizeStart?: base.EmitType<layouts.ResizeEventArgs>;
    /**
     * Triggers when splitter bar was dragging.
     * @event
     * @blazorType Syncfusion.EJ2.Blazor.Layouts.layouts.ResizingEventArgs
     */
    splitterResizing?: base.EmitType<layouts.ResizingEventArgs>;
    /**
     * Triggers when splitter resizing action completed.
     * @event
     */
    splitterResized?: base.EmitType<ISplitterResizedEventArgs>;
    /**
     * Triggers when column header element drag (move) starts.
     * @deprecated 
     * @event
     */
    columnDragStart?: base.EmitType<grids.ColumnDragEventArgs>;
    /**
     * Triggers when column header element is dragged (moved) continuously.
     * @deprecated 
     * @event
     */
    columnDrag?: base.EmitType<grids.ColumnDragEventArgs>;
    /**
     * Triggers when a column header element is dropped on the target column.
     * @deprecated 
     * @event
     */
    columnDrop?: base.EmitType<grids.ColumnDragEventArgs>;
    /**
     * Triggers before tooltip get rendered.
     * @event 
     */
    beforeTooltipRender?: base.EmitType<BeforeTooltipRenderEventArgs>;
    /**
     * Triggers before row selection occurs.
     * @event
     */
    rowSelecting?: base.EmitType<RowSelectingEventArgs>;
    /**
     * Triggers after a row is selected.
     * @event
     */
    rowSelected?: base.EmitType<RowSelectEventArgs>;
    /**
     * Triggers before deselecting the selected row.
     * @deprecated
     * @event
     */
    rowDeselecting?: base.EmitType<RowDeselectEventArgs>;
    /**
     * Triggers when a selected row is deselected.
     * @event
     */
    rowDeselected?: base.EmitType<RowDeselectEventArgs>;
    /**
     * Triggers before any cell selection occurs.
     * @event
     */
    cellSelecting?: base.EmitType<CellSelectingEventArgs>;
    /**
     * Triggers after a cell is selected.
     * @event
     * @blazorType Syncfusion.EJ2.Blazor.Grids.grids.CellSelectEventArgs<TValue>
     */
    cellSelected?: base.EmitType<grids.CellSelectEventArgs>;
    /**
     * Triggers before the selected cell is deselecting.
     * @deprecated
     * @event 
     */
    cellDeselecting?: base.EmitType<grids.CellDeselectEventArgs>;
    /**
     * Triggers when a particular selected cell is deselected.
     * @deprecated
     * @event 
     */
    cellDeselected?: base.EmitType<grids.CellDeselectEventArgs>;
    /**
     * This will be triggered before the header cell element is appended to the Grid element.
     * @event 
     */
    queryCellInfo?: base.EmitType<QueryCellInfoEventArgs>;
    /**
     * This will be triggered before the header cell element is appended to the Grid element.
     * @event 
     * @blazorType Syncfusion.EJ2.Blazor.Grids.grids.HeaderCellInfoEventArgs 
     */
    headerCellInfo?: base.EmitType<grids.HeaderCellInfoEventArgs>;
    /**
     * This will be triggered before the row element is appended to the Grid element.
     * @event
     */
    rowDataBound?: base.EmitType<RowDataBoundEventArgs>;
    /**
     * Triggers before column menu opens.
     * @deprecated
     * @event 
     */
    columnMenuOpen?: base.EmitType<grids.ColumnMenuOpenEventArgs>;
    /**
     * Triggers when toolbar item was clicked.
     * @event
     * @blazorproperty 'OnToolbarClick'
     * @blazorType Syncfusion.EJ2.Blazor.Navigations.navigations.ClickEventArgs
     */
    toolbarClick?: base.EmitType<navigations.ClickEventArgs>;
    /**
     * Triggers when click on column menu.
     * @event
     * @blazorproperty 'ColumnMenuClicked'
     * @blazorType Syncfusion.EJ2.Blazor.Grids.grids.ColumnMenuClickEventArgs
     */
    columnMenuClick?: base.EmitType<grids.ColumnMenuClickEventArgs>;
    /**
     * Triggers before context menu opens.
     * @event
     * @blazorType Syncfusion.EJ2.Blazor.Gantt.ContextMenuOpenEventArgs<TValue>
     */
    contextMenuOpen?: base.EmitType<ContextMenuOpenEventArgs>;
    /**
     * Triggers when click on context menu.
     * @event
     * @blazorproperty 'ContextMenuItemClicked'
     * @blazorType Syncfusion.EJ2.Blazor.Gantt.ContextMenuClickEventArgs<TValue>
     */
    contextMenuClick?: base.EmitType<ContextMenuClickEventArgs>;
}
//node_modules/@syncfusion/ej2-gantt/src/gantt/base/gantt.d.ts
/**
 *
 * Represents the Gantt chart component.
 * ```html
 * <div id='gantt'></div>
 * <script>
 *  var ganttObject = new Gantt({
 *      taskFields: { id: 'taskId', name: 'taskName', startDate: 'startDate', duration: 'duration' }
 *  });
 *  ganttObject.appendTo('#gantt');
 * </script>
 * ```
 */
export  class Gantt extends base.Component<HTMLElement> implements base.INotifyPropertyChanged {
    /** @hidden */
    chartPane: HTMLElement;
    /** @hidden */
    treeGridPane: HTMLElement;
    /** @hidden */
    splitterElement: HTMLElement;
    /** @hidden */
    toolbarModule: Toolbar;
    /** @hidden */
    ganttChartModule: GanttChart;
    /** @hidden */
    treeGridModule: GanttTreeGrid;
    /** @hidden */
    chartRowsModule: ChartRows;
    /** @hidden */
    connectorLineModule: ConnectorLine;
    /** @hidden */
    connectorLineEditModule: ConnectorLineEdit;
    /** @hidden */
    splitterModule: Splitter;
    /** @hidden */
    treeGrid: treegrid.TreeGrid;
    /** @hidden */
    controlId: string;
    /** @hidden */
    ganttHeight: number;
    /** @hidden */
    ganttWidth: number;
    /** @hidden */
    predecessorModule: Dependency;
    /** @hidden */
    localeObj: base.L10n;
    /** @hidden */
    dataOperation: TaskProcessor;
    /** @hidden */
    flatData: IGanttData[];
    /** @hidden */
    currentViewData: IGanttData[];
    /** @hidden */
    ids: string[];
    /** @hidden */
    previousRecords: object;
    /** @hidden */
    editedRecords: IGanttData[];
    /** @hidden */
    isOnEdit: boolean;
    /** @hidden */
    isOnDelete: boolean;
    /** @hidden */
    secondsPerDay: number;
    /** @hidden */
    nonWorkingHours: number[];
    /** @hidden */
    workingTimeRanges: IWorkingTimeRange[];
    /** @hidden */
    nonWorkingTimeRanges: IWorkingTimeRange[];
    /** @hidden */
    defaultStartTime?: number;
    /** @hidden */
    defaultEndTime?: number;
    /** @hidden */
    nonWorkingDayIndex?: number[];
    /** @hidden */
    durationUnitTexts?: Object;
    /** @hidden */
    durationUnitEditText?: Object;
    /** @hidden */
    isMileStoneEdited?: Object;
    /** @hidden */
    chartVerticalLineContainer?: HTMLElement;
    /** @hidden */
    updatedConnectorLineCollection?: IConnectorLineObject[];
    /** @hidden */
    connectorLineIds?: string[];
    /** @hidden */
    predecessorsCollection?: IGanttData[];
    /** @hidden */
    isInPredecessorValidation?: boolean;
    /** @hidden */
    isValidationEnabled?: boolean;
    /** @hidden */
    isLoad?: boolean;
    /** @hidden */
    editedTaskBarItem?: IGanttData;
    /** @hidden */
    validationDialogElement?: popups.Dialog;
    /** @hidden */
    currentEditedArgs?: IValidateArgs;
    /** @hidden */
    dialogValidateMode?: IValidateMode;
    /** @hidden */
    perDayWidth?: number;
    /** @hidden */
    zoomingProjectStartDate?: Date;
    /** @hidden */
    zoomingProjectEndDate?: Date;
    /** @hidden */
    cloneProjectStartDate?: Date;
    /** @hidden */
    cloneProjectEndDate?: Date;
    /** @hidden */
    totalHolidayDates?: number[];
    /** @hidden */
    columnMapping?: {
        [key: string]: string;
    };
    /** @hidden */
    ganttColumns: ColumnModel[];
    /** @hidden */
    contentHeight: number;
    /** @hidden */
    isAdaptive: Boolean;
    /**
     * The `sortModule` is used to manipulate sorting operation in Gantt.
     */
    sortModule: Sort;
    /**
     * The `filterModule` is used to manipulate filtering operation in Gantt.
     */
    filterModule: Filter;
    /** @hidden */
    scrollBarLeft: number;
    /** @hidden */
    isTimelineRoundOff: boolean;
    /** @hidden */
    columnByField: Object;
    /** @hidden */
    customColumns: string[];
    /**
     * The `editModule` is used to handle Gantt record manipulation.
     */
    editModule: Edit;
    /**
     * The `selectionModule` is used to manipulate selection operation in Gantt.
     */
    selectionModule: Selection;
    /**
     * The `excelExportModule` is used to exporting Gantt data in excel format.
     */
    excelExportModule: ExcelExport;
    /**
     * The `dayMarkersModule` is used to manipulate event markers operation in Gantt.
     */
    dayMarkersModule: DayMarkers;
    /** @hidden */
    isConnectorLineUpdate: boolean;
    /** @hidden */
    tooltipModule: Tooltip;
    /** @hidden */
    globalize: base.Internationalization;
    /** @hidden */
    keyConfig: {
        [key: string]: string;
    };
    /**
     * The `keyboardModule` is used to manipulate keyboard interactions in Gantt.
     */
    keyboardModule: base.KeyboardEvents;
    /**
     * The `contextMenuModule` is used to invoke context menu in Gantt.
     */
    contextMenuModule: ContextMenu;
    /**
     * The `columnMenuModule` is used to manipulate column menu items in Gantt.
     */
    columnMenuModule: ColumnMenu;
    /** @hidden */
    staticSelectedRowIndex: number;
    protected needsID: boolean;
    /**
     * Enables or disables the key board interaction of Gantt.
     * @hidden
     * @default true
     */
    allowKeyboard: boolean;
    /**
     * Enables or disables the focusing the task bar on click action.
     *
     * @default true
     */
    autoFocusTasks: boolean;
    /**
     * If `allowSelection` is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.
     * @default true
     */
    allowSelection: boolean;
    /**
     * If `allowSorting` is set to true, it allows sorting of gantt chart tasks when column header is clicked.
     * @default false
     */
    allowSorting: boolean;
    /**
     * If `enablePredecessorValidation` is set to true, it allows to validate the predecessor link.
     * @default true
     */
    enablePredecessorValidation: boolean;
    /**
     * If `showColumnMenu` set to true, then it will enable the column menu options in each columns.
     * @default false
     */
    showColumnMenu: boolean;
    /**
     * `columnMenuItems` defines both built-in and custom column menu items.
     * <br><br>
     * The available built-in items are,
     * * `ColumnChooser` - To show/hide the treegrid.TreeGrid columns.
     * * `SortAscending` - Sort the current column in ascending order.
     * * `SortDescending` - Sort the current column in descending order.
     * * `Filter` - Filter options will show based on filterSettings property.
     * @default null
     */
    columnMenuItems: ColumnMenuItem[] | grids.ColumnMenuItemModel[];
    /**
     * If `collapseAllParentTasks` set to true, then root tasks are rendered with collapsed state.
     * @default false
     */
    collapseAllParentTasks: boolean;
    /**
     * If `highlightWeekends` set to true, then all weekend days are highlighted in week - day timeline mode.
     * @default false
     */
    highlightWeekends: boolean;
    /**
     * To define expander column index in Grid.
     * @default 0
     * @aspType int
     * @blazorType int
     */
    treeColumnIndex: number;
    /**
     * It is used to render Gantt chart rows and tasks.
     * `dataSource` value was defined as array of JavaScript objects or instances of `data.DataManager`.
     * @isGenericType true
     * @default []
     */
    dataSource: Object[] | data.DataManager;
    /**
     * `durationUnit` Specifies the duration unit for each tasks whether day or hour or minute.
     * * `day`: Sets the duration unit as day.
     * * `hour`: Sets the duration unit as hour.
     * * `minute`: Sets the duration unit as minute.
     * @default day
     */
    durationUnit: DurationUnit;
    /**
     * Defines the external [`data.Query`](https://ej2.syncfusion.com/documentation/data/api-query.html)
     * that will be executed along with data processing.
     * @default null
     */
    query: data.Query;
    /**
     * Specifies the dateFormat for Gantt, given format is displayed in tooltip and Grid cells.
     */
    dateFormat: string;
    /**
     * Defines the height of the Gantt component container.
     * @default 'auto'
     */
    height: number | string;
    /**
     * If `renderBaseline` is set to `true`, then baselines are rendered for tasks.
     * @default false
     */
    renderBaseline: boolean;
    /**
     * Configures the grid lines in tree grid and gantt chart.
     */
    gridLines: GridLine;
    /**
     * Defines the right, left and inner task labels in task bar.
     */
    labelSettings: LabelSettingsModel;
    /**
     * The task bar template that renders customized child task bars from the given template.
     * @default null
     */
    taskbarTemplate: string;
    /**
     * The parent task bar template that renders customized parent task bars from the given template.
     * @default null
     */
    parentTaskbarTemplate: string;
    /**
     * The milestone template that renders customized milestone task from the given template.
     * @default null
     */
    milestoneTemplate: string;
    /**
     * Defines the baseline bar color.
     */
    baselineColor: string;
    /**
     * Defines the width of the Gantt component container.
     * @default 'auto'
     */
    width: number | string;
    /**
     * `toolbar` defines the toolbar items of the Gantt.
     * It contains built-in and custom toolbar items.
     * If an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.
     * <br><br>
     * The available built-in toolbar items are:
     * * Add: Adds a new record.
     * * Edit: Edits the selected task.
     * * Update: Updates the edited task.
     * * Delete: Deletes the selected task.
     * * Cancel: Cancels the edit state.
     * * Search: Searches tasks by the given key.
     * * ExpandAll: Expands all the task of Gantt.
     * * CollapseAll: Collapses all the task of Gantt.
     * * PrevTimeSpan: Extends timeline with one unit before the timeline start date.
     * * NextTimeSpan: Extends timeline with one unit after the timeline finish date.
     * * ZoomIn: ZoomIn the Gantt control.
     * * ZoomOut: ZoomOut the Gantt control.
     * * ZoomToFit: Display the all tasks within the viewable Gantt chart.
     * * ExcelExport: To export in Excel format
     * * CsvExport : To export in CSV format
     * @default null
     */
    toolbar: (ToolbarItem | string | navigations.ItemModel)[];
    /**
     * Defines workweek of project.
     * @default ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
     */
    workWeek: string[];
    /**
     * Defines weekend days are considered as working day or not.
     * @default false
     */
    includeWeekend: boolean;
    /**
     * Enables or disables rendering of unscheduled tasks in Gantt.
     * @default false
     */
    allowUnscheduledTasks: boolean;
    /**
     * To show notes column cell values inside the cell or in tooltip.
     * @default false
     * @deprecated
     */
    showInlineNotes: boolean;
    /**
     * Defines height value for grid rows and chart rows in Gantt.
     * @default 36
     * @aspType int
     * @blazorType int
     */
    rowHeight: number;
    /**
     * Defines height of taskbar element in Gantt.
     * @aspType int?
     * @blazorType int
     * @isBlazorNullableType true
     */
    taskbarHeight: number;
    /**
     * Defines start date of the project, if `projectStartDate` value not set then it will be calculated from data source.
     * @default null
     */
    projectStartDate: Date | string;
    /**
     * Defines end date of the project, if `projectEndDate` value not set then it will be calculated from data source.
     * @default null
     */
    projectEndDate: Date | string;
    /**
     * Defines mapping property to get resource id value from resource collection.
     * @default null
     */
    resourceIDMapping: string;
    /**
     * Defines mapping property to get resource name value from resource collection.
     * @default null
     */
    resourceNameMapping: string;
    /**
     * Defines resource collection assigned for projects.
     * @default []
     */
    resources: Object[];
    /**
     * Defines background color of dependency lines.
     * @default null
     */
    connectorLineBackground: string;
    /**
     * Defines width of dependency lines.
     * @default 1
     * @aspType int
     * @blazorType int
     */
    connectorLineWidth: number;
    /**
     * Defines column collection displayed in grid
     * If the `columns` declaration was empty then `columns` are automatically populated from `taskSettings` value.
     * @default []
     */
    columns: Column[] | string[] | ColumnModel[];
    /**
     * Defines the tabs and fields to be included in the add dialog.
     * If the value was empty, then it will be calculated from `taskSettings` and `columns` value.
     * @default []
     */
    addDialogFields: AddDialogFieldSettingsModel[];
    /**
     * Defines the tabs and fields to be included in the edit dialog.
     * If the value was empty, then it will be calculated from `taskSettings` and `columns` value.
     * @default []
     */
    editDialogFields: EditDialogFieldSettingsModel[];
    /**
     * The `selectedRowIndex` allows you to select a row at initial rendering.
     * You can also get the currently selected row index.
     * @default -1
     * @aspType int
     * @blazorType int
     */
    selectedRowIndex: number;
    /**
     * Defines customized working time of project.
     */
    dayWorkingTime: DayWorkingTimeModel[];
    /**
     * Defines holidays presented in project timeline.
     * @default []
     */
    holidays: HolidayModel[];
    /**
     * Defines events and status of project throughout the timeline.
     * @default []
     */
    eventMarkers: EventMarkerModel[];
    /**
     * Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.
     */
    taskFields: TaskFieldsModel;
    /**
     * Configures timeline settings of Gantt.
     * Defines default timeline modes or customized top tier mode and bottom tier mode or single tier only.
     */
    timelineSettings: TimelineSettingsModel;
    /**
     * Configure zooming levels of Gantt Timeline
     */
    zoomingLevels: ZoomTimelineSettings[];
    /**
     * Configures current zooming level of Gantt.
     */
    currentZoomingLevel: ZoomTimelineSettings;
    /**
     * Configures the sort settings of the Gantt.
     * @default {columns:[]}
     */
    sortSettings: SortSettingsModel;
    /**
     * Configures edit settings of Gantt.
     * @default { allowAdding: false, allowEditing: false, allowDeleting: false, mode:'Auto',
     * showDeleteConfirmDialog: false }
     */
    editSettings: EditSettingsModel;
    /**
     * Enables or disables default tooltip of Gantt element and defines customized tooltip for Gantt elements.
     * @default { showTooltip: true }
     */
    tooltipSettings: TooltipSettingsModel;
    /**
     * Configures the selection settings.
     * @default {mode: 'Row', type: 'Single'}
     */
    selectionSettings: SelectionSettingsModel;
    /**
     * Enables or disables filtering support in Gantt.
     * @default false
     */
    allowFiltering: boolean;
    /**
     * If `allowExcelExport` set to true, then it will allow the user to export Gantt to Excel and CSV file.
     * @default false
     */
    allowExcelExport: boolean;
    /**
     * If `allowReordering` is set to true, Gantt columns can be reordered.
     * Reordering can be done by drag and drop of a particular column from one index to another index.
     * @default false
     */
    allowReordering: boolean;
    /**
     * If `allowResizing` is set to true, Gantt columns can be resized.
     * @default false
     */
    allowResizing: boolean;
    /**
     * If `enableContextMenu` is set to true, Enable context menu in Gantt.
     * @default false
     */
    enableContextMenu: boolean;
    /**
     * If `contextMenuItems` are array collection of menu items in Context Menu.
     * @default null
     */
    contextMenuItems: ContextMenuItem[] | grids.ContextMenuItemModel[];
    /**
     * Configures the filter settings for Gantt.
     * @default {columns: [], type: 'Menu' }
     */
    filterSettings: FilterSettingsModel;
    /**
     * Configures the search settings for Gantt.
     */
    searchSettings: SearchSettingsModel;
    /**
     * Configures the splitter settings for Gantt.
     */
    splitterSettings: SplitterSettingsModel;
    /**
     * @private
     */
    timelineModule: Timeline;
    /**
     * @private
     */
    dateValidationModule: DateProcessor;
    /**
     * @private
     */
    isTreeGridRendered: boolean;
    /**
     * @private
     */
    isGanttChartRendered: boolean;
    /**
     * This will be triggered after the taskbar element is appended to the Gantt element.
     * @event
     */
    queryTaskbarInfo: base.EmitType<IQueryTaskbarInfoEventArgs>;
    /**
     * Triggers before Gantt data is exported to Excel file.
     * @deprecated
     * @event
     */
    beforeExcelExport: base.EmitType<Object>;
    /**
     * Triggers after Gantt data is exported to Excel file.
     * @deprecated
     * @event
     */
    excelExportComplete: base.EmitType<grids.ExcelExportCompleteArgs>;
    /**
     * Triggers before exporting each cell to Excel file.
     * You can also customize the Excel cells.
     * @deprecated
     * @event
     */
    excelQueryCellInfo: base.EmitType<grids.ExcelQueryCellInfoEventArgs>;
    /**
     * Triggers before exporting each header cell to Excel file.
     * You can also customize the Excel cells.
     * @deprecated
     * @event
     */
    excelHeaderQueryCellInfo: base.EmitType<grids.ExcelHeaderQueryCellInfoEventArgs>;
    /**
     * This will be triggered before the row getting collapsed.
     * @event
     */
    collapsing: base.EmitType<ICollapsingEventArgs>;
    /**
     * This will be triggered after the row getting collapsed.
     * @event
     */
    collapsed: base.EmitType<ICollapsingEventArgs>;
    /**
     * This will be triggered before the row getting expanded.
     * @event
     */
    expanding: base.EmitType<ICollapsingEventArgs>;
    /**
     * This will be triggered after the row getting expanded.
     * @event
     */
    expanded: base.EmitType<ICollapsingEventArgs>;
    /**
     * Triggers when Gantt actions such as sorting, filtering, searching etc., starts.
     * @blazorproperty 'OnActionBegin'
     * @blazorType Syncfusion.EJ2.Blazor.Gantt.ActionBeginArgs<TValue>
     * @event
     */
    actionBegin: base.EmitType<object | grids.PageEventArgs | grids.FilterEventArgs | grids.SortEventArgs | ITimeSpanEventArgs | IDependencyEventArgs | ITaskAddedEventArgs | ZoomEventArgs>;
    /**
     * Triggers when Gantt actions such as sorting, filtering, searching etc. are completed.
     * @event
     * @blazorproperty 'OnActionComplete'
     * @blazorType Syncfusion.EJ2.Blazor.Gantt.ActionCompleteArgs<TValue>
     */
    actionComplete: base.EmitType<grids.FilterEventArgs | grids.SortEventArgs | ITaskAddedEventArgs | IKeyPressedEventArgs | ZoomEventArgs>;
    /**
     * Triggers when actions are failed.
     * @event
     * @blazorproperty 'OnActionFailure'
     * @blazorType Syncfusion.EJ2.Blazor.Grids.grids.FailureEventArgs
     */
    actionFailure: base.EmitType<grids.FailureEventArgs>;
    /**
     * This will be triggered taskbar was dragged and dropped on new position.
     * @event
     */
    taskbarEdited: base.EmitType<ITaskbarEditedEventArgs>;
    /**
     * This will be triggered when a task get saved by cell edit.
     * @event
     */
    endEdit: base.EmitType<ITaskbarEditedEventArgs>;
    /**
     * This will be triggered a cell get begins to edit.
     * @event
     * @blazorproperty 'OnCellEdit'
     */
    cellEdit: base.EmitType<CellEditArgs>;
    /**
     * Triggered before the Gantt control gets rendered.
     * @event
     * @blazorProperty 'OnLoad'
     */
    load: base.EmitType<Object>;
    /**
     * Triggers when the component is created.
     * @event
     */
    created: base.EmitType<Object>;
    /**
     * Triggers when the component is destroyed.
     * @event
     */
    destroyed: base.EmitType<Object>;
    /**
     * This event will be triggered when taskbar was in dragging state.
     * @event
     */
    taskbarEditing: base.EmitType<ITaskbarEditedEventArgs>;
    /**
     * Triggers when data source is populated in the Grid.
     * @event
     */
    dataBound: base.EmitType<Object>;
    /**
     * Triggers when column resize starts.
     * @deprecated
     * @event
     */
    resizeStart: base.EmitType<grids.ResizeArgs>;
    /**
     * Triggers on column resizing.
     * @deprecated
     * @event
     */
    resizing: base.EmitType<grids.ResizeArgs>;
    /**
     * Triggers when column resize ends.
     * @deprecated
     * @event
     */
    resizeStop: base.EmitType<grids.ResizeArgs>;
    /**
     * Triggers when splitter resizing starts.
     * @event
     * @blazorType Syncfusion.EJ2.Blazor.Layouts.layouts.ResizeEventArgs
     */
    splitterResizeStart: base.EmitType<layouts.ResizeEventArgs>;
    /**
     * Triggers when splitter bar was dragging.
     * @event
     * @blazorType Syncfusion.EJ2.Blazor.Layouts.layouts.ResizingEventArgs
     */
    splitterResizing: base.EmitType<layouts.ResizingEventArgs>;
    /**
     * Triggers when splitter resizing action completed.
     * @event
     */
    splitterResized: base.EmitType<ISplitterResizedEventArgs>;
    /**
     * Triggers when column header element drag (move) starts.
     * @deprecated
     * @event
     */
    columnDragStart: base.EmitType<grids.ColumnDragEventArgs>;
    /**
     * Triggers when column header element is dragged (moved) continuously.
     * @deprecated
     * @event
     */
    columnDrag: base.EmitType<grids.ColumnDragEventArgs>;
    /**
     * Triggers when a column header element is dropped on the target column.
     * @deprecated
     * @event
     */
    columnDrop: base.EmitType<grids.ColumnDragEventArgs>;
    /**
     * Triggers before tooltip get rendered.
     * @event
     */
    beforeTooltipRender: base.EmitType<BeforeTooltipRenderEventArgs>;
    /**
     * Triggers before row selection occurs.
     * @event
     */
    rowSelecting: base.EmitType<RowSelectingEventArgs>;
    /**
     * Triggers after a row is selected.
     * @event
     */
    rowSelected: base.EmitType<RowSelectEventArgs>;
    /**
     * Triggers before deselecting the selected row.
     * @deprecated
     * @event
     */
    rowDeselecting: base.EmitType<RowDeselectEventArgs>;
    /**
     * Triggers when a selected row is deselected.
     * @event
     */
    rowDeselected: base.EmitType<RowDeselectEventArgs>;
    /**
     * Triggers before any cell selection occurs.
     * @event
     */
    cellSelecting: base.EmitType<CellSelectingEventArgs>;
    /**
     * Triggers after a cell is selected.
     * @event
     * @blazorType Syncfusion.EJ2.Blazor.Grids.grids.CellSelectEventArgs<TValue>
     */
    cellSelected: base.EmitType<grids.CellSelectEventArgs>;
    /**
     * Triggers before the selected cell is deselecting.
     * @deprecated
     * @event
     */
    cellDeselecting: base.EmitType<grids.CellDeselectEventArgs>;
    /**
     * Triggers when a particular selected cell is deselected.
     * @deprecated
     * @event
     */
    cellDeselected: base.EmitType<grids.CellDeselectEventArgs>;
    /**
     * This will be triggered before the header cell element is appended to the Grid element.
     * @event
     */
    queryCellInfo: base.EmitType<QueryCellInfoEventArgs>;
    /**
     * This will be triggered before the header cell element is appended to the Grid element.
     * @event
     * @blazorType Syncfusion.EJ2.Blazor.Grids.grids.HeaderCellInfoEventArgs
     */
    headerCellInfo: base.EmitType<grids.HeaderCellInfoEventArgs>;
    /**
     * This will be triggered before the row element is appended to the Grid element.
     * @event
     */
    rowDataBound: base.EmitType<RowDataBoundEventArgs>;
    /**
     * Triggers before column menu opens.
     * @deprecated
     * @event
     */
    columnMenuOpen: base.EmitType<grids.ColumnMenuOpenEventArgs>;
    /**
     * Triggers when toolbar item was clicked.
     * @event
     * @blazorproperty 'OnToolbarClick'
     * @blazorType Syncfusion.EJ2.Blazor.Navigations.navigations.ClickEventArgs
     */
    toolbarClick: base.EmitType<navigations.ClickEventArgs>;
    /**
     * Triggers when click on column menu.
     * @event
     * @blazorproperty 'ColumnMenuClicked'
     * @blazorType Syncfusion.EJ2.Blazor.Grids.grids.ColumnMenuClickEventArgs
     */
    columnMenuClick: base.EmitType<grids.ColumnMenuClickEventArgs>;
    /**
     * Triggers before context menu opens.
     * @event
     * @blazorType Syncfusion.EJ2.Blazor.Gantt.ContextMenuOpenEventArgs<TValue>
     */
    contextMenuOpen: base.EmitType<ContextMenuOpenEventArgs>;
    /**
     * Triggers when click on context menu.
     * @event
     * @blazorproperty 'ContextMenuItemClicked'
     * @blazorType Syncfusion.EJ2.Blazor.Gantt.ContextMenuClickEventArgs<TValue>
     */
    contextMenuClick: base.EmitType<ContextMenuClickEventArgs>;
    constructor(options?: GanttModel, element?: string | HTMLElement);
    /**
     * To get the module name
     * @private
     */
    getModuleName(): string;
    /**
     * To perform key interaction in Gantt
     * @private
     */
    onKeyPress(e: base.KeyboardEventArgs): void | boolean;
    private expandCollapseKey;
    private upDownKeyNavigate;
    /**
     * For internal use only - Initialize the event handler
     * @private
     */
    protected preRender(): void;
    private initProperties;
    /**
     * To validate height and width
     */
    private validateDimentionValue;
    /**
     * To calculate dimensions of Gantt control
     */
    private calculateDimensions;
    /**
     * @private
     */
    protected render(): void;
    /**
     * Method used to show spinner.
     */
    showSpinner(): void;
    /**
     * Method used to hide spinner.
     */
    hideSpinner(): void;
    /**
     * @private
     */
    renderGantt(isChange?: boolean): void;
    private wireEvents;
    private keyActionHandler;
    /**
     * @private
     */
    protected renderToolbar(): void;
    /**
     * @private
     */
    protected renderTreeGrid(): void;
    private updateCurrentViewData;
    /**
     * @private
     */
    getRecordFromFlatdata(records: IGanttData[]): IGanttData[];
    /**
     * @private
     */
    updateContentHeight(): void;
    /**
     * To get expand status.
     * @return {boolean}
     * @private
     */
    getExpandStatus(data: IGanttData): boolean;
    /**
     * Get expanded records from given record collection.
     * @param {IGanttData[]} records - Defines record collection.
     * @deprecated
     */
    getExpandedRecords(records: IGanttData[]): IGanttData[];
    /**
     * Getting the Zooming collections of the Gantt control
     * @private
     */
    getZoomingLevels(): ZoomTimelineSettings[];
    private displayQuarterValue;
    private displayHalfValue;
    /**
     *
     * @param date
     * @param format
     */
    getFormatedDate(date: Date, format?: string): string;
    /**
     * Get duration value as string combined with duration and unit values.
     * @param {number} duration - Defines the duration.
     * @param {string} durationUnit - Defines the duration unit.
     */
    getDurationString(duration: number, durationUnit: string): string;
    /**
     *
     * @param args
     * @private
     */
    treeDataBound(args: object): void;
    /**
     * Called internally, if any of the property value changed.
     * @param newProp
     * @param oldProp
     * @private
     */
    onPropertyChanged(newProp: GanttModel, oldProp: GanttModel): void;
    /**
     * Get the properties to be maintained in the persisted state.
     * @return {string}
     * @private
     */
    getPersistData(): string;
    /**
     * @private
     */
    destroy(): void;
    /**
     * Method to get taskbarHeight.
     * @return {number}
     * @public
     */
    getTaskbarHeight(): number;
    /**
     * To provide the array of modules needed for component rendering
     * @return {base.ModuleDeclaration[]}
     * @hidden
     */
    requiredModules(): base.ModuleDeclaration[];
    /**
     * Sorts a column with the given options.
     * @param {string} columnName - Defines the column name to be sorted.
     * @param {SortDirection} direction - Defines the direction of sorting field.
     * @param {boolean} isMultiSort - Specifies whether the previous sorted columns are to be maintained.
     * @return {void}
     */
    sortColumn(columnName: string, direction: SortDirection, isMultiSort?: boolean): void;
    /**
     * Clears all the sorted columns of the Gantt.
     * @return {void}
     */
    clearSorting(): void;
    /**
     * To validate and render chart horizontal and vertical lines in the Gantt
     * @return {void}
     * @hidden
     */
    renderChartGridLines(): void;
    /**
     * To update height of the Grid lines in the Gantt chart side.
     * @return {void}
     * @private
     */
    updateGridLineContainerHeight(): void;
    /**
     * To update height of the Grid lines in the Gantt chart side.
     * @return {void}
     * @private
     */
    reUpdateDimention(): void;
    /**
     * To render vertical lines in the Gantt chart side.
     * @return {void}
     */
    private renderChartVerticalLines;
    /**
     * Method to get default localized text of the Gantt.
     * @return {void}
     * @hidden
     */
    getDefaultLocale(): Object;
    /**
     * To remove sorted records of particular column.
     * @param {string} columnName - Defines the sorted column name.
     */
    removeSortColumn(columnName: string): void;
    /**
     *
     * @param args
     * @private
     */
    actionBeginTask(args: object): boolean | void;
    /**
     * To move horizontal scroll bar of Gantt to specific date.
     * @param  {string} date - Defines the task date of data.
     */
    scrollToDate(date: string): void;
    /**
     * To move horizontal scroll bar of Gantt to specific task id.
     * @param  {string} taskId - Defines the task id of data.
     */
    scrollToTask(taskId: string): void;
    /**
     * To set scroll left and top in chart side.
     * @param  {number} left - Defines the scroll left value of chart side.
     * @param  {number} top - Defines the scroll top value of chart side.
     */
    updateChartScrollOffset(left: number, top: number): void;
    /**
     * Get parent task by clone parent item.
     * @param {IParent} cloneParent - Defines the clone parent item.
     * @hidden
     */
    getParentTask(cloneParent: IParent): IGanttData;
    /**
     * Filters treegrid.TreeGrid row by column name with the given options.
     * @param  {string} fieldName - Defines the field name of the column.
     * @param  {string} filterOperator - Defines the operator to filter records.
     * @param  {string | number | Date | boolean} filterValue - Defines the value used to filter records.
     * @param  {string} predicate - Defines the relationship between one filter query and another by using AND or OR predicate.
     * @param  {boolean} matchCase - If match case is set to true, treegrid.TreeGrid filters the records with exact match.if false, it filters case
     * insensitive records (uppercase and lowercase letters treated the same).
     * @param  {boolean} ignoreAccent - If ignoreAccent set to true,
     * then filter ignores the diacritic characters or accents while filtering.
     * @param  {string} actualFilterValue - Defines the actual filter value for the filter column.
     * @param  {string} actualOperator - Defines the actual filter operator for the filter column.
     * @return {void}
     */
    filterByColumn(fieldName: string, filterOperator: string, filterValue: string | number | Date | boolean, predicate?: string, matchCase?: boolean, ignoreAccent?: boolean): void;
    /**
     * Export Gantt data to Excel file(.xlsx).
     * @param  {grids.ExcelExportProperties} excelExportProperties - Defines the export properties of the Gantt.
     * @param  {boolean} isMultipleExport - Define to enable multiple export.
     * @param  {workbook} workbook - Defines the Workbook if multiple export is enabled.
     * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.
     * @return {Promise<any>}
     */
    excelExport(excelExportProperties?: grids.ExcelExportProperties, isMultipleExport?: boolean, workbook?: any, isBlob?: boolean): Promise<any>;
    /**
     * Export Gantt data to CSV file.
     * @param  {grids.ExcelExportProperties} excelExportProperties - Defines the export properties of the Gantt.
     * @param  {boolean} isMultipleExport - Define to enable multiple export.
     * @param  {workbook} workbook - Defines the Workbook if multiple export is enabled.
     * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.
     * @return {Promise<any>}
     */
    csvExport(excelExportProperties?: grids.ExcelExportProperties, isMultipleExport?: boolean, workbook?: any, isBlob?: boolean): Promise<any>;
    /**
     * Clears all the filtered columns in Gantt.
     * @return {void}
     */
    clearFiltering(): void;
    /**
     * Removes filtered column by field name.
     * @param  {string} field - Defines column field name to remove filter.
     * @return {void}
     * @hidden
     */
    removeFilteredColsByField(field: string): void;
    /**
     * Method to set holidays and non working days in date time and date picker controls
     * @return {void}
     * @private
     */
    renderWorkingDayCell(args: calendars.RenderDayCellEventArgs): void;
    /**
     * To update timeline at start point with one unit.
     * @return {void}
     * @public
     */
    previousTimeSpan(mode?: string): void;
    /**
     * To update timeline at end point with one unit.
     * @return {void}
     * @public
     */
    nextTimeSpan(mode?: string): void;
    /**
     * To validate project start date and end date.
     * @param  {Date} startDate - Defines start date of project.
     * @param  {Date} endDate - Defines end date of project.
     * @param  {boolean} isTimelineRoundOff - Defines project start date and end date need to be round off or not.
     * @return {void}
     * @public
     */
    updateProjectDates(startDate: Date, endDate: Date, isTimelineRoundOff: boolean): void;
    /**
     * Changes the treegrid.TreeGrid column positions by field names.
     * @param  {string} fromFName - Defines origin field name.
     * @param  {string} toFName - Defines destination field name.
     * @return {void}
     * @public
     */
    reorderColumns(fromFName: string | string[], toFName: string): void;
    /**
     * Method to clear edited collections in gantt set edit flag value
     * @private
     */
    initiateEditAction(isStart: boolean): void;
    /**
     *
     * @param field Method to update value in Gantt record and make clone record for this
     * @param record
     * @private
     */
    setRecordValue(field: string, value: any, record: IGanttData | ITaskData, isTaskData?: boolean): void;
    private makeCloneData;
    private closeGanttActions;
    /**
     * Method to get task by uniqueId value.
     * @param {string} id - Defines the task id.
     * @isGenericType true
     */
    getTaskByUniqueID(id: string): IGanttData;
    /**
     * Method to get record by id value.
     * @param {string} id - Defines the id of record.
     * @isGenericType true
     */
    getRecordByID(id: string): IGanttData;
    /**
     * Method to set splitter position.
     * @param {string|number} value - Define value to splitter settings property.
     * @param {string} type - Defines name of internal splitter settings property.
     */
    setSplitterPosition(value: string | number, type: string): void;
    /**
     * Expand the record by index value.
     * @param {number} index - Defines the index of row.
     * @return {void}
     * @public
     */
    expandByIndex(index: number): void;
    /**
     * Expand the record by task id.
     * @param {number} id - Defines the id of task.
     * @return {void}
     * @public
     */
    expandByID(id: number): void;
    /**
     * Collapse the record by index value.
     * @param {number} index - Defines the index of row.
     * @return {void}
     * @public
     */
    collapseByIndex(index: number): void;
    /**
     * Collapse the record by id value.
     * @param {number} id - Defines the id of task.
     * @return {void}
     * @public
     */
    collapseByID(id: number): void;
    /**
     * Method to add record.
     * @param {Object | IGanttData} data - Defines record to add.
     * @param {RowPosition} rowPosition - Defines the position of row.
     * @param {number} rowIndex - Defines the row index.
     * @return {void}
     * @public
     */
    addRecord(data?: Object | IGanttData, rowPosition?: RowPosition, rowIndex?: number): void;
    /**
     * Method to update record by ID.
     * @param  {Object} data - Defines the data to modify.
     * @return {void}
     * @public
     */
    updateRecordByID(data: Object): void;
    /**
     * To perform Zoom in action on Gantt timeline.
     * @return {void}
     * @public
     */
    zoomIn(): void;
    /**
     * To perform zoom out action on Gantt timeline.
     * @return {void}
     * @public
     */
    zoomOut(): void;
    /**
     * To show all project task in available chart width
     * @return {void}
     * @public
     */
    fitToProject(): void;
    /**
     * Method to update record by Index.
     * @param  {number} index - Defines the index of data to modify.
     * @param  {object} data - Defines the data to modify.
     * @return {void}
     * @public
     */
    updateRecordByIndex(index: number, data: Object): void;
    /**
     * To add dependency for Task.
     * @param  {number} id - Defines the ID of data to modify.
     * @param  {string} predecessorString - Defines the predecessor string to add.
     * @return {void}
     * @public
     */
    addPredecessor(id: number, predecessorString: string): void;
    /**
     * To remove dependency from task.
     * @param  {number} id - Defines the ID of task to modify.
     * @return {void}
     * @public
     */
    removePredecessor(id: number): void;
    /**
     * To modify current dependency values of Task by task id.
     * @param  {number} id - Defines the ID of data to modify.
     * @param  {string} predecessorString - Defines the predecessor string to update.
     * @return {void}
     * @public
     */
    updatePredecessor(id: number, predecessorString: string): void;
    /**
     * Method to open Add dialog.
     * @return {void}
     * @public
     */
    openAddDialog(): void;
    /**
     * Method to open Edit dialog.
     * @param {number } taskId - Defines the id of task.
     * @return {void}
     * @public
     */
    openEditDialog(taskId?: number): void;
    /**
     * Changes the treegrid.TreeGrid column positions by field names.
     * @return {void}
     * @private
     */
    private contructExpandCollapseArgs;
    /**
     * Method to get chart row value by index.
     * @param {number} index - Defines the index of row.
     * @return {HTMLElement}
     */
    getRowByIndex(index: number): HTMLElement;
    /**
     * Method to get the row element by task id.
     * @param {string | number} id - Defines the id of task.
     * @return {HTMLElement}
     */
    getRowByID(id: string | number): HTMLElement;
    /**
     * Method to get class name for unscheduled tasks
     * @param ganttProp
     * @private
     */
    getUnscheduledTaskClass(ganttProp: ITaskData): string;
    private createGanttPopUpElement;
    /**
     * Method to get predecessor value as string.
     * @return {HTMLElement}
     * @private
     */
    getPredecessorTextValue(type: string): string;
    /**
     * Method to perform search action in Gantt.
     * @param {string} keyVal - Defines key value to search.
     */
    search(keyVal: string): void;
    /**
     * Method to get offset rect value
     * @param element
     * @hidden
     */
    getOffsetRect(element: HTMLElement): {
        top: number;
        left: number;
    };
    /**
     * Method to expand all the rows of Gantt.
     * @return {void}
     * @public
     */
    expandAll(): void;
    /**
     * Method to update data source.
     * @return {void}
     * @param dataSource - Defines a collection of data.
     * @param args - Defines the projectStartDate and projectEndDate values.
     * @public
     */
    updateDataSource(dataSource: object[], args: object): void;
    /**
     * Method to collapse all the rows of Gantt.
     * @return {void}
     * @public
     */
    collapseAll(): void;
    /**
     * Gets the columns from the treegrid.TreeGrid.
     * @return {Column[]}
     * @public
     */
    getGridColumns(): Column[];
    /**
     * Method to column from given column collection based on field value
     * @param field
     * @param columns
     * @private
     */
    getColumnByField(field: string, columns: ColumnModel[]): ColumnModel;
    /**
     * Gets the Gantt columns.
     * @return {ColumnModel[]}
     * @public
     */
    getGanttColumns(): ColumnModel[];
    /**
     * Shows a column by its column name.
     * @param  {string|string[]} keys - Defines a single or collection of column names.
     * @param  {string} showBy - Defines the column key either as field name or header text.
     * @return {void}
     * @public
     */
    showColumn(keys: string | string[], showBy?: string): void;
    /**
     * Hides a column by column name.
     * @param  {string|string[]} keys - Defines a single or collection of column names.
     * @param  {string} hideBy - Defines the column key either as field name or header text.
     * @return {void}
     * @public
     */
    hideColumn(keys: string | string[], hideBy?: string): void;
    /**
     * To set scroll top for chart scroll container.
     * @param {number} scrollTop - Defines scroll top value for scroll container.
     * @return {void}
     * @public
     */
    setScrollTop(scrollTop: number): void;
    /**
     * Cancels edited state.
     * @return {void}
     * @public
     */
    cancelEdit(): void;
    /**
     * Selects a cell by the given index.
     * @param  {grids.IIndex} cellIndex - Defines the row and column indexes.
     * @param  {boolean} isToggle - If set to true, then it toggles the selection.
     * @return {void}
     */
    selectCell(cellIndex: grids.IIndex, isToggle?: boolean): void;
    /**
     * Selects a collection of cells by row and column indexes.
     * @param  {grids.ISelectedCell[]} rowCellIndexes - Specifies the row and column indexes.
     * @return {void}
     */
    selectCells(rowCellIndexes: grids.ISelectedCell[]): void;
    /**
     * Selects a row by given index.
     * @param  {number} index - Defines the row index.
     * @param  {boolean} isToggle - If set to true, then it toggles the selection.
     * @return {void}
     */
    selectRow(index: number, isToggle?: boolean): void;
    /**
     * Selects a collection of rows by indexes.
     * @param  {number[]} records - Defines the collection of row indexes.
     * @return {void}
     */
    selectRows(records: number[]): void;
    /**
     * Method to delete record.
     * @param {number | string } taskDetail - Defines the details of data to delete.
     * @public
     */
    deleteRecord(taskDetail: number | string | number[] | string[] | IGanttData | IGanttData[]): void;
    /**
     * Enables or disables ToolBar items.
     * @param {string[]} items - Defines the collection of itemID of ToolBar items.
     * @param {boolean} isEnable - Defines the items to be enabled or disabled.
     * @return {void}
     */
    enableItems(items: string[], isEnable: boolean): void;
    /**
     * Deselects the current selected rows and cells.
     * @return {void}
     */
    clearSelection(): void;
    /**
     * @param args
     * @hidden
     */
    updateDataArgs(args: ITaskAddedEventArgs | IActionBeginEventArgs): ITaskAddedEventArgs | IActionBeginEventArgs;
}
//node_modules/@syncfusion/ej2-gantt/src/gantt/base/interface.d.ts
/**
 * Specifies Gantt-chart interfaces
 *
 */
export interface IGanttData {
    /** Defines the child records of task. */
    childRecords?: IGanttData[];
    /** Defines the expanded state of task. */
    expanded?: boolean;
    /** Defines the properties which used in internal calculations. */
    ganttProperties?: ITaskData;
    /** Defines gantt data has child records or not. */
    hasChildRecords?: boolean;
    /** Defines the index of task. */
    index?: number;
    /** Defines the level of task. */
    level?: number;
    /** Defines the direct parent item of task. */
    parentItem?: IParent;
    /** Defines the parent unique id of task. */
    parentUniqueID?: string;
    /** Defines the data which specified in data source.
     * @isGenericType true
     */
    taskData?: Object;
    /** Defines the unique id of task. */
    uniqueID?: string;
    /** Defines the indicators value of task. */
    indicators?: IIndicator[];
    /** Defines the delete . */
    isDelete?: boolean;
}
export interface IParent {
    /** Defines the unique id of task. */
    uniqueID?: string;
    /** Defines the expanded state of task. */
    expanded?: boolean;
    /** Defines the level of task. */
    level?: number;
    /** Defines the id of task. */
    taskId?: string;
    /** Defines the index of task. */
    index?: number;
}
export interface ITaskData {
    /** Defines the baselineleft of task. */
    baselineLeft?: number;
    /** Defines the baseline startdate of task. */
    baselineStartDate?: Date;
    /** Defines the baseline enddate of task. */
    baselineEndDate?: Date;
    /** Defines the baseline width of task. */
    baselineWidth?: number;
    /** Defines the end date of task. */
    endDate?: Date;
    /** Defines the css class of task. */
    cssClass?: string;
    /** Defines the duration of task. */
    duration?: number;
    /** Defines the duration unit of task. */
    durationUnit?: string;
    /** Defines the task is auto schedule-able or not. */
    isAutoSchedule?: boolean;
    /** Defines the task is milestone or not. */
    isMilestone?: boolean;
    /** Defines the left of task. */
    left?: number;
    /** Defines the progress of task. */
    progress?: number;
    /** Defines the progress width of task. */
    progressWidth?: number;
    /** Defines the resource info of task. */
    resourceInfo?: Object[];
    /** Defines the resource names of task. */
    resourceNames?: string;
    /** Defines the start date of task. */
    startDate?: Date;
    /** Defines the notes of task. */
    notes?: string;
    /** Defines the predecessors name of task. */
    predecessorsName?: string | number | object[];
    /** Defines the predecessor of task. */
    predecessor?: IPredecessor[];
    /** Defines the id of task. */
    taskId?: string;
    /** Defines the name of task. */
    taskName?: string;
    /** Defines the width of task. */
    width?: number;
    /** Defines the indicators of task. */
    indicators?: IIndicator[];
    /** Defines the unique id of task. */
    uniqueID?: string;
    /** Defines the total progress of task. */
    totalProgress?: number;
    /** Defines the total duration of task. */
    totalDuration?: number;
}
export interface IGanttColumn {
    field?: string;
    headerText?: string;
    editType?: string;
    mappingName?: string;
    allowEditing: boolean;
    width: number;
    format: string;
    visible: boolean;
}
export interface IIndicator {
    /** Defines the date of indicator. */
    date?: Date | string;
    /** Defines the icon class of indicator. */
    iconClass?: string;
    /** Defines the name of indicator. */
    name?: string;
    /** Defines the tooltip of indicator. */
    tooltip?: string;
}
export interface IWorkingTimeRange {
    from?: number;
    to?: number;
    isWorking?: boolean;
    color?: string;
    interval?: number;
}
export interface IQueryTaskbarInfoEventArgs {
    /** Defines the data. */
    data: IGanttData;
    /** Defines the row element. */
    rowElement: Element;
    /** Defines the taskbar element. */
    taskbarElement: Element;
    /** Defines the taskbar background color. */
    taskbarBgColor?: string;
    /** Defines the taskbar border color. */
    taskbarBorderColor?: string;
    /** Defines the progressbar background color. */
    progressBarBgColor?: string;
    /** Defines the milestone color. */
    milestoneColor?: string;
    /** Defines the right label color. */
    rightLabelColor?: string;
    /** Defines the left label color. */
    leftLabelColor?: string;
    /** Defines the task label color. */
    taskLabelColor?: string;
    /** Defines the baseline color. */
    baselineColor?: string;
    /** Defines the taskbar type. */
    taskbarType: string;
}
export interface IGanttCellFormatter {
    /** Method to format the cell value of date columns. */
    getValue(column: Column, data: Object): Object;
}
export interface ITaskbarEditedEventArgs {
    /** Defines the editingFields. */
    editingFields?: ITaskData;
    /** Defines the data. */
    data?: IGanttData;
    /** Defines the index of edited task. */
    recordIndex?: number;
    /** Defines the previous value of editing task. */
    previousData?: ITaskData;
    /** Defines the type of taskbar edit action. */
    taskBarEditAction?: string;
    /** Defines the duration roundoff. */
    roundOffDuration?: boolean;
    /** Defines the event is cancel-able or not. */
    cancel?: boolean;
    /** Defines the action. */
    action?: string;
}
export interface IKeyPressedEventArgs {
    /** Defines the request type. */
    requestType?: string;
    /** Defines the key action. */
    action?: string;
    /** Defines the event. */
    keyEvent?: Event;
}
export interface ITaskDeletedEventArgs {
    deletedRecordCollection?: IGanttData[];
    updatedRecordCollection?: IGanttData[];
    cancel?: boolean;
    action?: string;
}
export interface IDependencyEditData {
    id?: string;
    text?: string;
    value?: string;
}
export interface IPredecessor {
    /** Defines the from value of predecessor. */
    from?: string;
    /** Defines the to value of predecessor. */
    to?: string;
    /** Defines the type of predecessor. */
    type?: string;
    /** Defines the offset value of predecessor. */
    offset?: number;
    /** Defines the offset unit of predecessor. */
    offsetUnit?: string;
    /** Defines the predecessor is drawn-able or not. */
    isDrawn?: boolean;
}
export interface IValidateArgs {
    data?: IGanttData;
    recordIndex?: number;
    requestType?: string;
    cancel?: boolean;
    validateMode?: IValidateMode;
    editEventArgs?: object;
}
export interface IValidateMode {
    respectLink?: boolean;
    removeLink?: boolean;
    preserveLinkWithEditing?: boolean;
}
export interface ITimeSpanEventArgs {
    /** Defines the project start date. */
    projectStartDate?: Date;
    /** Defines the project end date. */
    ProjectEndDate?: Date;
    /** Defines the timeline roundoff state. */
    isTimelineRoundOff?: boolean;
    /** Defines the request type. */
    requestType?: string;
    /** Defines the event is cancel-able or not. */
    cancel?: boolean;
}
export interface IValidateMode {
    respectLink?: boolean;
    removeLink?: boolean;
    preserveLinkWithEditing?: boolean;
}
export interface IActionBeginEventArgs {
    requestType?: string;
    data?: IGanttData | IGanttData[];
    modifiedRecords?: IGanttData[];
    modifiedTaskData?: object[];
    cancel?: boolean;
}
export interface IValidateLinkedTaskArgs {
    editMode?: string;
    data?: IGanttData;
    requestType?: string;
    validateMode?: IValidateMode;
    cancel?: boolean;
}
export interface IConnectorLineObject {
    parentLeft?: number;
    childLeft?: number;
    parentWidth?: number;
    childWidth?: number;
    parentIndex?: number;
    childIndex?: number;
    rowHeight?: number;
    type?: string;
    connectorLineId?: string;
    milestoneParent?: boolean;
    milestoneChild?: boolean;
}
export interface ISplitterResizedEventArgs {
    /** Defines the element. */
    element?: HTMLElement;
    /** Defines the event. */
    event?: Event;
    /** Defines the size of resized pane. */
    paneSize?: number[];
    /** Defines the pane. */
    pane?: HTMLElement[];
    /** Defines the index of resizing pane. */
    index?: number[];
    /** Defines the separator. */
    separator?: HTMLElement;
    /** Defines the event is cancel-able or not. */
    cancel?: boolean;
}
export interface PredecessorTooltip {
    /** Defines the from id of predecessor. */
    fromId?: string;
    /** Defines the to id of predecessor. */
    toId?: string;
    /** Defines the from name of predecessor. */
    fromName?: string;
    /** Defines the to name of predecessor. */
    toName?: string;
    /** Defines the link type of predecessor. */
    linkType?: string;
    /** Defines the link text of predecessor. */
    linkText?: string;
    /** Defines the offset value of predecessor. */
    offset?: number;
    /** Defines the offset unit of predecessor. */
    offsetUnit?: string;
    /** Defines the offset string value of predecessor. */
    offsetString?: string;
}
export interface BeforeTooltipRenderEventArgs {
    /** Defines the data. */
    data?: BeforeTooltipRenderEventArgsData;
    /** Defines the original event arguments of tooltip control.
     * @blazorType Syncfusion.EJ2.Blazor.Popups.popups.TooltipEventArgs
     */
    args?: popups.TooltipEventArgs;
    /** Defines the content. */
    content?: string | Element;
    /** Cancel the tooltip */
    cancel?: boolean;
}
export interface QueryCellInfoEventArgs {
    /** Defines the row data associated with this cell. */
    data?: IGanttData;
    /** Defines the cell element. */
    cell?: Element;
    /** Defines the column object associated with this cell. */
    column?: Column;
    /** Defines the no. of columns to be spanned */
    colSpan?: number;
    /** Defines the no. of rows to be spanned */
    rowSpan?: number;
    /** Defines the current action. */
    requestType?: string;
    /** Define the foreignKey row data associated with this column */
    foreignKeyData?: Object;
}
/**
 * Extending IGanttData and PredecessorTooltip interfaces for data used in BeforeTooltipRenderEventArgs interface.
 */
export interface BeforeTooltipRenderEventArgsData extends IGanttData, PredecessorTooltip {
}
export interface IDependencyEventArgs {
    /** Specifies the predecessor task of dependency. */
    fromItem?: IGanttData;
    /** Specifies the successor task of dependency. */
    toItem?: IGanttData;
    /** Defines the new predecessor string. */
    newPredecessorString?: string;
    /** Defines the dependency link is valid or not */
    isValidLink?: boolean;
    /** Defines the request type. */
    requestType?: string;
}
export interface ITaskAddedEventArgs {
    /** Specifies the newly added task data with Gantt properties. */
    data?: IGanttData;
    /** Specifies the newly added task data without custom Gantt properties. */
    newTaskData?: object;
    /** Defines the modified records. */
    modifiedRecords?: IGanttData[];
    /** Defines the modified task data. */
    modifiedTaskData?: object[];
    /** Defines the record index. */
    recordIndex?: number;
    /** Defines the event is cancel-able or not. */
    cancel?: boolean;
    /** Defines the action. */
    action?: string;
}
export interface ICollapsingEventArgs {
    /** Defines the TreeGrid row element */
    gridRow: Node;
    /** Defines the Gantt chart row element */
    chartRow: Node;
    /** Defines the name of the action. */
    name?: string;
    /** Defines the parent row data. */
    data?: IGanttData;
    /** Cancel the row expanding action */
    cancel?: boolean;
}
export interface ContextMenuOpenEventArgs {
    /** Defines the TreeGrid row element */
    gridRow?: Element;
    /** Defines the chart row element */
    chartRow?: Element;
    /** Defines the selected row record */
    rowData?: IGanttData;
    /** Defines the context menu type */
    type?: ContextMenuType;
    /** Defines the hidden items collection */
    hideItems?: string[];
    /** Defines the disabled items collection */
    disableItems?: string[];
    /**
     * @blazorType double?
     */
    top?: number;
    /**
     * @blazorType double?
     */
    left?: number;
}
export interface ContextMenuClickEventArgs {
    /** Defines the selected row record */
    rowData?: IGanttData;
    /** Defines the context menu type */
    type?: ContextMenuType;
}
export  type ITimelineFormatter = (date?: Date, format?: string, tier?: string, mode?: string) => string;
export interface ZoomEventArgs {
    requestType?: string;
    timeline?: ZoomTimelineSettings;
}
export interface ZoomTimelineSettings {
    /** Defines the timeline view mode. */
    timelineViewMode?: TimelineViewMode;
    /** Defines top tier values. */
    topTier?: TimelineTierSettingsModel;
    /** Defines bottom tier values. */
    bottomTier?: TimelineTierSettingsModel;
    /** Defines timeline unit size. */
    timelineUnitSize?: number;
    weekStartDay?: number;
    /** Defines weekend background color. */
    weekendBackground?: string;
    /** Defines showTooltip whether the tooltip will rendered or not. */
    showTooltip?: boolean;
    /** Defines perDay width. */
    perDayWidth?: number;
    /** Defines zooming level. */
    level?: number;
    /** Defines the updateTimescaleView. */
    updateTimescaleView?: boolean;
}
/** @private */
export interface MousePoint {
    pageX?: number;
    pageY?: number;
}
/** @private */
export interface ITemplateData {
    expanded?: boolean;
    hasChildRecords?: boolean;
    index?: number;
    level?: number;
    baselineLeft?: number;
    baselineWidth?: number;
    taskStartDate?: Date;
    taskEndDate?: Date;
    taskDuration?: number;
    taskDurationUnit?: string;
    taskPredecessorsName?: string;
    taskResourceNames?: string;
    isAutoSchedule?: boolean;
    isMilestone?: boolean;
    left?: number;
    progressWidth?: number;
    width?: number;
}
export interface RowSelectingEventArgs extends grids.RowSelectingEventArgs {
    /** Defines the data collections. */
    data: IGanttData;
}
export interface RowSelectEventArgs extends grids.RowSelectEventArgs {
    /** Defines the data collections. */
    data: IGanttData;
}
export interface RowDataBoundEventArgs extends grids.RowDataBoundEventArgs {
    /** Defines the data collections. */
    data: IGanttData;
}
export interface RowDeselectEventArgs extends grids.RowDeselectEventArgs {
    /** Defines the selected/deselected row index.
     * @blazorType double[]
     */
    rowIndex?: number;
    /** Defines the data collections. */
    data?: IGanttData[];
    /** Defines the selected/deselected row.
     * @blazorType List<DOM>
     */
    row?: Element;
}
export interface ActionCompleteArgs extends ZoomEventArgs, IKeyPressedEventArgs {
    element?: HTMLElement;
    requestType?: string;
    data?: IGanttData[];
    modifiedRecords?: IGanttData[];
    modifiedTaskData?: IGanttData[];
    cancel?: boolean;
    /** Specifies the newly added task data without custom Gantt properties.
     * @isGenericType true
     */
    newTaskData?: object;
    /** Defines the record index. */
    recordIndex?: number;
    /** Defines the action. */
    action?: string;
    /** Defines the type of event. */
    type?: string;
}
export interface ActionBeginArgs extends IDependencyEventArgs {
    rowData?: IGanttData;
    name?: string;
    requestType?: string;
    cancel?: boolean;
    data?: IGanttData[];
    modifiedRecords?: IGanttData[];
    /**
     * @isGenericType true
     */
    modifiedTaskData?: object[];
    /** Specifies the newly added task data without custom Gantt properties.
     * @isGenericType true
     */
    newTaskData?: object;
    /** Defines the record index. */
    recordIndex?: number;
    /** Defines the action. */
    action?: string;
    /** Defines the type of